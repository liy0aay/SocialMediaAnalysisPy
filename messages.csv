id_post,date,text,views,reactions,comments,channel
5837,2025-04-12 06:59:32+00:00,[**Библиотека Go разработчика**](http://t.me/goproglib) #развлекалово,1633,11,0,goproglib
5836,2025-04-11 17:59:33+00:00,"Сомневаетесь в своем прогрессе? Мы собрали 7 четких признаков того, что вы реально растете как разраб. Спойлер: дело не только в коде!

 [**Подробнее в статье**](https://proglib.io/sh/gLH17fXRot)",2231,0,0,goproglib
5835,2025-04-11 14:59:33+00:00,[**Библиотека Go разработчика**](http://t.me/goproglib) #развлекалово,2956,41,0,goproglib
5834,2025-04-11 12:01:36+00:00," ВКонтакте открывает набор Go-разработчиков для перехода на новую архитектуру

ВКонтакте запускает технологический проект по переводу соцсети на сервисную архитектуру и построению единой платформы разработки. Компания планирует привлечь больше 100 Go-разработчиков на проект. Они будут заниматься развитием современного технологического стека и писать новую архитектуру на языке программирования Go. 


Подробнее о наборе новых специалистов и задачах, которые им предстоит решить, техническая команда ВКонтакте расскажет на митапе для Go-разработчиков. Он пройдёт 24 апреля в петербургском офисе соцсети у Красного моста, а также онлайн. Для участия в митапе необходимо зарегистрироваться на странице мероприятия. 

️ **Зарегистрироваться на митап:** https://team.vk.company/gomeetup-2405/",3219,37,4,goproglib
5833,2025-04-11 10:03:16+00:00," **Templiér — когда Templ перестаёт быть болью**

Templiér — это инструмент для разработки фронтенда на Go с использованием шаблонизатора Templ. 

Он обеспечивает:​

 Автоматическую пересборку сервера и перезагрузку вкладок браузера при изменениях в .templ и других файлах.​

 Отображение ошибок компиляции и линтинга непосредственно в браузере.​

 Поддержку пользовательских наблюдателей для выполнения команд, таких как сборка JavaScript или CSS.​

 Гибкую конфигурацию через YAML-файл.​

В отличие от стандартного режима наблюдения Templ, Templiér продолжает работу даже при ошибках компиляции, предоставляя более стабильный и информативный опыт разработки.

**️**** **[**Репозиторий инструмента**](https://clc.to/XrsRNA)

[**Библиотека Go разработчика**](http://t.me/goproglib) #буст",3016,12,0,goproglib
5832,2025-04-11 06:59:33+00:00,"****** Что посмотреть: tRPC на Go**

Если вы работали с tRPC, то знаете, насколько удобно иметь типобезопасность от сервера до клиента.  Но у tRPC есть ограничение — и сервер, и клиент должны быть на TypeScript. Не всем это подходит.

В новом видео представлена библиотека RERPC, разработанная для Go, которая решает эту проблему. Она позволяет создавать типобезопасные RPC-интерфейсы между языками.

****** Основные возможности:**

• Автоматическая генерация клиента на основе изменений в Go-сервере.

• Поддержка всех базовых Go-типов, включая вложенные структуры.

• Обработка Option и Nullable значений через вспомогательные типы (в духе Rust).

• Встроенная валидация и сериализация JSON, которую можно использовать отдельно от RPC.

• Интеграция через CLI, который отслеживает изменения и автоматически обновляет клиент.

Сейчас доступны TypeScript, Go, Rust, Kotlin, Swift, Dart.
****** Какие языки, по вашему мнению, стоило бы поддержать в будущем?** 

**️**** **[**Смотреть видео**](https://clc.to/5IVmdw)

[**Библиотека Go разработчика**](http://t.me/goproglib) #буст",3008,10,0,goproglib
5831,2025-04-10 20:29:34+00:00,"** Нужен ли Live Reload в Go**

Автоматический перезапуск приложения при изменении кода — звучит удобно. Но не для всех.

 В чате разработчики обсуждали Go Air — это инструмент, который отслеживает изменения в Go-проекте и перезапускает приложение. 

Один из участников сказал:
Билдить бинарик при каждом чихе — это кринж.

Кто-то поддержал:
Я запускаю сборку после логических блоков, а сохраняю код чаще. GoLand, кстати, автосейвит всё подряд — там вообще беда.

Другие поделились альтернативами:
Я пользуюсь docker compose: билдится и запускается вручную — по хоткеям. Удобно и понятно.

В обсуждение включились и те, кто не фанат Go Air, но советуют другие инструменты:
Мне Air тоже не зашёл. Но есть wgo, templ --watch --proxy — работают проще и без конфигов.

******  А вы как работаете с Go-проектами? Любите автоматизацию или предпочитаете руками и с контролем? **

[**Библиотека Go разработчика**](http://t.me/goproglib) #междусобойчик",3273,3,3,goproglib
5830,2025-04-10 17:16:48+00:00," **Что скрывает дисперсия: разгадка секрета точных ML-моделей**

Представьте, что вы строите модель, которая прекрасно работает на тренировочных данных, но стоит подать ей новые примеры... и всё рушится. Знакомо? За этим почти всегда скрывается неправильное обращение с дисперсией.
**
 Но что, если есть простая формула, способная:**
• Мгновенно определить, насколько «разбросаны» ваши данные

• Значительно улучшить точность ваших ML-моделей

• Помочь обнаружить аномалии, которые вы раньше не замечали

В нашем вебинаре мы раскрываем все секреты дисперсии — без сложных терминов и занудных объяснений. Вы узнаете, почему дисперсия — как соль: без нее все пресно, а с переизбытком — несъедобно.

Хотите узнать, как находить идеальный баланс в своих моделях, причем тут Random Forest и много другого о Data Science?

**Тогда смотрите бесплатный вебинар от Proglib: ****https://proglib.io/w/83c03e95**",3322,2,0,goproglib
5829,2025-04-10 12:59:33+00:00,"** Как работает протокол HTTP/2: основные принципы и преимущества в сравнении с HTTP/1.1

**​HTTP/2 — это как переход с однополосной дороги HTTP/1.1 на скоростное шоссе: быстрее, эффективнее и без пробок. 

Узнайте, как новые технологии ускоряют загрузку веб-страниц и улучшают работу приложений.

**️**** **[**Читать статью**](https://proglib.io/sh/Uu9Y4zSe0y)

****[**Библиотека шарписта**](http://t.me/csharpproglib)",3223,14,0,goproglib
5828,2025-04-10 09:00:17+00:00,"**Highload буткемп: Системный дизайн, Производительность и Масштабирование**

Приглашаем на курсы для прокачки навыков архитектора и проектировщика на весеннем highload-потоке от DevHands.

  **Приходите на уникальный образовательный трек** без отрыва от работы (занятия вечером), в рамках которого вы:

 изучите ключевые хайлоад-паттерны и получите навыки проектирования систем с миллионной аудиторией (балансировка, масштабирование, высокая доступность, шардинг, CAP/PACELS, транзакционные очереди и многое другое)
 поупражняетесь в системном дизайне и проектировании, и получите живую обратную связь на реальных задачах: магазин/маркетплейс, объявления, соцсети, такси/доставка и тд.
 погрузитесь в highload максимально, при желании в первый же день получите в управление свою инфраструктуру, попробуете “выжать” 100K RPS из своих сервисов, получите уникальный опыт работы с кластерными решениями - Redis, SPQR, CockroachDB
 научитесь планировать нагрузку и связывать бизнес-показатели с нефункциональными требованиями к системе
 попрактикуетесь в проведении и прохождения секций системного дизайна на интервью

Только «живые» онлайн-сессии: лекции, брейнштормы, презентации домашних проектов.

 **Старт потока 22 апреля, **изучайте программу и записывайтесь: 

 [**Буткэмп “Производительность и масштабируемость”**](https://devhands.ru/performance?utm_source=telegram&utm_medium=cpm&utm_campaign=go&utm_content=perf)** **для тех, кто хочет поработать с собственной инфрой

 [**Курс “Системный дизайн высоконагруженных проектов”**](https://devhands.ru/system_design?utm_source=telegram&utm_medium=cpm&utm_campaign=go&utm_content=sd)[** **](https://devhands.ru/system_design?utm_source=telegram&utm_medium=cpm&utm_campaign=proglib&utm_content=sd)для тех, кто хочет только практику проектирования “у доски”

 **Кто мы:** R&D-центр [**Devhands**](https://devhands.ru/), основатель и автор курса [Алексей Рыбак](https://t.me/rybakalexey), ex-СТО Badoo и Yum! Brands, член программного комитета Highload. 

Реклама. ИП Рыбак А.А. ИНН 771407709607 Erid: 2Vtzqv8dwE1",3351,7,0,goproglib
5827,2025-04-10 08:16:21+00:00," **Чек-лист: как искать работу**

Чтобы не застрять в вечной отладке своей карьеры, держим в голове (и перед глазами) понятный план. Вот чек-лист на период поиска:

******  Обновите резюме и профиль (и да, Go-модули на GitHub — тоже)**

Покажите, что у вас не только есть опыт, но и Golang под капотом:
• актуальные технологии (Go 1.20+, gRPC, PostgreSQL, Redis, Kafka, Docker и пр.).
• внятные результаты («снизил время отклика API на 40%», а не «делал API»).
• ссылки на GitHub с чистыми, рабочими проектами (а не репо «test123» с одним файлом main.go).

****** Сформулируйте ключевые навыки и корректные поисковые запросы**.

Рекрутеры — не экстрасенсы. Упростите им жизнь и напишите в резюме: Gin, Echo, Fiber, REST/gRPC, PostgreSQL, Redis, Kafka, RabbitMQ, CI/CD, Kubernetes.
Даже если вы фанат net/http — упомяните это тоже.

****** Следите за вакансиями регулярно, но без стресса**

• Настройте уведомления на LinkedIn, Habr Career, hh.
• Подпишитесь на каналы с вакансиями, например, [наш канал с вакансиями](http://t.me/godevjob) для трушных go-разработчиков.
**
******** Готовьтесь к собеседованиям заранее**

• Освежите основы: goroutines, channels, context, interfaces, error handling.
• Разберитесь с нюансами работы garbage collector, конкурентного доступа и профилирования.
• Подготовьте истории про то, как вы спасали прод — но без «встал и всё заработало».

****** Сколько в среднем ищете работу? Пару дней или пару месяцев? Пишите в комментарии**

[**Библиотека Go разработчика**](http://t.me/goproglib) #буст",3237,16,2,goproglib
5826,2025-04-09 17:59:35+00:00,[**Библиотека Go разработчика**](http://t.me/goproglib) #развлекалово,3698,31,2,goproglib
5825,2025-04-09 06:59:34+00:00,"**️**** Меньше команд — больше кода**

lazygit — это удобный и понятный интерфейс для работы с Git прямо в терминале. Настоящая находка для тех, кто ценит скорость и наглядность.

Решение конфликтов, переключение веток, работа с stash, выполнение rebase или amend — всё это становится проще, потому что действия визуализированы. 

**️**[** Репозиторий ленивого гита**](https://clc.to/okMssg)

[**Библиотека Go разработчика**](http://t.me/goproglib) #буст",4128,11,5,goproglib
5824,2025-04-08 18:07:27+00:00,"**‍️ Я забил на споры о микросервисах с архитекторами, и вот почему

**С момента появления концепции микросервисов прошло уже несколько лет. За это время появилось много споров о её эффективности.

Зачем спорить о микросервисах, если можно просто посмотреть на факты? Давайте разберёмся, что действительно важно**

****️**** **[**Читать статью**](https://proglib.io/sh/x4wSrkc5vX)
**
******** Как вы относитесь к микросервисам? Использовали ли вы их в своих проектах? Ждём ваши комментарии **

****[**Библиотека devops'a**](https://t.me/devopsslib)",3975,15,4,goproglib
5823,2025-04-08 10:27:50+00:00,"**Гоферы!**

Проголосуйте за наш канал, и в сторис мы опубликуем топ материалов, которые должен прочитать каждый Go-разработчик.

️**Поддержать канал: ****https://t.me/boost/goproglib**",4478,20,3,goproglib
5822,2025-04-08 07:19:36+00:00," **Go-кэш за 5 минут**

 **Установка**
```go get github.com/patrickmn/go-cache```

** Быстрый пример**
```c := cache.New(5*time.Minute, 10*time.Minute)
c.Set(""foo"", ""bar"", cache.DefaultExpiration)

val, found := c.Get(""foo"")
if found {
    fmt.Println(""Found:"", val)
}```
• 5m — TTL по умолчанию для всех ключей
• 10m — интервал очистки просроченных ключей
• можно указать cache.NoExpiration — чтобы хранить вечно

** Полезные методы**
```// Установить с TTL
c.Set(""key"", ""value"", time.Minute) 
// Получить значение
c.Get(""key"")                       
// Удалить ключ
c.Delete(""key"")                    
// Очистить всё
c.Flush()                         ```

** Какой либой для кэша пользуетесь вы? Делитесь в комментариях**

[**Библиотека Go разработчика**](http://t.me/goproglib) #буст",4617,15,19,goproglib
5821,2025-04-07 18:12:06+00:00,"****** Метрики эффективности сотрудника**

В каждой команде бывают специалисты, чья ценность не укладывается в привычные метрики продуктивности. Они редко в топе по количеству закрытых задач, но именно их вклад критически важен для общего результата.

Такие люди помогают менее опытным коллегам разобраться в сложных вопросах,  улучшают архитектуру и процессы незаметными правками, предотвращают ошибки ещё до того, как они стали задачами, создают культуру качества, которую не видно в отчётах.

Иногда стоит пересмотреть, как мы оцениваем эффективность. Потому что не все цифры отражают суть.

****** **[**Подробности в статье**](https://proglib.io/sh/K54XCJmU3N)

 [Библиотека джависта](https://t.me/javaproglib)",4166,20,1,goproglib
5820,2025-04-07 15:06:43+00:00,"[**Вакансии Golang** ](https://t.me/jobgolang)- наш канал это сборник вакансий по GO. 

**Что в канале?
**1. Только свежие вакансии.
2. Каждая вакансия имеет телеграм аккаунт HR или Tech специалиста. Сразу можете писать им вопросы и отправлять резюме
3. Подборка топовых вакансий за последние 7 дней 

Подписывайтесь, ищите работу, а так же присылайте свои вакансии нам в канал:  [**Вакансии Golang**](https://t.me/jobgolang)

Реклама. Киренкина Марина Дмитриевна, ИНН 345702417736. Erid 2VtzqxcHBQV",4471,1,0,goproglib
5819,2025-04-07 10:59:37+00:00," **Что произойдёт, если вы используете **`goto`** для перехода из одной функции в другую**

 — Это приведёт к ошибке компиляции, так как `goto` работает только внутри одной функции.
 — Это возможно, но только если функции находятся в одном пакете.
️ — Это приводит к стековому переполнению, так как переход между функциями дорогостоящий.
 — `goto` разрешает переход между функциями, но лучше использовать обычные вызовы функций.

[**Библиотека задач по Go**](https://t.me/go_problems_lib)",4358,56,2,goproglib
5818,2025-04-07 06:59:36+00:00,"****** Как работает затенение**

Затенение в Go происходит, когда локальная переменная с тем же именем, что и переменная из более широкого диапазона видимости (например, из области функции или глобальной области), перекрывает эту переменную, таким образом скрывая её доступ в текущем контексте.

var x int = 10 // глобальная переменная

func main() {
    x := 20 // локальная переменная, затеняющая глобальную
    fmt.Println(x) // Выведет 20, потому что локальная переменная затеняет глобальную
}

****[**Библиотека Go для собеса**](https://t.me/go_interview_lib)",3979,21,0,goproglib
5817,2025-04-06 12:59:37+00:00,"**️ Дайджест недели: после первой чашки кофе**

Коротко и по делу: собрали для вас новости из мира Go.

****** **[**Тестирование**](https://t.me/goproglib/5807)** с **`b.loop`

****** Написано на Go: GitHub**[** выпускает MCP-сервер**](https://clc.to/nFiciw)** для интеграции с API**

  [**Revive v1.8.0**](https://t.me/goproglib/5802)

****[** Новый эпизод**](https://clc.to/m32DOA)** подкаста Cup o' Go**

 **Минорные **[**патчи**](https://t.me/goproglib/5813)** безопасности Go**

****** Поучаствуйте в нашей **[**подборке ноутов**](https://t.me/goproglib/5808)**

******** **[**Проверьте свои знания Go **](https://t.me/goproglib/5814)

[**Библиотека Go разработчика**](http://t.me/goproglib) #свежак",4519,6,0,goproglib
5816,2025-04-05 12:59:38+00:00,"** Go-квест: разгадай кроссворд**

Если вы осваиваете язык Go или просто хотите повторить базовые понятия — этот кроссворд для вас. 

1. Как называется легковесный поток выполнения в Go, создаваемый с помощью ключевого слова go?

2. Какое ключевое слово в Go используется для отложенного выполнения функции до выхода из окружающей функции?

3. Какой механизм синхронизации используется в Go для блокировки доступа к разделяемым ресурсам?

4. Какой оператор в Go позволяет обрабатывать несколько каналов одновременно?

5. Как в Go называется структура данных, представляющая собой динамический массив?

6. Какой пакет в Go используется для управления временем жизни горутин и отмены операций?

****** Пишите ответы под спойлер в комментарии **

[**Библиотека Go разработчика**](http://t.me/goproglib) #междусобойчик",4531,16,5,goproglib
5815,2025-04-05 06:59:38+00:00,[**Библиотека Go разработчика**](http://t.me/goproglib) #развлекалово,4860,50,0,goproglib
5814,2025-04-04 18:20:05+00:00,"️ **Готовы ли вы к собеседованию

**Если вы работаете с языком Go и уверены в своих знаниях — самое время это проверить. 

Это мини-экзамен перед собеседованием: синтаксис, тонкости работы с горутинами, ошибки, которые делают даже опытные разработчики.

**️**** **[**Проверить свои знания**](https://proglib.io/tests/test-na-znanie-go-prover-sebya-pered-sobesom)

[**Библиотека Go разработчика**](http://t.me/goproglib)",10592,11,0,goproglib
5813,2025-04-04 13:59:40+00:00,"** Go 1.24.2 и 1.23.8 — важные патчи безопасности**

Выпущены свежие минорные версии Go, что поправили:

• Закрыта уязвимость в net/http (CVE-2025-22871): http принимал некорректные chunked-запросы, заканчивающиеся только `\n` вместо `\r\n`

• Фикс ""out of memory"" в компиляторе

• Улучшена работа с cgo и профилировщиками

[**Библиотека Go разработчика**](http://t.me/goproglib) #свежак",4947,18,0,goproglib
5812,2025-04-04 10:59:40+00:00,"** 104 выпуск подкаста Cup o' Go **

Не пропустите новый эпизод подкаста Cup o' Go, где ведущие как всегда анализируют самые важные новости и обновления в мире Go.

Что обсудили на этот раз:

• **Уязвимость в пакете x/net**: ошибка парсинга HTML, связанная с некорректной интерпретацией тегов с незакавыченными атрибутами, заканчивающимися символом слэша.

• «IngressNightmare»: критическая уязвимость в Ingress NGINX, позволяющая неаутентифицированное удаленное выполнение кода.

• Добавление команды `go mod verify -tag`

** **[**Слушать обсуждение новостей**](https://clc.to/YuTIvg)

[Библиотека Go разработчика](http://t.me/goproglib) #свежак",4726,1,0,goproglib
5811,2025-04-04 06:59:39+00:00," **Поиск по структуре в GoLand**

Structural Search and Replace — это как Ctrl+F, только с пониманием структуры кода, а не просто текста.

**Как его использовать**
Ctrl + Shift + A → Replace Structurally

Например, хочется заменить все `log.Println` на `zap.S().Info`

По шаблону найдём все вызовы:
```log.Println($msg$)```

И заменим их на:
```zap.S().Info($msg$)```

Все вызываемые методы изменятся, а сообщение останется тем же.

Ещё один простой пример по поиску всех функций, в которые передаётся один аргумент `int`:
```func $name$($arg$: int) { $body$ }```

[**Библиотека Go разработчика**](http://t.me/goproglib) #буст",4736,27,1,goproglib
5810,2025-04-03 18:14:03+00:00,"** ORM или SQL руками**

Когда дело доходит до доступа к базе данных, мир делится на два лагеря:

****** Сторонники ORM говорят:**

• Писать SQL — это прошлый век. Зачем самому лезть в кишки, если можно красиво и декларативно?

• GORM, Ent, XORM — всё уже придумано. Ассоциации, миграции, preloading, всё есть.

• Быстро собрать MVP? ORM — твой друг. CRUD за 5 минут, остальное — потом.

**SQL руками — философия настоящего разработчика:**

• Хочется понять, что реально происходит? Тогда нужно писать руками.

• Полный контроль над запросами, никакой магии, всё читается чётко.

• Оптимизация, читаемость, отладка — всё проще, когда ты не в плену ORM-абстракций.

** А на чём строите своё DAO-королевство вы? GORM, sqlx, Ent или database/sql на самописных запросах? Ждём вас в комментариях **

[**Библиотека Go разработчика**](http://t.me/goproglib) #междусобойчик",4900,13,36,goproglib
5808,2025-04-03 10:59:41+00:00,"****** Программисты, нужен ваш совет!**

Пилим крутую подборку ноутов для кодеров в 2025-м и хотим собрать реальный фидбек от тех, кто в теме!

Какой ноут спасает вас в кодинге и почему?

**Расскажите все:**

• Что за зверь (модель, начинка)
• Где жмет и где радует в ежедневной работе
• На какие фишки смотреть при выборе
• Как вам с ним живется

Топовые советы попадут в нашу статью!

 **Делитесь в комментах  Сделаем годный гайд, который реально поможет коллегам!**

[**Библиотека Go разработчика**](http://t.me/goproglib)",4731,4,44,goproglib
5807,2025-04-03 06:59:41+00:00,"️ **Как получить более точные результаты тестирования**

Использование стандартного подхода с `b.N` для тестирования производительности может быть полезным, но это не дает самых точных результатов. Для этого лучше использовать новый метод `testing.B.Loop` для улучшения точности бенчмарков.

В традиционном методе бенчмарков в Go, цикле от 0 до `b.N`, вы тестируете функцию или метод, который повторяется b.N раз.

 Однако, при таком подходе могут возникнуть несколько проблем:

 В некоторых случаях компилятор может удалить неиспользуемые переменные или оптимизировать код, если он считает, что результат не влияет на конечный результат.

 Если код для настройки и очистки выполняется внутри цикла, его время будет учитываться в бенчмарке, что может искажать результаты.

 Код теста может зависеть от количества итераций или состояния текущей итерации, что вносит дополнительные вариации в результаты.

Пример использования** **`testing.B.Loop`:
```func BenchmarkMyFunction(b *testing.B) {
    for b.Loop() {
        // Код, производительность которого необходимо измерить
    }
}```

Рекомендуется использовать b.Loop в любом новом бенчмарке, так как это позволяет вам избежать ряда потенциальных проблем с точностью тестирования и оптимизацией.

**️**** **[**Подробности в блоге Go**](https://clc.to/m6CoYg)

[**Библиотека Go разработчика**](http://t.me/goproglib) #буст",4432,17,0,goproglib
5806,2025-04-02 18:12:48+00:00,[**Библиотека Go разработчика**](http://t.me/goproglib) #развлекалово,4795,41,1,goproglib
5805,2025-04-02 10:59:41+00:00," **«Вайб-кодинг»: почему доверить свой проект ИИ – это кринж
**
Новый тренд среди разработчиков — «вайб-кодинг». Это когда ты не продумываешь архитектуру, не пишешь руками, а просто даёшь задание ИИ и ждёшь, что он всё сам сделает. Быстро, магически… и с кучей подводных камней.
⠀
**Что в статье:**

 Как «вайб-кодинг» реально работает (или не работает);

 Какие ошибки делают даже самые продвинутые модели;

 Почему проект, собранный ИИ, чаще всего выглядит как полуфабрикат.
⠀
Это не нытьё про «машины нас заменят», а здравый взгляд на технологии без розовых очков.
⠀
 [**Читайте статью, обсуждайте, спорьте**](https://proglib.io/sh/qROxgvd2I1)",4660,15,1,goproglib
5804,2025-04-02 06:59:41+00:00," **Промпт дня: собеседование по Go**

Этот промпт поможет вам провести полноценное mock-интервью, где можно потренировать свои навыки в Go и получить ценную обратную связь по каждому ответу.

Используем этот промпт, чтобы провести техническую беседу:
""You are a Senior Go Developer and experienced interviewer, known for your ability to assess a candidate's Go proficiency through targeted questions and constructive feedback. Your goal is to conduct a mock Go interview, simulating a real-world technical assessment. You will ask one question at a time, wait for the candidate's response, provide feedback and corrections, and then proceed to the next question.

Here is the format you will use to conduct the mock interview:

---

## Question Number: $question_number

**Question:** $go_question

**(Wait for candidate's response)**

## Feedback on Candidate's Response

**Strengths:** $strengths_of_response

**Areas for Improvement:** $areas_for_improvement

**Corrected/Improved Answer (if necessary):** $corrected_answer

## Next Question

(Proceed to the next question, following the same format)

---

Begin the mock interview""

[**Библиотека Go разработчика**](http://t.me/goproglib) #буст",5149,11,6,goproglib
5803,2025-04-01 18:04:04+00:00,"** Как выйти на валютную удаленку и зарабатывать больше**

Работа на зарубежные компании кажется идеальным вариантом: высокий доход, финансовая стабильность, свободный график.

Но реально ли получить такую работу, если ты живешь в другой стране и какие подводные камни мы разобрали в первой части статьи.

**Что вы узнаете:
**
 Плюсы и минусы работы на иностранные компании

 Ключевые требования к кандидатам

 Сложности, с которыми можно столкнуться

Если давно задумывались о переходе на валютную удаленку, но не знали, с чего начать — [**этот гайд для вас**](https://proglib.io/sh/G5LANoPt0c) ",4622,8,0,goproglib
5802,2025-04-01 10:59:42+00:00,"** Revive v1.8.0**

Команда Revive представила версию 1.8.0 своего линтера для Go. 

 **Что нового:

**• Теперь для логирования используется стандартный пакет `log/slog`.

• Правило struct-tag теперь учитывает дополнительные теги.

• Обновлены зависимости проекта.**
**
**️**** **[**Подробнее об обновлении **](https://clc.to/YuEc7Q)

**Пользуетесь Revive? Делитесь отзывами в комментариях**

[**Библиотека Go разработчика**](http://t.me/goproglib) #буст",4833,15,0,goproglib
5796,2025-04-01 07:02:54+00:00,"** Dev Memes: 1 апреля, а баги всё те же**

Сегодня день официально разрешённого троллинга — и мы не могли пройти мимо. Собрали подборку мемов для Go-разработчика, которые вызывают лёгкое желание уволиться.

 Всё это — из нашего мемного канала [«**Библиотека IT-мемов**»](https://t.me/+YyXCA234eQQxYWVi)

[**Библиотека Go разработчика**](http://t.me/goproglib)",4208,13,1,goproglib
5795,2025-03-31 18:09:24+00:00,"** Когда HR требует LeetCode Hard: почему компании стреляют себе в ногу**

Когда твоя компания не Google, но хочет отбирать кандидатов как Google — получается дорогой фейл и текучка талантов. Разбираемся в трендах IT-рекрутинга, которые выглядят как выстрел в ногу.

️ [Читать статью](https://proglib.io/sh/scgYNvAOVK)

 [Библиотека программиста](https://t.me/+Wp1Jor0bupo3OTM6)",4533,12,0,goproglib
5794,2025-03-31 10:59:43+00:00,"****** Что выведет код**

 — Hello, World!
 — Hello...
️ — Завершится с ошибкой
 — Ошибка компиляции

[**Библиотека задач по Go**](https://t.me/go_problems_lib)",4196,150,0,goproglib
5793,2025-03-31 09:08:54+00:00,"‍** Константы по разному**

Теперь вы вооружены знаниями о различных вариантах объявления констант в Go.

[Библиотека Go разработчика](http://t.me/goproglib) #буст",4671,19,0,goproglib
5792,2025-03-30 12:59:44+00:00,"** Апдейт недели: что обновилось в мире**

Собрали для вас ключевые новости, чтобы вы были в курсе самых важных событий

 **Go **[**упрощает спецификацию**](https://clc.to/mAlgKg)**
**Разработчики решили удалить понятие «core types» из спецификации языка, сделав его более простым и понятным**

******** Как выбрать **[**стратегию кэширования**](https://t.me/goproglib/5779)**
**
 **103 выпуск **[**подкаста Cup o' Go**](https://t.me/goproglib/5782)
**
******** **[**Исследование IT-аудитории**](https://t.me/goproglib/5786)** Proglib 2025
**
[Библиотека Go разработчика](http://t.me/goproglib) #свежак",4819,4,0,goproglib
5791,2025-03-30 06:59:44+00:00,"**️ CKAD 2025. Самый свежий гайд по сдаче сертификации Certified Kubernetes Application Developer 

**CKAD стал более строгим к деталям — без системной подготовки можно завалить даже на банальных заданиях. Если хочется разобраться, что важно для получения сертификации — эта статья сэкономит часы.

**️**** **[**Читать статью**](https://proglib.io/sh/2LnE3rUt8K)

[Библиотека devops'a](https://t.me/devopsslib)",4460,1,0,goproglib
5790,2025-03-29 12:59:44+00:00," **Goto: зло или добро**

С одной стороны, его ненавидят. За то, что он ломает структуру, разрушает читаемость, делает отладку похожей на побег из лабиринта без карты. В любом учебнике по хорошему коду скажут: «никогда не используй goto». 

Но с другой стороны — низкоуровневый код, драйвера, критические участки, где goto не только оправдан, но и единственный способ не утонуть в if-else-аду и ручной очистке ресурсов. Там он превращается из анархиста в спасателя.

**Пользовались ли вы goto (не только в Go)? Понравилось или почувствовали вкус старины? Ждём ваши мнения в комментариях **

[Библиотека Go разработчика](http://t.me/goproglib) #междусобойчик",4963,21,20,goproglib
5789,2025-03-29 06:59:45+00:00,[Библиотека Go разработчика](http://t.me/goproglib) #развлекалово,4864,53,0,goproglib
5788,2025-03-28 15:59:45+00:00," **Альтернативы Firefox: обзор 4 лучших форков для тех, кто разочаровался в Mozilla**

Приватность, скорость, расширенные функции — что выбрать? Разбираем популярные форки браузеров и их преимущества.

**Что в статье:**
**
****️** Обзор самых популярных форков браузеров

**️** Их ключевые фишки, плюсы и минусы

**️** Как выбрать оптимальный вариант под ваши задачи

Браузер — это не просто окно в интернет, а инструмент, который должен соответствовать вашим требованиям. Делитесь своим опытом в комментариях! 

[**Прочитать подробнее статью**](https://proglib.io/sh/acyzFn7UJf) 

 [Библиотека тестировщика](https://t.me/testerlib)",4754,13,0,goproglib
5787,2025-03-28 07:05:36+00:00,"‍ **Команда дня: автоматическое TDT**

Table-Driven Testing — это когда ты не пишешь 10 одинаковых t.Errorf, а делаешь одну таблицу кейсов и запускаешь их в цикле.

В GoLand это можно сделать с помощью команды Ctrl+Shift+T → Create New Test → Table Test:
```func TestMyFunction(t *testing.T) {
  tests := []struct {
    name string
    args args
    want string
  }{
    // TODO: Add test cases.
  }
  for _, tt := range tests {
    t.Run(tt.name, func(t *testing.T) {
      if got := MyFunction(tt.args); got != tt.want {
        t.Errorf(""MyFunction() = %v, want %v"", got, tt.want)
      }
    })
  }
}```

Остаётся добавить тест-кейсы и тест готов.

[Библиотека Go разработчика](http://t.me/goproglib) #буст",5052,22,3,goproglib
5786,2025-03-27 18:04:49+00:00,"**‍ Исследование IT-аудитории Proglib 2025: зарплаты, технологии, профессии**

Кто такой современный разработчик в 2025 году? Актуальное исследование портрета IT-специалистов: зарплаты, технологии, специализации и демография разработчиков.

️ Вся статистика и детали — [здесь](https://proglib.io/sh/NbJAHIDRTg)

[Библиотека программиста](https://t.me/+Wp1Jor0bupo3OTM6) #свежак",4332,6,0,goproglib
5785,2025-03-27 08:13:54+00:00,"** Работа с файлами в Go**

В Go работа с файлами проста, но с подвохами. Если не закрыть файл — будет утечка ресурсов. Если не обработать ошибку — баг, который выстрелит через неделю. Если нет понимания, что делает `os.Create`, то можно потерять важные данные.

**️**** Освоить базу по файлам **[**поможет это видео**](https://clc.to/vmvM8Q)

[Библиотека Go разработчика](http://t.me/goproglib) #буст",5322,15,0,goproglib
5783,2025-03-26 07:43:00+00:00,"️ **Линтерный комбайн для Go**

Каждый Go-разработчик проходит через это: запускаешь `golangci-lint`, а он в ответ показывает, что половину твоего кода можно выбросить, а вторую — переписать. Главное — не обижаться. Это просто инструмент, который говорит тебе правду.

**Что он умеет**:
• Обнаруживает сложные, нечитаемые функции и предлагает упростить.
• Настраивается через YAML.
• Работает быстро, потому что использует кэш и параллельные запуски.
• Легко подключается в CI/CD, работает в GitHub Actions из коробки.

**▶️ Быстрый старт**
```go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
golangci-lint run```

Пару дней назад линтер обновился до версии 2.0. Самое время попробовать!

️ [**Подробнее про инструмент**](https://clc.to/oax_uQ)

[Библиотека Go разработчика](http://t.me/goproglib) #буст",5758,17,11,goproglib
5782,2025-03-26 04:58:47+00:00,"** 103 выпуск подкаста Cup o' Go **

Не пропустите новый эпизод подкаста Cup o' Go, где ведущие как всегда анализируют самые важные новости и обновления в мире Go.

Что обсудили на этот раз:

• Новый пакет x/exp/stats.

• Больше о typo squatting

• Пользователи Linux и macOS заразились вредоносным ПО, замаскированным под легитимные пакеты Go.

• Поддержка windows/arm удалена в Go 1.26

• DATA-DOG/go-txdb: SQL-драйвер для Go на основе одиночной транзакции.

• peterldowns/pgtestdb: написание эффективных тестов с использованием базы данных для PostgreSQL.

** **[**Слушать обсуждение новостей**](https://clc.to/8iLjfA)

[Библиотека Go разработчика](http://t.me/goproglib) #свежак",5212,11,0,goproglib
5780,2025-03-25 10:01:00+00:00," **Event-Driven архитектура в Go**

EDA (Event-Driven Architecture) — это когда каждый компонент системы живёт своей жизнью и просто «подслушивает» интересные ему события. Если сервисы общаются через REST и вы уже устали от retry-логики, timeouts и других прелестей — добро пожаловать в мир событий.

 **Как это сделать**

Самый простой метод всего в три шага — это использовать NATS:
**
1. Установка NATS (через Docker)**
```docker run -d --name nats -p 4222:4222 nats:latest```**

2. Подписка на событие**
```nc, _ := nats.Connect(nats.DefaultURL)
nc.Subscribe(""user.created"", func(m *nats.Msg) {
    fmt.Printf(""Новое событие: %s\n"", string(m.Data))
})
select {} // держим соединение открытым```

**3. Публикация события**
```nc, _ := nats.Connect(nats.DefaultURL)
nc.Publish(""user.created"", []byte(""Пользователь создан: ID=123""))```

Событийно-ориентированная архитектура — это не модный хайп, а здравый подход для гибких систем.

️ [Подробнее про реализацию](https://clc.to/fLj2KQ)

[Библиотека Go разработчика](https://t.me/goproglib) #буст",5387,26,1,goproglib
5779,2025-03-24 18:23:50+00:00,"** Как выбрать стратегию кэширования: разбор 7 популярных алгоритмов**

Кешировать нужно с умом. И нет, LRU — не серебряная пуля.

В статье вас ждёт разбор алгоритмов: LRU, LFU, FIFO, ARC и другие
– Примеры, где каждый работает лучше 
– Плюсы и минусы подходов
– Практические советы по выбору стратегии 

Если проектируете систему с большими нагрузками или оптимизируете производительность — материал будет как раз.

️ [Читать статью ](https://proglib.io/sh/A86H9GLdSp)

[Библиотека шарписта](http://t.me/csharpproglib)",5272,6,2,goproglib
5778,2025-03-24 10:59:49+00:00,"** Обратная связь после собеседования**
 
Наш подписчик рассказал любопытную историю:
У нас стало заметно больше кандидатов, которые просят расширенную обратную связь после собеседований. Некоторые чуть ли не претензии высказывают в ответ на отказ, а один даже собирался идти в суд — мол, прошёл пару туров, значит должен был получить оффер. Эйчары в шоке.

 **Давайте устроим небольшой опрос: нужна вам обратная связь после собеса? И если да — какая именно? Пишите в комментарии**

Напоминаем, вы можете [спросить сообщество](https://clc.to/nBTPrg) библиотеки Go и не только! Самые интересные вопросы обязательно опубликуем.

[Библиотека Go разработчика](https://t.me/goproglib) #междусобойчик",5595,12,6,goproglib
5777,2025-03-24 06:59:50+00:00,"****** Как планировщик Go решает, на каком ядре будет выполняться конкретная горутина**

 В Go планирование горутин не зависит напрямую от операционной системы, а управляется Go-рантаймом, который использует свою собственную модель многозадачности

Go использует модель планирования M:N (M горутин на N потоков). Это означает, что несколько горутин могут быть распределены по нескольким потокам ОС.

В Go есть три ключевых компонента, которые связаны с планированием горутин:

G (goroutine): горутина — поток, который управляется Go-рантаймом. В Go может быть создано много горутин (десятки тысяч и даже миллионы), и они используют системные ресурсы с минимальными затратами.

M (machine): системный поток, который Go использует для выполнения горутин. В операционной системе это обычный поток ОС. В Go обычно количество потоков M ограничено числом доступных ядер процессора.

P (processor): абстракция процессора, которая управляет очередями готовых горутин, которые могут быть исполнены. Каждый процессор может управлять множеством горутин, но горутина будет выполняться только на одном ядре в момент времени.

Go решает, на каком ядре будет выполняться горутина, на основе количества доступных процессоров (runtime.GOMAXPROCS) и текущей загрузки

[Библиотека Go для собеса](https://t.me/go_interview_lib)",4823,25,26,goproglib
5776,2025-03-23 16:25:20+00:00,"** Дайджест новостей за неделю**

Собрали всё важное, чтобы вы могли пропустить. Без `nil`, без `panic()`, только конкретика — строго по `gofmt'у`.

** **[**Go-сервис для GitHub-данных**](https://clc.to/efqNyA)
Простой пример, как на Go сделать REST-сервис, который тянет данные из GitHub. Под капотом: чистая архитектура, PostgreSQL, docker-compose.

**🆕 **[**Git 2.49.0**](https://clc.to/G2mCmA)
Новые фичи, чистка кода и подготовка к Git 3.0.

** **[**Книга про управление в IT**](https://clc.to/tnBoxw)
Как стать техлидом без «начальства», влиять на стратегию и архитектуру, поднимать команду и при этом самому расти в глубину

** **[**Ловим сравнение указателей**](https://clc.to/aRDmpA)
В Go легко случайно сравнить указатели на строки `(*a == *b)` вместо самих строк. Такая ошибка не упадёт, но может привести к тихим багам.

[Библиотека Go разработчика](https://t.me/goproglib) #свежак",5546,12,0,goproglib
5775,2025-03-22 12:59:52+00:00," **Тест на внимательность**

Задача простая — слова зашифрованы по горизонтали. Не все из них относятся к Go, но каждое точно знакомо настоящему программисту

****** Пишите в комментариях, сколько слов удалось найти, и делитесь своим списком под спойлером**

[Библиотека Go разработчика](https://t.me/goproglib) #междусобойчик",5821,29,4,goproglib
5774,2025-03-22 06:59:51+00:00,[Библиотека Go разработчика](https://t.me/goproglib) #развлекалово,5901,23,0,goproglib
5773,2025-03-21 18:09:03+00:00,"** 152 000 уволенных в IT за год: кому это помогло?**

Корпоративная бензопила снова в деле: каждый месяц 2 миллиона американцев теряют работу из-за сокращений. Но действительно ли это помогает компаниям?

 [**Читать статью**](https://proglib.io/sh/IOanx7NgX6)",5982,8,0,goproglib
5772,2025-03-21 06:59:52+00:00,"****  **Отчёт о покрытии тестами в браузере**

Чтобы наслаждаться отчётом о покрытии тестами, сделайте три простых шага:

1. Устанавливаем gocov и gocov-html:
```go install github.com/axw/gocov/gocov@latest
go install github.com/matm/gocov-html@latest```

2. Генерируем покрытие тестами:
```go test -coverprofile=coverage.out ./...```

3. Преобразуем в красивый отчёт:
```gocov convert coverage.out | gocov-html > coverage.html```

Теперь открываем coverage.html в браузере —
и видим, что покрыто, а что — нет.

[Библиотека Go разработчика](https://t.me/goproglib) #буст",6321,21,8,goproglib
5771,2025-03-20 18:12:46+00:00,"** Неочевидные грабли в Go – когда всё кажется простым**

Go прославился своей лаконичностью, прямолинейностью и минимализмом. Вы пишете код, компилируете – и вроде бы всё отлично. Но как часто случалось, что в простом коде прятались ловушки, которые потом отомстили в самый неподходящий момент?

Делитесь в комментариях своими историями о том, как вы наступали на неочевидные грабли в Go:

**— Когда код, казалось бы, логичен и чист, вдруг начал вести себя странно.
— Ситуации, когда гонки данных или неправильное использование горутин приводили к неожиданным результатам.
— Казалось бы, безопасный map вдруг решил устроить вечеринку из-за отсутствия синхронизации.**

Начнём с нашего админа:
Завернул обработку запросов в горутину, тесты проходят, ошибок нет. Выкатываем в прод – а часть запросов просто исчезает. Долго разбирался, пока не осознал: главная функция завершалась раньше, чем отрабатывали горутины, и они просто не успевали исполниться.
Теперь всегда использую sync.WaitGroup

[Библиотека Go разработчика](https://t.me/goproglib) #междусобойчик",5948,18,10,goproglib
5769,2025-03-20 07:04:22+00:00," **Промт дня: компилятор с объяснениями**

Вы когда-нибудь задумывались, что делает Go-компилятор с вашим кодом на самом деле? Этот промт детально разберёт процесс компиляции, покажет шаги оптимизации и объяснит, почему финальный бинарник получился таким, а не иначе:
```You are an expert Go compiler, known for your deep understanding of the Go programming language and your ability to efficiently compile Go code. Your goal is to take a given Go program and compile it, optimizing the output for performance and efficiency.

Here is the format you will use to compile the Go code and provide recommendations:

---
## Compilation Process
Describe the steps you would take to compile the provided Go code, including any optimizations or techniques you would use.

## Compiled Output
Provide the compiled output of the Go code, including any relevant information such as file size, execution time, or memory usage.
---```

**Какими промтами пользуетесь вы? Делитесь в комментариях**

[Библиотека Go разработчика](https://t.me/goproglib) #буст",5955,17,3,goproglib
5768,2025-03-19 18:11:02+00:00,"** Алгоритмическая самоуспокоенность: как мы разучились думать своей головой**

Каждый день мы сталкиваемся с бесконечным потоком информации, которая не просто наполняет наш день, а управляет нашими мыслями. Социальные сети, алгоритмы и вечная гонка за вниманием приводят к тому, что мы забываем, как думать собственной головой. 

Это не просто влияет на настроение, но и на способность анализировать информацию, принимать решения и, главное, не становиться частью системы манипуляций.

Если вы хотите вернуться к осознанному подходу в восприятии мира и научиться фильтровать контент, то эта тема точно для вас.

****** **[**Подробнее в статье**](https://proglib.io/sh/Zt9YzLlJme)

 [Библиотека джависта](https://t.me/javaproglib)",5127,2,1,goproglib
5767,2025-03-19 11:04:00+00:00,"**️ Как сделать select с таймаутом**

Чтобы не ждать данные в select бесконечно нужно реализовать таймаут. В Go сделать это можно несколькими способами:

1️⃣ **Использование** `time.After`

Подходит для простых случаев, но создает новую time.After при каждом вызове.

```select {
case msg := <-ch:
    fmt.Println(""Получено:"", msg)
case <-time.After(2 * time.Second):
    fmt.Println(""Таймаут!"")
}```

2️⃣ **Использование** `context.WithTimeout`
`
`Можно передавать ctx в функции, что удобно для управления таймаутами в API-запросах или базах данных.
```ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)
defer cancel()

select {
case msg := <-ch:
    fmt.Println(""Получено:"", msg)
case <-ctx.Done():
    fmt.Println(""Таймаут:"", ctx.Err())
}```
`
`3️⃣ **Использование** `time.NewTimer`

В отличие от time.After, NewTimer можно сбрасывать timer.Reset(duration), если нужно обновить таймаут.

```timer := time.NewTimer(2 * time.Second)
defer timer.Stop()

select {
case msg := <-ch:
    fmt.Println(""Получено:"", msg)
case <-timer.C:
    fmt.Println(""Таймаут!"")
}```

4️⃣ **Использование **`ticker` **для периодического опроса с таймаутом**

Подходит для ожидания с периодической проверкой состояния.

```ticker := time.NewTicker(500 * time.Millisecond)
defer ticker.Stop()

timeout := time.After(2 * time.Second)

for {
    select {
    case msg := <-ch:
        fmt.Println(""Получено:"", msg)
        return
    case <-ticker.C:
        fmt.Println(""Ожидание..."")
    case <-timeout:
        fmt.Println(""Таймаут!"")
        return
    }
}```

5️⃣ **Принудительное завершение через** `select` **с** `done` **каналом**

Полезно, когда нужно дождаться завершения другой горутины, но не бесконечно.

```done := make(chan struct{})

go func() {
    time.Sleep(3 * time.Second)
    close(done)
}()

select {
case msg := <-ch:
    fmt.Println(""Получено:"", msg)
case <-done:
    fmt.Println(""Горутина завершена, но данных нет."")
case <-time.After(2 * time.Second):
    fmt.Println(""Таймаут!"")
}```

**Каждый из этих вариантов хорош в своей ситуации. Какой из них вам больше подходит? ******

[Библиотека Go разработчика](https://t.me/goproglib) #буст",5237,35,0,goproglib
5765,2025-03-19 09:14:51+00:00," **Как оставлять комментарии в чате нашего канала **

В нашем чате работает бот Shieldy — он защищает от спама, запрашивая у новых участников решение простой капчи. 

️ **Проблема, с которой сталкиваются многие:** вы нажимаете под постом «Прокомментировать», пишете что-то, а потом получаете бан и не можете писать комментарии.

**Почему так: **Shieldy отправляет капчу в сам чат, а не в комментарии под конкретный пост. Из-за этого капчу можно не увидеть, не отправить ответ на нее, и бот автоматически заблокирует вас.

 **Как присоединиться к чату, чтобы бот вас не забанил**

— Зайдите в описание канала с телефона и нажмите кнопку Discuss / Чат
— Нажмите Join / Присоединиться
— Сразу обратите внимание на сообщение от бота Shieldy
— Решите простой пример и отправьте ответ в чат 

После этого бот отправит приветственное сообщение и вы сможете оставлять комментарии. Эту проверку нужно пройти только один раз при вступлении в чат.

**️ Если вас все-таки забанили**

— Это временная блокировка на несколько минут
— Подождите и попробуйте зайти позже, бот снова отправит вам капчу

Админы канала никак не могут ускорить процесс, бот автоматически снимает с вас блокировку через пару минут. Мы понимаем, что эта система неидеальна, и ищем более удобное решение. 

 Спасибо, что активно участвуете в обсуждении наших постов!",5526,5,3,goproglib
5764,2025-03-19 07:03:45+00:00,[Библиотека Go разработчика](https://t.me/goproglib) #развлекалово,5506,36,0,goproglib
5763,2025-03-18 18:14:27+00:00," **Интерактивная шпаргалка по GoLand**

Все важные сочетания, которые помогут вам ускорить работу в IDE и сделать процесс разработки максимально комфортным.

Никаких сложных настроек — просто посмотрите, выберите нужные сочетания и используйте их в своей работе.

**️**** **[**Изучить хоткеи**](https://clc.to/Jyd2bw)

[Библиотека Go разработчика](http://t.me/goproglib) #буст",5882,18,0,goproglib
5762,2025-03-18 11:55:52+00:00,"‍ **Какой язык программирования учить в 2025 году**

Proglib рассказывает базу в формате рилса",5774,32,1,goproglib
5761,2025-03-18 07:05:01+00:00," **Пингвин, покоривший мир: история взлета Linux – ОС, управляющей 96% серверов**

В 1991 году на компьютере с 4 мегабайтами памяти родилась программа, которая сегодня управляет большей частью интернета, смартфонами и даже космическими аппаратами. Это история Linux, рассказанная одним из первых свидетелей.

[️](https://proglib.io/sh/U3pedqDPOr)[ ](https://proglib.io/sh/U3pedqDPOr)[**Читать статью**](https://proglib.io/sh/U3pedqDPOr)** **
[️](https://proglib.io/sh/U3pedqDPOr)[ ](https://proglib.io/sh/U3pedqDPOr)[**Зеркало**](https://proglib.tech/p/pingvin-pokorivshiy-mir-istoriya-vzleta-linux-os-upravlyayushchey-96-serverov-2025-03-06)",5381,21,0,goproglib
5760,2025-03-17 17:59:57+00:00,"**  Меньше запросов, больше скорости**

Когда клиент запрашивает данные, сервер обычно играет роль посредника, проверяя права доступа и передавая данные. Но как можно ускорить этот процесс и разгрузить сервер.

****** Valet Key Pattern**

1️⃣ Клиент запрашивает доступ к ресурсу.

2️⃣ Сервер выдает временный токен («valet key») с ограниченными правами.

3️⃣ Клиент напрямую использует этот токен для доступа к данным

** Где используется**

• Доступ к объектному хранилищу (AWS S3 Pre-Signed URLs, Azure SAS Tokens)

• Ограниченный доступ к API без полной аутентификации

• Стриминг медиафайлов с временными ссылками

**️**** **[**Подробности про паттерн**](https://clc.to/C_uWrA)

[Библиотека Go разработчика](http://t.me/goproglib) #буст",5872,12,0,goproglib
5759,2025-03-17 13:26:13+00:00,"****** Какой тип данных получит переменная var x = 42.5**

 — int
 — float32
️ — float64
 — double

[**Библиотека задач по Go**](https://t.me/go_problems_lib)",4968,240,9,goproglib
5757,2025-03-17 06:59:58+00:00,"**‍**** Продвинутые трюки со слайсами**

Собрали для вас парочку идей как необычно работать со слайсами:

1️⃣ **Удаление элемента без сохранения порядка** 
```s[i] = s[len(s)-1]
s = s[:len(s)-1]```

**2️⃣****Фильтрация слайса без выделения памяти**
```n := 0
for _, x := range s {
    if keep(x) {
        s[n] = x
        n++
    }
}
s = s[:n]```

3️⃣ **Расширение слайса без перевыделения памяти**
```if cap(s)-len(s) < n {
    s = append(make([]int, 0, len(s)+n), s...)
}```

[Библиотека Go разработчика](http://t.me/goproglib) #буст",5691,29,8,goproglib
5756,2025-03-16 14:59:57+00:00,"****** Новости минувшей недели**

Подводим итоги всего, что случилось за эти 7 дней:

** Новый выпуск подкаста Cup o' Go** — [обсуждаются релизы безопасности](https://clc.to/AQIkig) Go 1.24.1 и 1.23.7, обновление gopls v0.18.0, а также инициативы по переписыванию проектов на Go.

** Релиз Viper v1.20.0** — улучшены API поиска файлов, [добавлена поддержка привязки структур](https://clc.to/hJDw5w). Также прекращена поддержка Go 1.20, а устаревший slog shim удалён для упрощения кода.

** Go 1.24 получил новый API** — теперь разработчики [могут задавать корневую директорию](https://clc.to/FsY7DQ), ограничивая доступ приложения к файловой системе и повышая безопасность.

**️**** Microsoft **[**переписывает компилятор TypeScript на Go**](https://t.me/goproglib/5752)

[Библиотека Go разработчика](http://t.me/goproglib) #свежак",5415,6,0,goproglib
5755,2025-03-15 12:59:58+00:00,"** Go и дженерики: спасение или катастрофа**

Давайте поговорим о самой противоречивой фиче последних лет – дженериках.

Go 1.18 принес нам дженерики, и с тех пор сообщество разделилось на два лагеря:

 «Это было необходимо!» – наконец-то можно писать более чистый и переиспользуемый код. Ad-hoc-полиморфизм не всегда удобен, а interface{} и рефлексия – зло.

 «Go потерял свою простоту!» – дженерики убили лаконичность кода. Вместо понятного Go мы получили мини-Java.

** Согласны ли вы с тем, что дженерики спасли Go, или же это был шаг в сторону усложнения? **

[Библиотека Go разработчика](http://t.me/goproglib) #междусобойчик",5880,7,14,goproglib
5754,2025-03-15 06:59:58+00:00,"А как вам такие [новости](https://t.me/goproglib/5752)? 

[Библиотека Go разработчика](http://t.me/goproglib) #развлекалово",5704,40,6,goproglib
5753,2025-03-14 19:14:27+00:00,"********** Нужна ли математика программисту**

Можно ли стать разработчиком, если в школе ненавидел математику? А если наоборот — тащился от алгебры и геометрии, но кодить не умеешь? Эта статья раскладывает всё по полочкам: где без математики никуда, а где можно и без неё.

️ **Что внутри:**

 Почему все считают, что программисты — математики

 В каких сферах разработки можно вообще не знать математику

 Где хватит готовых библиотек, а где придётся разбираться в формулах

 Какие области программирования требуют мощного математического бэкграунда

 Что делать, если математика — это боль, но хочется освоить ML или Data Science

 Топ книг, которые помогут понять и даже полюбить математику

 Чтобы знать математику, забирайте наш курс  → «[**Математика для Data Science**](https://proglib.academy/mathspro?utm_source=tg_academy&utm_medium=post_NyzhnaMatematiakDlyaProgrammista)»

****** **[**Читать статью**](https://clc.to/MYGymA)

[**Proglib Academy**](https://t.me/proglib_academy)",5357,6,1,goproglib
5752,2025-03-14 08:59:01+00:00,"** Что посмотреть: как Go улучшает производительность компилятора TypeScript**

Если вы хотите понять, как можно значительно ускорить работу компилятора и улучшить производительность на высоконагруженных задачах, это видео для вас. 

Команда разработчиков TypeScript делится опытом переноса компилятора с использованием Go. Это позволяет сократить время компиляции в десятки раз и решает множество проблем с производительностью в JavaScript. 

**️**** **[**Смотреть видео**](https://clc.to/wSsi9g)

[Библиотека Go разработчика](http://t.me/goproglib) #буст",6092,8,1,goproglib
5751,2025-03-13 18:15:07+00:00,"**Эксперт или универсал: Какой путь выбрать**

Однажды каждый разработчик сталкивается с выбором:

 Идти вглубь — становиться узким специалистом, глубоким экспертом в конкретной технологии.
 Идти вширь — осваивать новые технологии, расширять кругозор, становиться универсалом.

Разбираем плюсы, минусы и подводные камни каждого пути.

******Путь эксперта**

Ты становишься мастером в своем деле: знаешь стек как свои пять пальцев, можешь решать сложные задачи, оптимизировать и углубляться в детали.

 Плюсы:
 Высокий спрос на рынке для редких экспертов.
 Возможность стать ментором, архитектором, техлидом.
 Возможность делать революционные вещи в узкой области.

 Минусы:
— Высокий порог входа: чтобы стать экспертом, нужны годы практики.
— Узкая специализация = риски (если технология потеряет актуальность).
— Иногда скучно: одно и то же из года в год.

Если тебе нравится глубокая работа с технологиями, ты хочешь разбираться в сложном коде, делать неочевидные оптимизации и становиться гуру — это твой выбор.

****** Путь универсала**

Ты не привязываешься к одной технологии и легко прыгаешь между разными стеками. Сегодня фронтенд, завтра DevOps, послезавтра AI — ты всегда готов учиться новому.

 Плюсы:
 Легче адаптироваться к новым трендам и рынку.
 Возможность работать в разных областях.
 Больше шансов занять менеджерские позиции.
 Можно быть разработчиком-одиночкой (фриланс, стартапы, консалтинг).

 Минусы:
— Поверхностные знания = не всегда высокая зарплата.
— Риски синдрома ""немного знаю обо всём, но нигде не силён"".
— Постоянная учёба: новые фреймворки, языки, подходы... устаёшь от потока информации.

Если тебе нравится пробовать новое, ты быстро адаптируешься к изменениям и любишь разбираться в широком спектре задач — это твой вариант.

**Давайте обсудим в комментариях какой путь выбрали вы или хотели бы выбрать **

[Библиотека Go разработчика](http://t.me/goproglib) #междусобойчик",5653,27,2,goproglib
5750,2025-03-13 07:05:28+00:00," **Чек-лист: отправка кода на ревью**

Прежде чем звать старшего коллегу для проверки кода пройдись по этому списку 

** Общее**
 Код компилируется и проходит все необходимые тесты.
 В коде нет отладочных выводов в консоль.
 Отсутствуют «магические числа» (используются константы)
 Нет дублирования кода.
 Код не похож на «простыню», строки методов не исчисляются сотнями.

** Функциональность**
 Код делает именно то, что заявлено в задаче / тикете.
 Проверены граничные случаи.
 Обработаны возможные исключения.
 При ошибках возвращаются понятные сообщения и коды.

** Производительность**
 Код не создает лишних объектов.
 Нет ненужных синхронизаций и блокировок.
 Если есть циклы в циклах — подумать дважды, нельзя ли их убрать.

** Чистота и поддерживаемость**
 Минимальная вложенность (if-else не превращается в лабиринт)
 Код понятен без лишних комментариев
 Если добавлен новый код – он покрыт тестами
  Нет «зомби-кода» (закомментированных кусков, которые «может быть пригодятся»)

** Тестирование**
 Все тесты проходят до отправки на ревью
 Покрытие юнит-тестами достаточное, основные сценарии проверены
 Не тестируем очевидное (`getter`/`setter`, `toString()`)

** Git и процесс ревью**
 Название ветки соответствует принятому стандарту (`feature/`, `bugfix/`, `hotfix/`)
 Коммиты логичны и атомарны (не «все в одном»)
  Сообщения коммитов осмысленные, а не «fixed bug» или «changes»

Отправляй на ревью и пусть только попробуют найти изъяны!

[Библиотека Go разработчика](http://t.me/goproglib) #буст",5834,33,2,goproglib
5749,2025-03-12 18:11:30+00:00,"А чего в Go не хватает вам 

[Библиотека Go разработчика](http://t.me/goproglib) #развлекалово",6073,69,72,goproglib
5748,2025-03-12 08:06:58+00:00," **Быстрый способ конвертации JSON в Go-структуры**

Нашли для вас удобный проект, который конвертирует JSON в структуры Go. 

**Как это выглядит**

1️⃣ Вставляем свой JSON в форму на странице
```{
  ""name"": ""Prog Lib"",
  ""age"": 30,
  ""email"": ""coolproger@example.com"",
  ""is_active"": true,
  ""tags"": [""golang"", ""developer""],
  ""profile"": {
    ""github"": ""https://github.com/proglib""
  }
}```

2️⃣ На выходе получаем готовую структуру
```type AutoGenerated struct {
  Name     string   `json:""name""`
  Age      int      `json:""age""`
  Email    string   `json:""email""`
  IsActive bool     `json:""is_active""`
  Tags     []string `json:""tags""`
  Profile  struct {
    Github string `json:""github""`
  } `json:""profile""`
}```

Инструмент не без ошибок, но отлично работает в 99% случаев.**

****️**** **[**Попробовать JSON-to-Go**](https://clc.to/NzGDWg)

[Библиотека Go разработчика](http://t.me/goproglib) #буст",8159,17,3,goproglib
5747,2025-03-11 18:10:08+00:00," **Структуры данных: ТОП-30 вопросов и ответов для собеседований в 2025 году**

Техническое собеседование на позицию разработчика, дата-сайентиста и ML-инженера часто включает вопросы по структурам данных и связанным с ними алгоритмами.

В нашей статье мы рассмотрим базовые и продвинутые темы, разберем типичные задачи и обсудим оптимальные способы их решения.

 **Прочитайте статью и укрепите свои знания **—** **https://proglib.io/sh/1uYAygzIxr

[Библиотека питониста](https://t.me/pyproglib)",5615,6,0,goproglib
5745,2025-03-11 06:59:58+00:00,"**Альтернативы тернарных операторов в Go**

Go — минималистичный язык программирования, который намеренно исключает некоторые привычные конструкции, присутствующие в других языках. Одним из таких отсутствующих элементов является тернарный оператор (condition ? trueValue : falseValue). Однако в Go существуют элегантные способы обойти это ограничение.

1️⃣ М**апа с булевым ключом**

Одно из самых элегантных решений это использование мапы. Вот так это выглядит:
```result := map[bool]string{true: ""Значение истины"", false: ""Значение лжи""}[condition]```

2️⃣ **Анонимная функция**

Еще один подход — создание анонимной функции с немедленным вызовом:
```result := func() string {
    if condition {
        return ""Значение истины""
    }
    return ""Значение лжи""
}()```

3️⃣  **Вспомогательная функция**

Для часто используемых типов данных можно создать вспомогательные функции:
```// Для строк
func IfString(condition bool, trueVal, falseVal string) string {
    if condition {
        return trueVal
    }
    return falseVal
}

// Для целых чисел
func IfInt(condition bool, trueVal, falseVal int) int {
    if condition {
        return trueVal
    }
    return falseVal
}

// Использование
minValue := IfInt(user.IsAdmin, 0, 10)
message := IfString(isActive, ""Активен"", ""Неактивен"")```

**Так ли нужен тернарный оператор в Go? Или может это пережиток прошлого? Делитесь своим мнением в комментариях****⬇️****

**[Библиотека Go разработчика](http://t.me/goproglib) #буст",5618,69,27,goproglib
5744,2025-03-10 18:04:31+00:00,"** Alibaba, Datadog и Quesma упрощают инструментирование Go-приложений**

Если раньше сбор телеметрии в Go был головной болью, то теперь всё становится гораздо проще. Крупные компании объединили усилия, чтобы интеграция OpenTelemetry не требовала ручных правок кода.

** Что случилось**

Эти компании разработали инструменты автоматического инструментирования на этапе компиляции, используя `go -toolexec`. Это значит, что:

 Не нужно добавлять инструментирование вручную в код приложения.

 Инструментируются даже зависимости и стандартная библиотека Go.

 Наблюдаемость в Go становится проще, чем когда-либо.

Эта инициатива упрощает жизнь DevOps-инженерам и Go-разработчикам, снижая порог вхождения в инструментирование.

**️**** **[**Подробности в источнике**](https://clc.to/PskaAg)

** Что думаете? Уже используете OpenTelemetry в Go? Делитесь опытом в комментариях **

[Библиотека Go разработчика](http://t.me/goproglib) #свежак",5781,16,0,goproglib
5743,2025-03-10 11:17:52+00:00,"**️**** Задача: реализуйте итеративную функцию нахождения n-ого числа Фибоначчи**

[Недавно мы реализовывали тоже самое](https://t.me/go_problems_lib/1040), но рекурсивно. Теперь пора сделать чуть оптимизированную версию.

Такой способ использует константную память, поскольку не использует рекурсивных вызовов.

[**Библиотека задач по Go**](https://t.me/go_problems_lib)",5176,11,0,goproglib
5742,2025-03-10 06:54:19+00:00,"** Что такое** **Cache contention**

Cache contention возникает, когда несколько горутин одновременно обращаются к одной и той же структуре данных, что приводит к конкуренции за доступ к данным и снижению производительности.

[Библиотека Go для собеса](https://t.me/go_interview_lib)",5100,7,2,goproglib
5740,2025-03-09 12:59:58+00:00," **Что произошло за неделю**

Собрали для вас главные события и контент минувших семи дней.

 **Улучшенная чистка** — [команда Go работает](https://clc.to/UVGLQA) над улучшением системы сборки мусора и добавлением поддержки слабых ссылок.

‍ `synctest` — новый экспериментальный пакет в Go 1.24, который позволяет контролировать время и горутины в тестах. Нашли для вас [подробный видеообзор ](https://clc.to/l_ALpw)с примерами.

** Go и без классов хорошо** — [статья ](https://clc.to/A492eg)о том, почему язык Go не требует классов как в других языках программирования.

****** Итоги опроса про работу **— Proglib проводили исследование о рынке труда. Самое время поделиться [результатами](https://t.me/devopsslib/3424).

[Библиотека Go разработчика](http://t.me/goproglib) #свежак",5684,7,0,goproglib
5738,2025-03-08 13:07:43+00:00,"️ **Как в газете, но современный**

Предлагаем размяться и вспомнить самые базовые слова любого Go-разработчика.

1. Имя маскота языка Go.

2. Фреймворк для создания HTTP-сервисов

3. Функция, которая вызывается перед завершением программы для освобождения ресурсов

4. Название ключевого типа, который представляет любое значение

5. Ключевое слово для работы с конкурентностью, позволяющее синхронизацию. 

**Пишите свои ответы в комментарии **

[Библиотека Go разработчика](http://t.me/goproglib) #междусобойчик",5661,14,2,goproglib
5737,2025-03-08 11:07:26+00:00,"****** Поздравляем с 8 марта**

Сегодня отмечаем вклад девушек-разработчиков, аналитиков, тестировщиков, тимлидов и всех, кто влюблён в код. Без вас IT не было бы таким, каким мы его знаем. С праздником, коллеги 

Женщины оставили огромный след в истории IT. Если вам кажется, что программирование — это исключительно «мужская территория», взгляните, вот лишь несколько легендарных женщин:

** Ада Лавлейс** — автор первой компьютерной программы ещё в 19 веке.
** Грейс Хоппер** — создала первый компилятор и популяризировала термин «баг».
** Барбара Лисков** — её принцип Liskov Substitution является основой ООП, в том числе в Java.
** Эдит Кларк** — первая женщина-инженер, внесшая вклад в вычислительные методы в энергетике.
** Маргарет Гамильтон** — разработала софт для посадки «Аполлона-11» на Луну.

А это только малая часть. В статье собраны ещё больше вдохновляющих историй.

****[** Подробнее в статье**](https://proglib.io/p/19-talantlivyh-zhenshchin-sdelavshih-neocenimyy-vklad-v-it-2025-03-05)

 [Библиотека джависта](https://t.me/javaproglib)",4559,25,0,goproglib
5736,2025-03-08 07:47:47+00:00,"Какой самый большой период поиска работы был у вас?

[Библиотека Go разработчика](http://t.me/goproglib) #развлекалово",5297,24,15,goproglib
5735,2025-03-07 18:13:56+00:00,"**  IT-конференции: как сходить на мероприятие и извлечь из него максимум пользы**

 IT-конференции — это не только про кофе-брейки и бесплатные стикеры. Это шанс завести полезные знакомства, узнать инсайдерскую информацию и найти новые карьерные возможности. Но для этого нужно не просто прийти, а правильно подготовиться и ловить важные моменты.

Как извлечь из мероприятия максимум пользы? Как сделать так, чтобы оно дало не только эмоции, но и реальные бонусы для вашей карьеры? 

****[** Подробнее в статье**](https://proglib.io/sh/5iZAG4zKPw)

 [Библиотека джависта](https://t.me/javaproglib)",5034,2,2,goproglib
5733,2025-03-07 07:07:28+00:00," **Не только commit и push**

Собрали для вас простые, но полезные команды для работы с git-репозиториями.

1️⃣ Отображение истории в виде красивого графа
```git log --graph --oneline --all --decorate```

2️⃣ Временное сохранение изменений без коммита
```git stash push -m ""Описание стэша""
git stash list
git stash apply stash@{0}```

3️⃣ Поиск по коммитам
```git log -S ""поисковая строка""```

4️⃣ Переименование последних коммитов в интерактивном режиме
```git rebase -i HEAD~3```

**Узнали что-то новое — ставьте **

**Давно знаете все команды? Поделитесь с менее опытным коллегой ️**

[Библиотека Go разработчика](http://t.me/goproglib) #буст",6002,50,0,goproglib
5732,2025-03-06 18:18:47+00:00," **Golang: минимализм или ограничения**

Минимализм Go — это осознанный выбор создателей. Роб Пайк и команда Google намеренно создали язык с небольшим набором возможностей, которые работают предсказуемо. Отсутствие наследования и исключений было не упущением, а принципом дизайна.

Но граница между минимализмом и ограничением часто размыта. Например, обработка ошибок в Go через многократные проверки `if err != nil` может показаться избыточной для тех, кто привык к исключениям. 

**А что вы думаете? Является ли минимализм Go его силой или недостатком? Ждём вас в комментариях **

[Библиотека Go разработчика](http://t.me/goproglib) #междусобойчик",5994,17,28,goproglib
5730,2025-03-06 14:42:34+00:00,"‍️ **40+ каналов, которые должен читать каждый разработчик**

Отобрали для вас полезные и проверенные каналы для программистов — в них вы найдете все самое интересное, от технических новостей до практических гайдов.

[IT Job Hub | Работа и вакансии в IT](https://t.me/proglib_jobs) — избранные IT-вакансии 

[Библиотека программиста](https://t.me/proglibrary) — новости из мира IT и технологий

[Книги для программистов](https://t.me/progbook) — самые годные книги по любым языкам и стекам

[IT-мемы](https://t.me/itmemlib) — мемы про жизу айтишника

[Proglib Academy](https://t.me/proglib_academy) — обучение и курсы, чтобы стать топовым специалистом

[Азбука айтишника](https://t.me/abc_for_it) — азы из мира разработки

[Библиотека нейросетей](https://t.me/neuro_text) — лайфхаки и промпты для разных задач, баттлы нейронок и новости из мира ИИ

[Библиотека фронтендера](https://t.me/frontendproglib) — все о JS, React, Angular и не только

[Библиотека мобильного разработчика](https://t.me/mobileproglib) — лайфхаки и новости из мира Swift и Kotlin

[Библиотека хакера](https://t.me/hackproglib) — уязвимости, атаки, бэкдоры и как от них защититься

[Библиотека тестировщика](https://t.me/testerlib) — самое интересное о том, как крашить код

** Go**
[Библиотека Go-разработчика](https://t.me/goproglib)
[Библиотека задач по Go](https://t.me/go_problems_lib)
[Библиотека Go для собеса](https://t.me/go_interview_lib)
[Вакансии по Go](https://t.me/godevjob)

#️⃣ **C#**
[Библиотека шарписта](https://t.me/csharpproglib)
[Библиотека задач по C#](https://t.me/csharp_problems_lib)
[Библиотека собеса по C#](https://t.me/csharp_interview_lib)
[Вакансии по C#](https://t.me/csharpdevjob)

** DevOps**
[Библиотека devops’а](https://t.me/devopsslib)
[Библиотека задач по DevOps](https://t.me/devops_problems_lib)
[Библиотека собеса по DevOps](https://t.me/devops_interview_lib)
[Вакансии по DevOps & SRE](https://t.me/devopssjob)

 **PHP**
[Библиотека пхпшника](https://t.me/phpproglib)
[Библиотека задач по PHP](https://t.me/php_problems_lib)
[Библиотека PHP для собеса](https://t.me/php_interview_lib) 
[Вакансии по PHP, Symfony, Laravel](https://t.me/phpdevjob)

** Python**
[Библиотека питониста](https://t.me/pyproglib)
[Библиотека Python для собеса](https://t.me/py_interview_lib)
[Библиотека задач по Python](https://t.me/py_problems_lib)
[Вакансии по питону, Django, Flask](https://t.me/pydevjob)

**️ Java**
[Библиотека джависта](https://t.me/javaproglib)
[Библиотека задач по Java](https://t.me/java_problems_lib)
[Библиотека Java для собеса](https://t.me/java_interview_lib)
[Вакансии по Java](https://t.me/javadevjob)

** Data Science**
[Библиотека дата-сайентиста](https://t.me/dsproglib)
[Библиотека задач по Data Science](https://t.me/ds_problems_lib)
[Библиотека Data Science для собеса](https://t.me/ds_interview_lib)
[Вакансии по Data Science](https://t.me/datajob)

** C++**
[Библиотека C/C++ разработчика](https://t.me/cppproglib)
[Библиотека задач по C++](https://t.me/cpp_problems_lib) 
[Библиотека C++ для собеса](https://t.me/cpp_interview_lib)
[Вакансии по C++](https://t.me/cppdevjob)

Подписывайтесь на интересные вам каналы и сохраняйте пост в закладки, чтобы не потерять ",5596,8,4,goproglib
5729,2025-03-06 09:34:19+00:00," **Как внедрить CI/CD: 10 самых важных шагов**

CI/CD — это ключ к быстрой, качественной и безопасной разработке ПО. Наш гайд поможет вам настроить эффективный пайплайн, автоматизировать рутину и ускорить релизы.

️ Что внутри статьи

▪️ Лучшие практики работы с Git
▪️ Автоматизация сборки и тестирования
▪️ Внедрение автоматизированного тестирования
▪️ Эффективное управление зависимостями
▪️ Автоматизированный деплой без простоя
▪️ Настройка мониторинга и логирования

****** **[**Читайте гайд**](https://proglib.io/sh/k31RpYdjES)

[Азбука айтишника](https://t.me/abc_for_it)",5140,9,2,goproglib
5728,2025-03-05 19:23:46+00:00,"** Математика в действии: решаем хитрые задачи по прогнозированию, оптимизации и логике **

Статья, которая поможет развить навыки решения задач с помощью математики. 

**️**** Вот что вас ждет**

1️⃣ Прогнозирование численности населения — используем цепи Маркова для предсказания миграций между городом и пригородами.

2️⃣ Минимизация затрат — находим минимальное скалярное произведение векторов для оптимального распределения задач между работниками.

3️⃣ Машина времени — решаем задачу максимального числа пересекающихся временных интервалов с помощью заметающей прямой.

4️⃣ Алгоритм Целлера — вычисляем день недели по дате. Проверка на практике.

 Хочешь прокачаться в математике для ML? Тогда разбирайся с этими задачами и не упусти вебинар: «[**Математика для ML: от теории к практике**](https://clc.to/3-ixdQ)».

 [**Читать статью**](https://proglib.io/sh/qOClJRYyap)",4512,6,0,goproglib
5727,2025-03-05 09:05:57+00:00,"**️**** Побудь моим StackOverflow**

Нашли для вас промт, который просит ИИ действовать как пост со StackOverflow. Он ответит на вопрос готовым кодом и, при необходимости, объяснит некоторые детали;

```I want you to act as a stackoverflow post. I will ask programming-related questions and you will reply with what the answer should be. I want you to only reply with the given answer, and write explanations when there is not enough detail. do not write explanations. When I need to tell you something in English, I will do so by putting text inside curly brackets {like this}. My first question is ""<Paste your question here>""```

Вы когда-нибудь писали вопросы или ответы на StackOverflow? Или просто смотрите ответы? Делитесь в комментариях 

[Библиотека Go разработчика](http://t.me/goproglib) #буст",5824,14,0,goproglib
5726,2025-03-04 18:05:11+00:00," **Инструмент для работы с торрентами на Go**

mkbrr — это CLI-инструмент для создания, модификации и анализа torrent-файлов.
**
Что умеет mkbrr**

 Создаёт новые torrent-файлы — минималистичный, но мощный инструмент для формирования раздач.

 Редактирует существующие торренты — добавляйте трекеры, изменяйте метаданные и параметры.

 Анализирует файлы — быстро проверяет структуру и содержимое торрентов.

****** **[**Репозиторий проекта**](https://clc.to/K3GZyQ)

[Библиотека Go разработчика](http://t.me/goproglib) #буст",5901,9,1,goproglib
5724,2025-03-04 06:59:51+00:00,"** Подборка лучших статей «Библиотеки Go-разработчика» за февраль**: сохраняй в заметки, чтобы не пропустить #самыйсок

[**️  Минимум аллокаций в Go**](https://t.me/goproglib/5641)

[** Декларативная валидация данных в Go **](https://t.me/goproglib/5648)

⏳[**Разбираем cron-like решения**](https://t.me/goproglib/5656)

[**🆚 Go vs C#**](https://t.me/goproglib/5666)

[ **WebAssembly: новые возможности в Go 1.24**](https://t.me/goproglib/5681)

[ **TCP-чат на Go**](https://t.me/goproglib/5683)

[Библиотека Go разработчика](http://t.me/goproglib)",6126,3,0,goproglib
5722,2025-03-03 12:59:52+00:00," **Руководство Uber по стилю написания Go-кода **

Наткнулись на гайд от Uber, в котором описаны внутренние правила по написанию кода на Go.

**Что там интересного**

️ Минимум интерфейсов — только если они реально нужны.

️ Ошибка — это значение, а не исключение — пишем чистый код без паники.

️ Структуры и указатели — как избежать неожиданных мутаций.

️ Как работать с каналами и конкурентностью — не делать лишнего.

️ Производительность и чистота кода — баланс между оптимизацией и читаемостью.

Стиль Uber — это про четкость, производительность и поддержку кода в долгосрочной перспективе.

**‍ А какие у вас любимые best practices в Go? Делитесь в комментариях **

****** **[**Почитать гайд **](https://clc.to/8lE1gg)

[Библиотека Go разработчика](http://t.me/goproglib)",5779,30,4,goproglib
5720,2025-03-03 08:34:05+00:00," **Новые математические функции в Go и обновления от ****Boot.dev**

В последнем эпизоде подкаста Cup o' Go ведущие как всегда обсуждают актуальные события в мире Go. 

**Что вас ждёт в подкасте:**

 **Новые** **математические** **функции** **в Go**: рассматривается предложение о добавлении пакета math/stats с функциями для вычисления среднего, медианы и других статистических показателей.​

 **Обновления** **безопасности**: выпущены обновления для пакетов `golang.org/x/crypto` (v0.35.0) и `golang.org/x/oauth2` (v0.27.0).​

 **Интервью** **с** **Лейном** **Вагнером**: обсуждаются последние новости Boot.dev и его подкаста Backend Banter.​

** Блог Go**: статья Майкла Пратта «Faster Go maps with Swiss Tables» о повышении производительности карт в Go.​

 **Конференции**: анонс Gophercamp, который пройдет 25 апреля в Брно, Чехия.​

️ [**Полный эпизод подкаста**](https://clc.to/UAGCCA)

[Библиотека Go разработчика](http://t.me/goproglib)",5348,8,0,goproglib
5719,2025-03-02 18:09:38+00:00,"** Делимся с вами подборкой из 30 API**

От погодных прогнозов до спортивной статистики — эти API станут вашим секретным оружием в мире разработки.

[Библиотека Go разработчика](http://t.me/goproglib) #инфографика",5805,13,0,goproglib
5718,2025-03-02 07:59:53+00:00,"‍ **Разработка на Go с Live-Reloading**

Если вы Go-разработчик, то знаете, насколько утомительно останавливать и перезапускать приложение при каждом изменении кода. Существует решение этой рутины — Go Air.

 **Что такое Go Air**

Go Air — инструмент командной строки, который отслеживает изменения в вашем Go-проекте и автоматически перезапускает приложение.

 **Краткий обзор настройки**

**1. Установка Go Air**
```go install github.com/cosmtrek/air@latest```

**2. Создание Dockerfile**

**3. Конфигурация .air.toml**

• Директории для исключения
• Интервал опроса изменений
• Правила перестройки приложения

**4. Настройка docker-compose.yml**

**5. Тестирование Live-Reloading**

При изменении файлов Go Air автоматически перестраивает и перезапускает приложение без ручного вмешательства.

[**️ Реализация с картинками**](https://clc.to/nG7z4A)

[Библиотека Go разработчика](http://t.me/goproglib)",5928,21,27,goproglib
5717,2025-03-01 18:17:28+00:00," **Техника для решения задач**

Бэктрекинг (Backtracking) — это алгоритмическая техника поиска, которая перебирает возможные решения рекурсивно, откатываясь назад, если текущий путь не ведёт к успеху.

 **Как работает бэктрекинг**

1. Выбираем следующий шаг – пробуем одно из возможных решений.

2. Проверяем ограничение – если путь невозможен, откатываемся назад.

3. Продолжаем поиск – если решение найдено, фиксируем его и ищем другие варианты.

**Пример кода — поиск всех перестановок строки**
```func permute(arr []rune, l, r int) {
  if l == r {
    fmt.Println(string(arr))
  } else {
    for i := l; i <= r; i++ {
      arr[l], arr[i] = arr[i], arr[l] // Обмен 
      permute(arr, l+1, r)
      arr[l], arr[i] = arr[i], arr[l] // Откат 
    }
  }
}```

 **Где используется**

• Генерация перестановок и комбинаций – подбор паролей, составление расписаний.

• Задача N ферзей – расстановка фигур без угрозы друг другу.

• Поиск пути в лабиринте – навигация в сложных структурах.

• Разбор выражений и парсинг – обработка кода и регулярных выражений.

** Использовали ли вы бэктрекинг в реальных проектах? Делитесь опытом в комментариях! **

[Библиотека Go разработчика](http://t.me/goproglib)",5821,16,0,goproglib
5716,2025-03-01 06:49:48+00:00," Привет, Go-сообщество!

С какой версии языка вы начинали своё погружение? 
А какая версия стала для вас самой необычной в плане обновлений?

**Делитесь своими мыслями в комментариях **

[Библиотека Go разработчика](http://t.me/goproglib) #интерактив",5875,11,2,goproglib
5714,2025-02-28 07:06:49+00:00," **Почему увольнять программистов ради ИИ — путь к провалу**

Мы разберем, почему компании, которые массово увольняют разработчиков в пользу ИИ, рискуют остаться у разбитого корыта. Сгенерированный код не умеет исправлять баги, а инженеры, которые действительно понимают систему, становятся редкостью и роскошью.

**️**** Что внутри статьи**

▪️ Почему новые поколения программистов рискуют потерять ключевые навыки.

▪️ Как компании, заменившие инженеров ИИ, столкнутся с серьезными проблемами.

▪️ Почему опытные разработчики станут супердорогими и востребованными.

▪️ К чему приведет полная ставка на искусственный интеллект в IT.

 Подтяните свои знания о машинном обучении вместе с нашим курсом «[**Базовые модели ML и приложения**](https://proglib.academy/machine-learning-course?utm_source=tg_academy&utm_medium=post_PochemuUvolnyatProgrammistovRadiII)»

** **[**Читайте статью**](https://proglib.io/sh/ifTZtChFX5)",5855,9,0,goproglib
5712,2025-02-27 13:06:05+00:00,"** OpenAPI + Go**

OpenAPI — стандарт для описания REST API, который упрощает их документирование, тестирование и генерацию кода. 

В Go OpenAPI можно интегрировать с помощью `oapi-codegen`, автоматизируя процесс разработки.

Благодаря OpenAPI, документация всегда актуальна, а тестирование API становится проще.

**️**** **[**Реализация и YAML-примеры **](https://clc.to/KGGE9A)

[Библиотека Go разработчика](http://t.me/goproglib)",6366,17,0,goproglib
5710,2025-02-27 07:03:38+00:00,"️ **Написано на Go: веб-интерфейс для работы с SQLite**

SQLiteAdmin-Go — это легковесный веб-интерфейс для просмотра, редактирования и управления SQLite-базами прямо из браузера.

****** Что умеет и какие фишки**

• Просмотр таблиц и схем базы данных.

• Фильтрация и редактирование данных.

• Поддержка работы как библиотека для Go, так и самостоятельного бинарника.

• Открытый исходный код – расширяйте под свои нужды!

[** Репозиторий на GitHub**](https://clc.to/yDlcew)

****** **[**Демо проекта**](https://clc.to/co_pow)

[Библиотека Go разработчика](http://t.me/goproglib)",6093,21,0,goproglib
5709,2025-02-26 15:04:14+00:00,"**Совет на 2025-й — будьте осторожнее с выбором работы.** 

IT-рынок штормит: массовые сокращения, заморозка найма, снижение зарплат. В такое время особенно важно отличать стоящие офферы от проходных.

Знакомо? Открываешь вакансию, а там: «Ищем middle-разработчика с опытом 10 лет, знанием 15 языков и готовностью работать за печеньки. Офис в Челябинске, релокация за ваш счет» ‍️

Чтобы не тратить время на сотни сомнительных предложений, [подпишитесь на IT Job Hub.](https://t.me/+dt0w82aLlvwxZDMy) Там мы отфильтровываем весь мусор и публикуем только избранные вакансии в стабильных компаниях:

— Зарплаты на уровне рынка, а не на уровне голодного студента
— Никаких «мы молодая и дружная семья» — только адекватные условия
— Проверенные работодатели, а не стартапы из сомнительных сфер

Вакансии удобно разбиты по тегам: #python #java #go #data #devops и по другим направлениям. Без воды и лишнего спама — только проверенные вакансии в знакомых компаниях.

**Подписывайтесь, если не хотите упустить работу мечты →** [**@proglib_jobs**](https://t.me/+dt0w82aLlvwxZDMy)",5784,1,0,goproglib
5708,2025-02-26 13:04:45+00:00,"**️ Паттерн Saga в микросервисах**

Saga – это паттерн управления распределёнными транзакциями, который позволяет избежать монолитных блокировок и традиционных ACID-ограничений.

Вместо одной большой транзакции процесс разбивается на локальные операции, каждая из которых выполняется в отдельном сервисе.

**  Два подхода к реализации**

**1. Оркестрация**

 Управляется централизованным координатором

 Каждый шаг выполняется по команде оркестратора

 Минус: если оркестратор падает – процесс замирает

В Go можно реализовать с помощью [Temporal.io](https://t.me/goproglib) или Cadence.

**2. Хореография**

 Нет центрального контроллера, сервисы реагируют на события друг друга

 Нет узкого места в виде одной точки отказа

 Минус: сложнее управлять, каскад событий может усложнить отладку

В Go можно использовать Kafka, NATS, RabbitMQ для коммуникации между сервисами.

** Какой выбрать**

Оркестрация — проще в управлении, но менее гибкая

Хореография — сложнее в отладке, но лучше масштабируется

**️**** **[**Подробнее про паттерн**](https://clc.to/iny80g)

[Библиотека Go разработчика](http://t.me/goproglib)",5355,10,0,goproglib
5707,2025-02-26 06:59:58+00:00," **Go-документация в Neovim**

godoc.nvim позволяет искать и просматривать документацию стандартных и локальных Go-пакетов прямо в редакторе, без необходимости переключаться в браузер или терминал.

**Особенности godoc**

• Быстрый поиск по стандартной библиотеке Go и вашему коду.

• Синтаксическая подсветка документации благодаря Tree-sitter.

• Интеграция с Telescope и Snacks для удобного выбора пакетов.

• Минимальные зависимости — нужен только `go doc` и `go list`.

**️**** **[**Попробовать проект**](https://clc.to/uhNMPg)

[Библиотека Go разработчика](http://t.me/goproglib)",5700,21,0,goproglib
5706,2025-02-25 14:59:13+00:00," **Новинка компьютерной литературы про Go**

Книга «Go: идиомы и паттерны проектирования» Джона Боднера — практическое руководство для разработчиков, желающих писать чистый и идиоматический код на Go. 

Она поможет углубить знания и освоить эффективные практики проектирования, особенно полезные для тех, кто уже знаком с основами языка.

**Основные темы книги:**

 **Паттерны проектирования в Go**: подробное рассмотрение шаблонов, которые помогают строить масштабируемые и поддерживаемые приложения.

 **Идиоматические конструкции**: советы по использованию особенностей Go для написания кода, соответствующего лучшим практикам сообщества.

 **Обработка ошибок и конкурентность**: рекомендации по эффективному управлению ошибками и реализации конкурентных процессов с использованием горутин и каналов.

**️**** **[**Рекомендуем к прочтению**](https://clc.to/fJY6Cw)

[Библиотека Go разработчика](http://t.me/goproglib)",5950,18,7,goproglib
5705,2025-02-25 12:00:52+00:00,"**Работа мечты в один клик **

 Мечтаешь работать в Сбере, но не хочешь проходить десять кругов HR-собеседований? Теперь это проще, чем когда-либо!

 **AI-интервью за 15 минут** – и ты уже на шаг ближе к своей новой работе.

**Как получить оффер?**

 Зарегистрируйся [**здесь**](https://clc.to/GkOTTA)
 Пройди AI-интервью
 Получи обратную связь сразу же!

HR больше не тянут время – рекрутеры свяжутся с тобой в течение двух дней! 

Реклама. ПАО СБЕРБАНК, ИНН 7707083893. Erid 2VtzquscAwp",10960,16,0,goproglib
5704,2025-02-25 06:59:58+00:00,"** Побитовые операции в Go**

Побитовые операторы работают с битами (0 и 1) и применяются к целочисленным переменным с одинаковой длиной битовой последовательности. Форматная строка %b используется для представления числа в бинарном формате.

**Основные побитовые операторы в Go:**

1. `&`: Побитовое AND
2. `|`: Побитовое OR
3. `^`: Побитовое XOR
4. `&^`: AND NOT (сброс бита)
5. `<<`: Сдвиг влево
6. `>>`: Сдвиг вправо

**Пример использования побитового оператора AND для проверки чётности числа:**
```package main

import ""fmt""

func main() {
    x := 125
    if x&1 > 0 {
        fmt.Println(""Нечётное"")
    } else {
        fmt.Println(""Чётное"")
    }
}```
В этом примере проверяется младший значащий бит числа. Если он равен 1, число нечётное; если 0 — чётное.

**Практическое применение побитовых операторов:**

 Криптография: шифрование данных часто требует манипуляций на уровне битов для обеспечения безопасности.

 Сетевые технологии: управление правами доступа и настройка сетевых протоколов могут включать операции с битовыми масками.

 Оптимизация производительности: побитовые операции позволяют эффективно выполнять задачи, такие как умножение или деление на степени двойки, сдвигая биты влево или вправо.

**️**** Подробнее про побитовые операторы **[**в источнике**](https://clc.to/Rjvd8g)

[Библиотека Go разработчика](http://t.me/goproglib)",5533,24,0,goproglib
5702,2025-02-24 13:08:42+00:00,"️ **Новый инструмент для тестирования конкурентного кода в Go**

В Go 1.24 появилась экспериментальная библиотека `testing/synctest`, которая упрощает тестирование конкурентных программ. Теперь можно контролировать время в тестах и управлять синхронизацией асинхронных операций, делая тесты более надежными и предсказуемыми.

** Что умеет **`testing/synctest`

• Позволяет тестам управлять временем с фиктивными часами.

• Упрощает тестирование горутин и асинхронных процессов.

• Делает тесты стабильнее за счет детерминированной синхронизации.

**Чтобы попробовать, нужно включить экспериментальную фичу:**
```GOEXPERIMENT=synctest go test```

**️**** **[**Подробности с примерами кода**](https://proglib.io/w/c448d541)

[Библиотека Go разработчика](http://t.me/goproglib)",5620,20,0,goproglib
5701,2025-02-24 07:05:36+00:00," **Big Data и Data Science в некоммерческом секторе**.

Big Data и Data Science применяются не только в IT-гигантах, но и в некоммерческом секторе, где технологии анализа данных помогают оптимизировать работу организаций, собирать средства и оказывать помощь эффективнее.

️** Что внутри статьи:**

▪️ Как некоммерческие организации используют Data Science.

▪️ Оптимизация фондов и финансирования с помощью аналитики.

▪️ Роль прогнозных моделей в благотворительности.

▪️ Кейсы Amnesty International, Khan Academy и DataKind.

 Вливайся в мир Big Data вместе с нашим курсом «[**Базовые модели ML и приложения**](https://proglib.academy/machine-learning-course?utm_source=tg_academy&utm_medium=post_BigDataIDataScience)»

 [**Статья Proglib**](https://clc.to/pDMg5g)",5041,2,0,goproglib
5700,2025-02-23 18:18:55+00:00," **Как ускорить API**

#инфографика про основные методы улучшения производительности API

** Какой из методов вы уже используете? Делитесь в комментариях! **

[Библиотека Go разработчика](http://t.me/goproglib)",5965,12,0,goproglib
5699,2025-02-23 15:04:58+00:00,"Документация **PostgreSQL **— лучший источник знаний о **СУБД**. Но она отличается огромным объемом: не каждый разработчик осилит 3024 страницы формата А4. 

Опытный бэкендер составил список самых важных сведений, которые ему самому хотелось бы знать перед началом работы с **PostgreSQL**. Эта подборка сэкономит вам несколько недель изучения документации, и скорее всего, пригодится для работы с другими СУБД.

 [**Список самого важного**](https://proglib.io/sh/Ynj6ZhpoG4)",4607,14,0,goproglib
5698,2025-02-23 11:05:31+00:00,"**️ Поздравляем защитников Go-разработки:**

▪️ горутины — элитный спецназ параллельного выполнения. Бросаешь в бой тысячи бойцов одной командой go.

▪️ встроенный форматтер — безжалостный диктатор стиля кода. Забудь свой любимый отступ в 2 пробела.

▪️ panic/recover — группа быстрого реагирования. Когда всё летит в тартарары, они тут как тут. 

Признавайтесь, кто ваш любимый защитник кода? ",5542,51,0,goproglib
5696,2025-02-22 12:59:58+00:00,"** Новый выпуск подкаста о Go
**
В свежем выпуске подкаста Cup o' Go ведущие обсудили актуальные темы из мира Go и провели интервью с Карлосом Беккером. 

 **Предстоящие обновления безопасности**: анонсированы обновления для пакетов `golang.org/x/oauth2` и `golang.org/x/crypto`, которые планируются на понедельник, 24 февраля.

**Анализ рынка труда**: обзор статьи Гергеля Ороса ""State of the startup and scaleup hiring markets"", где рассматриваются текущие тенденции найма в стартапах и растущих компаниях.

**Тестирование конкурентного кода**: обсуждение блога Дэмиена Нила ""Testing concurrent code with testing/synctest"", посвященного методам тестирования конкурентных программ в Go.

**Предложения по улучшению**: рассмотрение возможного принятия предложения о поддержке контентной неготации в пакете net/http.

**Интересные проекты**: упоминание проектов ""Minecraft from scratch"" и ""MyNav"" в рамках короткого обзора.

** **[**Слушать обсуждение новостей**](https://clc.to/QYu5yQ)

[Библиотека Go разработчика](http://t.me/goproglib) #подкаст",5325,7,0,goproglib
5695,2025-02-22 08:30:10+00:00," **Запоздалый ****#самыйсок**** за январь**

Собрали для вас самые интересные статьи за прошедший месяц!
[**
 Хотите порешать задачи?**](https://t.me/goproglib/5557)

[** NoCopy Convention в Go: оптимизация работы с памятью**](https://t.me/goproglib/5562)

‍[**Почему Go-разработчикам полезны тренировки на LeetCode (и почему нет)**](https://t.me/goproglib/5584)

[** Обновление Revive**](https://t.me/goproglib/5605)

[Библиотека Go разработчика](http://t.me/goproglib)",5354,5,0,goproglib
5694,2025-02-21 18:54:37+00:00,"️ **Go-инструменты без хаоса в зависимостях**

В версии Go 1.24 появилась новая функция для управления зависимостями инструментов разработки. 

Теперь вы можете добавлять, обновлять и удалять такие инструменты, как staticcheck, govulncheck и другие, используя флаг `-tool` с командой `go get`.

Чтобы добавить инструмент, выполните команду:
```go get -tool путь_к_пакету@версия```

Например, для добавления stringer и govulncheck:
```go get -tool golang.org/x/tools/cmd/stringer
go get -tool golang.org/x/vuln/cmd/govulncheck```
После этого в файле go.mod появится секция tool, содержащая добавленные инструменты.

Запуск инструментов осуществляется через команду go tool:
```go tool имя_инструмента [аргументы]```

Для обновления инструмента до последней версии используйте:
```go get -tool путь_к_пакету```

**️**** **[**Подробности в статье**](https://clc.to/PSgOzQ)

 [Канал Go-разработчика](https://t.me/goproglib)",5521,32,0,goproglib
5693,2025-02-21 15:06:36+00:00,"** Интенсив «Архитектуры и шаблоны проектирования» для middle и senior-разработчиков**

Проверьте свои знания, ответив на 8 вопросов – https://proglib.io/w/7af8c5cc

**** **Кому подойдет?**
Разработчикам, которые знают любой объектно-ориентированный язык программирования и хотят углубиться в архитектурные паттерны.

**** **Как проходит обучение?**
В течение всего интенсива вы будете создавать игру «Звездные войны» и применять ключевые архитектурные паттерны. В процессе изучите:
– Как строить гибкую архитектуру, которая не замедляет разработку
– Как применять IoC-контейнеры и писать модульные тесты
– Как использовать SOLID за пределами ООП
– Как внедрять CI/CD и снижать технический долг

 [Подробная программа обучения](https://proglib.io/w/7af8c5cc)

А по п__ромокод__у **MIDDLE** до 28 февраля вы получите дополнительную скидку на обучение",5420,9,0,goproglib
5692,2025-02-21 11:00:01+00:00, [Канал Go-разработчика](https://t.me/goproglib) #мем,5644,48,0,goproglib
5690,2025-02-21 06:59:56+00:00," **Алгоритм двух указателей **

Алгоритм двух указателей – это метод оптимизированного перебора данных с использованием двух индексов, которые двигаются навстречу друг другу, в одном направлении или с разной скоростью.

**Как это работает**

1️⃣ Два указателя устанавливаются в разные точки структуры данных (например, на начало и конец массива).

2️⃣ Они перемещаются в зависимости от условий задачи, например:

• Навстречу друг другу — для поиска пар, например, в задачах на сумму двух чисел.

• В одном направлении, но с разной скоростью — для удаления дубликатов или поиска подстроки.

3️⃣ Процесс продолжается, пока указатели не пересекутся или не выполнится нужное условие.

**Виды двух указателей**

️  Два указателя навстречу друг другу

Пример: Проверка, является ли строка палиндромом.
```func isPalindrome(s string) bool {
    i, j := 0, len(s)-1
    for i < j {
        if s[i] != s[j] {
            return false
        }
        i++
        j--
    }
    return true
}```

1. Один указатель (i) начинает с начала, другой (j) – с конца строки.

2. Если s[i] == s[j], двигаем оба указателя к центру.

3. Если где-то символы не совпадают – это не палиндром.

️ Два указателя в одном направлении

Пример: Удаление дубликатов из отсортированного массива.
```func removeDuplicates(nums []int) int {
    if len(nums) == 0 {
        return 0
    }
    j := 0
    for i := 1; i < len(nums); i++ {
        if nums[i] != nums[j] {
            j++
            nums[j] = nums[i]
        }
    }
    return j + 1
}```

1. Один указатель (i) двигается по массиву, второй (j) отслеживает уникальные элементы.

2. Если встречаем новый элемент, перемещаем его вперед.

️ **Быстрый и медленный указатели**

Пример: Нахождение цикла в связном списке (алгоритм Флойда).
```type ListNode struct {
    Val  int
    Next *ListNode
}

func hasCycle(head *ListNode) bool {
    slow, fast := head, head
    for fast != nil && fast.Next != nil {
        slow = slow.Next
        fast = fast.Next.Next
        if slow == fast {
            return true
        }
    }
    return false
}```

1. Медленный указатель движется по одному шагу, быстрый на два шага.

2. Если fast догоняет slow, значит, есть цикл.

3. Если fast достиг конца (nil), цикла нет.

Алгоритм двух указателей – это оптимальный способ обработки массивов и списков, уменьшая сложность O(N²) → O(N).

 [Канал Go-разработчика](https://t.me/goproglib)",5707,43,0,goproglib
5689,2025-02-20 12:59:56+00:00," **Мапа со швейцарской таблицей**

В Go 1.24 map реализован с использованием швейцарской таблицы (Swiss Table). Разберёмся, что это значит для разработчиков и как это влияет на производительность.

****** Что такое швейцарская таблица**

Швейцарская таблица – это продвинутый алгоритм хеш-таблиц, разработанный Google для библиотеки Abseil. Она отличается высокой плотностью хранения данных и уменьшенной нагрузкой на кеш процессора.
**
******** Главные фишки:**

• Компактное представление — хранит метаданные ключей рядом с хешами, что сокращает использование памяти.

• Эффективное разрешение коллизий — используется пробирование с SIMD: процессор обрабатывает сразу несколько элементов одновременно.

• Быстрое сканирование — поиск ключей стал намного быстрее за счёт оптимизированных операций.

Мапа в Go теперь занимает на 15-25% меньше памяти, а производительность ускорилась на 5-15%. Если в вашем коде активно используется map, он автоматически станет быстрее, потому что внешне ничего не поменялось.

**️**** **[**Подробности реализации новой map**](https://clc.to/gy0ZdQ)

 [Канал Go-разработчика](https://t.me/goproglib)",6440,68,1,goproglib
5688,2025-02-20 06:59:56+00:00,"** Minecraft на Go**

Мы нашли полноценную игру в стиле Minecraft, написанную на Go с OpenGL.

Этот проект – пример чистого кода и глубокого понимания 3D-графики, физики и генерации мира. 

****** Как запустить

**1. Склонируйте репозиторий
```git clone https://github.com/GianlucaP106/minecraft && cd minecraft```
**
**2. Запустите
```go run .```**
**
Это не просто игра, а учебный материал для тех, кто хочет изучить разработку 3D-игр без движков.

**️**** **[**Репозиторий проекта на GitHub**](https://clc.to/yNxU4A)

 [Канал Go-разработчика](https://t.me/goproglib)",6737,44,3,goproglib
5687,2025-02-19 12:59:57+00:00,"⭐️ **Starskey – быстрая key-value база данных на Go**

Starskey – это key-value хранилище, написанное на Go. Оно основано на концепции LSM-дерева (log-structured merge tree).

Преимущества:
 Cкорость работы — оптимизированная запись и чтение с помощью LSM-дерева.

ACID-транзакции обеспечивают целостность данных.

 Удаление «мусорных» ключей — автоматическая компактификация на уровнях базы.

 Минимальные зависимости —  лёгкая интеграция в проекты на Go.

**Пример:
**```package main

import (
  ""fmt""
  ""log""

  ""github.com/starskey-io/starskey""
)

func main() {
  // Открываем или создаём новую базу
  db, err := starskey.Open(""data.db"", nil)
  if err != nil {
    log.Fatal(err)
  }
  defer db.Close()

  // Записываем данные
  err = db.Put([]byte(""username""), []byte(""admin""))
  if err != nil {
    log.Fatal(err)
  }

  // Читаем данные
  value, err := db.Get([]byte(""username""))
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(""Username:"", string(value))
}```**

**Starskey подходит для встроенных решений, кеширования, локального хранения данных и даже небольших NoSQL-баз.**

******[** Подробнее о проекте**](https://clc.to/VlnAzQ)
**
** [Канал Go-разработчика](https://t.me/goproglib)",5858,12,15,goproglib
5686,2025-02-19 06:01:53+00:00,"**Вакансии «Библиотеки программиста» — ждем вас в команде!**

Мы постоянно растем и развиваемся, поэтому создали отдельную [страницу,](https://job.proglib.io/) на которой будут размещены наши актуальные вакансии. Сейчас мы ищем:
контент-менеджеров для ведения телеграм-каналов

[Подробности тут](https://job.proglib.io/)

Мы предлагаем частичную занятость и полностью удаленный формат работы — можно совмещать с основной и находиться в любом месте

Ждем ваших откликов ",5984,4,0,goproglib
5685,2025-02-18 18:15:44+00:00," **Google OAuth 2.0 в Go и React.js**

OAuth 2.0 — популярный протокол аутентификации, который позволяет безопасно работать с аккаунтами Google. Сейчас разберём как настроить проект с его использованием.

 **Настройка Google Cloud:**

Создайте OAuth-клиент в Google Cloud Console. Сохраните client_id и client_secret.

 **Бэкенд на Go:**

Используйте пакет `golang.org/x/oauth2`.

Настройте маршруты: /login, /callback, /logout.

Храните access_token и refresh_token в httpOnly cookies.

**Пример:**

```conf := &oauth2.Config{ClientID: ""..."", RedirectURL: ""...""}
url := conf.AuthCodeURL(""state"")````
`
 **Фронтенд на React:**

Создайте AuthProvider с контекстом.

Настройте Axios-интерцепторы для обновления токенов:
```axios.interceptors.response.use(resp => resp, async error => { ... });````
`
 **Ошибки и нюансы:**

• Используйте httpOnly cookies для безопасности.

• Не храните client_secret на фронтенде.

• Обновляйте токены до их истечения, чтобы избежать разлогина пользователей.

** **[**Подробный гайд с кодом**](https://clc.to/jwbcOA)

 [Канал Go-разработчика](https://t.me/goproglib)",6234,11,0,goproglib
5684,2025-02-18 10:04:42+00:00," **Многоточие в Go**

Многоточие (`...`) в Go — инструмент, который делает язык более гибким и удобным для работы с функциями, принимающими переменное количество аргументов. 

Разберемся, как и где его использовать.

****** Вариативные Функции**

Основное применение многоточия в Go — это определение вариативных функций. Такие функции могут принимать любое количество аргументов. Пример:
```func example(args ...int) {
    for _, arg := range args {
        fmt.Println(arg)
    }
}```

Вызывать эту функцию можно с разным количеством аргументов:
`example(1, 2, 3)
example(4, 5, 6, 7, 8)`

****** Передача Срезов**

Многоточие позволяет передавать срезы в вариативные функции. Это удобно, когда у вас уже есть срез, и вы хотите передать его элементы в функцию. Пример:
```slice := []int{1, 2, 3}
example(slice...)```

****** Командная Строка**

В командной строке Go многоточие используется как подстановочный знак, обозначающий ""всё в этой директории и всех поддиректориях"". Это упрощает выполнение команд для всех файлов в проекте.

****** Вариативные Интерфейсы**

Многоточие можно использовать с интерфейсами для создания вариативных интерфейсов, что позволяет функциям принимать аргументы различных типов.
 
**Пример:**
```func printAll(args ...interface{}) {
    for _, arg := range args {
        fmt.Println(arg)
    }
}```

**Вызов функции:**
```printAll(1, ""string"", 3.14)```

[Библиотека Go разработчика](http://t.me/goproglib)",6283,28,2,goproglib
5683,2025-02-17 13:08:47+00:00," **TCP-чат на Go**

TCP обеспечивает передачу данных без потерь — идеальный выбор для чата. В Go есть встроенный пакет net, который работает с TCP-соединениями.

**Основные шаги:**

1️⃣ Создание TCP-сервера: используем `net.Listen()` для ожидания подключений.

2️⃣ Обработка клиентов: каждое подключение — отдельная горутина.

3️⃣ Передача сообщений: Сервер читает сообщения и рассылает их другим клиентам.

4️⃣ Управление подключениями: Нужно учитывать отключения и ошибки.

TCP-чат на Go — отличный проект, чтобы понять сетевое программирование, горутины и каналы.

******  **[**Подробное руководство со всеми примерами**](https://clc.to/H_G9qQ)

[Библиотека Go разработчика](http://t.me/goproglib)",6848,30,12,goproglib
5682,2025-02-17 07:06:19+00:00,"** Погружение в UTF-8**

Раньше ASCII поддерживал только 128 символов. UTF-8 решил эту проблему, используя 1–4 байта для кодирования символов Unicode. Go, ориентированный на современные веб-приложения, встроил поддержку UTF-8 на базовом уровне.

****** Работа с UTF-8 в Go:**

В Go строки — это срезы байтов. Это значит, что функция `len()`покажет длину в байтах, а не количество символов. Чтобы правильно работать с UTF-8, Go предоставляет пакет unicode/utf8:
```import ""unicode/utf8""

func main() {
    str := ""Hello, 世界""
    fmt.Println(""Bytes:"", len(str))
    fmt.Println(""Runes:"", utf8.RuneCountInString(str))
}```
Результат покажет, что `len()` выдаст 13 байтов, хотя символов всего 9. Это потому, что 世界 занимает по 3 байта каждый.

****** Ошибки и подводные камни:**

Одна из распространённых ошибок — неверное предположение, что каждый символ занимает 1 байт. При обрезке строк или подсчёте символов важно использовать utf8-функции.

Также стоит помнить о валидации. Функция `utf8.Valid()` поможет убедиться, что данные корректны:
```if !utf8.Valid(data) {
    log.Fatal(""Invalid UTF-8 data"")
}```

[** Подробнее про UTF-8 в Go**](https://clc.to/syZDIQ)

[Библиотека Go разработчика](http://t.me/goproglib)",6240,28,0,goproglib
5681,2025-02-16 18:09:47+00:00," **WebAssembly: новые возможности в Go 1.24**

Go 1.24 добавляет директиву `go:wasmexport`, упрощая экспорт функций в WebAssembly и улучшая взаимодействие с WASI. 

Теперь можно создавать WASI-реакторы для многократных вызовов без переинициализации — идеально для долгоживущих WASM-приложений.

️ [**Подробнее на go.dev**](https://clc.to/Go94nw)

[Библиотека Go разработчика](http://t.me/goproglib)",6420,21,1,goproglib
5680,2025-02-16 13:07:29+00:00,"**️**** Софт-скиллы, которые выведут карьеру в IT на новый уровень**

Многие говорят о лидерстве, коммуникации и умении презентовать себя. Но будущее требует других навыков. Разбираем неочевидные soft skills, которые помогут прокачаться в IT и за рубежом.

**️**** Что внутри**

**▪️ Эмоциональный интеллект

▪️ Умение упрощать

▪️ Антихрупкость

▪️ Мультикультурность 

▪️ Предпринимательское мышление**

Эти навыки решают. Кто хочет оставаться в топе — развиваемся уже сейчас.

 Подтяните свои знания о машинном обучении вместе с нашим курсом «[**Базовые модели ML и приложения**](https://proglib.academy/machine-learning-course?utm_source=tg_academy&utm_medium=post_SoftSkilliKotorieVivedutCareeruVIT)»

[** Читать статью**](https://proglib.io/sh/TBZIfsRJ8Y)",5389,10,1,goproglib
5679,2025-02-16 10:04:35+00:00,"** Подкаст Cup o' Go #100 — вечеринка в честь релиза Go 1.24
**
Обсудили ключевые изменения в Go 1.24, работу с SQL NULL и компиляцию shell-скриптов в бинарники.

Не обошлось без докладов с GopherCon и новостей об окончании поддержки Go 1.14-1.19.

** **[**Слушать обсуждение новостей**](https://clc.to/spl9vA)

[Библиотека Go разработчика](http://t.me/goproglib) #подкаст",5575,5,0,goproglib
5677,2025-02-15 18:11:29+00:00," **Где «выстрелит» твой стартап: 8 площадок для запуска и продвижения IT-проекта**

Собрали для тебя проверенные места, где можно бесплатно показать свой продукт первым пользователям и даже найти инвестора. Работает как для зарубежного, так и для российского рынка.

** Ссылка на статью: **https://proglib.io/sh/LrcFGsnuyU",5551,3,0,goproglib
5676,2025-02-15 15:03:46+00:00,"️ **В машинном обучении, как в любви:** слишком идеальные предсказания – это подозрительно!

Когда модель слишком прилипчива к тренировочным данным, результат оказывается… ну, как в отношениях, когда всё кажется идеальным, но реальность ломает сердце.

 **Оверфиттинг (Overfitting)** – модель так хорошо запомнила тренировочные данные, что на реальных данных начинает путаться.
 В любви: «Я выбрал идеального партнёра по профилю, а в жизни выяснилось, что его «идеальность» – всего лишь иллюзия!»

** Андерфиттинг (Underfitting) –** модель обучена настолько поверхностно, что предсказывает мэтчи случайным образом.
 В любви: «Мне нравятся только люди с именем Александр, а всех остальных я даже не замечаю – бедный фильтр!»

 **Неправильный выбор фичей (Feature Selection Fail)** – если модель опирается на неважные признаки, она предсказывает мэтчи хуже случайности.
 В любви: «Ты любишь авокадо? Значит, мы созданы друг для друга!» – а потом оказывается, что это вовсе не про важное.

 На вебинаре мы разобрали, как избежать этих ошибок и создать работающую модель для speed dating, которая на самом деле помогает находить любовь! Вчера мы не просто говорили о любви – мы её предсказывали!

 Спасибо всем, кто был с нами и участвовал!

 **Как же это было?**

Если ты пропустил вебинар или хочешь пересмотреть запись – просто перейди по [[ссылке]](https://proglib.io/w/2c62dfa0) и получи видео ",5481,8,0,goproglib
5675,2025-02-15 09:07:31+00:00," **Бинарное дерево поиска (BST) в Go**

BST — это бинарное дерево, где:

• Значение в левой ветви меньше значения в узле.

• Значение в правой ветви больше значения в узле.

Такое свойство обеспечивает эффективный поиск, вставку и удаление — в среднем за O(log n).

**Пример реализации:**
```// Node — узел бинарного дерева
type Node struct {
    Value int
    Left  *Node
    Right *Node
}

// Insert — вставка нового значения в дерево
func (n *Node) Insert(value int) {
    if value < n.Value {
        if n.Left == nil {
            n.Left = &Node{Value: value}
        } else {
            n.Left.Insert(value)
        }
    } else if value > n.Value {
        if n.Right == nil {
            n.Right = &Node{Value: value}
        } else {
            n.Right.Insert(value)
        }
    }
}

// Search — поиск значения в дереве
func (n *Node) Search(value int) *Node {
    if n == nil {
        return nil
    }
    if n.Value == value {
        return n
    } else if value < n.Value {
        return n.Left.Search(value)
    } else {
        return n.Right.Search(value)
    }
}

// InOrderTraversal — обход дерева в порядке (LNR)
func (n *Node) InOrderTraversal() {
    if n == nil {
        return
    }
    n.Left.InOrderTraversal()
    fmt.Print(n.Value, "" "")
    n.Right.InOrderTraversal()
}```

**Как это работает?**

1️⃣ Вставка:

• Если значение меньше текущего узла, идём в левое поддерево.

• Если больше — в правое.

• Если узел пуст, создаём новый.

2️⃣ Поиск:

• Сравниваем искомое значение с текущим.

• Меньше — идём влево, больше — вправо, равное — нашли.

3️⃣ Обход:

• In-order обход (LNR) обходит узлы в отсортированном порядке.

** А вы уже реализовали BST? Делитесь опытом и вопросами в комментариях!**

[Библиотека Go разработчика](http://t.me/goproglib)",5427,40,0,goproglib
5674,2025-02-14 18:06:06+00:00," **Делаем конкурента DeepSeek R1-Zero на домашней пекарне: метод GRPO в Unsloth**

Обычно LLM требуют мощных GPU, но теперь даже на видеокарте с ограниченной памятью можно обучать модели логического рассуждения.

 **Фишка** — новый алгоритм GRPO, который позволяет моделям развивать логическое мышление без вмешательства человека.

**Подробнее в нашей статье:** https://proglib.io/sh/MyBCbq9is5",5333,6,0,goproglib
5673,2025-02-14 11:05:34+00:00," **CQRS и паттерн «Репозиторий**»

Перепутанные SQL-запросы, сложный рефакторинг и отсутствие тестируемости — частые проблемы монолитных приложений. 

Решить их помогают проверенные архитектурные паттерны: CQRS, который разделяет чтение и запись, и паттерн «Репозиторий», который упрощает работу с базой
**
******** Что такое CQRS**

CQRS (Command Query Responsibility Segregation) — это архитектурный паттерн, который разделяет операции чтения и записи. Вместо одного интерфейса для всех операций мы получаем две независимые модели.

**Пример интерфейсов:**
```// Интерфейс для записи
type UserCommand interface {
    Create(user *User) error
    Update(user *User) error
    Delete(id int) error
}

// Интерфейс для чтения
type UserQuery interface {
    GetByID(id int) (*User, error)
    ListAll() ([]*User, error)
}```

 **Что такое паттерн «Репозиторий»

**Паттерн «Репозиторий» — это слой между бизнес-логикой и источником данных. Он инкапсулирует логику доступа к базе и предоставляет простой интерфейс для работы с данными.
**
Пример паттерна «Репозиторий»:**
```type UserRepository interface {
    GetByID(id int) (*User, error)
    Create(user *User) error
    Update(user *User) error
    Delete(id int) error
}```
Такой интерфейс можно реализовать для разных источников данных — in-memory, MSSQL, PostgreSQL или Redis.

CQRS — это официант, который принимает заказы, а «Репозиторий» — повар. Главное — чтобы заказ не завис на «кухне»... или в deadlock’е.
[
](https://clc.to/W-voXg) [**Подробнее об этих подходах**](https://clc.to/W-voXg)

[Библиотека Go разработчика](http://t.me/goproglib)",5769,28,7,goproglib
5672,2025-02-14 06:46:09+00:00,"** Если бы языки программирования были девушками**

Выбрать язык — всё равно что найти идеального партнера. Кто-то западает на строгую типизацию, кто-то ищет простоту и гибкость, а некоторые готовы углубиться в самые сложные алгоритмы отношений. 

Мы заглянули в Тиндер разработчика и нашли там Go. Как вам?  

Еще больше прекрасных дам языков программирования — [в нашем канале Библиотека программиста](https://t.me/proglibrary/10142?single). 

**Свайпайте и выбирайте свой мэтч ️**

[Библиотека Go разработчика](http://t.me/goproglib)",5866,19,6,goproglib
5670,2025-02-13 12:59:58+00:00,"️ **Переход с React на WebAssembly**

Компания Dagger решила сделать смелый шаг — полностью заменить фронтенд на React с TypeScript на Go с WebAssembly.

**Почему отказались от React**

 • Две кодовые базы (TypeScript для фронтенда и Go для бекенда) замедляли разработку и усложняли поддержку.

• Несогласованность логики: приходилось дублировать бизнес-логику между Go и TypeScript.

• Зависимость от фронтенд-стека: сложности в поиске разработчиков с опытом React.

**Как реализовали новый интерфейс**

1.  Использовали Go-app — фреймворк для создания PWA на Go.

2. Перенесли бизнес-логику из React в Go, избегая двойного кода.

3. Настроили сборку под WebAssembly для запуска Go-кода прямо в браузере

В результате время выпуска новых фич сократилось на треть.

**️**** **[**Подробнее в блоге компании**](https://clc.to/5yhVhA)

[Библиотека Go разработчика](http://t.me/goproglib)",5961,34,3,goproglib
5669,2025-02-13 07:05:16+00:00,"** Как себя чувствует IT-рынок в 2025 году?**

Друзья, запускаем важное исследование рынка труда в IT!

Нам очень важно понять:
• Как изменились зарплаты
• Что происходит с наймом
• Есть ли сокращения или рост

 Опрос полностью анонимный
⏱️ Займёт всего 3-5 минут
 Результаты опубликуем в подробной статье

Ваши ответы помогут составить реальную картину происходящего в индустрии.

 [Пройти опрос](https://docs.google.com/forms/d/e/1FAIpQLSd4V4ESNVRL4w6iYaYqLS2LEL0YW-VmILvs0_43qYvvnte5iw/viewform)",5331,0,0,goproglib
5668,2025-02-13 06:02:18+00:00,"**Самые полезные каналы для программистов в одной подборке!**

Сохраняйте себе, чтобы не потерять 

Для всех

[Библиотека программиста](https://t.me/proglibrary) — новости, статьи, досуг, фундаментальные темы
[Книги для программистов](https://t.me/progbook)
[IT-мемы](https://t.me/itmemlib)
[Proglib Academy](https://t.me/proglib_academy) — тут мы рассказываем про обучение и курсы
[Азбука айтишника](https://t.me/abc_for_it) — здесь мы познаем азы из мира программирования

Про нейросети
[Библиотека робототехники и беспилотников | Роботы, ИИ, интернет вещей ](https://t.me/robotics_autopilots_iot)
[Библиотека нейрозвука | Транскрибация, синтез речи, ИИ-музыка ](https://t.me/neuroaudio)
[Библиотека нейротекста | ChatGPT, Gemini, Bing ](https://t.me/neuro_text)
[Библиотека нейровидео | Sora AI, Runway ML, дипфейки ](https://t.me/neurovidos)
[Библиотека нейрокартинок | Midjourney, DALL-E, Stable Diffusion ](https://t.me/neurokartinka)

#️⃣C#

[Книги для шарпистов | C#, .NET, F#](https://t.me/csharpprogbook)
[Библиотека шарписта ](https://t.me/csharpproglib)— полезные статьи, новости и обучающие материалы по C#
[Библиотека задач по C#](https://t.me/csharp_problems_lib) — код, квизы и тесты
[Библиотека собеса по C#](https://t.me/csharp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Вакансии по C#, .NET, Unity Вакансии по PHP, Symfony, Laravel](https://t.me/csharpdevjob)

️DevOps

[Библиотека devops’а](https://t.me/devopsslib) — полезные статьи, новости и обучающие материалы по DevOps
[Вакансии по DevOps & SRE](https://t.me/devopssjob)
[Библиотека задач по DevOps](https://t.me/devops_problems_lib) — код, квизы и тесты
[Библиотека собеса по DevOps](https://t.me/devops_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования

PHP

[Библиотека пхпшника](https://t.me/phpproglib) — полезные статьи, новости и обучающие материалы по PHP
[Вакансии по PHP, Symfony, Laravel](https://t.me/phpdevjob)
[Библиотека PHP для собеса](https://t.me/php_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по PHP](https://t.me/php_problems_lib) — код, квизы и тесты

Python

[Библиотека питониста](https://t.me/pyproglib) — полезные статьи, новости и обучающие материалы по Python
[Вакансии по питону, Django, Flask](https://t.me/pydevjob)
[Библиотека Python для собеса](https://t.me/py_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Python](https://t.me/py_problems_lib) — код, квизы и тесты

Java

[Книги для джавистов | Java ](https://t.me/javaprogbook)
[Библиотека джависта](https://t.me/javaproglib) — полезные статьи по Java, новости и обучающие материалы
[Библиотека Java для собеса](https://t.me/java_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Java](https://t.me/java_problems_lib) — код, квизы и тесты
[Вакансии для java-разработчиков](https://t.me/javadevjob)

Data Science

[Книги для дата сайентистов | Data Science](https://t.me/dsprogbook)
[Библиотека Data Science](https://t.me/dsproglib) — полезные статьи, новости и обучающие материалы по Data Science
[Библиотека Data Science для собеса](https://t.me/ds_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Data Science](https://t.me/ds_problems_lib) — код, квизы и тесты
[Вакансии по Data Science, анализу данных, аналитике, искусственному интеллекту](https://t.me/datajob)

Go

[Книги для Go разработчиков](https://t.me/goprogbook)
[Библиотека Go разработчика](https://t.me/goproglib) — полезные статьи, новости и обучающие материалы по Go
[Библиотека Go для собеса](https://t.me/go_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Go](https://t.me/go_problems_lib) — код, квизы и тесты
[Вакансии по Go](https://t.me/godevjob)

C++

[Книги для C/C++ разработчиков](https://t.me/cppprogbook)
[Библиотека C/C++ разработчика](https://t.me/cppproglib) — полезные статьи, новости и обучающие материалы по C++
[Библиотека C++ для собеса](https://t.me/cpp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по C++](https://t.me/cpp_problems_lib) — код, квизы и тесты
[Вакансии по C++](https://t.me/cppdevjob)

Другие каналы

[Библиотека фронтендера](https://t.me/frontendproglib)
[Библиотека мобильного разработчика](https://t.me/mobileproglib)
[Библиотека хакера](https://t.me/hackproglib)
[Библиотека тестировщика](https://t.me/testerlib)
[Вакансии по фронтенду, джаваскрипт, React, Angular, Vue](https://t.me/jsdevjob)
[Вакансии для мобильных разработчиков](https://t.me/mobiledevjob)
[Вакансии по QA тестированию](https://t.me/testerrjob)
[InfoSec Jobs — вакансии по информационной безопасности](https://t.me/hackdevjob)
[Библиотека разработчика игр | Gamedev, Unity, Unreal Engine](https://t.me/gameproglib)

Чтобы добавить папку с нашими каналами, нажмите [сюда](https://t.me/addlist/17y04EbNMrlhNjZi)

Также у нас есть боты:
[Бот с IT-вакансиями](http://t.me/proglib_job_bot)
[Бот с мероприятиями в сфере IT](http://t.me/event_listener_bot)

Мы в других соцсетях:
[VK](https://vk.com/proglib)
[YouTube](https://www.youtube.com/c/%D0%91%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%B0)
[Дзен](https://zen.yandex.ru/proglib)
[Facebook](https://www.facebook.com/proglib/?locale=ru_RU) *
[Instagram](https://www.instagram.com/proglibrary/) *

__* Организация Meta запрещена на территории РФ__",4932,0,0,goproglib
5667,2025-02-12 12:59:58+00:00,"️ **Практическое руководство по Go**

Нашли удобный ресурс для изучения Go на примерах кода. Он построен в формате ""пример + объяснение"". Темы сгруппированы по уровням сложности, начиная с основ синтаксиса и заканчивая конкурентным программированием.

**Примеры тем**:

 Переменные и типы данных — объявление переменных, использование const и :=.

 Циклы и условия — for, if-else, switch.

 Функции и замыкания — объявление, передача аргументов, использование анонимных функций.

 Структуры и интерфейсы — работа со сложными типами данных.

 Горутины и каналы — конкурентное программирование в Go.

 Файлы, потоки, HTTP-запросы — ввод-вывод, сетевое взаимодействие.

[** Изучить примеры Go-кода**](https://clc.to/VRwFuQ)

[Библиотека Go разработчика](http://t.me/goproglib)",5561,17,0,goproglib
5666,2025-02-12 06:59:58+00:00,"**🆚 Go vs C#**

Выбор языка — это всегда компромисс между производительностью, удобством и экосистемой. Давайте разберёмся, чем отличаются Go и C#.

 **Область применения**

• Go: создан Google, ориентирован на простоту, скорость и параллельность. Отлично подходит для облачных сервисов, микросервисов и высоконагруженных систем.

• C#: язык Microsoft, мощный инструмент для корпоративных решений, игр (Unity) и десктопных приложений.

 **Кроссплатформенность**

• Go: отлично компилируется под разные платформы без зависимостей.

• C#: поддерживает кроссплатформенность через .NET Core, но требует среды выполнения.

 **Система типов**

• Go: строгая, но минималистичная. Отсутствует наследование, но есть интерфейсы.

• C#: мощная объектно-ориентированная система с поддержкой дженериков, интерфейсов и функционального программирования.

 **Где какой язык лучше**

Выбирайте Go, если:

 Нужна максимальная производительность без лишней сложности.
 Работаете с микросервисами, API, контейнерами, облачными сервисами.
 Важна лёгкость развертывания без сложных зависимостей.

Выбирайте C#, если:

 Разрабатываете десктопные приложения или сервисы под Windows.
 Нужна мощная экосистема с продвинутыми библиотеками.
 Создаёте игры на Unity.

[**️ Подробное сравнение в статье**](https://clc.to/0z6IsA)

[Библиотека Go разработчика](http://t.me/goproglib)",11202,55,0,goproglib
5662,2025-02-11 13:04:40+00:00," **Gowall: цветовая палитра начинается с вдохновения**

Gowall – это CLI-инструмент, который превращает любое изображение в красивую цветовую схему. Поддерживает Catppuccin, Nord, Gruvbox, Solarized и другие темы. Для тех, кто устал настраивать цвета вручную.

**Что умеет Gowall**:

 Извлекать цветовую схему из любого изображения.

 Преобразовывать изображения в пиксель-арт.

 Масштабировать картинки с улучшением качества.

 Автоматически инвертировать цвета и заменять их на заданные.

Написан на Go для разработчиков, дизайнеров и любителей кастомизации!

** **[**Исходный код проекта в репозитории**](https://clc.to/MbhduQ)

[Библиотека Go разработчика](http://t.me/goproglib)",5482,1,0,goproglib
5661,2025-02-11 09:21:11+00:00,"**  Как не сломать продакшен: 8 основных паттернов распределенных систем**

Разработка распределённых систем сопряжена с множеством вызовов: от управления состоянием и взаимодействия сервисов до обработки отказов и масштабирования. Чтобы упростить решение этих задач, инженеры используют проверенные временем архитектурные паттерны. 

В статье рассматриваются ключевые шаблоны, помогающие строить надёжные и эффективные распределённые системы.

[**️ Читать статью**](https://proglib.io/sh/JMoAX8FZRs)

[Библиотека devops'a](https://t.me/devopsslib)",4853,0,0,goproglib
5660,2025-02-10 12:59:58+00:00," **Асинхронное кэширование в Go**

SturdyC – это легковесная, но мощная библиотека кэширования для Go, которая поможет уменьшить нагрузку и повысить производительность.

** Что делает SturdyC особенным**

• Объединение запросов (Request Coalescing). Предотвращает лавины запросов, если кэш отсутствует.

• Асинхронное обновление данных. Данные обновляются в фоне, не блокируя основной поток.

• Минимизация блокировок. Неблокирующие чтения + умное шардирование.

• Гибкие настройки. Адаптируется под разные сценарии кэширования.

**Пример использования:**
```package main

import (
    ""fmt""
    ""github.com/viccon/sturdyc""
    ""time""
)

func main() {
    cache := sturdyc.New[string, string](time.Minute)

    cache.Set(""user_1"", ""John Doe"")
    
    value, found := cache.Get(""user_1"")
    if found {
        fmt.Println(""User found in cache:"", value)
    } else {
        fmt.Println(""User not in cache"")
    }
}```

**️**** **[**Репозиторий проекта на GitHub**](https://clc.to/wY-9aw)

[Библиотека Go разработчика](http://t.me/goproglib)",5918,10,2,goproglib
5659,2025-02-10 10:06:59+00:00,"** Разработка CLI-приложения с миграциями и генерацией кода**

Показываем ещё один пример приложения на Go. В нём можно попрактиковать:

• Настройку окружения: подключение PostgreSQL к Go.

• Работу с миграциями: управление схемами базы данных.

• Генерацию кода: ускоряем разработку и минимизируем ошибки.

• CLI-инструменты: автоматизация работы с БД.
**
Как это можно использовать**

1️⃣  Менеджер задач. Создаешь CLI-приложение, где можно добавлять, удалять и редактировать задачи в БД.

2️⃣  Блог-платформа. Автоматически генерируешь код для работы с постами, комментариями и пользователями.

3️⃣  CRM-система. База клиентов, заказы, отчеты – все управляется через CLI.

** **[**В статье**](https://clc.to/uvuFcA)** всё подробно разобрано с кодом и пояснениями.**

[Библиотека Go разработчика](http://t.me/goproglib)",6923,11,0,goproglib
5658,2025-02-09 13:04:15+00:00,"️ **Управление памятью с weakPackage**

Go 1.24 привнес нововведение — пакет weak, который позволяет использовать слабые указатели для оптимизации работы с памятью.

** Что такое слабые указатели**

Обычно, когда в Go создается переменная, она не удаляется из памяти, пока на нее есть ссылки. Это приводит к возможным утечкам памяти в кэше или структурах данных, которые «забывают» очистить объекты.

Слабые указатели решают эту проблему: они не мешают сборке мусора — объект удаляется, если на него нет сильных ссылок.

 **Как это работает **

```package main

import (
    ""fmt""
    ""runtime/weak""
)

func main() {
    obj := &struct{ Data string }{""Hello, Weak!""}
    
    ref := weak.New(obj) // Создаем слабую ссылку

    obj = nil // Убираем сильную ссылку

    runtime.GC() // Принудительно запускаем GC

    if ref.Get() == nil {
        fmt.Println(""Object was garbage collected!"")
    } else {
        fmt.Println(""Object is still alive:"", ref.Get())
    }
}```
**Важно**: `weak.Get() `возвращает `nil`, если объект был удален сборщиком мусора.

 **Где это полезно**

Пример кэширования с weak:
```cache := make(map[string]*weak.Ref)

func getCachedData(key string) *Data {
    if ref, found := cache[key]; found {
        if data := ref.Get().(*Data); data != nil {
            return data
        }
    }
    newData := fetchDataFromDB(key)
    cache[key] = weak.New(newData)
    return newData
}```
Если кэшированный объект перестанет использоваться, Go автоматически освободит память.

[** Подробнее про слабые указатели**](https://clc.to/_0LGGQ)

[Библиотека Go разработчика](http://t.me/goproglib)",5789,32,14,goproglib
5657,2025-02-09 07:45:55+00:00,"**Как применять сторителлинг на IT-собеседовании**

Чтобы выделиться среди других кандидатов, можно использовать сторителлинг — инструмент, который помогает не только запомниться работодателю, но и показать свои софт-скиллы и опыт в выгодном свете.

**️**** Что внутри статьи:
**
▪️ Почему сторителлинг работает лучше сухого перечисления навыков.

▪️ Советы по созданию историй для IT-собеседований.

▪️ Готовые примеры успешных историй.

 [**Читать статью**](https://proglib.io/sh/TC2PN0Wzeo)

 Чтобы подготовиться к IT-собеседованию, попробуйте наш курс **«**[**Алгоритмы и структуры данных**](https://proglib.academy/mathspro?utm_source=tg_academy&utm_medium=post_KakPrimenyatStorytelling)**»**",4876,7,0,goproglib
5656,2025-02-08 18:12:09+00:00,"⏳**Разбираем cron-like решения**

Иногда в приложениях нужно выполнять задачи по расписанию: чистить кеши, отправлять отчёты или делать бэкапы. В Go есть несколько способов — от стандартных инструментов до сторонних библиотек.

 Простой вариант —` time.AfterFunc()` или `time.Ticker()`

`time.AfterFunc` позволяет выполнить функцию однократно после заданной задержки:
```time.AfterFunc(3*time.Second, func() {
        fmt.Println(""Executed after 3 seconds"")
    })```
`
ticker` используется для периодического выполнения задач через определенные интервалы времени:
```ticker := time.NewTicker(2 * time.Second)
    defer ticker.Stop()

    for i := 0; i < 3; i++ {
        <-ticker.C
        fmt.Println(""Task executed at:"", time.Now())
    }```


 Сторонние библиотеки `robfig/cron` и `gocron`

robfig/cron поддерживает синтаксис crontab для планирования задач:
```c := cron.New()

    // Планируем задачу каждые 5 секунд
    c.AddFunc(""*/5 * * * * *"", func() {
        fmt.Println(""Cron job executed at:"", time.Now())
    })

    c.Start()```

gocron предлагает простой API для повторяющихся задач:
```s := gocron.NewScheduler(time.UTC)

    s.Every(10).Seconds().Do(func() {
        fmt.Println(""Scheduled task executed at:"", time.Now())
    })

    s.StartAsync()```

 Системный `cron`

Вместо того чтобы держать Go-процесс постоянно запущенным, можно использовать системный демон `cron` для выполнения Go-скриптов.
```* * * * * /path/to/your-go-program```

Если нужна простая задержка – хватит `time.Ticker()`. Если расписание сложнее – берём `cron` или `gocron`.

**️**** Разбор всех вариантов — **[**в статье**](https://clc.to/HB6dQQ)

[Библиотека Go разработчика](http://t.me/goproglib)",6798,27,0,goproglib
5655,2025-02-08 13:03:05+00:00,"** Новый выпуск подкаста о Go
**
В последнем эпизоде подкаста Cup o' Go ведущие обсуждают актуальные события в мире Go. 

**Основные темы выпуска:**

 Обновления безопасности: релизы Go 1.23.6, 1.22.12 и кандидат на релиз 1.24rc3, включающие важные исправления уязвимостей.

 Предложение по автоматизации миграций: принятие предложения `cmd/fix` для автоматизации простых депрекаций.

 Атаки на цепочки поставок: обсуждение недавней вредоносной активности, использующей кэширование Go Module Proxy для сохранения вредоносных пакетов.

** **[**Слушать обсуждение новостей**](https://clc.to/7UvU8g)

[Библиотека Go разработчика](http://t.me/goproglib) #подкаст",5420,5,0,goproglib
5654,2025-02-08 07:04:18+00:00,"** Какие вебинары вам действительно нужны?**

Привет, Go-разработчики! 

Мы готовим новые вебинары и хотим сделать их максимально полезными для вас. Это поможет нам не только создавать актуальный контент, но и развивать проект, находя новые точки контактов для вас.

Ваши ответы дадут нам понимание, какие темы и форматы действительно важны, а также помогут сделать вебинары интереснее и продуктивнее.

Заполнение займет всего пару минут, а нам это очень поможет! Спасибо, что участвуете в нашем развитии! 
**
 **[**Пройти опрос**](https://clc.to/Jt3GNw)",5364,2,0,goproglib
5653,2025-02-07 18:04:10+00:00,"**  AI угадывает, что на картинке**

Go хоть и не самый популярный язык в сфере AI, но его простота, производительность и удобная работа с сетью делают его интересным выбором для таких задач. 

Интеграция с Gemini Pro Vision позволяет разработчикам без сложных настроек использовать компьютерное зрение в своих приложениях.

 Реализация: изображение кодируется в base64, отправляется в API Gemini Pro Vision, а затем AI анализирует пиксели и пытается угадать, что на картинке. 

Прежде чем приступать к изучению кода — [попробуйте демо](https://clc.to/hycDEQ) 

****** **[**Подробнее о реализации**](https://clc.to/12XjRQ)

[Библиотека Go разработчика](http://t.me/goproglib)",5860,7,0,goproglib
5652,2025-02-07 10:59:58+00:00,"**  GitHub в стиле TikTok**

GitTok — это новый способ исследовать репозитории GitHub.  

Вместо привычного поиска и просмотра списков, пользователи просто свайпают через репозитории, как в TikTok, мгновенно получая основную информацию: описание, количество звёзд и недавнюю активность.

️[** Попробовать полистать репозитории**](https://clc.to/zOuVZA)

[Библиотека Go разработчика](http://t.me/goproglib)",6388,45,0,goproglib
5651,2025-02-06 18:16:18+00:00," **Отправка push-уведомлений с помощью Go**

Если вам нужно регулярно напоминать себе о важных делах, целях или просто получать мотивационные сообщения, можно настроить автоматическую систему push-уведомлений.

** Что понадобится**:

1. Аккаунт Pushover, сервиса для отправки push-уведомлений.

2. API-ключ Pushover. Нужен для авторизации и отправки сообщений.

3. Файл с вашими целями. Обычный .txt с напоминаниями.

** Как это работает:**

В файле хранятся ежедневные цели. Бот, написанный на Go, выбирает одну из целей — случайным образом или в заданном порядке — и отправляет её через Pushover в виде push-уведомления. Это происходит автоматически каждый день в установленное время.

 **Интересная идея? Или в вашей жизни достаточно таск-трекеров? Ждём ваши мысли в комментариях**

**️**** **[**Посмотреть реализацию бота**](https://clc.to/4oT1YQ)

[Библиотека Go разработчика](http://t.me/goproglib)",6351,11,2,goproglib
5649,2025-02-06 11:05:50+00:00," **Минорное обновление Go

**Недавно вышло свежее обновление Go версии 1.23.6. Сейчас разберём, что изменилось:

**1️⃣**** Безопасность**: исправлены уязвимости в пакете crypto/elliptic.

2️⃣ **Компилятор**: устранены ошибки, повышающие стабильность и производительность.

3️⃣ **Команда go**: исправлены баги, улучшающие работу с инструментами командной строки.

Критичных нововведений нет, но обновиться стоит, особенно если у вас криптография в проекте.

**️**** **[**Подробнее в GitHub milestones**](https://clc.to/r8hGMQ)

[Библиотека Go разработчика](http://t.me/goproglib)",5691,7,3,goproglib
5648,2025-02-05 18:17:58+00:00,"** Декларативная валидация данных в Go **

Zog – это библиотека, вдохновлённая Zod. Она позволяет гибко и декларативно проверять входные данные, минимизируя ручную обработку ошибок.

****** Где пригодится**

• Валидация JSON-запросов в API

• Проверка параметров HTTP-запросов

• Чтение и проверка переменных окружения

• Минимизация кода валидации и ошибок

**Пример использования:**
```var UserSchema = zog.Object(map[string]zog.Schema{
  ""username"": zog.String().Min(3).Max(20),
  ""email"":    zog.String().Email(),
  ""age"":      zog.Number().Min(18),
})

func main() {
  data := map[string]interface{}{
    ""username"": ""go_dev"",
    ""email"":    ""test@proglib.io"",
    ""age"":      25,
  }

  parsed, err := UserSchema.Parse(data)
  if err != nil {
    fmt.Println(""Ошибка валидации:"", err)
    return
  }

  fmt.Println(""Успешно:"", parsed)
}```
Создаём схему UserSchema, где username должен быть строкой длиной от 3 до 20 символов, email – валидным email-адресом, а age – числом не меньше 18. Передаём тестовый JSON и проверяем его с помощью UserSchema.Parse().
**
**А как вы валидируете данные? Напишите в комментарии**

**[** Официальный репозиторий проекта**](https://clc.to/zMEzfg)

[Библиотека Go разработчика](http://t.me/goproglib)",7723,38,8,goproglib
5647,2025-02-05 14:49:31+00:00,"**Swipe right or swipe left**

Что делать, если твои мэтчи в жизни не такие точные, как твой код? 

Спокойно, **14 февраля в 19:00 по МСК** мы разберём, как ML анализирует speed dating и предсказывает match.

 Мы возьмем реальные данные со speed dating.

 Обучим модель, которая скажет: match или swipe left.

 Разберём, какие признаки реально важны (спойлер: работа в IT — не прям гарантия успеха (наши маркетологи подтверждают ).

 Приходи, если хочешь прокачать свой Python, ML и, возможно, станешь идеальной парой, как самый стильные форсы. 

 ** **[**Записаться**](https://proglib.io/w/2c62dfa0)",5667,9,1,goproglib
5646,2025-02-05 13:04:23+00:00,"****** База данных, выдерживающая триллионы запросов**

Google Spanner — это уникальная распределённая SQL-база данных, сочетающая масштабируемость NoSQL и согласованность реляционных БД. 

**Как обрабатываются триллионы строк**

 **Шардирование и динамическое распределение**. Данные разделены на «сплиты», которые автоматически перераспределяются между серверами в зависимости от нагрузки.

******Алгоритм Paxos.** Позволяет реплицировать данные между датацентрами без потери согласованности.

 **TrueTime API**. Google использует атомные и GPS-часы, чтобы обеспечить точную синхронизацию времени между серверами.

**Где применяется**

• Google Ads — миллиарды запросов в день

• Google Play — обработка глобальных транзакций

• YouTube — хранение и управление огромными объёмами данных

[** Подробнее про Spanner**](https://clc.to/hECWjQ)

[Библиотека Go разработчика](http://t.me/goproglib)",5840,13,2,goproglib
5645,2025-02-04 18:15:02+00:00,"️ **Оптимизация запросов в Go с real-time batching**

Real-time batching — это стратегия обработки входящих данных, при которой вместо выполнения каждой операции по одной они накапливаются в батч и обрабатываются вместе через небольшие интервалы времени.

** ********Как это работает пошагово**

1️⃣ **Сбор событий в буфер** — вместо того чтобы сразу обрабатывать каждое событие, мы добавляем его в очередь или в канал.

2️⃣ **Таймер или лимит батча** — если прошло, например, 50 мс, или набралось 100 событий, запускается обработка.

3️⃣ **Групповая обработка** — все собранные события обрабатываются одним запросом к базе данных, API или другому ресурсу.

****** Где применяется**

• Базы данных – массовые INSERT и UPDATE, минимизирующие нагрузку

• Очереди сообщений – накопление сообщений перед отправкой

• Логирование – запись логов блоками вместо построчной записи

• Аналитика – сбор событий перед отправкой в мониторинговую систему

️** **[**Подробности с примерами кода в статье**](https://clc.to/2A4F9w)

[Библиотека Go разработчика](http://t.me/goproglib)",6122,27,4,goproglib
5644,2025-02-04 11:07:29+00:00,"** Проблемы с float в Go**

В Go, как и в других языках, float32 и float64 могут выдавать неожиданные результаты из-за особенностей их представления в памяти.

Числа хранятся в двоичной системе, что приводит к ошибкам округления. Например, простое сложение может дать неточный результат:
```fmt.Println(0.1 + 0.2) // 0.30000000000000004```

Нельзя просто так взять и сравнить два числа с плавающей запятой. Проверка a == b может неожиданно вернуть false, если числа рассчитаны в разное время или через разные выражения.

️ **Как избежать проблем**

• Использовать пакет Decimal

Вместо стандартных float-чисел можно применять пакет Decimal, который работает с точностью до нужного количества знаков.

• Сравнивать с учётом эпсилона

Когда сравниваете float-значения, лучше учитывать небольшую допустимую разницу:
```const epsilon = 1e-9
if math.Abs(a-b) < epsilon {
    fmt.Println(""Числа равны"")
}```

• Переключаться на целые числа

Если возможно, стоит использовать int или хранить денежные значения в копейках (например, 100 рублей = 10000 копеек).

[** Больше примеров в статье**](https://clc.to/dm7now)

[Библиотека Go разработчика](http://t.me/goproglib)",5798,25,0,goproglib
5643,2025-02-03 18:19:23+00:00,"**‍ Гибкое тестирование в Go**

Ginkgo это BDD-фреймворк (Behavior-Driven Development), который упрощает написание структурированных и читаемых тестов. 

В отличие от стандартного testing пакета, Ginkgo дает гибкую систему организации тестов, поддержку параллельного выполнения, мощные моки и матчеры, а также удобный вывод результатов.

Особенно полезен Ginkgo для юнит-тестов, интеграционного тестирования и TDD-подхода. Он активно используется в Kubernetes, где тестирование играет ключевую роль. 

**Пример использования фреймворка:**
```func TestMain(t *testing.T) {
  RunSpecs(t, ""Main Suite"")
}

var _ = Describe(""Простая арифметика"", func() {
  Context(""Операция сложения"", func() {
    It(""должна правильно складывать числа"", func() {
      sum := 2 + 3
      if sum != 5 {
        Fail(""Сумма 2 + 3 должна быть равна 5"")
      }
    })
  })
})```

**️**[** Документация проекта**](https://clc.to/23-4jw)

[Библиотека Go разработчика](http://t.me/goproglib)",5795,38,0,goproglib
5642,2025-02-03 11:04:52+00:00,"** Проблема зависания Go-приложений в Steam**

Если вы создаёте приложения на Go и запускаете их через Steam, например, игры, то можете столкнуться с неожиданной проблемой — программа зависает без очевидных причин.

 Эта ошибка затрагивает даже простые консольные приложения и связана с конфликтом между Steam Overlay и рантаймом Go.

Всё указывает на то, что gameoverlayrenderer64.dll, отвечающая за наложение Steam Overlay, конфликтует с механизмом асинхронной предвыборки в Go. 

****** Как исправить**

Чтобы обойти этот баг, можно отключить асинхронную предвыборку при компиляции Go-приложения. Добавьте следующий флаг в команду сборки:
```go build -ldflags=""-X=runtime.godebugDefault=asyncpreemptoff=1""```

Это позволит избежать зависания, но может повлиять на производительность приложения, так как отключается часть оптимизаций управления потоками.

Эта проблема уже обсуждается в сообществе Go-разработчиков, и можно ожидать её решения в будущих релизах. 

**️**** Обсуждение проблемы в **[**Steam**](https://clc.to/2IP4iQ)** и **[**GitHub**](https://clc.to/ISwvSA)

[Библиотека Go разработчика](http://t.me/goproglib)",6038,18,0,goproglib
5641,2025-02-02 18:45:12+00:00,"**  Минимум аллокаций в Go**

Zero-Allocation в Go — это мощный «инструмент», который помогает снизить нагрузку на GC и улучшить производительность

**1️⃣**** Используйте**` strings.Builder`** вместо «+» для строк**

• Конкатенация + создает новую строку в куче.

• strings.Builder позволяет избежать лишних аллокаций.

**2️⃣**** Предварительно задавайте емкость срезов **`(make([]T, 0, cap))`

• append() расширяет массив и выделяет новую память.

• Если емкость известна заранее, лучше использовать make.

**3️⃣**** Используйте **`copy()` **вместо** `append()`** для дубликатов срезов**

• copy копирует данные без создания новых объектов.

**4️⃣**** Не передавайте указатели, если объект помещается в стек**

• Переменные, переданные по указателю, могут уйти в кучу из-за escape-анализа.
**
****5️⃣**** Используйте **`sync.Pool`** для повторного использования объектов**

Перед оптимизацией профилируйте код, чтобы понять, где реально нужны улучшения

**️**** Примеры для каждого приема**[** в статье**](https://clc.to/vHDNTA)

[Библиотека Go разработчика](http://t.me/goproglib)",6532,47,17,goproglib
5639,2025-02-02 13:04:47+00:00,"**‍ Shell-скрипты на Go**

Библиотека script позволяет загружать и обрабатывать содержимое файлов, запускать внешние программы и анализировать их вывод, а также фильтровать текст – искать строки по шаблонам, заменять текст и сортировать данные.

С её помощью можно работать с HTTP-запросами, обрабатывать веб-страницы и структурированные данные.

**️**** Примеры:**

Запуск команды и анализ вывода
```count, err := script.Exec(""ps aux"").Match(""nginx"").CountLines()
    if err != nil {
        fmt.Println(""Ошибка:"", err)
        return
    }
    fmt.Printf(""Запущено %d процессов nginx\n"", count)```

Чтение файла и фильтрация строк
```count, err := script.File(""server.log"").Match(""ERROR"").CountLines()
    if err != nil {
        fmt.Println(""Ошибка:"", err)
        return
    }
    fmt.Printf(""Найдено %d строк с ошибками\n"", count)```
**
**Работа с HTTP-запросами
```script.Get(""https://golang.org"").
        Match(""Go"").
        Stdout()```

[Библиотека Go разработчика](http://t.me/goproglib)",5895,23,0,goproglib
5638,2025-02-01 13:07:23+00:00," **Современный подход к работе с IP**

Пакет net/netip – современное решение для работы с IP-адресами в Go. Он заменяет устаревший тип net.IP и предлагает компактные, неизменяемые и безопасные структуры для работы с IPv4 и IPv6

**Основные типы и функции:**

• `netip.Addr`
Этот тип представляет IP-адрес и поддерживает как IPv4, так и IPv6.  Методы типа позволяют проверить, к какому семейству адресов относится IP или определить его особенности, такие как принадлежность к loopback или multicast группам.

•` netip.Prefix`
Используется для описания комбинации IP-адреса и сетевой маски.

• `ParseAddr `и` ParsePrefix`
Пакет включает функции для преобразования строкового представления адресов и префиксов в объекты нужных типов.

****** **[**Документация по пакету**](https://clc.to/7VUG_g)

[Библиотека Go разработчика](http://t.me/goproglib)",6055,25,1,goproglib
5637,2025-02-01 07:07:19+00:00,"** ТОП-11 книг по базам данных в 2025 году**

Хотите разобраться в базах данных, но не знаете, с чего начать? Мы подготовили подборку из 11 лучших книг, которые помогут вам освоить раздичные базы данных, паттерны и антипаттерны, а также оптимизацию запросов.

 [**Читайте в статье**](https://proglib.io/sh/ajLKB6yG3Y)",5210,12,3,goproglib
5636,2025-01-31 18:08:09+00:00,"️ **Продвинутое логирование в Go**

Библиотека Zap, разработанная компанией Uber, предоставляет высокопроизводительное структурированное логирование с поддержкой различных уровней логов.

****** Zap предлагает несколько способов создания логгеров:**

• zap.NewProduction(): выводит логи в формате JSON с минимальным уровнем Info.

• zap.NewDevelopment(): выводит логи в удобочитаемом формате с минимальным уровнем Debug.

• zap.NewExample(): имеет настройки, схожие с zap.NewDevelopment().

****** Уровни логирования в Zap:**

• Debug: подробные сообщения для отладки.

• Info: информационные сообщения о нормальной работе приложения.

• Warn: предупреждения о проблемах, не требующие немедленного вмешательства.

• Error: сообщения об ошибках, которые требуют внимания, но не приводят к остановке приложения.

• DPanic: ошибки, которые вызывают панику в режиме разработки; в продакшене записываются как ошибки.

• Panic: запись сообщения и вызов паники, приводящей к остановке программы.

• Fatal: запись сообщения и завершение программы с кодом выхода 1.

**Пример использования Zap:**
```package main

import (
    ""go.uber.org/zap""
)

func main() {
    // Создание логгера с настройками для разработки
    logger, _ := zap.NewDevelopment()
    defer logger.Sync() // Очистка буферов перед завершением

    // Запись различных уровней логов
    logger.Debug(""Это сообщение уровня DEBUG"")
    logger.Info(""Это сообщение уровня INFO"")
    logger.Warn(""Это сообщение уровня WARN"")
    logger.Error(""Это сообщение уровня ERROR"")
}```

**️**** **[**Подробнее про Zap**](https://clc.to/Q48XRQ)

[Библиотека Go разработчика](http://t.me/goproglib)",5901,37,3,goproglib
5635,2025-01-31 07:06:18+00:00,"**️ Как не попасть в токсичную компанию: чек-лист для айтишника**

C офферами от Сбера, Вконтакте, Яндекса и других айтишных гигантов все понятно — это стабильные компании, работать в которых мечтают многие. 

Но вот что делать, если вас зовут работать в ноунейм-компанию, при этом предлагают з/п сильно выше рынка, полную удаленку и 100500 «плюшек»?

Рассказываем, как проверить будущего работодателя и не оказаться в компании-однодневке с невыплатами зарплаты и токсичной культурой.

 [**Читать статью**](https://proglib.io/sh/dC7oaOLMjH)",5187,4,2,goproglib
5634,2025-01-30 13:05:43+00:00,"‍ **Создание сервиса сокращения URL на Go**

Сервис сокращения URL — отличный способ улучшить навыки веб-разработки и работы с Go. В этом проекте используется база данных Redis и контейнеризация с помощью Docker.

**Этапы разработки:**

1️⃣ **Инициализация проекта**: создайте новый каталог для проекта и инициализируйте модуль Go с помощью команды go mod init.

2️⃣ **Установка зависимостей**: установите необходимые пакеты, такие как redis и mux для маршрутизации HTTP-запросов.

3️⃣ **Определение моделей данных**: создайте структуры для входящих и исходящих данных, например, ShortenRequest для исходного URL и ShortenResponse для сокращенного URL.

4️⃣ **Настройка хранилища Redis**: реализуйте функции для сохранения и извлечения URL-адресов из Redis.

5️⃣ **Реализация обработчиков API**: создайте обработчики для сокращения URL и перенаправления, обрабатывающие HTTP-запросы и взаимодействующие с хранилищем данных.

6️⃣ **Настройка маршрутизатора**: настройте маршруты для обработки запросов на сокращение URL и перенаправление, используя mux.

7️⃣ **Docker'изация приложения**: создайте Dockerfile и docker-compose.yml


 Подробное описание каждого этапа [в источнике](https://clc.to/kwamZw).
Или можно посмотреть[ исходный код на GitHub](https://clc.to/B6ZBsw)

[Библиотека Go разработчика](http://t.me/goproglib)",6094,32,9,goproglib
5632,2025-01-30 09:01:28+00:00,"**️ Если вы вдруг забыли: у нас можно купить рекламу**

Библиотека программиста — медиа с миллионной аудиторией из IT-сферы. Что у нас есть:

• 60+ телеграм-каналов по разным IT-направлениям, от Python до DevOps

• 25 000 daily active users на сайте, который поможет усилить продвижение

• Возможность сделать нативную интеграцию, виральный пост и не только

За айтишной аудиторией — к нам 

**По вопросам рекламы пишите сюда → ****@proglib_adv**",6530,10,0,goproglib
5631,2025-01-30 05:58:21+00:00,"⭐️ **Практическое руководство по MongoDB**

MongoDB —  NoSQL-база данных, которая упрощает хранение и обработку больших объёмов данных. Её документно-ориентированная структура делает работу с JSON-подобными данными удобной и гибкой. 

В [руководстве](https://clc.to/8U2ixQ) разобраны концепции MongoDB: CRUD-операции, создание индексов для ускорения запросов, а также рекомендации по управлению коллекциями и документами. 
Примеры помогут быстро освоить базовые техники и применить в проектах.

[Библиотека Go разработчика](http://t.me/goproglib)",5871,12,0,goproglib
5630,2025-01-29 18:09:37+00:00,"↗️ **Улучшите работу с GitHub**

Эффективная работа с GitHub становится проще с использованием расширений для браузера Chrome. Вот три инструмента, которые помогут вам оптимизировать процесс разработки:

**1️⃣**** Octotree**

Octotree добавляет древовидную структуру файлов в интерфейс GitHub, облегчая навигацию по проектам с большим количеством директорий и файлов.

2️⃣ **OctoLinker**

OctoLinker превращает импортированные модули и зависимости в коде в кликабельные ссылки. Это позволит мгновенно переходить к соответствующим файлам или репозиториям, ускоряя процесс изучения и понимания кода.

3️⃣**Refined GitHub**

Refined GitHub дополняет стандартный интерфейс GitHub, добавляя множество полезных функций, таких как улучшенная навигация, дополнительные кнопки и настройки, которые делают работу с платформой удобнее.

****** Подробнее о других расширениях — **[**в статье**](https://clc.to/1_GB-Q)

[Библиотека Go разработчика](http://t.me/goproglib)",5856,13,0,goproglib
5629,2025-01-29 13:04:29+00:00,"#мем

[Библиотека Go разработчика](http://t.me/goproglib)",5729,27,2,goproglib
5627,2025-01-29 07:06:27+00:00," **Интеграция AI в Go-приложения**

Deepseek-Go — это обёртка для языка Go, предназначенная для интеграции с платформой Deepseek. Она предоставляет интерфейс для взаимодействия с AI-функциями Deepseek, включая чат-комплиты с поддержкой потоковой передачи, отслеживание использования токенов и другие возможности.

️ **Пример использования:**
```func main() {
    // Создание клиента Deepseek
    client := deepseek.NewClient(os.Getenv(""DEEPSEEK_KEY""))

    // Создание запроса на чат-комплит
    request := &deepseek.ChatCompletionRequest{
        Model: deepseek.DeepSeekChat,
        Messages: []deepseek.ChatCompletionMessage{
            {Role: constants.ChatMessageRoleSystem, 
             Content: ""Здесь задаём как отвечать""},
            {Role: constants.ChatMessageRoleUser, 
             Content: ""Здесь спрашиваем""},
        },
    }

    // Отправка запроса и обработка ответа
    ctx := context.Background()
    response, err := client.CreateChatCompletion(ctx, request)
    if err != nil {
        log.Fatalf(""Ошибка: %v"", err)
    }

    // Вывод ответа
    fmt.Println(""Ответ:"", response.Choices[0].Message.Content)
}```

**️**** **[**GitHub репозиторий проекта**](https://clc.to/5-eMbg)

[Библиотека Go разработчика](http://t.me/goproglib)",6142,38,0,goproglib
5626,2025-01-28 13:04:02+00:00," **Как дженерики влияют на Go разработку **

В языке программирования Go с версии 1.18 введены обобщения (__generics__), которые позволяют создавать гибкий и переиспользуемый код. 

 Ключевым аспектом обобщений является использование ограничения __comparable__. Это ограничение гарантирует, что типы, используемые в обобщенных функциях или структурах, поддерживают операции сравнения, такие как == и !=. 

Без применения __comparable__ можно столкнуться с ошибками компиляции при попытке сравнения несравнимых типов, например, срезов или карт.

 Использование ограничения __comparable__ позволяет выявлять ошибки на этапе компиляции. Это полезно при разработке обобщенных функций, которые предполагают сравнение элементов, таких как поиск или удаление дубликатов в срезах. 

****** **[**Подробности и примеры**](https://clc.to/GN9gQA)

[Библиотека Go разработчика](http://t.me/goproglib)",5858,20,0,goproglib
5625,2025-01-28 07:06:46+00:00,"** Снижение нагрузки на сборщик мусора в Go**

В высоконагруженных приложениях на Go частое выделение и освобождение памяти создает давление на сборщик мусора. Показываем, как оптимизировать память через повторное использование объектов и sync.Pool.

**️**** Повторное использование объектов

**Плохой подход:**
**```func process() []byte {  
    return make([]byte, 1024) // Новый срез каждый раз.  
}  ```

Лучше:
```var buffer = make([]byte, 1024)  
func process() []byte {  
    return buffer // Переиспользование.  
} ```**

**__Примечание: Работает только в однопоточных сценариях.__**

****️**** Использование sync.Pool**

sync.Pool позволяет создавать пулы объектов для многократного применения объектов:
```pool := sync.Pool{  
    New: func() any { return make([]byte, 1024) },  
}  

buffer := pool.Get().([]byte) // Взяли из пула.  
defer pool.Put(buffer)        // Вернули после использования.```

• Пулы эффективны для небольших данных: буферы, структуры
• Не используйте пулы для редко создаваемых или тяжелых объектов

 [Подробнее в статье](https://clc.to/ytFP6w)

[Библиотека Go разработчика](http://t.me/goproglib)",5413,21,2,goproglib
5623,2025-01-27 18:02:40+00:00,"**⭐️**** Очереди сообщений за 5 минут**

Тысячи запросов в секунду, рассылка уведомлений, обработка платежей — это не превратится в хаос, если между компонентами системы стоит очередь сообщений. Новички могут не знать что такое очередь сообщений, чтобы это исправить:

 [Перешлите коллеге эту статью](https://clc.to/1Al3BQ)

Простое объяснение с картинками введёт кого-угодно в курс дела!

[Библиотека Go разработчика](http://t.me/goproglib)",5727,4,1,goproglib
5622,2025-01-27 12:59:58+00:00,"**‍**** Написано на Go: Casvisor**

Casvisor - это open-source платформа, которая помогает управлять и облачными решениями с одного экрана и автоматически выполняет рутинные задачи.

**Основные возможности Casvisor

****️**** Управление облачными ресурсами**

• Централизованный контроль над серверами, хранилищами, сетями и контейнерами: Kubernetes, Docker.
• Поддержка мультиклаудных сред: AWS, Azure, GCP, OpenStack.

**️**** Автоматизация и оркестрация**

• Шаблоны для развёртывания приложений.
• Интеграция с CI/CD-пайплайнами.

**️**** Мониторинг и аналитика**

• Дашборды для отслеживания метрик производительности: CPU, память, сеть.
• Логирование и алертинг в реальном времени.

️ **Безопасность и доступ**

• Ролевая модель доступа для пользователей и сервисов.
• Аудит действий и защита от несанкционированного доступа.

Отличная возможность посмотреть на использование Go в реальном проекте и  даже поучаствовать в разработке!

 [GitHub проекта](https://clc.to/WVQAEQ)

[Библиотека Go разработчика](http://t.me/goproglib)",5733,10,1,goproglib
5620,2025-01-27 05:04:29+00:00,"#мем

[Библиотека Go разработчика](http://t.me/goproglib)",5305,26,0,goproglib
5619,2025-01-26 18:09:10+00:00," **Memory Ballast в Go: Зачем он был нужен и почему его больше не используют**

Вы подписаны на наш [канал с вопросами для собесов](http://t.me/go_interview_lib)? Если да, то скорее всего попытались ответить на вопрос: «Что такое Memory Ballast?» Сейчас объясним подробнее!

**Что такое Memory Ballast?**

Memory Ballast — это техника, при которой в программе намеренно выделяется большой объём памяти (например, var ballast = make([]byte, 1<<30)), чтобы повлиять на поведение сборщика мусора (GC).

**Зачем это  нужно?**

• Снизить частоту запусков GC, уменьшив паузы (stop-the-world).

• Стабилизировать потребление памяти в высоконагруженных приложениях.

️ **Почему его больше не используют?**

•** Появился SetMemoryLimit (Go 1.19+)**: теперь можно явно задать лимит памяти для приложения с помощью runtime/debug.SetMemoryLimit. Это более гибкий и безопасный способ управления GC.

• **Улучшения в GC:** сборщик мусора стал умнее и эффективнее, уменьшив необходимость в ручной оптимизации.

• **Ballast** **—** **это** **хак**: выделение лишней памяти может привести к неочевидным проблемам, например, избыточному потреблению ресурсов.

[Библиотека Go разработчика](http://t.me/goproglib)",5020,17,5,goproglib
5618,2025-01-26 10:25:09+00:00, Спасибо за ваши ответы!,4991,20,1,goproglib
5611,2025-01-26 10:24:55+00:00,"****** Привет, Go-разработчики! **

Мы собираем данные о том, какие методы биохакинга действительно помогают разрабам улучшить качество жизни и повысить продуктивность. Поделитесь своим опытом — это поможет другим сделать осознанный выбор в мире биохакинга.

[Библиотека Go разработчика](http://t.me/goproglib)",4163,4,12,goproglib
5610,2025-01-26 07:07:48+00:00,"**  Data Science в 2025 году: 7 главных трендов**

Разработчики JetBrains и Python Software Foundation рассказали, как изменится Data Science в ближайшие годы.

️ **В статье:**

▪️ Почему доля Python в анализе данных снижается
▪️ Какие библиотеки набирают популярность вместо pandas
▪️ Что происходит с AutoML, MLOps и визуализацией данных
▪️ И почему Rust и Julia наступают Python на пятки

Подробный разбор, новые инструменты и прогнозы на будущее — всё это читай в нашей [**статье**](https://proglib.io/sh/ursUkR6FEw).

 Тренды меняются, но основы остаются — укрепи базу с нашим курсом «[**Математика для Data Science**](https://proglib.academy/mathspro?utm_source=tg_academy&utm_medium=post_DataScienceV2025Godu7)»",4327,2,0,goproglib
5609,2025-01-25 18:15:45+00:00,"** Упрощаем работу с флагами в Go: flagforge**

Разработка CLI-приложений на Go часто требует работы с флагами командной строки. Стандартный пакет flag удобен, но когда флагов много, их ручное определение становится утомительным. В этом помогает flagforge — инструмент для автоматизации создания флагов.

**Что такое flagforge?**

Flagforge — библиотека, разработанная в рамках проекта rqlite. Она генерирует флаги на основе структуры, упрощая их управление и делая код чище.

 **Как это работает**

**1️⃣****Установка:**
```go get github.com/rqlite/flagforge```

2️⃣Определение структуры:
```type Config struct {
    Host  string `flag:""host"" desc:""Server host""`
    Port  int    `flag:""port"" desc:""Server port""`
    Debug bool   `flag:""debug"" desc:""Enable debug mode""`
}```
**
****3️⃣****Генерация флагов:**
```func main() {
    var cfg Config
    flagforge.Parse(&cfg)
    flag.Parse()
    fmt.Printf(""Config: %+v\n"", cfg)
}```

4️⃣**Запуск:**
```go run main.go -host localhost -port 8080 -debug```

5️⃣Вывод:
```Config: {Host:localhost Port:8080 Debug:true}```

[Библиотека Go разработчика](http://t.me/goproglib)",4799,37,0,goproglib
5608,2025-01-25 13:07:39+00:00,"️**Осторожно: работа с append в Go**

Если вы пишете на Go, вы наверняка используете слайсы и функцию __append__. Но знаете ли вы, что append может привести к неожиданным багам, если не понимать, как она работает? Давайте разберем, как избежать подводных камней.

**Как работает append?**

Функция __append__ добавляет элементы в срез и возвращает новый срез. Однако есть нюанс: если емкость исходного среза достаточна, append изменит его. Если нет — создаст новый срез с новым базовым массивом.
```go slice := []int{1, 2, 3}
newSlice := append(slice, 4)
slice[0] = 99              
fmt.Println(newSlice)       ```

**Возможные проблемы:**

️ Если несколько срезов ссылаются на один базовый массив, изменение одного среза может повлиять на другие;

️ Если вы сохраняете ссылку на большой массив через под-срез, это может предотвратить сборку мусора для неиспользуемых данных;

️ Если вы предполагаете, что append всегда создает новый срез, это может привести к неожиданному поведению.

**Как избежать проблем?**

1️⃣** Создавайте копии срезов**
Если вам нужно изменить срез, не затрагивая исходный, используйте функцию copy или явно создавайте новый срез.
```go original := []int{1, 2, 3}
copied := make([]int, len(original))
copy(copied, original) 
copied[0] = 99         
fmt.Println(original)  
fmt.Println(copied)    ```

2️⃣** Используйте полное выражение среза**
Если вы создаете под-срез и хотите контролировать его емкость, используйте полное выражение среза (__slice[low:high:max]__).
```go original := []int{1, 2, 3, 4, 5}
subslice := original[1:4:4]
subslice = append(subslice, 6) 
fmt.Println(original)          
fmt.Println(subslice)          ```

3️⃣** Проверяйте емкость перед использованием append**
Если вы хотите быть уверены, что append не изменит исходный срез, проверьте его емкость.
```go slice := []int{1, 2, 3}
if cap(slice) == len(slice) {
    newSlice := append(slice, 4) 
    fmt.Println(newSlice)        
} else {
    newSlice := append(slice, 4) 
    fmt.Println(newSlice)
}```

[Библиотека Go разработчика](http://t.me/goproglib)",5028,22,4,goproglib
5607,2025-01-25 07:03:41+00:00,"**️**** Быстрый обзор go-app**

go-app — это пакет для создания прогрессивных веб-приложений (PWA) с использованием языка программирования Go и WebAssembly.

О**собенности go-app:**

• Позволяет описывать UI-компоненты с помощью Go-кода, что упрощает разработку и поддержку приложений.

• Использует стандартную модель HTTP Go, обеспечивая совместимость и простоту интеграции.

•  Приложения могут работать без подключения к интернету, что повышает их доступность и удобство для пользователей.|

• Обеспечивает оптимизацию для поисковых систем, улучшая видимость приложений в результатах поиска.

️  Для начала работы с go-app необходимо установить Go версии 1.18 или новее и инициализировать модуль Go в вашем проекте. После этого можно установить пакет go-app с помощью команды:
```go get -u github.com/maxence-charriere/go-app/v10/pkg/app```

️ **Hello-world пример:**
```type HelloWorld struct {
  app.Compo
}

func (h *HelloWorld) Render() app.UI {
  return app.Div().Body(
    app.H1().Text(""Hello, World!""),
  )
}

func main() {
  app.Route(""/"", &HelloWorld{})
  app.RunWhenOnBrowser()

  http.Handle(""/"", &app.Handler{
    Name:        ""Hello World App"",
    Description: ""Простое приложение на go-app"",
  })
  http.ListenAndServe("":8080"", nil)
}```

Подробную информацию и документацию можно найти на[ странице проекта](https://clc.to/_VKZZg)

[Библиотека Go разработчика](http://t.me/goproglib)",5388,23,0,goproglib
5606,2025-01-24 13:06:19+00:00,"Наш язык тоже не остался в стороне!

#мем

[Библиотека Go разработчика](http://t.me/goproglib)",5378,33,3,goproglib
5605,2025-01-24 07:05:54+00:00,"** Обновление Revive**

Revive — это быстрый и настраиваемый линтер для языка Go, предназначенный для улучшения качества кода и повышения производительности разработки. Недавно был выпущен релиз версии v1.6.0, включающий следующие изменения:

**Основные изменения в версии v1.6.0:**

️ **Рефакторинг правил:**

• Оптимизация правила error-return путем замены обхода AST на итерацию по декларациям.

• Улучшение правила flag-param с аналогичной заменой метода обхода.

• Модификация правила modifies-value-receiver для повышения эффективности.

️ **Исправления:**

• Корректировка регулярного выражения в правиле filename-format для правильной обработки расширения файлов .go.

• Обновление документации RULES_DESCRIPTIONS.md для улучшения описаний правил.
**
**️ **Новые возможности:**

• Добавлено новое правило use-errors-new, рекомендующее использование errors.New для создания новых ошибок.

️ **Прочие улучшения:**

• Улучшено определение сортируемых элементов в коде.

• Добавлены недостающие тесты для правила var-declarations и исправлены проблемы с типами any/interface{}.

• Обновлен файл go.sum и выполнена очистка кода в правилах.

 [Полный список изменений](https://clc.to/wPCtLw)

[Библиотека Go разработчика](http://t.me/goproglib)",6909,10,0,goproglib
5604,2025-01-23 18:56:37+00:00,"‍ **Сделаем свой веб-краулер на Go**

Веб-краулер — это программа, которая автоматически обходит веб-страницы, собирает информацию и анализирует её. Обычно краулеры используются для индексации веб-страниц поисковыми системами (например, Googlebot для Google) или для автоматического сбора данных, таких как цены, рейтинги или текст.

**Этапы работы веб-краулера:**

1️⃣Начало с заданного URL (или списка URL).

2️⃣Сканирование содержимого страницы (HTML-код, изображения и т.д.).

3️⃣Извлечение ссылок на другие страницы.

4️⃣Переход по этим ссылкам для повторения процесса.

5️⃣Сохранение собранных данных для анализа или использования.

**Пример**: веб-краулер может пройтись по страницам интернет-магазина и собрать информацию о товарах: цены, отзывы, наличие и описание.

** Пример реализации веб-краулера**

Если хочется посмотреть пошаговую реализацию, то советуем посмотреть [статью](https://clc.to/RJSOwA). В ней описано как реализовать веб-краулер, чтобы мониторить цены на телефоны. Верим, что фантазия на этом не остановится и вы реализуете самые полезные краулеры!

 [Посмотреть реализацию](https://clc.to/RJSOwA)

[Библиотека Go разработчика](http://t.me/goproglib)",5786,14,1,goproglib
5603,2025-01-23 13:05:42+00:00,"** Elasticsearch: Быстрый поиск и аналитика данных**

 Хотите узнать, как эффективно искать и анализировать данные? Тогда вам точно стоит обратить внимание на Elasticsearch! 

** Что такое Elasticsearch?** 
Elasticsearch — это распределённый поисковый движок с открытым исходным кодом, который позволяет быстро индексировать, искать и анализировать большие объемы данных в реальном времени. Он используется для поиска по текстам, журналам событий, аналитики, мониторинга и многого другого.

** Ключевые возможности Elasticsearch**

️ Наращивает мощности по мере роста данных.

️ Поддержка сложных запросов и фильтров для различных типов данных.

️ Мощные функции поиска по текстам с учётом морфологии, синонимов и стоп-слов.

****** Почему стоит использовать Elasticsearch?**

• Подходит для работы с большими объёмами данных.

• Настройка индексов, шардов и реплик для оптимальной производительности.

• Поддержка множества инструментов и клиентов для интеграции с различными языками программирования.

 **Структура данных в Elasticsearch**
Данные в Elasticsearch организованы в виде индексов, документов и полей. Каждый документ хранится в JSON формате, что делает его удобным для поиска и анализа.

**Индекс** - это коллекция документов, имеющих схожие характеристики. Например, индекс для логов приложения может называться app-logs.

**Документ** - это основная единица хранения данных в Elasticsearch. Каждый документ представляет собой JSON-объект, содержащий набор полей и их значений. Например, документ логов может выглядеть так:
```{
  ""timestamp"": ""2025-01-23T16:55:00"",
  ""level"": ""INFO"",
  ""message"": ""Application started""
}```

 **Поле** - это ключ-значение пара внутри документа. Поля могут быть различных типов: строки, числа, даты и т.д.

** Где найти больше информации?**
•  [Документация](https://clc.to/5xMimw)
•  [GitHub](https://clc.to/Rhanyw)

[Библиотека Go разработчика](http://t.me/goproglib)",5051,19,0,goproglib
5602,2025-01-23 07:04:59+00:00,"**️‍️ Git-квест: 10 испытаний для повелителя репозиториев**

Привет go-сообщество! Все мы знаем, что с Go разрабатываются быстрые и эффективные программы, а Git помогает управлять всем этим хаосом. Этот тест проверит, насколько ты крут в Git, как и в своем любимом языке!

️ [Пройти тест](https://clc.to/gTUV3Q)

[Библиотека Go разработчика](http://t.me/goproglib)",5866,28,0,goproglib
5601,2025-01-22 18:15:49+00:00,"#мем

[Библиотека Go разработчика](http://t.me/goproglib)",5304,22,0,goproglib
5600,2025-01-22 13:03:39+00:00,"** Новый выпуск подкаста о Go
**
В последнем эпизоде подкаста Cup o' Go ведущие обсуждают актуальные события в мире Go. 

**Основные темы выпуска:**

️ **Выпуск Go версий 1.23.5 и 1.22.11**, включающих исправления приватных CVE. Рекомендуется обновиться для поддержания безопасности приложений.

️ Обсуждение недавно обнаруженной** уязвимости в библиотеке gRPC** и её влияние на экосистему Go.

️ Представление** интерактивного тура по Go 1.24**, позволяющего разработчикам ознакомиться с новыми функциями и улучшениями языка.

️Рассмотрение новых возможностей в** статическом генераторе сайтов Hugo**, полезных для разработчиков, использующих его в своих проектах.

️ Обсуждение недавних **изменений в грамматике Go**, направленных на улучшение читаемости и консистентности кода.

 [Слушать обсуждение новостей](https://clc.to/oyUyLQ)

[Библиотека Go разработчика](http://t.me/goproglib)",5424,16,0,goproglib
5599,2025-01-22 07:06:44+00:00,"** SQL-транзакции в Go: чисто и эффективно**

Работа с транзакциями в Go может быть запутанной: *sql.Tx проникает в бизнес-логику, тестировать сложно, а код теряет чистоту. Наш коллега Go-разработчик предлагает элегантное решение — интерфейс Transactor, который изолирует работу с транзакциями от бизнес-логики.

**В чём суть**
Транзакции обрабатываются через интерфейс:
```type Transactor interface {
    WithinTransaction(ctx context.Context, func(ctx context.Context) error) error
}```
Ваша логика не знает, используется ли транзакция или нет — всё это абстрагировано в Transactor.

 [Подробнее про решение в статье](https://clc.to/yrNgfA)

[Библиотека Go разработчика](http://t.me/goproglib)",5877,26,0,goproglib
5598,2025-01-21 13:04:50+00:00,"**Watermill: фреймворк для обработки событий в Go**

Watermill — это фреймворк на Go, предназначенный для создания систем, основанных на обработке событий. Его основная задача — упрощение работы с потоками сообщений, а также интеграция различных сервисов через брокеры сообщений.

**Возможности и особенности:**
******Поддержка** **брокеров** **сообщений**: Kafka, RabbitMQ, NATS, Google Pub/Sub, а также встроенные очереди.
******Маршрутизация** **сообщений**: позволяет настроить обработку событий в зависимости от их типа, темы и других параметров.
******Гибкость**: можно адаптировать фреймворк под разные сценарии использования, от небольших микросервисов до распределенных систем.
**Инструменты мониторинга**: встроенные логирование и трейсинг помогают отслеживать состояние системы и выявлять проблемы.

**Пример использования:**
Допустим, нужно настроить обработку заказов в системе электронной коммерции. Заказы отправляются в Kafka, откуда Watermill получает сообщения, преобразует их и передает в очереди RabbitMQ для дальнейшей обработки.
**
‍Как это выглядит в коде:**
```r := router.NewRouter(router.Config{}, logger)
r.AddHandler(
    ""order_handler"",
    ""orders"",
    kafkaSubscriber,
    ""processed_orders"",
    rabbitPublisher,
    func(msg *message.Message) ([]*message.Message, error) {
        // Логика обработки сообщения
        return []*message.Message{msg}, nil
    },
)
r.Run()```

**Где применить:**
Watermill подходит для сценариев, где требуется асинхронная обработка данных, масштабируемость и гибкость. Это может быть полезно в системах аналитики, IoT-платформах или при построении микросервисной архитектуры.

[Библиотека Go разработчика](http://t.me/goproglib)",6059,20,34,goproglib
5597,2025-01-21 07:05:22+00:00," **Как PS1 стал онлайн: инженерная магия с помощью Golang и WebSockets**

Один энтузиаст решил превратить PlayStation 1 в устройство с поддержкой онлайн-игр, используя Raspberry Pi и Golang. Его проект объединяет технологии прошлого и настоящего: данные с PS1 передаются через последовательный порт (serial) на Raspberry Pi, где они конвертируются в WebSockets.

**Как это работает:**
 PS1 подключается к Raspberry Pi через последовательный порт с помощью пайки TX, RX и GND выводов.

 Raspberry Pi конвертирует данные из serial в WebSockets с помощью приложения, написанного на Golang.

  Raspberry Pi подключается по Ethernet к серверу, который обрабатывает данные от PS1 и других устройств, включая PS4.

 Данные от PS1 обрабатываются сервером, позволяя играть в сетевые игры между PS1 и современными устройствами.

 [Посмотреть как это реализовано](https://clc.to/qJs0Vg)

[Библиотека Go разработчика](http://t.me/goproglib)",5811,19,2,goproglib
5596,2025-01-20 18:11:20+00:00,"** go.nvim — плагин для разработки на Go в Neovim**

Для разработчиков на Go, использующих Neovim, плагин go.nvim стал незаменимым инструментом, превращающим редактор в** полноценную IDE**. Этот плагин объединяет все необходимые функции для комфортной разработки: от **базовой подсветки синтаксиса** до **продвинутых возможностей отладки**. Давайте разберём основные возможности go.nvim и посмотрим, как он может улучшить ваш процесс разработки.

** Что умеет go.nvim?**

**Подсветка синтаксиса и работа с текстом:**
️Интеграция с Treesitter для точной и быстрой подсветки синтаксиса.
️Улучшенные текстовые объекты для Go-кода.

**Асинхронность:**
️Все операции выполняются без блокировки интерфейса благодаря использованию асинхронных функций через libuv.

**Поддержка всех возможностей LSP, включая:**
️Переход к определению.
️Просмотр референсов.
️Организация импортов.
️Автозаполнение.

**Поддержка Go-инструментов:**
️Автоматическое выполнение таких команд, как go mod tidy, fillstruct, impl и многих других.
️Генерация и организация кода в один клик.

**Отладка (Debugging):**
️Интеграция с DAP для отладки Go-приложений прямо из Neovim.
️Настраиваемые файлы конфигурации, такие как launch.json.

**Гибкая настройка:**
️Поддержка настройки на уровне проектов для индивидуального поведения плагина.

 [Полное руководство по установке и настройке плагина](https://clc.to/s1h1AQ)

[Библиотека Go разработчика](http://t.me/goproglib)",5883,9,24,goproglib
5592,2025-01-20 06:59:58+00:00,"Go-шники, с началом рабочей недели! Всех остальных с понедельником!

#мем

[Библиотека Go разработчика](http://t.me/goproglib)",6074,15,6,goproglib
5591,2025-01-19 17:59:58+00:00,"**Краткий видеообзор Go 1.24**

Если чтение длинных списков изменений и технических деталей - не ваш метод, предлагаю посмотреть наглядное видео с обзором ключевых нововведений в грядущей версии Go 1.24.

 [Смотреть видео](https://clc.to/q8lq_A)

[Библиотека Go разработчика](http://t.me/goproglib)",6126,11,0,goproglib
5590,2025-01-19 12:59:58+00:00,"**️**** Новая версия Go 1.23.5: оптимизация и исправление ошибок **

Go 1.23.5 стала доступна для разработчиков. Это обновление является частью регулярного цикла исправлений и включает в себя исправления ошибок, затрагивающих ключевые области языка и стандартной библиотеки.

**Основные изменения в Go 1.23.5:**
**Исправление ошибки в cmd/compile**: устранена проблема, из-за которой компилятор неправильно обрабатывал определённые выражения.

**Обновление в модуле net/http**: исправлена ошибка, связанная с некорректной обработкой некоторых ответов сервера HTTP-клиентом. 

**Оптимизация в runtime**: улучшена работа сборщика мусора, что положительно влияет на производительность приложений, особенно тех, которые активно используют многопоточность.

 [Список исправлений](https://clc.to/GDKPFw)

[Библиотека Go разработчика](http://t.me/goproglib)",5814,13,0,goproglib
5589,2025-01-19 07:09:22+00:00," **Открытая редакция: ищем авторов для рубрики DevLife**

Друзья, нас часто спрашивают про публикацию материалов о личном опыте и знаниях в IT. Пора это систематизировать!

Если у вас есть история о том, как вы:
• выросли в профессии
• освоили новые технологии
• сделали крутой карьерный скачок
• эпично лажанулись
• создали интересные проекты
— присылайте свои статьи на почту hello@proglib.io с темой DevLife

Требования простые:
• Реальный опыт
• Конкретные шаги
• От 5000 знаков
• Ссылка на Google Docs

Лучшие истории опубликуем на сайте и в наших соцсетях с общим охватом 1 млн + человек.",5565,0,0,goproglib
5588,2025-01-19 06:02:20+00:00,"**Вакансии «Библиотеки программиста» — ждем вас в команде!**

Мы постоянно растем и развиваемся, поэтому создали отдельную [страницу,](https://job.proglib.io/) на которой будут размещены наши актуальные вакансии. Сейчас мы ищем:
контент-менеджеров для ведения телеграм-каналов

[Подробности тут](https://job.proglib.io/)

Мы предлагаем частичную занятость и полностью удаленный формат работы — можно совмещать с основной и находиться в любом месте

Ждем ваших откликов ",5437,3,0,goproglib
5587,2025-01-18 13:08:11+00:00,"#мем

[Библиотека Go разработчика](http://t.me/goproglib)",5521,44,1,goproglib
5586,2025-01-18 07:07:09+00:00,"**Структуры данных без блокировок**

Lock-Free структуры данных — это конструкции, обеспечивающие многопоточный доступ к данным без использования блокировок (мьютексов). Вместо этого они используют атомарные операции, такие как Compare-And-Swap (CAS). Это позволяет минимизировать задержки, устранить deadlock и повысить производительность в конкурентной среде.

**Зачем они нужны?**
️**Высокая** **производительность**: нет затрат на ожидание блокировок.
️**Отсутствие** **deadlock**: исключение взаимоблокировок.
️**Скалируемость**: отлично работают при высокой конкуренции потоков.

**Основные инструменты в Go**
**Пакет sync/atomic:**
Атомарные операции для целых чисел, указателей и других типов.
Пример:
```atomic.AddInt32(&counter, 1)
 // Увеличение
atomic.CompareAndSwapInt32(&counter, old, new)
 // Сравнить и заменить```

**CAS (Compare-And-Swap):**
Обновляет значение только если текущее равно ожидаемому. Это основа большинства Lock-Free алгоритмов.

[Библиотека Go разработчика](http://t.me/goproglib)",5946,14,1,goproglib
5585,2025-01-17 13:05:20+00:00,"**Обновление IDE для Go от JetBrains**

Компания JetBrains объявила о запуске программы **раннего доступа** (EAP) для** **GoLand**.** В этом выпуске основное внимание уделяется следующим улучшениям:

️**Улучшенная поддержка языка Go**: включает полную поддержку Go 1.24, а также улучшенные инструменты анализа кода и статического анализа.

**️****Повышение** **стабильности** **IDE**: обеспечение более плавной работы за счет решения ключевых вопросов производительности, надежности и точности.

️**Улучшения интерфейса и пользовательского опыта**: введение различных улучшений UI/UX для повышения удобства использования.

Первую сборку EAP можно загрузить через Toolbox App, с официального сайта или в виде snap-пакета для Ubuntu. Также доступно обновление из самой GoLand через настройки обновлений. 

Программа EAP предоставляет **бесплатный доступ** к сборкам **на 30 дней** с даты выпуска и продлится **до начала марта 2025 года**.

[Библиотека Go разработчика](http://t.me/goproglib)",6218,23,20,goproglib
5584,2025-01-17 07:04:16+00:00,"‍**Почему Go-разработчикам полезны тренировки на LeetCode (и почему нет)**

Если вы пишете на Go, скорее всего, вы знакомы с его минималистичным, но мощным подходом. Goroutines, каналы, лаконичный синтаксис – это то, что делает язык незаменимым для высоконагруженных систем и микросервисов. Но вот вы заходите на LeetCode и сталкиваетесь с задачей: «Найти k-й по величине элемент в массиве». 
Давайте разберемся, так ли нужна вам такая головоломка.

**Почему стоит попробовать?**

 **Взгляд под капот Go**
Go абстрагирует многие низкоуровневые детали, но это не значит, что они не важны. Решение задач заставляет углубляться в такие детали. Вы не просто пишете код – вы понимаете, что стоит за ним.

 **Укрощение конкуренции**
В реальных задачах вы часто сталкиваетесь с багами из-за некорректной работы с горутинами. Задачи, связанные с многопоточностью, дают шанс разобраться, как правильно использовать каналы и синхронизацию данных.

**Подготовка к собеседованиям**
На собеседованиях вас почти наверняка попросят решить пару задач на алгоритмы. LeetCode – отличный тренажер, чтобы не ударить в грязь лицом.

 **Но что может пойти не так?**

**Go – это не академия алгоритмов**
Если вы работаете над реальным продуктом, вам не нужно каждый день искать минимальное остовное дерево или реализовывать сложные структуры данных. Вместо того чтобы писать свой бинарный поиск, вы просто используете sort.Search.

**Реальная разработка – это не про задачи**
Go-разработчику лучше сосредоточиться на проектировании микросервисов, оптимизации REST API или настройке CI/CD. Это то, что реально поможет вам стать ценным сотрудником.

**Потенциальная ловушка перфекционизма**
Вы пытаетесь улучшить время работы своей программы, хотя это не имеет значения в реальных условиях. В реальных проектах важнее качество кода и его читабельность, а не сокращение выполнения алгоритма с O(n²) до O(n log n).

[Библиотека Go разработчика](http://t.me/goproglib)",5988,42,6,goproglib
5582,2025-01-16 13:07:40+00:00,"********** Что почитать?**

Нашли для вас парочку новинок компьютерной литературы!

[Библиотека Go разработчика](http://t.me/goproglib)",6105,5,1,goproglib
5581,2025-01-16 09:56:47+00:00,"** Что такое линтеры в Go и зачем они нужны**

Если вы пишете код на Go, наверняка хотите, чтобы он был качественным, понятным и поддерживаемым. Здесь на помощь приходят линтеры — инструменты, которые анализируют ваш код и подсказывают, как его улучшить.

**Что делает линтер?**

Линтер проверяет код на:
Ошибки стиля (например, неправильные имена переменных).
Потенциальные баги (неиспользуемые переменные, забытые defer).
Неоптимальный код (лишние вычисления, неэффективные алгоритмы).
Соответствие стандартам (следование Go Code Review Comments).

**Популярные линтеры для Go**:

golint — проверяет стиль кода, соответствие рекомендациям Go (устарел, но до сих пор используется).

staticcheck — мощный инструмент для обнаружения багов и улучшения кода.

golangci-lint — удобный инструмент, объединяющий несколько линтеров. Поддерживает кастомизацию и интеграцию с CI.

errcheck — проверяет, обрабатываете ли вы ошибки из функций.

gosec — находит уязвимости в коде (например, небезопасные вызовы).

revive — современный, быстрый линтер, который заменяет golint.

[Библиотека Go разработчика](http://t.me/goproglib)",5781,18,1,goproglib
5580,2025-01-15 18:10:02+00:00,"**Вопрос, который вы себе не задавали - «Почему перебор в map происходит случайным образом?»**

**Причины случайного порядка в map:**
1️⃣**Оптимизация** **производительности**
Go использует хэш-таблицу для хранения данных в map. Элементы сохраняются по хэшированным ключам, и их порядок в памяти зависит от того, как хэш-функция распределяет данные. Это позволяет обеспечить:

2️⃣**Быстрый доступ к данным (O(1) для чтения/записи).**
Оптимальное использование памяти.
Защита от зависимости от порядка
Если бы порядок был фиксированным, программисты могли бы начать на него полагаться, что привело бы к сложным багам при изменении реализации map. Случайность в порядке обхода вынуждает писать код, который явно не зависит от этого порядка.

3️⃣**Рандомизация для безопасности**
Go намеренно перемешивает порядок элементов в map между запусками программы. Это делает сложнее предсказать хэш-функцию и эксплуатировать уязвимости, связанные с предсказуемым порядком.

**4️⃣****Простота** **реализации**
Гарантированный порядок потребовал бы дополнительной логики в реализации map, что увеличило бы сложность кода рантайма и ухудшило производительность.

[Библиотека Go разработчика](http://t.me/goproglib)",5763,27,5,goproglib
5579,2025-01-15 13:04:41+00:00," **Gron: две стороны одного имени**

Если вы загуглили «Gron» и запутались, о чём речь, не переживайте. Под этим названием скрываются два совершенно разных, но интересных инструмента. Вот короткое знакомство с обоими.

**1️⃣****Gron #1: Утилита для работы с JSON**
Этот Gron — **инструмент** командной строки,** который превращает JSON в плоский, читаемый формат**, удобный для поиска и фильтрации

**Пример JSON:**
```{
  ""user"": {
    ""name"": ""Alice"",
    ""languages"": [""Go"", ""Python""]
  }
}```

После обработки Gron:
```json = {};
json.user = {};
json.user.name = ""Alice"";
json.user.languages = [];
json.user.languages[0] = ""Go"";
json.user.languages[1] = ""Python"";```

Теперь легко искать данные через grep, например:
```gron data.json | grep ""languages""```

**Где применит**ь: анализ API-ответов, работа с JSON-файлами в терминале.

**2️⃣****Gron #2 Библиотека для запуска cron**
Второй Gron — это библиотека для **написания и запуска cron job-ов в Go** с минималистичным интерфейсом. Она предлагает простой и гибкий API для задания расписаний, управления задачами и настройки пользовательских типов заданий.

**Основные возможности:**
**Планирование задач:**
Простое создание периодических расписаний (Every).
Поддержка расписаний на уровне дня, недели, месяца.

**Пользовательские типы задач:**
Определение задач через интерфейс gron.Job.
Возможность выполнения задач асинхронно.

**Гибкость расписания:**
Настройка времени запуска через метод .At(hh:mm).
Возможность использовать кастомные расписания.

[Библиотека Go разработчика](http://t.me/goproglib)",5316,23,0,goproglib
5578,2025-01-15 09:06:34+00:00,"**Что такое стратегия «sharding» в контексте кэширования?**

Sharding — это стратегия горизонтального масштабирования, которая разбивает данные на сегменты («шарды») таким образом, чтобы каждая часть хранилась отдельно и обрабатывалась независимо. 

В контексте распределённого кэша, шардинг используется для разделения данных между несколькими узлами с целью:
 **Снижения нагрузки на отдельные узлы.**
 **Ускорения операций записи и чтения.**
 **Горизонтального масштабирования, позволяя добавлять новые узлы в кэш**.

**Как это работает?**
При шардинге каждый ключ привязывается к определённому узлу на основе функции хэширования. Алгоритм хэширования принимает ключ (например, строку) и возвращает число, которое определяет, на какой узел будут записаны или считаны данные.

[Библиотека Go разработчика](http://t.me/goproglib)",5507,13,11,goproglib
5577,2025-01-14 18:04:21+00:00,"** Привет, Go-сообщество!**

Во время кодинга у каждого свой способ оставаться в потоке: кто-то слушает **музыку**, кто-то смотрит **сериалы**, а кто-то работает в **полной тишине**. 

Что помогает вам? Рекомендуйте свои фавориты в комментариях!

#интерактив",5454,7,2,goproglib
5576,2025-01-14 13:08:07+00:00,"**Привет, Go-сообщество!**

Мы ищем участников для интервью на тему «**Обучение навыкам в IT**»!

**Кто нам нужен?**
****** Вы** недавно (в последние 6 месяцев) **проходили курсы **по техническим специальностям или математике.
****** Вы** **разработчик**, стремящийся освоить Data Science или Machine Learning.

**Что вас ждет?**
Участие в интервью по Zoom, которое займет не больше 45 минут.
 1500 рублей на карту за ваше время.
Уникальный шанс пообщаться с нашим **CEO**!

**Как откликнуться?**
️Напишите в личные сообщения @artem_ceo",5907,1,0,goproglib
5575,2025-01-14 06:59:58+00:00,"**🆕**** Больше обобщений в Go!**

В версии Go 1.24, запланированной к выпуску в феврале 2025 года, будет введена полная поддержка обобщённых (generic) псевдонимов типов. Это означает, что теперь псевдонимы типов могут быть параметризованы так же, как и определённые типы, что значительно расширяет возможности для написания более гибкого и повторно используемого кода. 

**Что такое псевдонимы типов?**
Псевдонимы типов позволяют создавать альтернативные имена для существующих типов без создания новых типов. Это полезно для улучшения читаемости кода и упрощения рефакторинга. До версии Go 1.24 псевдонимы типов не могли быть параметризованы, что ограничивало их применение в обобщённом программировании.

🆕 **Нововведения в Go 1.24**
С введением обобщённых псевдонимов типов в Go 1.24 разработчики могут создавать параметризованные псевдонимы, что упрощает рефакторинг и поддержку кода. Например, если у вас есть обобщённый тип в одном пакете, вы можете создать его псевдоним в другом пакете, сохраняя совместимость и улучшая структуру проекта.

Предположим, в пакете __oldpkg__ определён обобщённый тип Pair:
```package oldpkg

type Pair[T any] struct {
    First  T
    Second T
}```

В Go 1.24 вы можете создать обобщённый псевдоним этого типа в новом пакете __newpkg__:
```package newpkg

import ""path/to/oldpkg""

type Pair[T any] = oldpkg.Pair[T]```

Теперь __newpkg.Pair__ является псевдонимом для __oldpkg.Pair__ и может использоваться аналогично, что облегчает миграцию и рефакторинг кода.

**⏱****Временное отключение функции**
На момент выпуска Go 1.24 поддержка обобщённых псевдонимов типов может быть отключена с помощью установки переменной окружения GOEXPERIMENT=noaliastypeparams. Однако в версии Go 1.25 эта опция будет удалена, и функция станет стандартной частью языка.",5894,34,0,goproglib
5574,2025-01-13 13:00:36+00:00,#мем,6707,137,8,goproglib
5573,2025-01-13 06:59:58+00:00,"**Как 335 строк кода превратились в 0: магия Podio и отказ от FFmpeg**

Недавно команда Prayershub поделилась своим опытом, как они смогли сократить 335 строк шаблонного, избыточного кода, перейдя на более лёгкий и элегантный инструмент — Podio.

Прежде чем внедрить Podio, команда использовала **FFmpeg** для обработки аудио. Это привело к следующим проблемам:
 **Кодовая** **перегрузка**: обёртки для команд FFmpeg занимали десятки строк, даже для простых задач.
 **Сложность** **поддержки**: ошибки из-за неправильной генерации команд отнимали много времени.
  **Непрозрачность** **кода**: новый разработчик в команде тратил кучу времени, чтобы понять, как всё работает.

**Podio** — это **Go-пакет**, созданный специально для работы с аудио. Его ключевая особенность — Fluent API, который делает код минималистичным и читаемым. Вместо громоздких вызовов FFmpeg вы пишете понятные цепочки вызовов методов.

**Команда Prayershub поделилась результатами перехода на Podio:**
**** **Сокращение** **335** **строк** **кода**: убрали избыточные обёртки и шаблоны.
**** **Улучшение** **читаемости**: код стал понятным даже для новичков.
**** **Меньше** **ошибок**: подход Podio исключает большинство проблем, связанных с внешними командами.
**** **Ускорение** **разработки**: простота API позволила тратить меньше времени на добавление новых функций.

Посмотреть заклинания, сокращающие код (ну, или по крайней мере их результат) можно [здесь](https://clc.to/zhN8qQ)",6067,14,6,goproglib
5572,2025-01-13 06:02:21+00:00,"**Самые полезные каналы для программистов в одной подборке!**

Сохраняйте себе, чтобы не потерять 

Для всех

[Библиотека программиста](https://t.me/proglibrary) — новости, статьи, досуг, фундаментальные темы
[Книги для программистов](https://t.me/progbook)
[IT-мемы](https://t.me/itmemlib)
[Proglib Academy](https://t.me/proglib_academy) — тут мы рассказываем про обучение и курсы
[Азбука айтишника](https://t.me/abc_for_it) — здесь мы познаем азы из мира программирования

Про нейросети
[Библиотека робототехники и беспилотников | Роботы, ИИ, интернет вещей ](https://t.me/robotics_autopilots_iot)
[Библиотека нейрозвука | Транскрибация, синтез речи, ИИ-музыка ](https://t.me/neuroaudio)
[Библиотека нейротекста | ChatGPT, Gemini, Bing ](https://t.me/neuro_text)
[Библиотека нейровидео | Sora AI, Runway ML, дипфейки ](https://t.me/neurovidos)
[Библиотека нейрокартинок | Midjourney, DALL-E, Stable Diffusion ](https://t.me/neurokartinka)

#️⃣C#

[Книги для шарпистов | C#, .NET, F#](https://t.me/csharpprogbook)
[Библиотека шарписта ](https://t.me/csharpproglib)— полезные статьи, новости и обучающие материалы по C#
[Библиотека задач по C#](https://t.me/csharp_problems_lib) — код, квизы и тесты
[Библиотека собеса по C#](https://t.me/csharp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Вакансии по C#, .NET, Unity Вакансии по PHP, Symfony, Laravel](https://t.me/csharpdevjob)

️DevOps

[Библиотека devops’а](https://t.me/devopsslib) — полезные статьи, новости и обучающие материалы по DevOps
[Вакансии по DevOps & SRE](https://t.me/devopssjob)
[Библиотека задач по DevOps](https://t.me/devops_problems_lib) — код, квизы и тесты
[Библиотека собеса по DevOps](https://t.me/devops_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования

PHP

[Библиотека пхпшника](https://t.me/phpproglib) — полезные статьи, новости и обучающие материалы по PHP
[Вакансии по PHP, Symfony, Laravel](https://t.me/phpdevjob)
[Библиотека PHP для собеса](https://t.me/php_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по PHP](https://t.me/php_problems_lib) — код, квизы и тесты

Python

[Библиотека питониста](https://t.me/pyproglib) — полезные статьи, новости и обучающие материалы по Python
[Вакансии по питону, Django, Flask](https://t.me/pydevjob)
[Библиотека Python для собеса](https://t.me/py_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Python](https://t.me/py_problems_lib) — код, квизы и тесты

Java

[Книги для джавистов | Java ](https://t.me/javaprogbook)
[Библиотека джависта](https://t.me/javaproglib) — полезные статьи по Java, новости и обучающие материалы
[Библиотека Java для собеса](https://t.me/java_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Java](https://t.me/java_problems_lib) — код, квизы и тесты
[Вакансии для java-разработчиков](https://t.me/javadevjob)

Data Science

[Книги для дата сайентистов | Data Science](https://t.me/dsprogbook)
[Библиотека Data Science](https://t.me/dsproglib) — полезные статьи, новости и обучающие материалы по Data Science
[Библиотека Data Science для собеса](https://t.me/ds_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Data Science](https://t.me/ds_problems_lib) — код, квизы и тесты
[Вакансии по Data Science, анализу данных, аналитике, искусственному интеллекту](https://t.me/datajob)

Go

[Книги для Go разработчиков](https://t.me/goprogbook)
[Библиотека Go разработчика](https://t.me/goproglib) — полезные статьи, новости и обучающие материалы по Go
[Библиотека Go для собеса](https://t.me/go_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Go](https://t.me/go_problems_lib) — код, квизы и тесты
[Вакансии по Go](https://t.me/godevjob)

C++

[Книги для C/C++ разработчиков](https://t.me/cppprogbook)
[Библиотека C/C++ разработчика](https://t.me/cppproglib) — полезные статьи, новости и обучающие материалы по C++
[Библиотека C++ для собеса](https://t.me/cpp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по C++](https://t.me/cpp_problems_lib) — код, квизы и тесты
[Вакансии по C++](https://t.me/cppdevjob)

Другие каналы

[Библиотека фронтендера](https://t.me/frontendproglib)
[Библиотека мобильного разработчика](https://t.me/mobileproglib)
[Библиотека хакера](https://t.me/hackproglib)
[Библиотека тестировщика](https://t.me/testerlib)
[Вакансии по фронтенду, джаваскрипт, React, Angular, Vue](https://t.me/jsdevjob)
[Вакансии для мобильных разработчиков](https://t.me/mobiledevjob)
[Вакансии по QA тестированию](https://t.me/testerrjob)
[InfoSec Jobs — вакансии по информационной безопасности](https://t.me/hackdevjob)
[Библиотека разработчика игр | Gamedev, Unity, Unreal Engine](https://t.me/gameproglib)

Чтобы добавить папку с нашими каналами, нажмите [сюда](https://t.me/addlist/17y04EbNMrlhNjZi)

Также у нас есть боты:
[Бот с IT-вакансиями](http://t.me/proglib_job_bot)
[Бот с мероприятиями в сфере IT](http://t.me/event_listener_bot)

Мы в других соцсетях:
[VK](https://vk.com/proglib)
[YouTube](https://www.youtube.com/c/%D0%91%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%B0)
[Дзен](https://zen.yandex.ru/proglib)
[Facebook](https://www.facebook.com/proglib/?locale=ru_RU) *
[Instagram](https://www.instagram.com/proglibrary/) *

__* Организация Meta запрещена на территории РФ__",5333,5,0,goproglib
5571,2025-01-12 15:20:48+00:00,"‍ **Тренируемся быстро печатать!**

[️Typinghackers.com](https://clc.to/nejDpA) - платформа для тренировки скоростной или слепой печати. Тренируйтесь на стандартных шаблонах кода или известных библиотеках. 

Платформа развивается, в будущем ожидается больше упражнений и языков.

Давайте померяемся рекордами по Hello World в комментариях!",5949,31,7,goproglib
5570,2025-01-12 07:03:00+00:00,"** Как ответить на собеседовании, почему вы уволились с прошлого места работы**: 9 вариантов ответа

А также примеры того, как говорить точно не надо 

[Читать](https://clc.to/iBtxkw)",5633,7,5,goproglib
5569,2025-01-11 18:18:49+00:00,"** Go 1.24: Главные обновления!**

В февральском релизе Go 1.24 разработчики приготовили массу улучшений:

****** Новое в языке**
**Generic**'и: go теперь поддерживает обобщенные псевдонимы типов: псевдоним типа может быть параметризован так же, как определенный тип

** Инструменты**
**Директива tool в go.mod**: для учёта инструментов без лишнего кода.
**Кэширование go run**: ускоряет повторные запуски.
JSON-вывод для __go build/install__.
Поддержка версий модулей в бинарниках.

️** Производительность**
Карты (map) с Swiss Tables: до 3% прироста скорости.

** Среда выполнения**
Новая финализация: __runtime.AddCleanup__ заменяет __SetFinalizer__.

** Библиотеки**
******Слабые** **ссылки**: новый пакет __weak__.
Постквантовая криптография: пакет __crypto/mlkem__.
Ограничение файловой системы: тип __os.Root__.

** Инструменты анализа**
__vet__ ловит больше ошибок в тестах и __printf__.

Позже, с выходом полноценного релиза, разберёмся подробнее!

#новость",6867,75,4,goproglib
5568,2025-01-11 07:06:02+00:00," **Go: Структуры, интерфейсы и внедрение зависимостей – проще, чем кажется!**

Если вы разрабатываете на Go и хотите писать гибкий, чистый и тестируемый код, то понимание структур, интерфейсов и внедрения зависимостей станет отличным навыком. [Статья](https://clc.to/de4HGA) подробно объясняет, как использовать эти возможности языка для создания устойчивой архитектуры.

 **Что вы узнаете?**
**Структуры**: как моделировать реальные данные с помощью полей и методов.
**Интерфейсы**: как задавать контракты между типами и отделять детали реализации от общей логики.
**Внедрение** **зависимостей**: как сделать ваш код модульным и тестируемым, передавая зависимости через параметры конструктора или функции.

** Почему это важно?**
**Гибкость**: интерфейсы позволяют заменить реальные зависимости на моки, что упрощает тестирование.
**Удобство** **изменений**: структура кода остаётся простой при добавлении новых функций.
**Производительность**: Go минималистичен, и внедрение зависимостей здесь проще, чем в других языках.",8441,13,0,goproglib
5567,2025-01-10 18:08:06+00:00," **Краткий обзор на Echo**

Echo — это высокопроизводительный и простой в использовании веб-фреймворк, созданный для разработки приложений на языке Go. Его минимализм, гибкость и богатый набор функций делают Echo популярным выбором для создания REST API, микросервисов и веб-приложений.

**Ключевые особенности Echo:**
**Высокая** **производительность**: echo использует минимальные ресурсы и обеспечивает быстрый отклик благодаря оптимизированной маршрутизации и обработке HTTP-запросов.

**Удобная** **маршрутизация**: поддерживает простую маршрутизацию с возможностью использования переменных и параметров URL:
```e.GET(""/users/:id"", getUser)
e.POST(""/users"", createUser)```

**Шаблоны**: поддерживает интеграцию с шаблонизаторами для рендеринга HTML-страниц.

**WebSocket** **и** **SSE**: встроенная поддержка современных технологий реального времени, таких как WebSocket и Server-Sent Events.

**Простая** **интеграция**: echo легко интегрируется с другими библиотеками Go, такими как ORM (GORM, Ent), библиотеки для работы с базами данных или очередями.


**Пример Hello World** **с использованием Echo**:
```func main() {
  e := echo.New()

  e.GET(""/"", func(c echo.Context) error {
    return c.String(http.StatusOK, ""Hello, World!"")
  })

  e.Logger.Fatal(e.Start("":8080""))
}```",6314,50,6,goproglib
5565,2025-01-10 06:59:57+00:00,"** Помните сортировку Сталина? Встречайте милосердную версию!**

Недавно наткнулись на интересный проект — [MercifulStalinSort](https://clc.to/E9V0fA). Если помните, в сортировке Сталина элементы, нарушающие порядок, безжалостно удаляются. Итог — массив вроде бы отсортирован, но какой ценой? 

**Милосердный Сталин идёт другим путём:**
 Забираем из основного массива элементы, которые стоят не по возрастанию
 Затем из дополнительного массива в обратном порядке забираем те элементы, которые стоят не по убыванию
 После чего нужно просто объединить получившиеся массивы. Если остались неотсортированные элементы, то обработать их рекурсивно

Идея проста, но алгоритм получился намного более «сострадательным», сохраняя больше данных. Конечно, это больше про эксперимент и юмор, чем про реальную производительность, но попробовать его в деле — уже весело!",6117,20,3,goproglib
5564,2025-01-09 18:07:49+00:00,"** Улучшение тестов на Go: почему стоит использовать ""if got, want""**

Техника проверки __if got != want { t.Errorf(...) }__ в тестах Go — это **простой** и **эффективный** способ проверки значений, который **полностью соответствует философии языка**. Она не требует сторонних библиотек, остаётся прозрачной и легко читаемой, что особенно важно для минималистичного и понятного кода.

Благодаря своей простоте, этот подход **легко масштабируется**: от проверки одного значения до сложных сценариев с таблицами тестирования. Кроме того, стандартный вывод ошибок в Go обычно достаточно информативен, чтобы быстро понять, что пошло не так. 

 Подробнее про технику с примерами кода можно почитать [тут](https://clc.to/uCpR4A)",6600,30,4,goproglib
5563,2025-01-09 13:01:22+00:00,#мем,6530,89,2,goproglib
5562,2025-01-08 17:59:57+00:00,"** NoCopy Convention в Go: оптимизация работы с памятью**

В языке Go копирование данных — это стандартное поведение при передаче значений в функции или присваивании. Однако, для больших структур или объектов, это **может быть неэффективно** и **повлиять на производительность**. 

↗️ Конвенция NoCopy советует передавать большие структуры или массивы по указателю, а не по значению. Это позволяет работать с данными без их излишнего копирования, экономя память и улучшая производительность.
Например, если у вас есть большая структура, передавайте её как указатель в функцию, чтобы избежать создания копий.

 Этот подход **полезен** в случае, когда требуется **эффективно управлять памятью** и **ускорить выполнение программы**. Но важно помнить о возможных рисках, например, необходимости контроля за нулевыми указателями.

 Для более подробного объяснения и примеров, [загляните в статью](https://clc.to/OtdE0w)",6874,29,5,goproglib
5561,2025-01-08 10:59:57+00:00," **Сортировка Сталина: как избавиться от «неугодных» элементов в последовательности**

Сортировка Сталина — это шутливый термин, который описывает довольно необычный способ сортировки чисел или элементов в последовательности. Принцип этой сортировки сводится к тому, что из массива чисел удаляются все элементы, которые нарушают порядок возрастания. 
То есть, остаются только те элементы, которые следуют друг за другом по возрастанию (или не уменьшаются). Применяя такую сортировку, можно получить на выходе подпоследовательность чисел, которая будет упорядочена, а все «недовольные» (нарушающие порядок) будут удалены.

**Как работает «сортировка»?**
1️⃣ Проходим по массиву и проверяем каждый следующий элемент.
2️⃣ Если элемент меньше предыдущего, его ""удаляем"" (не включаем в итоговую последовательность).
3️⃣ В результате получаем подпоследовательность, которая является возрастающей.",6162,61,31,goproglib
5560,2025-01-07 18:07:06+00:00,"Привет! 

Очень интересно: читаете ли вы что-то, кроме технической литературы? И нет, книги по agile не в счёт — это точно не сказки!

Пишите свои мнения в комментарии!

#интерактив",6056,10,13,goproglib
5559,2025-01-07 11:03:43+00:00,"** Пакет embed в Go**

Если вы когда-либо работали с Go, то знаете, как важно уметь управлять статическими ресурсами. Пакет embed (представленный в Go 1.16) решает эту задачу элегантно: он позволяет встраивать файлы прямо в исполняемый бинарный файл, что делает приложение автономным и упрощает его развертывание.

****** Зачем использовать embed?**
С помощью директивы //go:embed вы можете встроить файлы (например, HTML, CSS, конфигурационные файлы или изображения) прямо в бинарный файл. Это исключает необходимость поставлять эти файлы отдельно, и ваши приложения становятся более компактными и безопасными.

** Как это работает?**
Вы указываете директиву //go:embed перед переменной.
Используете типы данных string для текстовых файлов, []byte для бинарных данных или embed.FS для работы с целыми директориями.

** Пример использования:**
```package main

import (
    ""embed""
    ""fmt""
)

//go:embed hello.txt
var hello string

func main() {
    fmt.Println(hello)
}```
В этом примере файл hello.txt встроен в приложение, и его содержимое доступно как строка.

**Почему стоит использовать embed?**
****** Удобство** развертывания: всё в одном файле — не нужно беспокоиться о поставке отдельных файлов.
****** Безопасность**: встроенные файлы не могут быть изменены после компиляции.
 **Автономность**: ваши приложения не зависят от внешних файлов и легко переносятся между окружениями.

**Когда не стоит использовать embed?**
Когда нужно работать с динамически изменяющимися файлами (например, конфигурациями, которые могут меняться в процессе работы приложения).
Для очень больших файлов, так как это увеличивает размер бинарника.",6750,39,38,goproglib
5558,2025-01-07 07:03:45+00:00,"** DOOM как искусство? Да!**

Вы когда-нибудь думали, что DOOM — это не просто игра, а настоящее искусство? Если нет, то ""[DOOM: The Gallery Experience](https://clc.to/EokE2A)"" вас переубедит.

 Что это?
Это необычная галерея, где уровни культового шутера превращены в экспонаты. Вас ждёт прогулка по знакомым аренам, но теперь вместо демонов — атмосфера спокойствия и эстетики. Звучит абсурдно? Возможно. Но выглядит невероятно!

 Чем цепляет?
Ретро-дизайн DOOM сочетается с музейной атмосферой.
Музыка и освещение создают уютное ощущение — никакого стресса, только удовольствие.
Каждый уголок можно рассматривать как арт-объект, а не поле боя.",5631,6,0,goproglib
5557,2025-01-06 18:08:13+00:00,"****** Хотите порешать задачи?**

Загляните в [репозиторий](https://clc.to/k3pp_w)! Это небольшой сборник увлекательных задачек для всех, кто хочет изучать или совершенствовать свои навыки программирования на языке Go.

** Как всё устроено?**
Каждая задача – это отдельная папка с:
Описанием в README.md, чтобы вы точно поняли, что делать.
Тестами в *_test.go, которые не дадут схалтурить.

** Что делать?**
1️⃣ Читаем задание в README.md.
2️⃣ Пишем решение на Go.
3️⃣ Запускаем тесты и радуемся (или ищем баги, если тесты падают).

 Подходит как для новичков, так и для бывалых разработчиков, которые любят прокачивать скиллы через практику. А если сделаете самое элегантное решение и успеете быстрее всех, то вас увековечат в репозитории!",9639,20,0,goproglib
5556,2025-01-06 06:59:53+00:00,"** DebugString() в Go: псевдостандарт для удобной отладки**

Недавно в блоге DoltHub вышла [интересная статья](https://clc.to/NznpIQ) о неформальном подходе к отладке структур в Go с помощью метода DebugString(). 

** Что такое DebugString()?**
Это метод, который используется для получения детального текстового представления структур данных. В отличие от String(), предназначенного для пользовательского вывода, DebugString() раскрывает больше технических деталей, которые полезны разработчикам во время отладки.

Пример:
```type Example struct {  
    Field1 int  
    Field2 string  
}  

func (e Example) DebugString() string {  
    return fmt.Sprintf(
        ""Example{Field1: %d, Field2: %q}"", 
        e.Field1, 
        e.Field2)  
}  ```
 **Почему это полезно?**
 DebugString() помогает легко визуализировать внутреннее состояние объектов.
 Вы можете отделить пользовательский вывод (String()) от отладочного, чтобы не показывать конфиденциальную информацию.
Этот метод может быть добавлен к любым типам, не нарушая существующую функциональность.

** Почему это псевдостандарт?**
Go не навязывает DebugString() как обязательный метод, но его использование становится популярным среди библиотек, где требуются расширенные возможности отладки. Это хороший пример того, как в сообществе Go рождаются практичные и неформальные стандарты.",5905,26,10,goproglib
5555,2025-01-05 17:06:26+00:00,"** Уже 2025 год: Время обновить свою ide для Go! **

Разработка на Go продолжает набирать популярность, и если вы все еще используете старые настройки для Visual Studio Code, пора идти в ногу со временем! В [статье](https://clc.to/d_-kaA) вы найдете подробное руководство по тому, как сделать вашу IDE максимально удобной и продуктивной.

** Что нужно для старта:**
**Go (1.22 и выше)**: Последние версии языка — не только про производительность, но и про новые возможности.
**VS Code**: Самая гибкая IDE для работы с Go.
**Git**: Без контроля версий в 2025 году никуда.

** Что настроить в VS Code:**
Расширения, без которых нельзя:
 **Go** (ms-vscode.go): официальное расширение для автодополнения, отладки и работы с тестами.
 **Error** **Lens**: чтобы ошибки были видны сразу, прямо в коде.
 **GitLens**: лучшая интеграция с Git.
 **Go** **Test** **Explorer**: легкое управление тестами.

**Настройка settings.json:**
******Автоматическое** **обновление** инструментов Go.
Использование** Language Server** для лучшей поддержки языка.
******Подсказки**, которые делают код читабельным.
******Горячие** **клавиши**: Настройте свои любимые шорткаты, чтобы ускорить работу в разы.",6492,25,10,goproglib
5554,2025-01-05 15:21:18+00:00," Начни 2025-й с апгрейдом навыков, 
которые откроют двери в мир IT!

Ты можешь собрать свой персональный план обучения с помощью нашего новогоднего конструктора. Это шанс не просто начать год с полезных знаний, но и сделать инвестицию в своё будущее, которая окупится многократно.

 [Собери свой план и начни путь в IT](https://proglib.io/w/81f9feeb)

Почему это выгодно?

 Несколько программ по цене одной — максимальная эффективность: учишься сразу тому, что действительно нужно.

 Бессрочный доступ — все материалы всегда под рукой, чтобы учиться в своём темпе.

 Знания, которые окупятся — навыки, востребованные в любой точке мира.
Какие навыки ты можешь прокачать?

 Математика для Data Science + Алгоритмы и структуры данных
— Подготовка к собеседованиям в FAANG и поступлению в ШАД. Решай сложные задачи, работай с данными и моделями на профессиональном уровне.

 Алгоритмы и структуры данных + ML
— Улучшай своё алгоритмическое мышление и изучай базовые методы машинного обучения, чтобы создавать интеллектуальные приложения.

 Frontend Basic + Базовые модели ML
— Построй свою первую веб-страницу и погрузись в мир ML: от нейросетей до ML-бустинга.

 Архитектуры и шаблоны проектирования + Математика для Data Science
— Развивай аналитическое мышление и учись проектировать устойчивые системы.

 Алгоритмы и структуры данных + Frontend Basic
— Получи полный набор навыков: от оптимизации алгоритмов до создания современных веб-приложений.

Не упусти шанс сделать шаг в будущее! Новый год — это время обновлений, и твоя карьера может стать одним из них.

[ Составь свой IT-маршрут ](https://proglib.io/w/81f9feeb)сейчас или выбери курс по новогодней скидке",5095,2,0,goproglib
5553,2025-01-05 06:59:55+00:00," **Подборка игр для программистов и любителей логики**

Половина праздников позади, но это не повод унывать! Мы собрали для вас подборку игр, которые помогут провести остаток выходных с удовольствием и пользой. Некоторые из них можно пройти за пару вечеров, а другие увлекут вас на более долгое время. Все они сочетают логику и креативность.

1️⃣ **Human Resource Machine**
 **Жанр**: логическая головоломка.
 **Описание**: в этой игре вы программируете маленького офисного сотрудника-робота для выполнения задач. Простая и увлекательная концепция, которая помогает развить алгоритмическое мышление.
⏱️ **Длительность**: подходит для прохождения за пару вечеров.
**
****2️⃣**** The Witness**
 **Жанр**: головоломка от первого лица.
 **Описание**: исследуйте красочный остров, полный логических пазлов. Каждая загадка требует внимания, пространственного мышления и способности находить закономерности.
⏱️ **Длительность**: подойдет для тех, кто готов посвятить игре несколько дней.

**3️⃣**** Baba Is You**
 **Жанр**: логическая игра.
 **Описание**: уникальная игра, где правила буквально можно менять на ходу. Сдвигая блоки, вы переписываете законы мира, создавая собственные решения для головоломок.
⏱️ **Длительность**: зависит от вашей изобретательности, но можно пройти основные уровни за пару вечеров.

4️⃣** Game Dev Tycoon**
 **Жанр**: симулятор разработки игр.
 **Описание**: постройте свою студию разработки игр, создавайте хиты и управляйте процессом. Отличный способ понять, как устроен мир геймдева.
⏱️ **Длительность**: можно играть долго, но базовые достижения достигаются быстро.

5️⃣ **Gunpoint**
 **Жанр**: тактический платформер с элементами головоломки.
 **Описание**: в роли шпиона вы используете уникальные гаджеты и хакерские навыки для проникновения в защищенные здания. Игра сочетает элементы логики и экшена.
⏱️ **Длительность**: идеально подходит для прохождения за пару вечеров.",5379,8,0,goproglib
5552,2025-01-04 18:04:30+00:00,#мем,5512,67,0,goproglib
5551,2025-01-04 15:59:55+00:00," Подборка лучших статей «Библиотеки Go-разработчика» за декабрь: сохраняй в заметки, чтобы не пропустить #самыйсок

‍ [Анатомия SQL-запроса: как работают запросы к базе данных](https://t.me/goproglib/5464)
 [Самоучитель по Go для начинающих. Часть 18. Протокол HTTP. Создание HTTP-сервера и клиента. Пакет net/http](https://t.me/goproglib/5484)
 [aligo: Утилита для проверки структур в Go](https://t.me/goproglib/5459)
 [Circuit Breaker в Go: защита ваших микросервисов](https://t.me/goproglib/5477)
 [Управление конфигурациями в Go с помощью Viper](https://t.me/goproglib/5453)",5790,1,0,goproglib
5550,2025-01-04 06:59:55+00:00,"** Оптимизация и стресс-тесты в Go с флагом -cpu**

Когда речь идет о тестировании производительности и устойчивости приложений, работающих в многопоточной среде, Go предоставляет отличный инструмент — флаг -__cpu__. Этот параметр позволяет запускать тесты с разным количеством логических процессоров (__GOMAXPROCS__), моделируя реальное поведение приложения в условиях разного уровня параллелизма.

 **Как работает флаг -cpu?**
Флаг -cpu указывается при запуске тестов и задаёт список значений, с которыми тесты должны быть выполнены. Например:
```go test -cpu=4,5```
 Этот пример запустит тесты дважды: 
1️⃣ С четырьмя логическими процессорами.
2️⃣ Затем с пятью.

 Зачем это использовать**?**
**Тестирование под разной** **нагрузкой**: использование нескольких значений -cpu позволяет понять, как ваше приложение поведёт себя на системах с разным количеством ядер.
**Поиск** **узких** **мест**: помогает выявить проблемы в конкурентном доступе, такие как гонки данных или узкие места в производительности.
**Реализм** **тестов**: ваш код проверяется в условиях, максимально приближенных к реальной эксплуатации.

** Ключевые моменты:**
 Можно указать несколько значений через запятую, например -cpu=1,2,4,8, чтобы протестировать приложение в разнообразных сценариях.
****Если -cpu не задан, тесты запускаются с текущим значением GOMAXPROCS.
Практическая выгода: Регулярное использование -cpu в тестах повышает устойчивость вашего кода и предотвращает неожиданные проблемы при высоких нагрузках.

** Пример для продвинутых:**
Если вы хотите протестировать код на нескольких уровнях параллелизма, запустите:
```go test -cpu=1,2,4,8 -v```
 Результат: тесты покажут, как приложение справляется с 1, 2, 4 и 8 логическими процессорами. Это отличный способ убедиться, что ваш код работает эффективно и безопасно в конкурентной среде.

#tip",5474,48,0,goproglib
5549,2025-01-04 06:02:23+00:00,"️ **Подпишись на нашу еженедельную email-рассылку, чтобы быть в курсе последних открытий и тенденций в мире бэкенда.**

В еженедельных письмах ты найдешь:
● Языки программирования и фреймворки для бэкенда
● Архитектура и проектирование серверных приложений
● Базы данных и управление данными
● Безопасность и защита данных
● Облачные технологии и DevOps
● API и интеграции
● Тестирование и отладка
● Инструменты и утилиты для бэкенд-разработчиков
● Лучшие практики и паттерны проектирования

[Подписаться](https://proglib.academy/backend-newsletter)",5225,1,0,goproglib
5548,2025-01-03 18:01:21+00:00,#мем,5584,67,8,goproglib
5546,2025-01-02 16:59:57+00:00,"** Стриминг видео на Go: легко, быстро и просто! **

Потоковая передача видео может показаться сложной задачей, но язык Go отлично справляется с этим! В [статье](https://clc.to/YgxQbQ) автор рассказывает, как создать минималистичный HTTP-сервер для стриминга видео прямо в браузер.

**В чём суть?**
**Как работает стриминг**
Современные браузеры используют HTTP-заголовок Range, чтобы запросить только нужные части видео. Это позволяет воспроизводить видео без необходимости загружать весь файл.
**Реализация на Go**
В статье показано, как создать интерфейс, который обрабатывает запросы и отправляет запрошенные байты видеофайла клиенту.
** Поддержка частичных запросов**
Автор объясняет, как правильно настроить заголовки HTTP, такие как Content-Range и Content-Length, чтобы обеспечить плавный стриминг и совместимость с браузерами.

**Почему это интересно?**
**Простота реализации**
Вам не нужно использовать тяжёлые сторонние библиотеки — базовый сервер для стриминга можно собрать за несколько строк кода на Go.
**Производительность Go**
Go славится своей скоростью и возможностями для работы с сетью. Это делает его отличным выбором для задач, связанных с видео.
**Современный подход**
Статья соответствует стандартам RFC 7233, что гарантирует корректную обработку запросов браузера.

**Зачем это вам?**
Если вы хотите добавить потоковую передачу видео в свой проект, Go предоставляет мощный и простой инструмент для этого. Это может быть полезно для образовательных платформ, приложений для онлайн-курсов, медиа-хостинга или даже стриминга собственного контента.",6220,31,2,goproglib
5534,2025-01-02 10:59:57+00:00,"Привет, Go сообщество! 

Мы хотели бы поближе с вами познакомиться! Будем очень признательны за ваши ответы на следующие вопросы!",4498,5,0,goproglib
5533,2025-01-02 07:05:28+00:00,#мем,5080,21,1,goproglib
5532,2025-01-01 16:07:48+00:00,"Вот и новый год!  Давайте погадаем что там нас ждёт?
Делайте скриншот и присылайте в комментарии!⬇️

#интерактив",5273,12,9,goproglib
5530,2025-01-01 07:02:29+00:00,"**Давайте признавайтесь в комментариях — что вам подарили? **
#интерактив",5153,17,10,goproglib
5529,2024-12-31 15:02:20+00:00,"С наступающим, Go сообщество! Или уже наступившим!

Уже придумали чем заняться в новом году? 
Если нет, то предлагаем вам подборку фильмов и сериалов к просмотру:

 Остановись и гори (2014)
🅰️ Игра в имитацию (2014)
 Revolution OS (2001)
©️ Разрабы (2020)
 Кто я (2014)",5308,19,0,goproglib
5528,2024-12-31 13:01:30+00:00,"**Бесплатный курс по фулстек-разработке — реальность **

Под Новый год Дед Мороз приносит подарки, а наши подписчики — собственные курсы! Сергей Дмитриев, который занимается коммерческой разработкой уже 15 лет, поделился с нами своим обучением по созданию веб-сервиса с нуля. В курс входит 141 урок, 28 часов видео, исходный код и чат поддержки для участников.

Подробнее о курсе [читайте на Хабре](https://clc.to/ft13Iw) или в[ телеграм-канале Сергея](https://t.me/devPont/10)",5102,1,0,goproglib
5527,2024-12-31 07:02:00+00:00,"**Как проверить, пуст ли интерфейс (interface{}) в Go?**

В Go интерфейс считается пустым, только если оба его компонента (динамическое значение и тип) равны nil. Однако есть нюансы, о которых стоит знать.

1️⃣ **Прямая проверка с == nil**
Если интерфейс действительно пустой (значение и тип nil), проверка if myInterface == nil вернет true.
```var i interface{}
if i == nil {
    fmt.Println(""Интерфейс пустой"")
}```

2️⃣** Проблема с nil и типом**
Если интерфейс содержит nil с типом (например, *int), он не будет считаться пустым.
```var i interface{} = (*int)(nil)
if i == nil {
    fmt.Println(""Пустой"") // Не выполнится
} else {
    fmt.Println(""Не пустой"") // Вывод: Не пустой
}```

3️⃣** Проверка через reflect**
Для точной проверки используйте пакет reflect:
```import ""reflect""

func isEmptyInterface(i interface{}) bool {
    return i == nil || reflect.ValueOf(i).IsZero()
}```

** Итог:**
Используйте if i == nil для простых случаев.
Для значений nil с типом — добавьте проверку через reflect.
Не забывайте, что интерфейс с типом, но nil-значением, не считается пустым.",5355,26,3,goproglib
5526,2024-12-30 18:09:18+00:00,"️ **6 идей, как ускорить поиск работы за рубежом**

Статья для тех, кто устал от отказов и безрезультатных поисков. Узнайте секреты, которые помогут вам найти работу за рубежом в разы быстрее!

 [Читать статью](https://proglib.io/p/6-idey-kak-uskorit-poisk-raboty-za-rubezhom-2024-12-20)",4712,3,0,goproglib
5524,2024-12-30 07:08:20+00:00,"** Итоги года Proglib: 2024 год в цифрах и достижениях**

Чем вдохновляются разработчики, чтобы создавать новые проекты на Go? Proglib в этом году вновь стал местом, где инженеры обмениваются опытом, изучают тренды и находят полезные материалы.

[ Итоги года](https://proglib.io/sh/KBXQzD0LMi) — это не только цифры, но и история роста сообщества, частью которого можете стать и вы!",5230,6,0,goproglib
5523,2024-12-29 18:01:47+00:00," **Читаемость важнее скорости: зачем писать «медленный» код на Go?**

Когда речь заходит о написании кода на Go, многие стремятся к максимальной производительности. Но действительно ли это всегда нужно? Джон Арундел из Bitfield Consulting [утверждает обратное](https://clc.to/ojsMOw): в большинстве случаев читаемость кода важнее его скорости.
**
******** Почему не стоит зацикливаться на оптимизации:**
**Go уже быстр**: как компилируемый язык, Go обеспечивает высокую производительность даже без специальных оптимизаций.
******Код** **читается** **чаще**, **чем** **выполняется**: поддерживаемость и простота кода экономят время команды в долгосрочной перспективе.
**Производительность редко критична**: для большинства приложений скорость не является основным узким местом.

 **Когда оптимизация важна?**
Конечно, есть исключения — например, игры, высоконагруженные серверы или системное программное обеспечение, где каждый микросекундный прирост имеет значение. Но в остальных случаях следует отдавать предпочтение читаемости.

** Как писать понятный код:**
 Используйте понятные имена переменных и функций.
Разбивайте сложные функции на простые и логически завершенные.
Документируйте свои решения и используйте комментарии там, где это оправдано.
Не бойтесь жертвовать ""чуть-чуть большей производительностью"" ради ясности.

#новость",5548,29,12,goproglib
5522,2024-12-29 11:01:21+00:00,"** Мини-статья о мьютексе в Go**

В [статье ](https://clc.to/7D3PdA)Линк Мэтью рассказывает, как управлять доступом к общим ресурсам в многопоточности с помощью мьютексов.

Мьютекс (mutual exclusion) гарантирует, что только одна горутина работает с разделяемым ресурсом в каждый момент времени. 

**В статье наглядно показано:**
 Что такое мьютекс и как он работает;
 Простой пример использования sync.Mutex в Go.",7482,14,10,goproglib
5521,2024-12-28 18:05:21+00:00,"**️  Golang на PSP: как язык программирования вышел за пределы серверов! **

Что общего между языком Go и портативной консолью PlayStation Portable? На первый взгляд, ничего. Но один разработчик нашёл способ запускать программы на Go на этой культовой консоли! 

** Как это возможно?**
**️ WebAssembly **и **TinyGo**: код на Go компилируется в WebAssembly (WASM) с помощью компилятора TinyGo.
**️ Инструменты**: WASM преобразуется в C-код с помощью **w2c2**, а для графики используется библиотека **raylib**, портированная для PSP.

** Зачем это нужно?**
 Исследование возможностей Go в новых средах.
 Вдохновение для ретро-разработчиков и экспериментов с устаревшими устройствами.
 Простое хобби для фанатов PSP!

️ Хотите попробовать? [Прочитайте статью](https://clc.to/agKOOQ)! Это отличный способ погрузиться в эксперименты с Go и WebAssembly.",5923,28,2,goproglib
5520,2024-12-28 07:10:21+00:00,"** Визуализация вашего кода в один клик!**

 **GitDiagram **— это **онлайн**-инструмент, который позволяет визуализировать структуру и содержимое репозиториев GitHub в виде **интерактивных диаграмм**.

**️ Основные возможности:**
**Быстрая визуализация**: превращает любой репозиторий GitHub в наглядную диаграмму, облегчая понимание структуры проекта;
**Простота использования**: достаточно заменить 'hub' на 'diagram' в URL любого репозитория GitHub, чтобы получить его визуализацию.

 [Попробуйте сами](https://clc.to/ryqvEA)! Введите URL интересующего вас репозитория для мгновенной визуализации!

#новость",6321,14,2,goproglib
5519,2024-12-28 06:15:50+00:00," **Привычка ""срезать углы"" при ходьбе – это интуитивное применение алгоритмов?** 

Так работает [жадный алгоритм](https://proglib.io/p/rasprostranennye-algoritmy-i-struktury-dannyh-v-javascript-osnovnye-ponyatiya-i-rabota-s-massivami-2021-10-06?utm_source=tg_media&utm_medium=algorithm&utm_campaign=new_years_cours): вы выбираете наиболее выгодный шаг в каждый момент времени, чтобы минимизировать общий путь. То же самое применяют разработчики, создавая маршруты для такси или доставок. 

С нашим курсом [«Алгоритмы и структуры данных»](https://proglib.io/w/014fe6d8) вы научитесь решать любые сложные задачи так же эффективно.

Начните свой 2025 со скидкой 35% на все курсы. Это лучшее вложении уходящего года – https://proglib.io/w/014fe6d8",5676,2,0,goproglib
5518,2024-12-27 15:59:58+00:00," **Go Generics: Работа с constraints.Comparable**

Обобщения (**generics**) в Go стали одной из самых обсуждаемых функций языка. Давайте разберёмся, как использовать ограничение **__constraints.Comparable__**, чтобы создавать более гибкие и безопасные функции, работающие с любыми типами, поддерживающими сравнение.
**
********Что такое constraints.Comparable?**
**constraints.Comparable** — это ограничение (constraint) из библиотеки [golang.org/x/exp/constraints](https://proglib.io/). Оно позволяет работать только с типами, которые поддерживают операции сравнения (==, !=, <, >, <=, >=), такими как числа, строки или булевы значения.

Пример: поиск минимального значения
```// Min находит минимальное значение в срезе
func Min[T constraints.Comparable](slice []T) (T, error) {
  if len(slice) == 0 {
    var zero T
    return zero, fmt.Errorf(""пустой срез"")
  }

  min := slice[0]
  for _, v := range slice[1:] {
    if v < min {
      min = v
    }
  }
  return min, nil
}```
Теперь её можно использовать с любыми типами, которые можно сравнить
```func main() {
  ints := []int{4, 2, 8, 1, 5}
  minInt, _ := Min(ints)
  fmt.Println(""Минимум:"", minInt)

  strings := []string{""apple"", ""banana"", ""cherry""}
  minString, _ := Min(strings)
  fmt.Println(""Минимум:"", minString)
}```
**
Как это работает?**
 **Ограничение** **constraints**.**Comparable**: указывает, что тип T должен поддерживать операции сравнения.
 **Обобщённый** **параметр** **T**: позволяет функции работать с любыми типами, удовлетворяющими ограничению.
 **Универсальность**: функция Min может быть вызвана как с числами, так и со строками.

 Хочется больше примеров? Читайте [статью](https://clc.to/V4isow)!",5581,20,1,goproglib
5517,2024-12-27 06:59:58+00:00,"******Как эффективно управлять уязвимостями в проектах на Go**

В современном мире кибербезопасность играет ключевую роль в разработке программного обеспечения. Уязвимости в коде могут стать причиной серьезных проблем, включая утечку данных, финансовые потери и подрыв доверия пользователей. 

 **Почему важно реагировать на уязвимости?**
Никто не застрахован от появления уязвимостей в сторонних библиотеках или собственном коде. Даже если ваш проект работает стабильно, игнорирование уведомлений о безопасности может привести к катастрофическим последствиям. К примеру, недавно обнаруженные уязвимости в пакетах [golang.org/x/net](https://proglib.io/) и [golang.org/x/crypto](https://proglib.io/) стали ярким напоминанием о необходимости регулярного мониторинга безопасности.

 **Какие инструменты помогут?**
Для выявления уязвимостей и управления зависимостями в Go существуют специализированные инструменты. Один из них — **__govulncheck__**, который позволяет **анализировать** **зависимости** проекта и **находить** известные **уязвимости**. Этот инструмент интегрируется с базой данных уязвимостей Go и предоставляет четкие рекомендации по их устранению.

Кроме того, если ваш проект включает Docker-образы, стоит обратить внимание на **Docker Scout**. Этот инструмент позволяет сканировать образы на наличие уязвимых компонентов и предоставляет подробные отчеты для их устранения.

 **Как начать?**
Если вас заинтересовала тема управления уязвимостями в Go, обратите внимание на полезный [гайд](https://clc.to/QjNwmg), в котором подробно описаны шаги по настройке **__govulncheck__**, работе с **Docker Scout** и обновлению зависимостей. Статья помогает не только понять, как реагировать на уведомления о безопасности, но и делает акцент на необходимости регулярного анализа кода.",5424,7,0,goproglib
5516,2024-12-26 18:04:19+00:00,"** SmartClass: как научить AI проверять домашки программистов**

Автоматизация рутинных задач — один из главных трендов в IT, но как насчет проверки домашек? Представьте себе систему, которая не только оценивает код студентов, но и помогает им понять свои ошибки, словно опытный наставник. Звучит как фантастика? В статье рассказывается, как проект SmartClass воплощает эту идею в реальность, используя возможности AI. Узнайте, какие технологии лежат в основе, с какими трудностями сталкиваются разработчики и как это меняет обучение программированию.

 [Подробнее о том, как AI помогает проверять домашние задания](https://proglib.io/sh/1y2RXPsCdG)",4913,1,0,goproglib
5515,2024-12-26 09:38:09+00:00,"** Новый канал для вдохновения — UX in GIF**

Мы запустили свежий канал, где делимся идеями для дизайна интерфейсов. Всё самое стильное, оригинальное и вдохновляющее теперь в одном месте.

 **Чем полезен канал?**

→ Идеи для дизайна интерфейсов.
→ Анимации, которые можно повторить или адаптировать.
→ Лёгкий способ искать вдохновение перед новым проектом.

 __Подписывайтесь и вдохновляйтесь:__ [UX in GIF](https://t.me/ux_in_gif)",5462,4,0,goproglib
5514,2024-12-26 06:59:58+00:00,"**Композиция в Go: как избежать скрытых проблем с интерфейсами**

Композиция — одна из ключевых особенностей Go, позволяющая строить гибкие и переиспользуемые компоненты. Однако сочетание композиции с неявными интерфейсами может привести к неожиданным проблемам. В [статье](https://clc.to/ZhqOYw) описывается реальная ситуация, где композиция поверх http.ResponseWriter нарушила работу Server-Sent Events (SSE).

**Что произошло?**
При добавлении кастомного функционала через композицию (встраивание) http.ResponseWriter, автор столкнулся с проблемой: неявные интерфейсы, такие как http.Flusher, перестали поддерживаться.
SSE, зависящие от возможности «сбрасывать» данные (Flush), перестали корректно работать.

Go использует неявные интерфейсы, что обычно упрощает работу с кодом. Однако, при добавлении композиции, встроенный объект теряет автоматически реализуемые интерфейсы, если они явно не указаны в новой структуре.

**Проблема с композицией:**
Когда вы создаете собственную структуру, добавляя к ней http.ResponseWriter через композицию, интерфейс http.Flusher перестает быть реализованным:

```type CustomWriter struct {
    http.ResponseWriter
    status int
}

func (cw *CustomWriter) WriteHeader(code int) {
    cw.status = code
    cw.ResponseWriter.WriteHeader(code)
}```
Такой код работает для базовой обработки, но если клиент рассчитывает на интерфейс http.Flusher (например, для Server-Sent Events), он больше не доступен. SSE не будут работать корректно.

 **Решение проблемы**
Чтобы восстановить функциональность, автор явно реализовал недостающие методы в композируемой структуре. Например, был добавлен метод Flush в кастомный объект.

```// Реализация метода Flush для поддержки интерфейса http.Flusher
func (cw *CustomWriter) Flush() {
    if flusher, ok := cw.ResponseWriter.(http.Flusher); ok {
        flusher.Flush()
    }
}```",5410,11,9,goproglib
5513,2024-12-25 17:59:58+00:00,"⭐️** Gowebly: современный инструмент для веб-разработки на Go**

Разработка веб-приложений на Go становится ещё проще с [Gowebly](https://clc.to/Mn9HTA) — инструментом командной строки, который сочетает мощь Go и современные веб-технологии. Если вы хотите быстро создавать быстрые и удобные веб-приложения, этот инструмент вам точно пригодится!
**
 Что такое Gowebly?**
Gowebly — это CLI для генерации веб-приложений на Go с использованием популярных фреймворков (Fiber, Gin, Echo и других) и интеграции с современными библиотеками для интерфейса, такими как htmx, hyperscript, Alpine.js и CSS-фреймворками (Tailwind CSS, Bootstrap и др.).

** Ключевые возможности**
**Поддержка популярных Go-фреймворков**
Генерация проектов с Fiber, Gin, Echo, Chi и другими фреймворками.

**Современные интерфейсные технологии**
Быстрая интеграция с htmx, Alpine.js и другими инструментами для создания динамических пользовательских интерфейсов.

**CSS-фреймворки на выбор**
Tailwind CSS, Bootstrap, UnoCSS — выбирайте то, что подходит вашему проекту.

**Hot Reloading**
Горячая перезагрузка шаблонов позволяет ускорить процесс разработки.

**PWA-ready**
Создавайте прогрессивные веб-приложения, готовые к установке на устройства.

**Простота кроссплатформенной работы**
Работает на Linux, macOS, Windows (включая WSL).",5537,19,3,goproglib
5512,2024-12-25 15:08:21+00:00,"** Программист в «Игре в кальмара»: каковы твои шансы выжить?**

Каждый день укрощаете горутины и собираете микросервисы? 

Проверьте, помогут ли вам Go-скилы и железная логика выжить в «Игре в кальмара»! Один panic без recover может стать фатальным 

 [Пройти тест](http://clc.to/PnGqNQ)",5265,13,0,goproglib
5511,2024-12-25 12:59:58+00:00,"** Timeouts в Go: Управление длительными задачами**

В разработке на Go часто требуется ограничивать время выполнения задач, чтобы избежать зависаний или ненужной траты ресурсов. Таймауты помогают контролировать выполнение операций, обеспечивая стабильность и отзывчивость приложений.

** Что такое таймаут?**
Таймаут позволяет задать время, после которого задача будет прервана, если она не завершилась. Это особенно полезно в случае сетевых запросов, работы с базами данных или сложных вычислений, которые могут зависнуть.

 **Как реализовать таймауты в Go?**
Go предлагает несколько удобных инструментов для работы с таймаутами. Вот несколько примеров:
1️⃣** Контексты с таймаутом**
Контекст позволяет задавать ограничение по времени, которое автоматически завершит задачу при превышении лимита.
```ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)
defer cancel()

result := make(chan string)

go func() {
    time.Sleep(3 * time.Second) // Долгая операция
    result <- ""Задача завершена""
}()

select {
case res := <-result:
    fmt.Println(""Результат:"", res)
case <-ctx.Done():
    fmt.Println(""Таймаут:"", ctx.Err())
}```
Зачем использовать?
Это гибкий способ контролировать выполнение задач с возможностью передать контекст в функции.

2️⃣ **Таймауты с time.After**
Функция time.After позволяет просто установить ограничение времени для выполнения задачи.
```done := make(chan string)

go func() {
    time.Sleep(3 * time.Second) // Долгая операция
    done <- ""Успешно выполнено""
}()

select {
case res := <-done:
    fmt.Println(res)
case <-time.After(2 * time.Second):
    fmt.Println(""Таймаут! Слишком долго"")
}```
Когда использовать?
Когда нужен быстрый и простой способ контролировать длительные операции.

3️⃣** HTTP-запросы с таймаутом**
Для работы с сетевыми запросами Go предоставляет возможность задавать таймаут на уровне HTTP-клиента.
```client := http.Client{
    Timeout: 2 * time.Second,
}

_, err := client.Get(""https://httpstat.us/200?sleep=3000"")
if err != nil {
    fmt.Println(""Ошибка запроса:"", err)
} else {
    fmt.Println(""Запрос выполнен успешно!"")
}```
Преимущество:
Контроль времени выполнения сетевых операций без дополнительных инструментов.

 **Почему это важно?**
**Избежание зависаний**: таймауты предотвращают блокировку программы.
**Оптимизация** **ресурсов**: долгие задачи прерываются, освобождая память и процессор.
**Улучшение** **UX**: пользователи быстрее получают обратную связь, даже если операция не удалась.",5228,18,5,goproglib
5510,2024-12-25 12:01:06+00:00,"⏱** До Нового года мало времени, а до успеха в IT — всего один сертификат**

Курсы от Proglib Academy — это крутой подарок для тех, кто интересуется IT, хочет освоить новую профессию и жить в шоколаде.

Почему сертификат на наши курсы — хороший презент:

Подходит для новичков и профессионалов: можно выбрать обучение под любой уровень знаний.
Помогает развивать востребованные навыки, которые пригодятся в IT.
Позволяет выбрать удобный формат обучения: можно учиться в своем темпе, когда удобно.

Сертификат оформляется за пару минут, и даже не нужно ломать голову над  упаковкой. 

 Подарите возможность начать год с полезных знаний и карьерного роста → [**подробнее о сертификатах**](https://clc.to/z83X5A)",5451,7,1,goproglib
5508,2024-12-24 18:01:36+00:00,"** iota в Go: магия автоматических констант**

******Что такое iota?**
__iota__ — это встроенный идентификатор в Go, используемый для генерации последовательных числовых значений внутри блока __const__. Он начинается с 0 и увеличивается на 1 в каждой новой строке.
```go 
const (
    A = iota // 0
    B        // 1
    C        // 2
)
fmt.Println(A, B, C)```

******Когда iota полезен?**
**1️⃣**** Для последовательных значений:**
iota автоматически увеличивается на 1, что идеально для создания счётчиков или статусов.

2️⃣** Для битовых флагов:**
Используя iota, можно легко генерировать битовые флаги:
```const (
    Read = 1 << iota // 1
    Write            // 2
    Execute          // 4
)
fmt.Println(Read, Write, Execute)```

**3️⃣**** Для вычислений:**
iota можно использовать для создания сложных последовательностей. Например:
```const (
   KB = 1 << (10 * iota) // 1024
   MB      // 1048576
   GB       // 1073741824
)
fmt.Println(KB, MB, GB)```",5784,43,14,goproglib
5506,2024-12-24 07:06:22+00:00,"** Итераторы для пагинации API на Go: эффективная обработка данных**

Работа с постраничными API — задача, знакомая каждому, кто пишет на Go. Но вместо того, чтобы тратить время на ручное управление запросами и ответами, можно [использовать ](https://clc.to/iyRmjQ)мощные инструменты стандартной библиотеки Go 1.23.

**Итераторы** — это способ автоматизировать пагинацию, делая код читаемым и гибким. С итератором вы сможете:

 **Обрабатывать данные без лишнего кода**: забудьте о ручной обработке страниц, переключениях и урлах.
** Упростить тестирование**: используйте мок-объекты для проверки функциональности итератора без реального API.
️ **Повысить читаемость и масштабируемость кода**: пишите лаконичные и удобные решения для сложных задач.

Если работа с REST API и пагинацией — часть ваших задач, итераторы могут стать тем инструментом, который вы давно искали. Время писать и тестировать код так, чтобы он работал за вас!",5872,18,0,goproglib
5505,2024-12-23 17:29:58+00:00,"** Korm: высокопроизводительный и удобный ORM для Go**

Если вы ищете инструмент, который упрощает работу с базами данных и обеспечивает высокую производительность, [познакомьтесь с Korm](https://clc.to/N-F5hA)! Это ORM для Go, вдохновленный Django, но с акцентом на простоту, скорость и современные подходы к разработке.

 **Особенности Korm:**
 **Молниеносная** **скорость**: korm способен обрабатывать до 44 000 запросов в секунду — это один из самых быстрых ORM на рынке. Если ваши приложения требуют высокой производительности, Korm — отличный выбор.

 **Встроенная** **панель** **администратора**: korm автоматически генерирует административную панель для работы с вашими данными. Вы можете просматривать, редактировать и удалять записи прямо в интерфейсе, не задумываясь о сложной настройке.

 **Событийная шина данных (Event Bus):** с помощью функции __WithBus__ Korm позволяет синхронизировать данные между несколькими приложениями, используя сетевую событийную шину. Это делает фреймворк особенно полезным для работы в распределенных системах.

 **Кэширование данных:** система кэширования Korm работает через горутины и каналы, автоматически обновляя кэш при изменении данных. Это повышает производительность при повторных запросах.
**
** **TLS-сертификаты под ключ:** korm автоматически обрабатывает сертификаты TLS с помощью Let's Encrypt, упрощая развертывание приложений в защищенной среде.

 **Поддержка асинхронности и конкурентной обработки:** korm спроектирован для работы в многопоточных средах, что делает его идеальным выбором для высоконагруженных приложений.",5999,25,8,goproglib
5504,2024-12-23 07:01:44+00:00,"****** Go vs Python: Раунд 2 
**
На этот раз в центре внимания [видео](https://proglib.io/w/eb8c484d) — облачные технологии: **Kubernetes**, **OpenTelemetry**, **Prometheus**, **Postgres** и **S3**. Оба языка протестированы в условиях микросервисной архитектуры.

Go:
️ Молниеносный отклик и минимальная нагрузка на ресурсы.
 Устойчивость под нагрузкой.

Python:
 Быстрый старт и удобство разработки.
 Уступает Go в скорости при высоких нагрузках.

****** Итог:**
Go побеждает на длинных дистанциях, Python выигрывает на коротких. Выбор за вами! ",5957,44,0,goproglib
5503,2024-12-22 18:04:21+00:00,"️ Логирование в Go: всё, что нужно знать

Логирование — одна из важнейших частей разработки, которая помогает отслеживать поведение приложений, анализировать ошибки и оптимизировать производительность. В языке Go для этих целей существует стандартный пакет log, предоставляющий базовые инструменты для работы с логами.

В одной из недавних [статей ](https://proglib.io/w/55a393b4)этот пакет рассматривается детально: начиная от стандартных возможностей и заканчивая кастомизацией логгеров для более сложных задач. Вот основные моменты:

 **Методы логгирования**: разбираются основные методы (__Print__, __Printf__, __Panic__, __Fatal __и другие), их отличия и подходящие случаи использования.
️ **Настройка логгера**: рассматриваются инструменты для изменения формата сообщений, добавление префиксов, а также перенаправление логов, например, в файл.
 **Пользовательские логгеры**: описывается создание собственных логгеров__ __для более гибкой работы с потоками вывода и форматирования.",6258,17,0,goproglib
5502,2024-12-22 07:01:07+00:00,"🆚️** Python FastAPI vs Go: Кто быстрее?**

Выбираете между Python FastAPI и Go (Golang) для разработки веб-приложений? Это [видео](https://proglib.io/w/3583b772) разбирает их производительность и помогает определиться с выбором технологии. Вот ключевые моменты теста! 

**Что тестировали?**
1️⃣ Базовый тест производительности: простые запросы и ответы.
2️⃣ Работа с базой данных Postgres: проверка скорости взаимодействия.
3️⃣ Кэширование через Memcache: нагрузка в сложных сценариях.

**Результаты**
**Go**
 Отличная производительность при высоких нагрузках.
 Минимальные задержки при работе с базой данных и кэшированием.
 Подходит для приложений, где критичны скорость и масштабируемость.

**FastAPI **(Python)
️ Удобство разработки и читабельность кода.
 Богатая экосистема Python-библиотек.
 Хорошо справляется с умеренными нагрузками, но уступает Go в пиковых ситуациях.

**Что выбрать?**
Выбирайте **Go**, если нужна высокая производительность и низкие задержки. Это идеальный выбор для микросервисов и высоконагруженных систем.
**FastAPI** подойдёт, если вы цените скорость разработки и интеграцию с библиотеками Python. Отличный выбор для прототипов и приложений средней нагрузки.",5988,28,2,goproglib
5501,2024-12-21 18:04:20+00:00,"**️ Новые функции для работы с коллекциями в Go 1.23 **

В версии Go 1.23 стандартная библиотека пополнилась пакетами **slices **и **maps**, которые предоставляют удобные функции для работы с коллекциями.

**Основные возможности:**
 Функции__ slices.All()__,__ slices.Backwards()__, __maps.All()__, __maps.Keys()__ и __maps.Values()__ позволяют легко **перебирать элементы** слайсов и мап с использованием ключевого слова __range__.

 Функция __maps.Collect()__ **упрощает создание** новых мап из слайсов, сокращая код с нескольких строк до одной.

 С помощью __slices.Sorted()__ можно получить** отсортированные срезы **ключей или значений мапы, обеспечивая предсказуемый порядок элементов.

 Функции __slices.Clone()__ и__ maps.Clone()__ **позволяют создавать копии** слайсов и мап, а__ slices.Concat()__ облегчает **объединение нескольких слайсов** в один.

#новость",5724,47,0,goproglib
5500,2024-12-21 07:04:21+00:00,"** А вы правильно обрабатываете ошибки?**

Ошибки в Go — это не просто часть кода, а важный инструмент для создания надежных приложений. В [статье ](https://clc.to/rT16rA)автор делится мощными советами, которые помогут вывести обработку ошибок на новый уровень.

Почему это важно?** Ошибки — это сигнал, что что-то пошло не так**. Но чтобы этот сигнал был полезным, его нужно уметь правильно интерпретировать. Многие разработчики ограничиваются базовой проверкой, не задумываясь о типах ошибок и их природе. Результат? **Ускользающие баги, трудности в поддержке и фрустрация.**

Что в [статье](https://clc.to/rT16rA):
️ Глубокое понимание типов ошибок: как отличить ожидаемую ошибку от критической и обрабатывать их по-разному.
️ Лучшие практики Go: использование errors.Is и errors.As для четкой проверки и понимания контекста.
️ Практические примеры: простые, но мощные способы улучшить читаемость и устойчивость кода.

 Если вдруг у вас не открывается источник, то воспользуйтесь [зеркалом](https://clc.to/XKDI7A)",5737,10,0,goproglib
5499,2024-12-20 18:00:00+00:00,"⭐️ Фишки Go: раскрываем секреты мастерства разработки 

**1️⃣**** Срезы для работы со строками**
Работать со строками в Go — это искусство. Вместо создания новых копий, используйте срезы. Это не только экономит память, но и ускоряет обработку. Пример:

```str := ""Hello, Go!""
slice := str[0:5] // ""Hello""```
Вы не создаёте новую строку, а просто указываете, какой кусок использовать.

2️⃣ **Композиция вместо наследования**
Go не использует классическое наследование, но предлагает мощный инструмент — встраивание структур. Вы можете включить одну структуру в другую, чтобы разделить ответственность и переиспользовать код:
```type Animal struct {
    Name string
}

func (a Animal) Speak() string {
    return ""I am "" + a.Name
}

type Dog struct {
    Animal
}

func main() {
    d := Dog{Animal{Name: ""Buddy""}}
    fmt.Println(d.Speak()) // I am Buddy
}```

 Хотите узнать ещё больше скрытых фишек? Загляните в [статью](https://clc.to/GacNJA) и узнайте другие трюки, чтобы писать ещё лучше.",5317,25,6,goproglib
5498,2024-12-20 07:07:01+00:00,"** О хеш-функциях в Go: как и зачем их использовать**

Хеш-функции — это фундаментальный инструмент криптографии, который используется для создания уникальных ""отпечатков"" данных. В языке Go работа с хеш-функциями проста и интуитивно понятна благодаря стандартной библиотеке. Давайте разберёмся, как это работает и где можно применить.

** Что такое хеш-функции?**
Хеш-функция берёт входные данные произвольной длины и преобразует их в фиксированную строку байтов.

️**Примеры задач, где применяются хеш-функции:**
1. Проверка целостности данных.
2. Хеширование паролей.
3. Создание цифровых подписей.
4. Построение структур данных (например, хеш-таблиц).

**️ Как использовать хеш-функции в Go?**
Go предоставляет удобный пакет crypto с различными реализациями хеш-функций. Вот примеры:
```package main

import (
  ""crypto/sha256""
  ""fmt""
)

func main() {
  data := []byte(""Пример пароля от библиотеки программиста"")
  hash := sha256.Sum256(data)
  fmt.Printf(""SHA-256: %x\n"", hash)
}```
 Вывод: строка хеша длиной 64 символа в 16-ричном формате.

```package main

import (
  ""fmt""
  ""golang.org/x/crypto/bcrypt""
)

func main() {
  password := ""my_secure_password""
  hash, _ := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
  fmt.Printf(""Хеш пароля: %s\n"", hash)
}```
 Вывод: уникальный bcrypt-хеш пароля, начинающийся с ""$2a$"", который включает случайную соль и результат хеширования.

**  Хеш-функции в Go**

1️⃣** SHA-256 и SHA-224**
Надёжные и широко используемые.
Подходят для большинства задач, связанных с безопасностью.
Пакет: crypto/sha256.

2️⃣ SHA-512 и SHA-384
Дают более длинные хеши, что увеличивает защиту.
Пакет: crypto/sha512.

3️⃣ SHA-3 (Keccak)
Современная альтернатива SHA-2.
Более устойчива к некоторым видам атак.
Пакет: golang.org/x/crypto/sha3.

4️⃣ MD5
 НЕ рекомендуется использовать для безопасности.
Подходит для задач без требований криптографической стойкости (например, проверки файлов).
Пакет: crypto/md5.

5️⃣ BLAKE2
Быстрая и надёжная альтернатива SHA-2.
Пакет: golang.org/x/crypto/blake2b.

Хеш-функции в Go — это мощный и простой инструмент, который подойдёт для множества задач. Главное — понимать их особенности и ограничения, чтобы использовать их безопасно и эффективно.",5020,19,0,goproglib
5497,2024-12-20 06:01:19+00:00,"**Новый год — время для новых начинаний!**
Пока все строят планы на будущее, подумайте, что поможет вам двигаться вперёд в карьере. Мы знаем, что навыки в IT открывают огромные возможности — и мы готовы помочь вам начать!

** Почему IT?**

- Большинство компаний активно ищут специалистов.
- Вы можете работать из любой точки мира — с гибким графиком и интересными задачами.
- А ещё IT — это высокий доход и стремительный карьерный рост.

Возможно, именно сейчас тот момент, когда стоит инвестировать в себя и развить востребованные навыки. У нас есть конструктор курсов, с помощью которого вы сможете составить свой идеальный план обучения — под свои цели и интересы.

 **Как это работает?**

- **Несколько программ по цене одной** — выбирайте всё, что вам нужно.
- **Бессрочный доступ** — учитесь в своём ритме и когда удобно.
- **Это выгодно** — вы получаете навыки, которые помогут вам расти профессионально и зарабатывать больше.

А для тех, кто решит сделать шаг в будущее до конца года, у нас есть кое-что особенное…** ** [**Узнайте больше**](https://proglib.io/w/84137748)** **

**Как выбрать свой путь?**
Мы предлагаем несколько уникальных комбинаций курсов, которые помогут вам стать настоящим экспертом:

 **Математика для Data Science + Алгоритмы и структуры данных** — для тех, кто хочет готовиться к собеседованиям в топовые компании.

 **Алгоритмы + ML** — чтобы не просто решать задачи, а понимать, как работают современные технологии.

 **Frontend + ML **— создавайте приложения и учитесь работать с нейросетями.

 **И другие комбинации для разных целей.**

Новогодний подарок, который будет работать на вас весь год — это отличная идея!  [**Начните сейчас**](https://proglib.io/w/81f9feeb)** **

**Развивайтесь в IT — и будущее уже будет в ваших руках!**",4971,3,0,goproglib
5496,2024-12-19 17:59:54+00:00,"** Безопасно передаём данные с Go**

Безопасность данных — одна из ключевых задач современного программирования. И если вы разрабатываете приложения на Go, то пакет **__crypto__** предоставляет мощный набор инструментов для шифрования, хэширования, создания цифровых подписей и других криптографических операций. 
**
******** Что такое Go Crypto?**
**crypto** — это стандартный пакет Go, который включает множество инструментов для работы с криптографией:

**Хэширование**: поддерживаются алгоритмы вроде SHA-256, SHA-512 и других.
**Шифрование**: предоставляются механизмы для работы с симметричными (AES) и асимметричными (RSA, ECC) алгоритмами.
**Цифровые** **подписи**: есть встроенная поддержка создания и проверки подписей.
**Работа с ключами**: генерация, хранение и преобразование ключей.

** Пример использования**
```package main

import (
    ""crypto/sha256""
    ""fmt""
)

func main() {
    data := []byte(""Hello, World!"")
    hash := sha256.Sum256(data)
    fmt.Printf(""SHA-256: %x\n"", hash)
}```

 **Лучшие практики**
**Используйте случайные данные **(например, через __crypto/rand__) для генерации ключей и инициализационных векторов.
**Предпочитайте современные алгоритмы**: например, AES-GCM вместо старых режимов шифрования (CBC).
**Всегда проверяйте ошибки**, особенно при работе с криптографией, так как они могут указывать на проблемы с входными данными или ключами.",5471,13,0,goproglib
5494,2024-12-19 06:59:54+00:00,"** Машинное обучение на Go без Python?**

Python давно стал стандартом в ML благодаря библиотекам вроде **TensorFlow** и **PyTorch**. Но у него есть **минусы**: зависимость от интерпретатора и низкая производительность.

В [статье Эли Бендерски](https://clc.to/T45nFA) рассказывает, как библиотека GoMLX меняет подход к ML, предоставляя возможность создавать и запускать модели на Go, исключая Python.

** Что такое GoMLX?**
GoMLX — библиотека для машинного обучения, использующая инфраструктуру **OpenXLA**. Она позволяет:
 Проектировать нейронные сети на Go.
 Оптимизировать выполнение на CPU, GPU и TPU.
 Избежать зависимостей от Python, что упрощает деплой и повышает производительность.

[Статья](https://clc.to/T45nFA) демонстрирует, как реализовать сверточную нейронную сеть для обработки изображений, полностью используя Go. Модель описывается, обучается и тестируется в одной среде без внешних интерпретаторов.

#новость",7947,30,7,goproglib
5493,2024-12-19 06:01:39+00:00,"**Вакансии «Библиотеки программиста» — ждем вас в команде!**

Мы постоянно растем и развиваемся, поэтому создали отдельную [страницу,](https://job.proglib.io/) на которой будут размещены наши актуальные вакансии. Сейчас мы ищем:
контент-менеджеров для ведения телеграм-каналов

[Подробности тут](https://job.proglib.io/)

Мы предлагаем частичную занятость и полностью удаленный формат работы — можно совмещать с основной и находиться в любом месте

Ждем ваших откликов ",5647,1,0,goproglib
5492,2024-12-18 18:08:34+00:00," **Король спама: насколько сильно ты бесишь коллег в рабочих чатах**

Признайся, ты тоже иногда отправляешь голосовые сообщения из маршрутки? Или может быть, ты тот самый человек, который пишет «Привет» и исчезает на час? Всего 10 вопросов, которые помогут понять, являешься ли ты мастером цифрового этикета или главным спамером офиса. Готов узнать правду?

 [Пройти тест](https://clc.to/uC5Dvg)",4865,2,0,goproglib
5490,2024-12-18 11:04:22+00:00,"** WebSocket в GoFrame: Практическое руководство по real-time коммуникациям**

Современные веб-приложения требуют надёжных механизмов мгновенного обмена данными. В новой [статье ](https://clc.to/NBnaYw)детально разобрана реализация WebSocket с использованием GoFrame — фреймворка для Go.

Руководство раскрывает ключевые аспекты создания WebSocket-соединений: от построения сервера и управления параллельными подключениями до реализации механизма heartbeat для **непрерывной проверки состояния соединения**. 
Особое внимание уделено безопасной работе с пулом подключений, что критично для **производительных real-time систем**.

Практические рекомендации включают детальную обработку ошибок, механизмы автоматического переподключения и тонкой синхронизации между клиентом и сервером. 

#новость",6057,5,0,goproglib
5489,2024-12-17 18:04:24+00:00,"** Как работает GraphQL и чем он лучше RESTful API**

GraphQL не следует путать с SQL — он не используется для прямых запросов к таблицам базы данных. GraphQL — это, скорее, формат или структура, которая задаёт контракт между клиентом и сервером API. Его можно рассматривать как спецификацию или новый стандарт API, похожий на REST, но более эффективный и гибкий.

В новой статье делаем детальный разбор преимуществ и недостатков GraphQL с примерами кода. Помогаем понять, стоит ли переходить на эту технологию в вашем проекте.

 [Читать по этой ссылке](https://proglib.io/sh/52pdBFcPG8)",5791,11,24,goproglib
5487,2024-12-17 07:10:20+00:00,"** Go Protobuf: Новый Opaque API для оптимизации и гибкости **

Команда Go представила новый Opaque API для Protocol Buffers, который решает ключевые проблемы старого подхода.

**Что изменилось?**
Раньше в Protobuf структурах можно было напрямую обращаться к полям, что делало оптимизацию и развитие библиотеки сложным. Новый API скрывает детали реализации и предоставляет методы вроде Get, Set, и Clear. Это позволяет:
 **Сократить потребление памяти** — благодаря использованию битовых флагов вместо указателей.
 **Улучшить производительность** — оптимизация работы сборщика мусора и аллокаций.
 **Сделать код безопаснее и гибче** — структура теперь скрыта, что позволяет вносить изменения без риска для пользователей.

** Пример:**
Старый API. Вместо прямого доступа к структурам:
```req.BackendServer = proto.String(«server1»)```
Новый Opaque API использует методы:
```req.SetBackendServer(«server1»)```",6258,31,3,goproglib
5486,2024-12-16 18:04:23+00:00,"**3 Go-проекта для начинающих DevOps-инженеров!**

Автор [статьи](https://proglib.io/w/0fd909ad) представляет три практических проекта на Go, которые помогут начинающим разработчикам получить навыки программирования в DevOps.

 **Проекты**
**1. Мониторинг использования дисков**
Программа на Go для анализа использования дискового пространства. Ключевые возможности:
 Расчет общего, свободного и занятого места
 Вычисление процента использования диска
 Поддержка мониторинга любого указанного пути

**2. HTTP-сервер для портфолио**
Веб-сервер для размещения статического сайта-портфолио. Особенности:
 Раздача статических файлов
 Эндпоинт Healthcheck для мониторинга
 Простой способ хостинга личной страницы

**3. RESTful API для управления DevOps-инструментами**
API для работы со списком DevOps-утилит. Функционал:
 Список инструментов
 Добавление новых инструментов
 Получение детальной информации
 Потокобезопасное управление данными

 Подробнее в [источнике](https://proglib.io/w/0fd909ad)",5847,11,1,goproglib
5484,2024-12-16 07:11:58+00:00,"** Самоучитель по Go для начинающих. Часть 18. Протокол HTTP. Создание HTTP-сервера и клиента. Пакет net/http**

Погружаемся в мир сетевых технологий с Go! В этой части самоучителя рассматриваются **основы работы с HTTP** в Go: устройство HTTP-запросов и ответов, ключевые способы взаимодействия клиента и сервера. Также подробно разбираются возможности пакета net/http, включая **отправку запросов**, **обработку ответов** и настройку параметров** HTTP-сервера** для веб-приложений.

 [Читать новую часть самоучителя](https://proglib.io/sh/mVSlcrQ1Ph)

‍ **Остальные части в серии:**
1. [Особенности и сфера применения Go, установка, настройка](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-1-osobennosti-i-sfera-primeneniya-go-ustanovka-nastroyka-2023-11-23)
2. [Ресурсы для изучения Go с нуля](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-2-resursy-dlya-izucheniya-go-s-nulya-2023-11-28)
3. [Организация кода. Пакеты, импорты, модули. Ввод-вывод текста.](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-3-organizaciya-koda-pakety-importy-moduli-vvod-vyvod-teksta-2023-12-07)
4. [Переменные. Типы данных и их преобразования. Основные операторы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-4-peremennye-tipy-dannyh-i-ih-preobrazovaniya-osnovnye-operatory-2023-12-14)
5. [Условные конструкции if-else и switch-case. Цикл for. Вложенные и бесконечные циклы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-5-uslovnye-konstrukcii-if-else-i-switch-case-cikl-for-vlozhennye-i-beskonechnye-cikly-2024-01-11)
6. [Функции и аргументы. Области видимости. Рекурсия. Defer](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-6-funkcii-i-argumenty-oblasti-vidimosti-rekursiya-defer-2024-01-24)
7. [Массивы и слайсы. Append и сopy. Пакет slices](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-7-massivy-i-slaysy-append-i-sopy-paket-slices-2024-02-08)
8. [Строки, руны, байты. Пакет strings. Хеш-таблица (map)](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-8-stroki-runy-bayty-paket-strings-hesh-tablica-map-2024-02-15)
9. [Структуры и методы. Интерфейсы. Указатели. Основы ООП](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-8-stroki-runy-bayty-paket-strings-hesh-tablica-map-2024-02-15)
10. [Введение в ООП. Наследование, абстракция, полиморфизм, инкапсуляция](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-10-vvedenie-v-oop-nasledovanie-abstrakciya-polimorfizm-inkapsulyaciya-2024-03-11)
11. [Обработка ошибок. Паника. Восстановление. Логирование](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-11-obrabotka-oshibok-panika-vosstanovlenie-logirovanie-2024-04-16)
12. [Обобщенное программирование. Дженерики](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-12-obobshchennoe-programmirovanie-dzheneriki-2024-05-03)
13. [Работа с датой и временем. Пакет time](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-13-rabota-s-datoy-i-vremenem-paket-time-2024-06-26)
14. [Интерфейсы ввода-вывода. Буферизация. Работа с файлами. Пакеты io, bufio, os](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-14-interfeysy-vvoda-vyvoda-buferizaciya-rabota-s-faylami-pakety-io-bufio-os-2024-07-18)
15. [Конкурентность. Горутины. Каналы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-15-konkurentnost-gorutiny-kanaly-2024-08-20)
16. [Тестирование кода и его виды. Table-driven подход. Параллельные тесты](https://proglib.io/sh/RCwSEFDHq0)
17. [Основы сетевого программирования. Стек TCP/IP. Сокеты. Пакет net](https://proglib.io/sh/v3DhQNqBpH)",33682,15,0,goproglib
5483,2024-12-15 18:02:27+00:00,"** Архитектура RESTful API на Go с использованием Gin, GORM и PostgreSQL**

Если ты работаешь с микросервисами или хочешь оценить подходы разработки API на Go, стоит обратить внимание на [статью](https://proglib.io/w/3d42f35d). Автор предлагает современное решение с упором на производительность и простоту, которое можно адаптировать под реальные проекты.

‍**Стек технологий:**
**Gin**: высокопроизводительный HTTP-фреймворк, подходящий для микросервисов благодаря своей минималистичной архитектуре.
**GORM**: ORM с богатым функционалом, включая миграции, транзакции, ассоциации и поддержку различных баз данных.
**PostgreSQL**: одна из самых мощных и масштабируемых реляционных СУБД.

 **Что вы узнаете:**
Демонстрируется как разделить **бизнес-логику**, **маршруты **и **работу с базой данных**.
Рассматривается использование **моделей в GORM** и **тонкости **работы с **миграциями**.
**API** **легко расширяется** и **интегрируется **в существующую микросервисную архитектуру.
Возможность адаптировать пример под **реальный production-ready **код.",6286,25,2,goproglib
5482,2024-12-15 07:11:20+00:00," Подборка лучших статей и постов «Библиотеки Go-разработчика» за ноябрь: сохраняй в заметки, чтобы не пропустить #самыйсок

 [Самоучитель по Go для начинающих. Часть 17. Основы сетевого программирования. Стек TCP/IP. Сокеты. Пакет net](https://t.me/goproglib/5412)
 [Как не путаться в интерфейсах](https://t.me/goproglib/5428)
 [Команды git merge и git rebase: преимущества, недостатки и ключевые различия](https://proglib.io/sh/ZhsJW0GLok)
 [Как стать успешным программистом: 6 ключевых качеств профессионального разработчика](https://proglib.io/p/kak-stat-uspeshnym-programmistom-6-klyuchevyh-kachestv-professionalnogo-razrabotchika-2024-11-14)",5843,1,0,goproglib
5481,2024-12-14 13:00:38+00:00,"** Секреты инициализации программ**

Думаете, функция __main__() в Go — это просто точка входа? Отложите скептицизм! В [статье ](https://proglib.io/w/e2b64ab3)раскрывается целый пласт внутренних механизмов, которые происходят до первой строки вашего кода.

** Вас ждет глубокое погружение в процессы, которые обычно остаются за кадром:**
**Порядок инициализации пакетов**
️Как Go гарантирует правильную последовательность подготовки
️ Механизм работы функций __init__()
️ Хитрости импорта пакетов

**Тонкости работы с ресурсами**
 Безопасная инициализация общих ресурсов
 Использование __sync.Once__
 Предотвращение гонок при старте программы

**Управление жизненным циклом программы**
 Завершение выполнения через os.Exit()
 Обработка горутин
 Что происходит при панике во время инициализации",6042,8,0,goproglib
5480,2024-12-14 07:01:56+00:00,"** CDC vs Outbox: как решить проблему двойной записи в распределенной системе**

В распределённых системах согласованность данных часто становится настоящим вызовом. Особенно это касается сценариев, где требуется выполнить несколько операций в разных системах одновременно.

Как избежать проблем двойной записи? Современные подходы, такие как захват изменений данных (CDC) и паттерн Outbox, предлагают интересные решения. Эти методики позволяют поддерживать целостность данных, избегать сбоев и минимизировать риски.

Хотите узнать, как внедрить такие подходы и выбрать оптимальный для своей системы? Загляните в захватывающее руководство, чтобы разобраться в тонкостях.

 [Читать статью](https://proglib.io/sh/b6R0IruEqg)
 [Зеркало](https://proglib.tech/p/cdc-vs-outbox-kak-reshit-problemu-dvoynoy-zapisi-v-raspredelennoy-sisteme-2024-12-10)",4648,6,1,goproglib
5479,2024-12-13 18:01:01+00:00,"****** Знакомьтесь, Fuego (или огонь по-испански)**
**Fuego** — это легковесный фреймворк для Go, предназначенный для ускорения разработки веб-приложений. Его особенность заключается в **минималистичном подходе**: с помощью небольшого объема кода вы можете развернуть мощный сервер, включая такие возможности, как рендеринг** **HTML, **автоматическая** генерация **OpenAPI-спецификаций** и **удобная** работа с **middleware**.

️**Основные возможности:**
**Быстрый старт**: минимальный пример веб-сервера состоит из пары строк кода, благодаря встроенному управлению маршрутами и простому синтаксису.
**Интеграция с OpenAPI**: автоматическая генерация спецификаций для вашего API, что упрощает документирование и тестирование.
**Гибкость в работе с данными**: поддержка сериализации/десериализации, валидации и трансформации данных на входе и выходе.
**Рендеринг HTML**: интеграция с различными инструментами, такими как html/template, Gomponents и Templ.
**Hot Reload**: возможность изменять код без перезапуска сервера, что значительно ускоряет разработку.

️Пример простого сервера с использованием фреймворка:
```package main

import (
  ""github.com/go-fuego/fuego""
)

func main() {
  s := fuego.NewServer()

  fuego.Get(s, ""/"", helloWorld)

  s.Run()
}

func helloWorld(c fuego.ContextNoBody) (string, error) {
  return ""Hello, World!"", nil```",7364,16,4,goproglib
5478,2024-12-13 11:02:42+00:00,"Подготовься к собеседованию на позицию Data Scientist!

Профессия Data Scientist становится все более востребованной, и компании ищут специалистов, способных превращать данные в ценные инсайты. Но как успешно пройти техническое собеседование?

Мы собрали 10 типичных задач, которые могут встретиться на собеседовании, и эффективные подходы к их решению:

1. Внешнее и тензорное произведение

2. One-hot кодировка

3. Мониторинг осадков

4. Симуляция бросков кубиков в «Монополии»

5. Бурение скважин для добычи золота

6. Вычисление свертки

7. Бэктестинг торговой стратегии

8. Прогноз оттока клиентов с помощью логистической регрессии

9. Обнаружение спама с использованием дерева решений

10. Предсказание цен на квартиры с помощью линейной регрессии

Чтобы начать решать задачи, достаточно ответить на три простых вопроса по [этой ссылке](https://proglib.io/w/273412cd) и получить доступ к вводным занятиям курса [Алгоритмы и структуры](https://proglib.io/w/fec6e426) данных и 10 задача",5422,4,0,goproglib
5477,2024-12-13 07:11:21+00:00,"**️ Circuit Breaker в Go: защита ваших микросервисов**

Разработка микросервисов требует особого подхода к обработке сбоев. Чтобы минимизировать их влияние, в Convoy [поделились опытом](https://proglib.io/w/6cd51aeb) использования Circuit Breaker в приложениях на Go. Этот паттерн предотвращает лавинообразные ошибки, если один из сервисов выходит из строя.

** Почему это важно?**
В распределённых системах сбои неизбежны: сервис может быть недоступен или работать с задержками.

Вместо того чтобы продолжать посылать запросы и перегружать систему, Circuit Breaker:
 отслеживает ошибки,
временно блокирует запросы к сбойному сервису,
 автоматически восстанавливается, когда система стабилизируется.

** Что вы узнаете из статьи:**
Как работает паттерн circuit breaker на практике.
Примеры реализации на Go.",7412,14,0,goproglib
5476,2024-12-13 06:02:21+00:00,"**Самые полезные каналы для программистов в одной подборке!**

Сохраняйте себе, чтобы не потерять 

Для всех

[Библиотека программиста](https://t.me/proglibrary) — новости, статьи, досуг, фундаментальные темы
[Книги для программистов](https://t.me/progbook)
[IT-мемы](https://t.me/itmemlib)
[Proglib Academy](https://t.me/proglib_academy) — тут мы рассказываем про обучение и курсы
[Азбука айтишника](https://t.me/abc_for_it) — здесь мы познаем азы из мира программирования

Про нейросети
[Библиотека робототехники и беспилотников | Роботы, ИИ, интернет вещей ](https://t.me/robotics_autopilots_iot)
[Библиотека нейрозвука | Транскрибация, синтез речи, ИИ-музыка ](https://t.me/neuroaudio)
[Библиотека нейротекста | ChatGPT, Gemini, Bing ](https://t.me/neuro_text)
[Библиотека нейровидео | Sora AI, Runway ML, дипфейки ](https://t.me/neurovidos)
[Библиотека нейрокартинок | Midjourney, DALL-E, Stable Diffusion ](https://t.me/neurokartinka)

#️⃣C#

[Книги для шарпистов | C#, .NET, F#](https://t.me/csharpprogbook)
[Библиотека шарписта ](https://t.me/csharpproglib)— полезные статьи, новости и обучающие материалы по C#
[Библиотека задач по C#](https://t.me/csharp_problems_lib) — код, квизы и тесты
[Библиотека собеса по C#](https://t.me/csharp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Вакансии по C#, .NET, Unity Вакансии по PHP, Symfony, Laravel](https://t.me/csharpdevjob)

️DevOps

[Библиотека devops’а](https://t.me/devopsslib) — полезные статьи, новости и обучающие материалы по DevOps
[Вакансии по DevOps & SRE](https://t.me/devopssjob)
[Библиотека задач по DevOps](https://t.me/devops_problems_lib) — код, квизы и тесты
[Библиотека собеса по DevOps](https://t.me/devops_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования

PHP

[Библиотека пхпшника](https://t.me/phpproglib) — полезные статьи, новости и обучающие материалы по PHP
[Вакансии по PHP, Symfony, Laravel](https://t.me/phpdevjob)
[Библиотека PHP для собеса](https://t.me/php_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по PHP](https://t.me/php_problems_lib) — код, квизы и тесты

Python

[Библиотека питониста](https://t.me/pyproglib) — полезные статьи, новости и обучающие материалы по Python
[Вакансии по питону, Django, Flask](https://t.me/pydevjob)
[Библиотека Python для собеса](https://t.me/py_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Python](https://t.me/py_problems_lib) — код, квизы и тесты

Java

[Книги для джавистов | Java ](https://t.me/javaprogbook)
[Библиотека джависта](https://t.me/javaproglib) — полезные статьи по Java, новости и обучающие материалы
[Библиотека Java для собеса](https://t.me/java_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Java](https://t.me/java_problems_lib) — код, квизы и тесты
[Вакансии для java-разработчиков](https://t.me/javadevjob)

Data Science

[Книги для дата сайентистов | Data Science](https://t.me/dsprogbook)
[Библиотека Data Science](https://t.me/dsproglib) — полезные статьи, новости и обучающие материалы по Data Science
[Библиотека Data Science для собеса](https://t.me/ds_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Data Science](https://t.me/ds_problems_lib) — код, квизы и тесты
[Вакансии по Data Science, анализу данных, аналитике, искусственному интеллекту](https://t.me/datajob)

Go

[Книги для Go разработчиков](https://t.me/goprogbook)
[Библиотека Go разработчика](https://t.me/goproglib) — полезные статьи, новости и обучающие материалы по Go
[Библиотека Go для собеса](https://t.me/go_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Go](https://t.me/go_problems_lib) — код, квизы и тесты
[Вакансии по Go](https://t.me/godevjob)

C++

[Книги для C/C++ разработчиков](https://t.me/cppprogbook)
[Библиотека C/C++ разработчика](https://t.me/cppproglib) — полезные статьи, новости и обучающие материалы по C++
[Библиотека C++ для собеса](https://t.me/cpp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по C++](https://t.me/cpp_problems_lib) — код, квизы и тесты
[Вакансии по C++](https://t.me/cppdevjob)

Другие каналы

[Библиотека фронтендера](https://t.me/frontendproglib)
[Библиотека мобильного разработчика](https://t.me/mobileproglib)
[Библиотека хакера](https://t.me/hackproglib)
[Библиотека тестировщика](https://t.me/testerlib)
[Вакансии по фронтенду, джаваскрипт, React, Angular, Vue](https://t.me/jsdevjob)
[Вакансии для мобильных разработчиков](https://t.me/mobiledevjob)
[Вакансии по QA тестированию](https://t.me/testerrjob)
[InfoSec Jobs — вакансии по информационной безопасности](https://t.me/hackdevjob)
[Библиотека разработчика игр | Gamedev, Unity, Unreal Engine](https://t.me/gameproglib)

Чтобы добавить папку с нашими каналами, нажмите [сюда](https://t.me/addlist/17y04EbNMrlhNjZi)

Также у нас есть боты:
[Бот с IT-вакансиями](http://t.me/proglib_job_bot)
[Бот с мероприятиями в сфере IT](http://t.me/event_listener_bot)

Мы в других соцсетях:
[VK](https://vk.com/proglib)
[YouTube](https://www.youtube.com/c/%D0%91%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%B0)
[Дзен](https://zen.yandex.ru/proglib)
[Facebook](https://www.facebook.com/proglib/?locale=ru_RU) *
[Instagram](https://www.instagram.com/proglibrary/) *

__* Организация Meta запрещена на территории РФ__",4865,5,0,goproglib
5475,2024-12-12 18:04:24+00:00,"** Бенчмарки для SQLite драйверов **

Проект **go-sqlite-bench **сравнивает производительность различных драйверов SQLite, написанных на Go. Репозиторий включает бенчмарки, которые помогут вам выбрать оптимальный драйвер для ваших задач.

**Что тестировалось?**
Бенчмарки включают тесты на параллельное чтение, использование различных режимов журнала и синхронизации SQLite, а также сравнение производительности на разных операционных системах. Тесты проводились с различным количеством параллельных запросов (N=2, N=4, N=8) для каждого драйвера.

** Итоги**
Результаты показывают, что производительность сильно **зависит от конкретного случая использования**. Например:
️ **mattn **показал хорошие результаты в большинстве тестов, особенно в режимах с высокой параллельностью.
️ **modernc.org** оказался одним из самых быстрых в некоторых тестах, особенно при большом количестве параллельных запросов.
️** ncruces** также продемонстрировал высокую производительность, особенно в режимах с низкой параллельностью.

 Подробнее в [репозитории](https://proglib.io/w/8962aa29)",5595,4,0,goproglib
5473,2024-12-12 07:07:21+00:00,"** Мокинг в Go: ключевые подходы**

Тестирование кода в Go часто требует изоляции от внешних зависимостей: баз данных, API и т.д. Для этого используются моки — **имитации**, которые заменяют реальные зависимости.

**Основные подходы:**
**️ Ручной мокинг**
Создавайте интерфейсы и их мок-реализации. Например:
```
type Database interface { GetUser(id string) (User, error) }
type MockDB struct {} 
func (m *MockDB) GetUser(id string) (User, error) { return User{ID: id}, nil }```

**️ Библиотеки**
__gomock__: генерирует моки автоматически.
__testify__: включает мокинг и ассерты.

**️ Функциональные моки**
Зависимости передаются через функции, упрощая тесты.

В статье на Hatchpad разбираются эффективные техники мокинга. Подробности и примеры ищите в [источнике](https://proglib.io/w/9eebad98).",8103,11,0,goproglib
5472,2024-12-11 18:17:24+00:00,"** Go-go Golang!**

Go обгоняет Node.js по популярности среди языков для API-клиентов в 2024 году, согласно [отчёту ](https://proglib.io/w/fead1974)Cloudflare Radar.",7065,68,5,goproglib
5470,2024-12-11 13:35:41+00:00,"**️Самые полезные каналы по Go в одной папке
**
В ней:
канал для подготовки к собеседованиям
интересные задачи
основной канал (этот)
книги по Go
лучшие вакансии из сферы
и наш чат, в котором можно общаться и задавать вопросы

Добавляйте  [тык сюда](https://t.me/addlist/o0Z16QKfUhBlM2Ni)",6836,8,0,goproglib
5469,2024-12-11 11:03:19+00:00," **Как найти баг в 2088 коммитах с помощью git bisect**

Метод `git bisect` — мощный инструмент для поиска изменения, вызвавшего баг в коде: с его помощью разработчику удалось быстро локализовать проблему, просмотрев всего 11 коммитов вместо изначальных 2088.

**Задача**: найти конкретный коммит, который вызвал регрессионную ошибку в проекте.

**Исходные данные**:
️ Ошибка была зарегистрирована 21 октября. Она находится в текущей версии на ветке main.
️ Ошибка отсутствует в более ранней версии, которая была выделена в отдельную ветку `release-5.7.0`.
️ Ветку `release-5.7.0` создали 2 месяца назад, а с тех пор в ветке `main` было сделано много изменений — баг может находиться в любом из нескольких тысяч коммитов, которые невозможно быстро просмотреть.

 [Читать статью](https://proglib.io/sh/HoPu0x3FJg)
 [Зеркало](https://proglib.tech/p/kak-nayti-bag-v-2088-kommitah-s-pomoshchyu-git-bisect-2024-11-28)",6378,18,0,goproglib
5466,2024-12-10 18:03:32+00:00,"**Тест:  Насколько ты продвинутый питонист?**

Python — отличный язык для **автоматизации **и решения задач, с которыми сталкивается каждый разработчик. 
Пройдите тест и узнайте, насколько вы продвинуты в Python. Эти навыки будут полезны для оптимизации процессов и улучшения ваших проектов!

 [Пройти тест](https://clc.to/LFQ5Ng)",5898,18,0,goproglib
5465,2024-12-10 07:09:24+00:00,"** Ускоряем веб-разработку: как Go и HTMX создают мощный тандем**

Проект** go-htmx **— это библиотека для **упрощения **разработки веб-приложений с использованием Go и технологий от HTMX. Она предоставляет инструменты для создания **интерактивных **интерфейсов **без сложных **клиентских фреймворков. С помощью этой библиотеки можно **динамически **обновлять части страницы, **обрабатывать **шаблоны, **добавлять** **кастомные **функции в них и легко** управлять состоянием **компонентов.

**Основные возможности:**
 Поддержка компонетно-ориентированного рендеринга через шаблоны Go;
 Управление локальными и глобальными данными в компонентах;
 Обработка шаблонов с кешированием для повышения производительности;
 Интеграция с контекстами Go для безопасной работы с вложенными компонентами.

Проект ориентирован на разработчиков, которые хотят минимизировать JavaScript-код, используя возможности HTMX для обновления DOM через HTTP-запросы. 

 Более подробное описание есть в [репозитории проекта](https://proglib.io/w/0b76408f)",6258,26,0,goproglib
5464,2024-12-09 18:02:23+00:00,"**️ Анатомия SQL-запроса: как работают запросы к базе данных**

 Как разработчику эффективно работать с базами данных?
Один из ключевых навыков — **понимание**, как именно **выполняются **SQL-запросы. В этой статье разобраны все этапы работы запросов с базой данных: от **парсинга **до **оптимизации**.
Это поможет не только улучшить производительность приложений, но и избежать частых ошибок при взаимодействии с БД.

 Погружаемся в анатомию SQL-запросов по [ссылке](https://proglib.io/sh/NonHshef8p)!",40804,10,0,goproglib
5462,2024-12-09 06:59:58+00:00," **Как предотвратить сбои в Go?**

Паника в Go — это механизм, сигнализирующий о критической ошибке, которая может обрушить всю программу. Однако правильный подход к разработке и использование инструментов позволяют минимизировать риск таких ситуаций.

** Основные методы предотвращения сбоев**

1️⃣ **Использование линтера __golangci-lint__**
Этот инструмент помогает выявлять ошибки, потенциальные утечки памяти и опасные конструкции в коде. Настройте его в вашем CI/CD пайплайне, чтобы всегда держать код в идеальном состоянии.

2️⃣ **Проверка конкурентных ошибок с помощью__ -race__**
Многопоточность — это мощь Go, но гонки данных могут разрушить всё. Запускайте тесты с флагом -race, чтобы выявлять и устранять конкурентные проблемы на раннем этапе.

3️⃣ **Сканирование уязвимостей с __govulncheck__**
Этот инструмент анализирует ваш код и зависимости на наличие известных уязвимостей. Регулярное его использование защитит вашу программу от эксплуатации слабых мест.

 **Работа с паниками и восстановлением**
Иногда паника неизбежна. Используйте recover() внутри отложенных функций для управления критическими ошибками и предотвращения краха программы.

Пример:
```
func safeExecute() {
    defer func() {
        if r := recover(); r != nil {
            fmt.Println(""Поймали панику:"", r)
        }
    }()
    panic(""что-то пошло не так"")
}```

 Когда паника — это нормально?
Используйте её только для непредвиденных, критических ошибок, таких как сбой системы или нарушение инвариантов.",5509,20,0,goproglib
5461,2024-12-08 18:04:20+00:00," **15 кибератак, которые потрясли мир: от $96 млн до $15 млрд ущерба**

Изучаем крупнейшие кибератаки от 1988 до 2024 года: как менялись методы хакеров, почему даже технологические гиганты оказываются беззащитными и какой ценой достается восстановление систем.

 [Читать статью](https://proglib.io/sh/MGbVxWY1wk)
 [Зеркало](https://proglib.tech/p/15-kiberatak-kotorye-potryasli-mir-ot-96-mln-do-15-mlrd-ushcherba-2024-11-29)",4933,14,0,goproglib
5460,2024-12-08 07:01:32+00:00,"** Тайны Go: Почему объединенные типы — головная боль разработчиков**

Представьте, что вы пытаетесь запихнуть слона в спичечный коробок — примерно так выглядит попытка создать объединенные типы в Go! В недавней статье программист раскрыл интригующие технические секреты, которые делают эту задачу настоящим программистским квестом.

 **Ключевая интрига: память как многослойный пирог**.
Go — язык с невероятно продуманной системой управления памятью. Механизм сборки мусора настолько точен, что может различать малейшие нюансы хранения данных. Когда разработчики хотят создать универсальный тип (вроде того же Result из Rust), они натыкаются на настоящую стену непонимания между компилятором и разработчиком.

 **Технический цирк: указатели играют в прятки**.
Представьте: компилятор должен угадать, что лежит в памяти — два указателя или два целых числа? Это как детектив, пытающийся решить головоломку с завязанными глазами! Язык Rust умеет буквально фокусничать с памятью, Go — пока нет.

 **Альтернативы:** вместо создания сложных объединенных типов в Go можно использовать более простые решения: интерфейсы и обобщенные типы. Это как выбирать между швейцарским ножом и лазерным скальпелем — каждый инструмент имеет свои преимущества!

Короче говоря, создание объединенных типов в Go — это не просто техническая задача, а настоящее искусство программирования. Язык Go намеренно держит высокую планку простоты и явности, не позволяя усложнять архитектуру без крайней необходимости.

 [Источник](https://proglib.io/w/db1fba94)",5881,14,9,goproglib
5459,2024-12-07 18:08:22+00:00,"** aligo: Утилита для проверки структур в Go**

**Aligo **— инструмент для анализа и проверки структур в языке Go. Помогает оптимизировать память, выявляя неэффективные структуры данных.

**Основные возможности:**
 Проверка структур
 Совместимость с GitHub Actions
 Поддержка командной строки
 Генерация man-документов
 Возможность игнорирования структур

**Установка:**
```go install github.com/essentialkaos/aligo/v2@latest```

**Пример использования:**
```sudo aligo --completion=bash 1> /etc/bash_completion.d/aligo```

[ Официальный репозиторий](https://proglib.io/w/de81ba16)",8229,42,0,goproglib
5458,2024-12-07 07:05:24+00:00,"** Сравнение фреймворков Go: что выбрать для высокой производительности?**

Тестирование стандартной библиотеки Go, **fasthttp**, **Fiber** и **gNet **по метрикам задержки, пропускной способности, использования CPU и памяти, а также работы с PostgreSQL. Результаты показали, что стандартная библиотека дает **наименьшую **задержку, но имеет** высокий расход CPU**. fasthttp и Fiber демонстрируют схожие результаты, а gNet — потенциал для более высокой пропускной способности, несмотря на ограничения с подключениями.

 Полные результаты тестов и подробности в [видео](https://proglib.io/w/1234580a)!",5994,9,3,goproglib
5457,2024-12-06 11:02:31+00:00,"** Надёжное выполнение SQL-транзакций в Go**

Хотите **упростить **управление SQL-транзакциями в Go? В статье рассказывается, как создать обобщённый фреймворк, минимизировать **boilerplate**-код и повысить читаемость. Вы узнаете:
 Как автоматизировать начало, фиксацию и откат транзакций.
 Как обрабатывать ошибки без излишней сложности.
 Подходы, которые улучшают масштабируемость и надёжность кода.

Такой подход делает работу с транзакциями более надёжной, удобной и масштабируемой, особенно для сложных приложений с высокими требованиями к стабильности.

 Подробнее[ в статье](https://proglib.io/w/01276643)",6162,12,0,goproglib
5456,2024-12-06 06:59:58+00:00,"**Проблемы большого количества горутин в Go**

Когда количество горутин в Go не контролируется, могут возникнуть следующие проблемы:
 **Перегрузка** **ресурсов**: каждая горутина требует памяти и процессорного времени, что при избыточном их числе может привести к утечке памяти и падению приложения.
 **Проблемы** **с планировщиком** **Go**: слишком много горутин может затруднить эффективное распределение задач между потоками, снижая производительность.
 **Заблокированные** **горутины**: без контроля задачи могут не успевать выполняться из-за заблокированных горутин, ожидающих ресурсы.
 **Невозможность** **масштабирования**: неконтролируемое количество горутин усложняет масштабирование приложения и может привести к застою и замедлению работы.
 **Проблемы** **с синхронизацией и состоянием гонки**: большое количество горутин увеличивает вероятность ошибок синхронизации и состояния гонки, когда несколько горутин пытаются одновременно обращаться к одним и тем же данным.


Что с этим делать?
 **Ограничение количества горутин**: используйте каналы или семафоры для ограничения числа одновременно выполняющихся горутин, например, с помощью буферизированных каналов.
 **Использование очередей задач**: разделите задачи на более мелкие, чтобы избежать перегрузки.
**Тестирование и мониторинг**: регулярно тестируйте приложение и следите за его производительностью, чтобы вовремя заметить проблемы.

 Если вам интересно, как это реализовать, читайте [статью](https://proglib.io/w/5f8db45d)",5690,20,0,goproglib
5455,2024-12-05 18:03:24+00:00,"**Привет, Go-разработчики! **

2024-й был насыщенным годом, и мы собираем мнения о самых значимых изменениях и достижениях. Какие технологии или фреймворки стали настоящим прорывом? Какие навыки оказались самыми важными для вас в этом году? А какие тренды в разработке будут определять 2025-й?

Поделитесь своими мыслями с нами! Мы готовим статью об IT-итогах 2024 году и хотим услышать ваше мнение!  [Поделитесь ](https://docs.google.com/forms/d/e/1FAIpQLSfTmIEswBsjH4j-VL3gAQgWPX8k_7HCF7_UUVu85jxoR6idyA/viewform?usp=sf_link)своим мнением, и самое важное и интересное войдет в нашу статью. ",5730,4,0,goproglib
5454,2024-12-05 06:59:58+00:00,"** Минорная версия Go 1.23.4**

Как и положено минорному обновлению, Go 1.23.4 содержит ряд исправлений и улучшений, которые повышают стабильность и корректность работы на различных платформах:
**
 Проблемы с памятью и сборщиком мусора**: исправлены ошибки в работе с памятью и **параллельным** сбором мусора, что улучшает общую производительность и уменьшает вероятность сбоя в многозадачных средах.

 **Исправления в сетевых функциях**: добавлены исправления для MPTCP, улучшена работа с сетевыми сокетами, что влияет на многопутевое TCP-соединение, и устранены проблемы с реализацией **ListenTCP**() и **DialTCP**().

** Поддержка специфичных для платформы ошибок**: были исправлены ошибки в тестах, которые возникали на определенных платформах, таких как **Windows-386**, и исправлены проблемы с некорректным выполнением системных вызовов, связанных с вариативными аргументами.

 **Исправления в компиляторе и сборщике мусора**: были устранены ошибки в коде компилятора и **улучшено** его поведение в рамках функциональных итераторов.

 Подробнее можно изучить в [официальном репозитории](https://proglib.io/w/26f7f5b7)",5964,23,1,goproglib
5453,2024-12-04 11:01:21+00:00,"** Управление конфигурациями в Go с помощью Viper**

Если вы хотите упростить работу с конфигурациями в Go, обязательно обратите внимание на Viper. Viper — это инструмент, который значительно упрощает работу с конфигурациями.

В недавней статье на Dev.to обсуждается, как эффективно использовать Viper для работы с конфигурациями. Вот несколько ключевых моментов:
** Много источников данных**: viper позволяет загружать настройки из файлов (**JSON, TOML, YAML** и других), переменных окружения и флагов командной строки.
 **Удобство и гибкость**: легко управлять конфигурациями, которые могут изменяться в зависимости от окружения или уровня сложности.
 **Динамическое обновление**: поддержка работы с динамическими конфигурациями для улучшения гибкости приложений.

 Подробнее читайте в[ источнике](https://proglib.io/w/53522bce)",6139,5,1,goproglib
5452,2024-12-04 06:01:54+00:00,"️ **Подпишись на нашу еженедельную email-рассылку, чтобы быть в курсе последних открытий и тенденций в мире бэкенда.**

В еженедельных письмах ты найдешь:
● Языки программирования и фреймворки для бэкенда
● Архитектура и проектирование серверных приложений
● Базы данных и управление данными
● Безопасность и защита данных
● Облачные технологии и DevOps
● API и интеграции
● Тестирование и отладка
● Инструменты и утилиты для бэкенд-разработчиков
● Лучшие практики и паттерны проектирования

[Подписаться](https://proglib.academy/backend-newsletter)",5840,2,0,goproglib
5451,2024-12-03 18:03:21+00:00," **Плохие способы создания пайплайнов в Go**

В статье на Poxate разобраны самые распространённые, но крайне неэффективные способы создания пайплайнов в Go.

Если вы пишете пайплайны в Go, **обратите внимание** на эти ошибки:
 Горутины без контроля — создание пайплайнов с множеством горутин без управления их количеством может привести к **перегрузке **системы и сложностям с отладкой.
 Игнорирование ошибок — ошибки должны обрабатываться на каждом этапе пайплайна. Иначе — непредсказуемые сбои и нестабильная работа.
 Глобальные состояния — использование глобальных переменных затрудняет тестирование и поддержку кода.
 Отсутствие тестов — без тестов не удастся выявить проблемы на ранней стадии.
 Неправильное использование каналов. Каналы — мощный инструмент, но неправильное их использование может привести к утечкам данных и багам.

Не повторяйте этих ошибок! Разработайте пайплайны с учётом лучших практик и избегайте ненужных проблем в будущем.

[ Подробнее в статье](https://proglib.io/w/9deda50f)",6181,21,0,goproglib
5450,2024-12-03 11:01:22+00:00,"** Кадровый голод в IT: почему компании готовы платить на 13% больше**

Несмотря на экономическую нестабильность и сокращения в некоторых секторах, компании готовы платить рекордные зарплаты, чтобы привлечь и удержать талантливых специалистов. В статье, по ссылке ниже, мы разбираемся, почему в IT наблюдается дефицит кадров, какие навыки сейчас востребованы, и как работодатели борются за внимание лучших профессионалов, предлагая условия, о которых еще недавно можно было только мечтать. 

Если вам интересно, как кадровый рынок в IT адаптируется к новым вызовам, и что это значит для вас как для разработчика или работодателя, читайте дальше!

 [Читать статью](https://proglib.io/sh/7G2Fm8wLVr)",20717,5,1,goproglib
5449,2024-12-02 18:04:26+00:00,"** Работа с файлами в Go: просто и эффективно с помощью срезов**

В Go работа с файлами может быть ещё проще, если использовать подход на основе срезов строк. Это особенно полезно, когда требуется построчно обрабатывать данные.

 Основные методы работы с файлами:
**ReadAllLines **— читает содержимое файла и возвращает его в виде среза строк.
**WriteAllLines **— записывает срез строк в файл, перезаписывая его содержимое.
**AppendAllLines** — добавляет срез строк в конец существующего файла.

 Когда это полезно?
**Построчной **обработки текстовых данных.
Работы с исходным кодом или шаблонами, где нужно игнорировать комментарии или анализировать строки по отдельности.
Простого и понятного управления содержимым файлов.

 Пример использования: Читаете файл как массив строк, обрабатываете строки в коде, затем записываете результат обратно. Всё легко, понятно и без лишних циклов.

 Подробнее в[ статье](https://proglib.io/w/c61c0468)",6311,17,0,goproglib
5448,2024-12-02 11:03:21+00:00,"** Утечки памяти в Go: как их обнаружить и устранить?**

Утечки памяти в Go — не редкость, но часто они происходят не из-за ошибок управления памятью, а из-за того, что ненужные объекты остаются достижимыми. Как диагностировать и исправлять такие ситуации?

**Простая диагностика:**
️ Используйте встроенный пакет pprof для профилирования памяти.
️ Анализируйте дампы памяти, чтобы определить объекты, которые потребляют больше всего ресурсов.
️ Принудительно запускайте сборщик мусора (runtime.GC()), чтобы проверить, уменьшается ли объём используемой памяти.

Часто виновниками оказываются сторонние библиотеки. Например, одна из них оставляла ссылки на объекты** после обработки данных**, что приводило к значительному росту потребления памяти.

**Инструменты:**
** pprof**: помогает найти «горячие точки» кода.
** Дампы памяти:** показывают, какие объекты занимают больше всего места.
** Тестирование**: заменяйте проблемные фрагменты и проверяйте, решена ли проблема.",6342,19,0,goproglib
5446,2024-12-01 18:06:24+00:00,"**️ Мелодия Go или библиотека для веба**

**Melody **— это простая и мощная библиотека для работы с WebSocket в Go, которая позволяет создавать серверы для обмена данными в реальном времени. С её помощью можно легко организовать двустороннюю связь между сервером и клиентами, что идеально подходит для приложений, где важна моментальная реакция, например, чатов, уведомлений или онлайн-игр.

**Основные особенности Melody:**
** Простота в использовании**: Melody предлагает понятный API для работы с WebSocket, минимизируя код и упрощая интеграцию.
** Масштабируемость**: Поддерживает одновременные подключения множества клиентов, что делает её отличным выбором для высоконагруженных приложений.
** Группировка подключений**: Возможность организовывать WebSocket-сессии в каналы, отправляя сообщения нескольким клиентам одновременно.
** Сохранение состояния**: Поддерживает управление состоянием подключений, что помогает отслеживать активные сессии.",6461,21,0,goproglib
5445,2024-12-01 11:02:24+00:00,"**«weak pointers» в Go: что это и зачем они нужны?**
Слабые указатели в Go позволяют ссылаться на объект в памяти, не препятствуя его удалению сборщиком мусора (**GC**). Это полезно для оптимизации использования памяти, например, в кэшах или при интернировании объектов.

Зачем их использовать?
 **Оптимизация использования памяти**: объекты, на которые не существуют активные ссылки, автоматически освобождаются сборщиком мусора.
 **Гибкость в кешировании**: возможность ссылаться на объекты без препятствования их удалению при отсутствии других ссылок.
 **Интернирование данных**: эффективное хранение уникальных строковых значений без дублирования в памяти.",6249,15,1,goproglib
5444,2024-11-30 18:04:18+00:00," **«Хочу уволиться, но боюсь»: что делать**

«Завтра напишу заявление об увольнении» — фраза, которую многие повторяют каждый понедельник, но так и не решаются на перемены. Сегодня поговорим о том, как перестать саботировать собственную карьеру и научиться управлять страхом перемен. Спойлер: дело не в лени и не в комфортной зарплате.

 [Читать статью](https://proglib.io/sh/Tz2DsfawvY)
 [Зеркало](https://proglib.tech/p/hochu-uvolitsya-no-boyus-chto-delat-2024-11-22)",5442,7,2,goproglib
5443,2024-11-30 11:02:23+00:00,"Кажется, что фронтенд — это просто набор стилей и скриптов? А что, если разобраться, как работают React, Webpack или CSS-Grid?
Этот тест проверит, насколько хорошо вы понимаете ту сторону разработки, которая ближе всего к пользователю.

[ Попробовать свои силы!](https://clc.to/BmzXkg)",5896,0,0,goproglib
5442,2024-11-30 09:02:34+00:00," Розыгрыш от[ Proglib Academy](https://proglib.io/w/6f1b8fa0) и [DigitalRazor](https://digital-razor.ru/?utm_source=proglib&utm_medium=telegram&utm_campaign=ads&clckid=41bd6592)!

С 27 ноября по 27 декабря у вас есть шанс не только прокачать свои навыки, но и выиграть ПК при покупке любого курса Академии!

 Призы для участников акции:

– [Игровой ПК DigitalRazor ProGaming](https://clck.ru/3EsBc2)
– [VIP-пакет курса Proglib Academy](https://proglib.io/w/991351b4)

 Как принять участие?
Купите любой курс Proglib Academy с 27 ноября по 27 декабря и получите шанс выиграть мощный ПК.

Приобретите технику DigitalRazor — участвуйте в розыгрыше VIP курса.

 Вместе с DigitalRazor мы создали спецпредложение -50% на курсы до 30 ноября, чтобы вы могли начать обучение на более выгодных условиях.

[Выбрать курс](https://proglib.io/w/6f1b8fa0)",5939,2,0,goproglib
5441,2024-11-29 10:58:53+00:00,#мем,7361,70,0,goproglib
5440,2024-11-29 07:08:20+00:00,"️ **new vs make в Go: В чем разница?**

В Go есть две ключевые функции для работы с памятью: new и make. Они выглядят схожими, но их использование и назначение значительно различаются.

1. **new **— выделяет память для переменной определённого типа и возвращает указатель на неё. Однако стоит помнить, что память, выделенная через new, по сути — это неинициализированная область памяти, которая может привести к ошибкам, если данные не будут правильно обработаны после выделения.

2. **make** — используется только для срезов, карт и каналов. Она инициализирует структуры данных и возвращает сам объект, а не указатель. В случае среза это означает создание внутренней структуры с указателем на массив, длиной и ёмкостью.

В отличие от new, make гарантирует, что данные готовы к использованию сразу после вызова.",6359,15,14,goproglib
5439,2024-11-28 18:05:20+00:00," **Как стать успешным программистом: 6 ключевых качеств профессионального разработчика**

Думаешь, чтобы стать крутым программистом, нужен диплом престижного вуза? А вот и нет. Опытные разработчики уверены: гораздо важнее правильный подход к работе и готовность учиться на своих ошибках. И знаешь что? Этому может научиться каждый.

 [Читать статью](https://proglib.io/p/kak-stat-uspeshnym-programmistom-6-klyuchevyh-kachestv-professionalnogo-razrabotchika-2024-11-14)",5558,5,0,goproglib
5434,2024-11-28 07:20:18+00:00,"** Как работает сериализация и десериализация с Protobuf в Go?**

**Protocol Buffers** — это эффективный и компактный бинарный формат сериализации данных, который активно используется в микросервисах и распределённых системах. В этой статье мы разберём, как работает процесс сериализации и десериализации данных с использованием Protobuf в языке Go.

** Сериализация** в Protobuf заключается в преобразовании структуры данных в бинарный формат, который можно передать по сети или сохранить. Protobuf кодирует каждый элемент данных как пару: тег (номер поля) и значение, что позволяет существенно уменьшить размер данных по сравнению с текстовыми форматами, такими как JSON.

 Процесс **десериализации **— это обратная операция: бинарный поток данных преобразуется обратно в структуру, понятную для приложения. Go-библиотека для Protobuf эффективно управляет этим процессом, обеспечивая высокую производительность и минимальные потери данных.

Преимущества Protobuf:
- Сериализация и десериализация проходят значительно быстрее, чем в случае с JSON или XML.
- Бинарный формат требует меньше места для хранения и передачи данных.
- Protobuf поддерживает множество языков, включая Go, Python, Java и другие, что облегчает интеграцию между различными системами.

 Пример использования библиотеки и кода можно найти в [статье](https://proglib.io/w/3113da1a)",6034,14,7,goproglib
5432,2024-11-27 13:42:18+00:00,"** Улучшите качество вашего Go-кода с go-test-coverage!**

Качество кода и надежные тесты — ключ к успешным проектам. Проект go-test-coverage предлагает инструменты для детального анализа покрытия кода тестами, что помогает разработчикам поддерживать и улучшать стандарты своих проектов.

** Что делает go-test-coverage?**
 Узнайте, какая часть вашего кода протестирована, а какие участки остаются без внимания.
 Генерируйте отчеты в формате HTML или XML, чтобы легко интегрировать их в CI/CD пайплайны.
 Просматривайте графические отчеты, которые наглядно показывают, какие строки кода покрыты тестами.
 Устанавливайте минимальные уровни покрытия. Если покрытие падает ниже заданного, инструмент уведомит вас об этом.

** Как начать использовать go-test-coverage:**

1. Установка: Следуйте инструкциям в README репозитория для установки инструмента.
2. Запуск тестов с покрытием:
```go test -coverprofile=coverage.out ./...```
3. Генерация отчета:
```go-test-coverage -input=coverage.out -output=coverage.html```
4. Анализ результатов:
Откройте coverage.html в браузере для визуального анализа покрытия и определения областей, требующих дополнительных тестов.",6252,11,1,goproglib
5430,2024-11-27 12:12:53+00:00,"**️ Напоминаем: у нас можно (и нужно) купить рекламу**

→ Более 60 телеграм-каналов по всем направлениям IT
→ Почти 1,2 миллиона аудитории
→ Собственное медиа и сайт с DAU 25 000 — можем усилить продвижение 
→ Классные email-рассылки
→ И, конечно же, крутые контент-менеджеры, которые сделают нативную интеграцию/придумают виральный пост/реализуют любые контентные предпочтения

Для заказа пишите сюда: @proglib_adv",16389,10,0,goproglib
5429,2024-11-27 07:03:29+00:00,"** ТОП-15 международных IT-сертификаций, которые увеличат твой доход в 2025 году**

Хочешь знать, какие «корочки» реально поднимут твою зарплату? Исследование Skillsoft раскрыло ТОП-15 самых денежных IT-сертификаций. Спойлер: облака и безопасность рулят.

 [Читать статью](https://proglib.io/p/top-15-mezhdunarodnyh-it-sertifikaciy-kotorye-uvelichat-tvoy-dohod-v-2025-godu-2024-11-12)",5813,11,1,goproglib
5428,2024-11-26 18:03:23+00:00,"Статья «Go Ducks!» рассказывает о том, как Go реализует интерфейсы, и использует метафору с уткой, чтобы объяснить принцип работы с ними. В Go интерфейсы — это не декларации, как в других языках, а неявные реализации. Тип реализует методы, которые ожидает интерфейс — он автоматически становится совместим с этим интерфейсом, даже если явно не указывает, что реализует его.

Вместо явного указания типа как реализацию интерфейса, например, через
```type Duck struct {}```
и
```func (d Duck) Quack() {}```
Go позволяет типам реализовывать интерфейсы автоматически, просто предоставив нужные методы. Это приводит к высокой гибкости, но иногда и путанице, особенно если интерфейс скрыт в другом месте и ты не понимаешь, что тип уже его реализует.

 Подробнее в [источнике](https://fmt.errorf.com/posts/go-ducks/)",8353,18,0,goproglib
5427,2024-11-26 11:17:17+00:00,"**Лучшие ресурсы, чтобы не отставать от трендов из мира Go.**

****[ Golang Go](https://t.me/+VBSfUDFUflE2M2E6) - авторский канал, посвященный Go разработке, Devops и созданию высоконагруженных сервисов.

[ ](https://t.me/+64ytM2_MgJozZTEy)[Golang books](https://t.me/+QjmYTiil1_EzNTk6)[ —](https://t.me/+64ytM2_MgJozZTEyhttps://t.me/+QjmYTiil1_EzNTk6)  редкая литература , статьи, курсы и уникальные гайды для Golang специалистов любого уровня. Читайте, развивайтесь, практикуйте.

 [Golang Jobs ](https://t.me/+YxJjm5hpOdA3ZGFi)— актуальные предложения для Golang разработчиков от самых крупных работодателей и лидеров рынка.",5623,10,0,goproglib
5426,2024-11-26 07:09:20+00:00,"** Обновление Rate-Shield: ещё быстрее и удобнее**

Rate-Shield, инструмент для ограничения скорости запросов, получил важное обновление, которое делает его ещё более мощным и простым в использовании. Этот инструмент особенно полезен для разработчиков API и микросервисов, стремящихся к эффективной защите своих систем.

** Что нового?**

1. **Поддержка Sliding Window**
Теперь Rate-Shield поддерживает алгоритм скользящего окна, который позволяет плавно ограничивать запросы без резких отказов, обеспечивая более равномерное распределение нагрузки.

2.** Локальное кэширование**
Правила ограничения скорости теперь кэшируются локально, что значительно ускоряет работу и снижает нагрузку на систему.

3. **Интеграция со Slack**
Настройка уведомлений о превышении лимитов в Slack упрощает мониторинг и позволяет быстрее реагировать на инциденты.

4.** Оптимизация многопоточности**
Использование пула горутин в обработке запросов делает Rate-Shield ещё быстрее и эффективнее.

 Подробнее в [официальном репозитории](https://github.com/x-sushant-x/Rate-Shield)",5349,6,1,goproglib
5425,2024-11-25 15:22:13+00:00,"**Черные скидки** на курсы в [Академии](https://proglib.io/w/bebd6e6a)! 

**-40%** до конца ноября

 В честь Черной пятницы до 30 ноября запускаем распродажу на все курсы  [**proglib.academy**](https://proglib.io/w/bebd6e6a)** **и дарим **промокод** на сумму 10 000 на технику в магазине [**DigitalRazor** ](https://clck.ru/3EpHZE)(отправим вам по запросу)

 **Анонс новогоднего сюрприза**! 

 Те, кто успеет приобрести курсы с 27 ноября по 27 декабря, получат шанс выиграть крутой новогодний подарок. 
Что это будет, пока держим в секрете – следите за новостями на нашем [канале](https://t.me/+eR2OAjmlontlMjg6)!

**Почему стоит выбрать нас?**

️ **Опытные преподаватели **
Вас будут обучать доценты ВМК МГУ по математике, а алгоритмы расскажет разработчик из Яндекса и преподаватель МФТИ и НИУ ВШЭ.

️ **Бессрочный доступ ко всем курсам **
Проходите обучение в удобном для вас темпе, без давления жестких сроков.

️ **Поддержка преподавателей** 
Не останетесь одни — вам всегда помогут разобраться с трудными темами и ответят на любые вопросы через чат и платформу Coreapp.

 **Не уверены, подойдет ли вам курс?** Начните с бесплатных вводных занятий и познакомьтесь с преподавателями и форматом обучения –

Ждем вас на обучении! ",5402,5,0,goproglib
5423,2024-11-25 11:01:51+00:00,"** 11 лучших ИИ-инструментов для разработки в 2024 году**

__В мире разработки программного обеспечения искусственный интеллект становится незаменимым помощником, способным значительно повысить продуктивность и качество кода. Представьте себе инструменты, которые не только автоматически дополняют ваш код, но и генерируют целые фрагменты, преобразуют дизайн в готовый код и обеспечивают безопасность вашего приложения. Хотите узнать, какие ИИ-инструменты помогут вам быть на шаг впереди в 2024 году? Откройте для себя решения, которые сделают ваш рабочий процесс более эффективным и инновационным.__

 [Читать статью](https://proglib.io/sh/gUYouXM5Oc)
 [Зеркало](https://proglib.tech/p/11-luchshih-ii-instrumentov-dlya-razrabotki-v-2024-godu-2024-11-07)",5216,0,2,goproglib
5422,2024-11-25 07:08:23+00:00," Go всегда славился своей философией минимализма. Когда в версии 1.18 появились дженерики (Generics), разработчики восприняли это как долгожданное улучшение. Но вместе с этим пришли и вопросы: не слишком ли прост этот инструмент для решения сложных задач?

️ C помощью дженериков можно писать код, который работает с разными типами данных, не теряя читаемости и производительности. Это делает их незаменимыми для библиотек и больших проектов.

Преимущества дженериков в Go:

 Дженерики позволяют создавать универсальные функции и структуры данных, что снижает необходимость повторного написания одинакового кода для разных типов.
 Использование дженериков способствует созданию более понятного и поддерживаемого кода, поскольку общая логика сосредоточена в одном месте.
 В определённых сценариях дженерики могут улучшить производительность, особенно в местах, где важна эффективность работы с различными типами данных.

Недостатки дженериков в Go:

Текущая реализация дженериков в Go может быть недостаточно мощной для некоторых сложных задач, что приводит к необходимости использования обходных путей или более сложных конструкций.
Неправильное или чрезмерное использование дженериков может привести к созданию запутанного и трудночитаемого кода, что затрудняет его сопровождение и понимание.
Некоторые разработчики считают, что текущая реализация дженериков в Go является компромиссом, который не полностью удовлетворяет потребности сообщества, оставляя определённые пробелы в функциональности.

 Подробнее в [источнике](https://www.dolthub.com/blog/2024-11-22-are-golang-generics-simple-or-incomplete-1/)",6018,12,1,goproglib
5421,2024-11-24 18:07:18+00:00," Когда вы пишете код на Go, управление памятью становится ключевым моментом, влияющим на производительность приложения. В статье рассматривается важный вопрос: когда переменная в Go размещается в куче, а не на стеке?

В Go действует принцип, называемый** escape analysis**, который определяет, где именно должна быть размещена переменная — в стеке (быстрое управление памятью) или в куче (длительное хранение с управлением через GC). Например:

Если переменная передается из функции наружу (или возвращается), Go определяет, что она «убегает» из **локального контекста** и помещает её в кучу. Локальные переменные, которые не покидают функцию, обычно остаются на стеке.

Почему это важно? Куча требует затрат на сборку мусора, что может замедлить приложение. Понимание этих механизмов позволяет оптимизировать код: минимизировать аллокации в куче и уменьшить нагрузку на GC.

**Оптимизируйте осознанно**: инструмент 
```go build -gcflags=""-m""```
 поможет понять, как компилятор обрабатывает переменные в вашем коде. Это **первый шаг** к созданию высокопроизводительных приложений!

[ Подробнее в источнике](https://hackernoon.com/optimizing-memory-usage-in-golang-when-is-a-variable-allocated-to-the-heap)",6671,27,1,goproglib
5420,2024-11-24 11:02:22+00:00,"** Проект nxdir-s/pipelines: элегантная работа с потоками данных в Go **

Если вы сталкиваетесь с задачами конкурентной обработки данных в Go, эта библиотека существенно облегчит создание и управление потоками данных (pipelines), обеспечивая удобную поддержку параллелизма.

Ключевые возможности:
 Создание потоков данных: легко генерируйте данные из срезов, мап или кастомных функций.
 Параллельная обработка (FanOut): ускоряйте вычисления, разделяя данные между несколькими обработчиками.
 Объединение потоков (FanIn): собирайте результаты из разных каналов для дальнейшей обработки.
 Простота использования: минималистичный API, понятный даже новичкам.

 Проект на [GitHub](https://github.com/nxdir-s/pipelines)",6193,0,5,goproglib
5419,2024-11-23 20:48:27+00:00," В последнем выпуске подкаста **Go Time** Wesley Beary из Anchor рассказал о трудностях, с которыми столкнулась его команда при создании CLI-инструмента на Go 

Учитывая количество библиотек, доступных Go-разработчикам в наши дни, можно подумать, что создание CLI-приложения стало тривиальным делом. Но все не так однозначно. 

Так какие трудности могли возникнуть у команды на пути к production-ready CLI? 

 [Слушать](https://changelog.com/gotime/337) (по ссылке также можно прочитать транскрибацию)",6386,12,0,goproglib
5416,2024-11-22 20:42:22+00:00,"**‍ Тест: насколько ты продвинутый разраб?**

Говорят, что джун становится мидлом, когда начинает понимать, как мало он знает. Этот тест покажет, насколько ты продвинулся в своём развитии.

 [Ворваться](https://proglib.io/w/aa41c92e)",6173,8,8,goproglib
5413,2024-11-22 10:56:36+00:00," **Компиляция Go-программы в нативный бинарь для Nintendo Switch **

Вовсе не новость, но кто-то мог пропустить это в своё время. Интересно взглянуть на детали

 [Читать гайд](https://ebitengine.org/en/blog/native_compiling_for_nintendo_switch.html)",7271,19,0,goproglib
5412,2024-11-21 20:54:58+00:00," **Самоучитель по Go для начинающих. Часть 17. Основы сетевого программирования. Стек TCP/IP. Сокеты. Пакет net**

В этой части самоучителя мы погрузимся в мир сетевого программирования, изучим его основные концепции и инструменты. Начнем с рассмотрения принципов работы компьютерных сетей и их архитектуры, познакомимся с протоколами TCP и IP, лежащими в основе стека TCP/IP. 

Затем детально изучим сокеты и их роль в сетевом взаимодействии. Особое внимание будет уделено пакету net, который предоставляет удобные инструменты для реализации сетевых приложений.

 [Читать гайд](https://proglib.io/sh/v3DhQNqBpH)

‍ **Остальные части в серии:**

1. [Особенности и сфера применения Go, установка, настройка](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-1-osobennosti-i-sfera-primeneniya-go-ustanovka-nastroyka-2023-11-23)
2. [Ресурсы для изучения Go с нуля](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-2-resursy-dlya-izucheniya-go-s-nulya-2023-11-28)
3. [Организация кода. Пакеты, импорты, модули. Ввод-вывод текста.](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-3-organizaciya-koda-pakety-importy-moduli-vvod-vyvod-teksta-2023-12-07)
4. [Переменные. Типы данных и их преобразования. Основные операторы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-4-peremennye-tipy-dannyh-i-ih-preobrazovaniya-osnovnye-operatory-2023-12-14)
5. [Условные конструкции if-else и switch-case. Цикл for. Вложенные и бесконечные циклы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-5-uslovnye-konstrukcii-if-else-i-switch-case-cikl-for-vlozhennye-i-beskonechnye-cikly-2024-01-11)
6. [Функции и аргументы. Области видимости. Рекурсия. Defer](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-6-funkcii-i-argumenty-oblasti-vidimosti-rekursiya-defer-2024-01-24)
7. [Массивы и слайсы. Append и сopy. Пакет slices](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-7-massivy-i-slaysy-append-i-sopy-paket-slices-2024-02-08)
8. [Строки, руны, байты. Пакет strings. Хеш-таблица (map)](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-8-stroki-runy-bayty-paket-strings-hesh-tablica-map-2024-02-15)
9. [Структуры и методы. Интерфейсы. Указатели. Основы ООП](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-8-stroki-runy-bayty-paket-strings-hesh-tablica-map-2024-02-15)
10. [Введение в ООП. Наследование, абстракция, полиморфизм, инкапсуляция](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-10-vvedenie-v-oop-nasledovanie-abstrakciya-polimorfizm-inkapsulyaciya-2024-03-11)
11. [Обработка ошибок. Паника. Восстановление. Логирование](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-11-obrabotka-oshibok-panika-vosstanovlenie-logirovanie-2024-04-16)
12. [Обобщенное программирование. Дженерики](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-12-obobshchennoe-programmirovanie-dzheneriki-2024-05-03)
13. [Работа с датой и временем. Пакет time](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-13-rabota-s-datoy-i-vremenem-paket-time-2024-06-26)
14. [Интерфейсы ввода-вывода. Буферизация. Работа с файлами. Пакеты io, bufio, os](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-14-interfeysy-vvoda-vyvoda-buferizaciya-rabota-s-faylami-pakety-io-bufio-os-2024-07-18)
15. [Конкурентность. Горутины. Каналы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-15-konkurentnost-gorutiny-kanaly-2024-08-20)
16. [Тестирование кода и его виды. Table-driven подход. Параллельные тесты](https://proglib.io/sh/RCwSEFDHq0)",32838,21,0,goproglib
5411,2024-11-21 20:16:30+00:00,"[▶️](https://jvns.ca/blog/2024/11/18/how-to-import-a-javascript-library/)** Разработка CLI-приложения на Go с Bubble Tea**

Только не говорите, что не любите CLI-приложения! Ловите [50-минутное обучающее видео](https://youtu.be/_gzypL-Qv-g?si=ppFvOC9RQ00WBh06), с помощью которого вы напишете CLI-инструмент для заметок с  использованием Go + Bubble Tea + Lip Gloss от Charm.

**⏳ Таймкоды:**

[00:00](https://www.youtube.com/watch?v=_gzypL-Qv-g&t=0s) Intro
[03:00](https://www.youtube.com/watch?v=_gzypL-Qv-g&t=180s) Basics
[10:04](https://www.youtube.com/watch?v=_gzypL-Qv-g&t=180s) SQLite store
[22:03](https://www.youtube.com/watch?v=_gzypL-Qv-g&t=1323s) List view
[31:55](https://www.youtube.com/watch?v=_gzypL-Qv-g&t=1915s) Add lipgloss
[39:15](https://www.youtube.com/watch?v=_gzypL-Qv-g&t=2355s) Textinput and Textarea
[47:20](https://www.youtube.com/watch?v=_gzypL-Qv-g&t=2840s) Working App!
[48:56](https://www.youtube.com/watch?v=_gzypL-Qv-g&t=2936s) Outro",6201,5,0,goproglib
5410,2024-11-21 18:17:29+00:00,Не забудьте оставить комментарий с вашими мыслями об ИИ в программировании! Какие преимущества и недостатки вы видите? Какие инструменты рекомендуете попробовать коллегам? ,5598,0,1,goproglib
5407,2024-11-21 18:12:26+00:00,"**Привет, друзья! **

Мы готовим статью об **ИИ-инструментах для программирования в 2024 году** и хотим услышать ваше мнение!  Поделитесь своим опытом и помогите нам сделать материал ещё полезнее. Самые интересные ответы войдут в статью! ",5422,2,0,goproglib
5406,2024-11-20 18:59:39+00:00," **Понимание уязвимостей, связанных с внедрением команд в Go** 

Если вы вызываете системные утилиты из кода, вы можете предпринять некоторые базовые, но важные меры предосторожности, чтобы избежать проблем с безопасностью (вы ведь не хотите, чтобы кто-то мог убедить ваш сервер запустить rm или что-то похуже).

 [Читать гайд](https://snyk.io/blog/understanding-go-command-injection-vulnerabilities/)",8435,2,0,goproglib
5405,2024-11-19 20:30:11+00:00," Кстати, 7 ноября **представлены релизы Go 1.23.3 и 1.22.9**

Новая версия содержит исправления безопасности компоновщика, рантайма, а также пакетов `net/http`, `os` `и` `syscall`.

 [Анонс](https://groups.google.com/g/golang-announce/c/X5KodEJYuqI)
⬇️ [Скачать](https://go.dev/dl/#go1.23.3)

#новости",6668,18,0,goproglib
5404,2024-11-19 18:40:23+00:00," **Какой подарок вы бы хотели на Новый год?**

Да, начинать готовиться никогда не рано 

#интерактив",12892,6,6,goproglib
5402,2024-11-19 06:00:28+00:00,"**Вакансии «Библиотеки программиста» — ждем вас в команде!**

Мы постоянно растем и развиваемся, поэтому создали отдельную [страницу,](https://job.proglib.io/) на которой будут размещены наши актуальные вакансии. Сейчас мы ищем:
контент-менеджеров для ведения телеграм-каналов

[Подробности тут](https://job.proglib.io/)

Мы предлагаем частичную занятость и полностью удаленный формат работы — можно совмещать с основной и находиться в любом месте

Ждем ваших откликов ",5569,5,0,goproglib
5401,2024-11-18 18:49:53+00:00,"️** Go** **Runtime Finalizer и Keep Alive**

Если вы перешли с полностью объектно-ориентированного языка на Go, скорее всего, вам не хватало финализаторов для очистки ресурсов при уничтожении объекта. В Go есть (довольно непонятный) способ установки финализаторов — в пакете `runtime`.

Однако, как отмечает Phuong Le, «если вам вдруг понадобится использовать финализаторы, есть большая вероятность, что это признак проблемы с дизайном».

Как бы то ни было, финализаторы не совсем бесполезны. Они могут служить в качестве резервного механизма очистки для объектов, которые имеют явную функцию очистки (подумайте о методах Close() для подключений к файлам или базе данных). Если пользователи таких объектов не смогут должным образом вызвать функцию очистки, может сработать финализатор.

 [Читать статью](https://victoriametrics.com/blog/go-runtime-finalizer-keepalive/)",6266,11,0,goproglib
5399,2024-11-17 13:00:17+00:00," **Разработка Brainrot Language Server на Go**

Так называемый ""Brainrot"" — это смесь сленга и мемов нового поколения. Следуйте этому руководству по созданию базового сервера LSP и, возможно, вы сможете применить полученные знания с большей пользой! 

 [Читать](https://jitesh117.github.io/blog/creating-a-brainrot-language-server-in-golang/)",7166,19,0,goproglib
5398,2024-11-17 09:39:32+00:00," **Как ускорить распределенные системы: 8 стратегий снижения времени ожидания**

Высокая latency — это скрытый враг, превращающий приложение в тормозящую телегу. Особенно в распределённых системах, где данные путешествуют между серверами и каждая задержка становится катастрофой. Знаете ли вы, какие 8 стратегий помогут превратить ""задумчивое"" приложение в настоящего чемпиона? 

Что эффективнее: кэшировать, сжимать или оптимизировать запросы к базе? А что, если правильный ответ — балансировка нагрузки или вообще CDN?

 Найдите недостающий элемент в вашем стеке и максимально ускорьте свои приложения.

 [Читать статью](https://proglib.io/sh/QnaDgjMkB1)
 [Зеркало](https://proglib.tech/p/kak-uskorit-raspredelennye-sistemy-8-strategiy-snizheniya-vremeni-ozhidaniya-2024-11-14)",5655,4,0,goproglib
5397,2024-11-16 08:28:18+00:00,"**fmt.Sprintf 🆚 String Concat
**
Хотя код с использованием `fmt.Sprintf` может выглядеть более структурированным, простая конкатенация строк (`+`) оказывается несколько быстрее. Почему? 

Max Hoffman из команды DoltHub разбирается, как `fmt.Sprintf` работает под капотом

 [Читать](https://www.dolthub.com/blog/2024-11-08-sprintf-vs-concat/)",7787,16,10,goproglib
5396,2024-11-15 20:23:28+00:00,"️ **Создание кастомного балансировщика нагрузки на Go для gRPC с приоритизацией адресов**

Разработчик из VK делится опытом создания кастомного балансировщика нагрузки на Go для gRPC, который использует приоритеты адресов для выбора наилучшего соединения. 

Это решение позволяет гибко управлять распределением клиентских запросов между серверами с разными уровнями доступности и обеспечивает подключение к оптимальному ЦОД с минимальными задержками.

 [Читать](https://habr.com/ru/companies/vk/articles/858290/)",8170,21,0,goproglib
5395,2024-11-15 15:36:28+00:00,"  **wasmVision** — простой способ начать работу с компьютерным зрением 

Гениальная разработка TinyGo и GoCV представляет собой высокопроизводительный движок обработки компьютерного зрения, который можно настраивать и расширять с помощью WebAssembly (который можно создать с помощью TinyGo, Rust, или C, если вам так хочется).

 [GitHub](https://github.com/wasmvision/wasmvision)",6734,9,3,goproglib
5392,2024-11-14 07:16:10+00:00," **С днем ​​рождения, Go! 10-го ноября Go исполнилось 15 лет **

Ухватите кусочек торта, Go отпраздновал свою последнюю годовщину. Austin Clements из команды Go размышляет о том, что изменилось за последний год и каковы текущие приоритеты команды.

 [Читать](https://go.dev/blog/15years)",6449,98,8,goproglib
5384,2024-11-13 14:10:17+00:00,"  7 способов сортировки массивов на примере С++ с иллюстрациями

В этой статье продемонстрируем на иллюстрациях, как работают алгоритмы сортировки: от простейшей пузырьковой до сложной древовидной кучи. Также определим сложность худших и лучших случаев, а код напишем на С++.

[Статья](https://proglib.io/w/1753b3b8)

Зачем учить алгоритмы сортировки, если есть уже готовые методы сортировки?
Чтобы знать плюсы и минусы каждого алгоритма, понимать, как действительно он работает (а не просто копипастить) и какой алгоритм выбрать для конкретной задачи. Плюс изучение алгоритмов развивает мышление и профессиональный кругозор.

Как мне оперативно научиться применять алгоритмы?

Начни с бесплатного демо доступа к курсу [«Алгоритмы и структуры данных»,](https://proglib.io/w/b00fcfd1) на котором junior и middle+ программисты  смогут потренировать навыки применения алгоритмов и сгенерировать идеальные решения сложных задач в сообществе других разработчиков.",5496,9,0,goproglib
5383,2024-11-13 11:42:44+00:00,"** Разработка клона Linux-инструмента **[**htop**](https://htop.dev/)** на Go**: пошаговый гайд

У каждого руководства есть цель, но у этого — две: 

1️⃣ Научиться читать системную информацию на Go
2️⃣ Узнать, как создать TUI с помощью BubbleTea

 [Читать](https://penchev.com/posts/create-tui-with-go/)",5943,23,2,goproglib
5380,2024-11-13 06:02:54+00:00,"**Самые полезные каналы для программистов в одной подборке!**

Сохраняйте себе, чтобы не потерять 

Для всех

[Библиотека программиста](https://t.me/proglibrary) — новости, статьи, досуг, фундаментальные темы
[Книги для программистов](https://t.me/progbook)
[IT-мемы](https://t.me/itmemlib)
[Proglib Academy](https://t.me/proglib_academy) — тут мы рассказываем про обучение и курсы
[Азбука айтишника](https://t.me/abc_for_it) — здесь мы познаем азы из мира программирования

Про нейросети
[Библиотека робототехники и беспилотников | Роботы, ИИ, интернет вещей ](https://t.me/robotics_autopilots_iot)
[Библиотека нейрозвука | Транскрибация, синтез речи, ИИ-музыка ](https://t.me/neuroaudio)
[Библиотека нейротекста | ChatGPT, Gemini, Bing ](https://t.me/neuro_text)
[Библиотека нейровидео | Sora AI, Runway ML, дипфейки ](https://t.me/neurovidos)
[Библиотека нейрокартинок | Midjourney, DALL-E, Stable Diffusion ](https://t.me/neurokartinka)

#️⃣C#

[Книги для шарпистов | C#, .NET, F#](https://t.me/csharpprogbook)
[Библиотека шарписта ](https://t.me/csharpproglib)— полезные статьи, новости и обучающие материалы по C#
[Библиотека задач по C#](https://t.me/csharp_problems_lib) — код, квизы и тесты
[Библиотека собеса по C#](https://t.me/csharp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Вакансии по C#, .NET, Unity Вакансии по PHP, Symfony, Laravel](https://t.me/csharpdevjob)

️DevOps

[Библиотека devops’а](https://t.me/devopsslib) — полезные статьи, новости и обучающие материалы по DevOps
[Вакансии по DevOps & SRE](https://t.me/devopssjob)
[Библиотека задач по DevOps](https://t.me/devops_problems_lib) — код, квизы и тесты
[Библиотека собеса по DevOps](https://t.me/devops_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования

PHP

[Библиотека пхпшника](https://t.me/phpproglib) — полезные статьи, новости и обучающие материалы по PHP
[Вакансии по PHP, Symfony, Laravel](https://t.me/phpdevjob)
[Библиотека PHP для собеса](https://t.me/php_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по PHP](https://t.me/php_problems_lib) — код, квизы и тесты

Python

[Библиотека питониста](https://t.me/pyproglib) — полезные статьи, новости и обучающие материалы по Python
[Вакансии по питону, Django, Flask](https://t.me/pydevjob)
[Библиотека Python для собеса](https://t.me/py_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Python](https://t.me/py_problems_lib) — код, квизы и тесты

Java

[Книги для джавистов | Java ](https://t.me/javaprogbook)
[Библиотека джависта](https://t.me/javaproglib) — полезные статьи по Java, новости и обучающие материалы
[Библиотека Java для собеса](https://t.me/java_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Java](https://t.me/java_problems_lib) — код, квизы и тесты
[Вакансии для java-разработчиков](https://t.me/javadevjob)

Data Science

[Книги для дата сайентистов | Data Science](https://t.me/dsprogbook)
[Библиотека Data Science](https://t.me/dsproglib) — полезные статьи, новости и обучающие материалы по Data Science
[Библиотека Data Science для собеса](https://t.me/ds_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Data Science](https://t.me/ds_problems_lib) — код, квизы и тесты
[Вакансии по Data Science, анализу данных, аналитике, искусственному интеллекту](https://t.me/datajob)

Go

[Книги для Go разработчиков](https://t.me/goprogbook)
[Библиотека Go разработчика](https://t.me/goproglib) — полезные статьи, новости и обучающие материалы по Go
[Библиотека Go для собеса](https://t.me/go_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Go](https://t.me/go_problems_lib) — код, квизы и тесты
[Вакансии по Go](https://t.me/godevjob)

C++

[Книги для C/C++ разработчиков](https://t.me/cppprogbook)
[Библиотека C/C++ разработчика](https://t.me/cppproglib) — полезные статьи, новости и обучающие материалы по C++
[Библиотека C++ для собеса](https://t.me/cpp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по C++](https://t.me/cpp_problems_lib) — код, квизы и тесты
[Вакансии по C++](https://t.me/cppdevjob)

Другие каналы

[Библиотека фронтендера](https://t.me/frontendproglib)
[Библиотека мобильного разработчика](https://t.me/mobileproglib)
[Библиотека хакера](https://t.me/hackproglib)
[Библиотека тестировщика](https://t.me/testerlib)
[Вакансии по фронтенду, джаваскрипт, React, Angular, Vue](https://t.me/jsdevjob)
[Вакансии для мобильных разработчиков](https://t.me/mobiledevjob)
[Вакансии по QA тестированию](https://t.me/testerrjob)
[InfoSec Jobs — вакансии по информационной безопасности](https://t.me/hackdevjob)
[Библиотека разработчика игр | Gamedev, Unity, Unreal Engine](https://t.me/gameproglib)

Чтобы добавить папку с нашими каналами, нажмите [сюда](https://t.me/addlist/17y04EbNMrlhNjZi)

Также у нас есть боты:
[Бот с IT-вакансиями](http://t.me/proglib_job_bot)
[Бот с мероприятиями в сфере IT](http://t.me/event_listener_bot)

Мы в других соцсетях:
[VK](https://vk.com/proglib)
[YouTube](https://www.youtube.com/c/%D0%91%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%B0)
[Дзен](https://zen.yandex.ru/proglib)
[Facebook](https://www.facebook.com/proglib/?locale=ru_RU) *
[Instagram](https://www.instagram.com/proglibrary/) *

__* Организация Meta запрещена на территории РФ__",5007,6,0,goproglib
5379,2024-11-12 19:50:19+00:00,** Какой совет вы бы дали начинающим программистам?** Поделитесь своими мыслями в комментариях,5416,4,7,goproglib
5377,2024-11-12 19:48:22+00:00,"Привет, друзья! 

Мы готовим статью о том, **как эффективно изучать программирование**, и хотим услышать ваше мнение!  Поделитесь своим опытом, и самые полезные советы войдут в нашу публикацию.",5384,1,0,goproglib
5376,2024-11-12 11:37:17+00:00,"Кстати, функция` LookupEnv `в Go может использоваться для определения того, установлена ​​ли переменная окружения или нет. 

 [Go Playground ](https://go.dev/play/p/373ANtazX9J)

#tip",5656,51,0,goproglib
5374,2024-11-11 19:48:22+00:00," **Команды git merge и git rebase: преимущества, недостатки и ключевые различия**

Один из ключевых аспектов работы с системой контроля версий Git — перенос изменений из одной ветки в другую. Для этого существует два основных инструмента: git merge и git rebase. 

Хотя они решают одну и ту же задачу по интеграции кода, делают они это разными способами. Разберемся, как именно работают git merge и git rebase, и какую опцию стоит выбрать в конкретной ситуации.

 [Читать статью](https://proglib.io/sh/ZhsJW0GLok)
 [Зеркало](https://proglib.tech/p/komandy-git-merge-i-git-rebase-preimushchestva-nedostatki-i-klyuchevye-razlichiya-2024-11-01)",4311,4,0,goproglib
5373,2024-11-11 18:00:55+00:00,"️ **Создание потокобезопасных абстракций на Java и Go**

Чтобы сформировать рабочее понимание и освоиться с Go, автор статьи решил попробовать свои силы в портировании реализации базы данных SimpleDB__ __с Java на Go. 

Хотя языки различаются по ряду важных параметров — они также имеют много общих функций, о которых и пойдет речь в статье. Под катом — практический взгляд на создание потокобезопасных абстракций на Java и Go.

 [Читать](https://rybicki.io/blog/2024/11/03/multithreaded-code-java-golang.html)",5790,9,0,goproglib
5370,2024-11-10 13:04:38+00:00,"  **OAuth 2: как работает современная авторизация**

Помнишь кнопку «Войти через Google»? Та самая кнопка, которая избавляет от необходимости запоминать очередной пароль. Сегодня разберем, как работает эта магия изнутри, почему гиганты вроде Spotify и Medium используют такой способ входа, и как внедрить его в свое приложение. Спойлер: это проще, чем кажется, и гораздо безопаснее традиционной формы регистрации.

Читать [статью](https://proglib.io/sh/Pn5EG0IHgF)",6098,17,0,goproglib
5369,2024-11-10 09:19:59+00:00,"** Дженерики в Go**: серия обучающих руководств из книги [Know Go](https://bitfieldconsulting.com/books/generics), написанной John Arundel

[1️⃣ Generics](https://bitfieldconsulting.com/posts/generics)
2️⃣ [Type parameters](https://bitfieldconsulting.com/posts/type-parameters)
3️⃣ [Generic types](https://bitfieldconsulting.com/posts/generic-types)
4️⃣ [Constraints](https://bitfieldconsulting.com/posts/constraints)",6927,8,0,goproglib
5368,2024-11-09 09:33:35+00:00," **Разработка фулстек-приложения на Go (Gin) + React + Postgres + NATS **

Гайд от Mukul Mantosh, Developer Advocate в JetBrains. Исходники разработанного в гайде приложения для доставки еды можно найти [здесь](https://github.com/mukulmantosh/Go_Food_Delivery).

 [Читать гайд](https://blog.jetbrains.com/go/2024/11/04/create-a-full-stack-app-with-go-and-react/)",9251,24,3,goproglib
5367,2024-11-08 11:29:13+00:00,"** Погружение в интерфейсы Go**: [статья,](https://habr.com/ru/articles/856272/) после которой у вас появятся ответы на несколько важных вопросов

️ Что такое интерфейс?
️ Что такое значение интерфейса?
️ Что такое пустой интерфейс?
️ Почему nil-интерфейс не равен nil?
️ Где разместить интерфейс?
️ Какая структура интерфейса?

 [Читать](https://habr.com/ru/articles/856272/)",8088,29,0,goproglib
5364,2024-11-07 20:16:26+00:00,"Привет, друзья! 

Мы готовим статью **о секретах мастерства в программировании и хотим узнать ваше мнение**! ",6194,0,0,goproglib
5363,2024-11-07 17:50:56+00:00,"️ **Ranging over functions в Go 1.23**: заметки Eli Bendersky

Обзор нескольких примеров использования новой функциональности `range-over` в версии 1.23, включая простые линейные итераторы, рекурсивные итераторы, а также краткое описание итераций `push` и `pull`.

 [Читать](https://eli.thegreenplace.net/2024/ranging-over-functions-in-go-123/)",7180,12,0,goproglib
5362,2024-11-07 06:09:17+00:00,"** Асинхронность — не баг, а фича: 4 паттерна, которые спасут ваш распределённый сервис **

Представь, что ты отправляешь сообщение в мессенджере, а оно доходит с задержкой в минуту. Бесит? А теперь представь, что у тебя сервис с миллионами пользователей, и каждое их действие должно мгновенно отражаться везде. Звучит как кошмар? Спокойно, есть четыре проверенных способа решить эту головоломку, и они реально работают.

 [Читать статью](https://proglib.io/sh/hyiIWwa5sz)",6847,16,0,goproglib
5361,2024-11-06 18:02:59+00:00,"** golang Live Сoding** — серия трансляций с лайв-кодингом на Go от Антона Зиновьева, тимлида и фулстек веб-разработчика. Вас ждет практика разработки кастомного типа ошибок, абстракции логгера, разбор stack trace и многое другое.

▶️ [Смотреть](https://youtube.com/playlist?list=PLedA2IVtmgnlJJsbItWCfS8SHRYC-wky0&si=VkEsQIxdlzbIXoPb)",6938,10,0,goproglib
5359,2024-11-06 06:13:09+00:00," **Protocol Buffers: самая эффективная бинарная альтернатива текстовому формату**

Protobuf — механизм бинарной сериализации данных, разработанный компанией Google. Протокол не зависит от языка и платформы, и обеспечивает более компактную и быструю сериализацию по сравнению с традиционными текстовыми форматами. 

Особенно интересно, как решается проблема совместимости версий. Обо всем этом подробнее читайте в нашей статье

 [Читать статью](https://proglib.io/sh/E3MGFxpKPf)
 [Зеркало](https://proglib.tech/p/protocol-buffers-samaya-effektivnaya-binarnaya-alternativa-tekstovomu-formatu-2024-10-17)",6033,11,1,goproglib
5358,2024-11-05 20:08:19+00:00,"** Написание безопасного кода на Go**

Полезный гайд, в котором собраны различные ресурсы и методы, о которых следует помнить при написании более надёжных и безопасных приложений на Go, в том числе при обновлении версии Go, использовании `go vet` и сканировании кода на наличие известных уязвимостей.

 Этот пост также вызвал обширную дискуссию на [Hacker News](https://news.ycombinator.com/item?id=42043939).

 [Читать](https://jarosz.dev/article/writing-secure-go-code/)",6656,17,0,goproglib
5357,2024-11-04 18:02:01+00:00,"⏱️ **Как форматировать время в Go**

В этом простом гайде, который стоит добавить в закладки, не только расшифровывается строка форматирования времени в Go, но и содержится множество других советов и хитростей, связанных с использованием пакета `time`.

 [Читать](https://www.tural.pro/blogs/how-to-format-time-in-go-golang)",7088,15,0,goproglib
5353,2024-11-04 06:02:22+00:00,"️ **Подпишись на нашу еженедельную email-рассылку, чтобы быть в курсе последних открытий и тенденций в мире бэкенда.**

В еженедельных письмах ты найдешь:
● Языки программирования и фреймворки для бэкенда
● Архитектура и проектирование серверных приложений
● Базы данных и управление данными
● Безопасность и защита данных
● Облачные технологии и DevOps
● API и интеграции
● Тестирование и отладка
● Инструменты и утилиты для бэкенд-разработчиков
● Лучшие практики и паттерны проектирования

[Подписаться](https://proglib.academy/backend-newsletter)",6275,4,0,goproglib
5347,2024-11-02 19:39:57+00:00,"** 8 важных soft skills для сеньоров, тимлидов и других старших «джедаев»**

За каждым успешным IT-проектом стоят не только строчки кода, но и применение soft skills. Мы раскрываем 8 ключевых навыков, которые превратят тебя из рядового кодера в тимлида.

 [Читать статью](https://proglib.io/sh/1DVtoSB4KJ)",4681,24,0,goproglib
5345,2024-11-02 12:00:55+00:00,"** Искусственный интеллект на практике с примерами на Go**: гайд от Bill Kennedy из Ardan Labs

 [Exploring Vector Databases and Embeddings in A.I](https://youtu.be/wbo7M2jF0Lc)
 [Leveraging LLMs for Powerful Vector Embedding](https://youtu.be/rV162WwQ1hw)
 [Training AI Models on Custom Data with Word2Vec](https://youtu.be/inWa6TTVdfU)
 [Enhancing AI Similarity Searches with MongoDB](https://youtu.be/HEptRbPbbic)
 [Exploring AI-Powered Solutions with OLAMA and LangChain Go](https://youtu.be/rM1CNXyuzFA)
 [Preparing Data for LLMs with Chunking and Embedding](https://youtu.be/HrSkFnutuUI)",6706,9,0,goproglib
5343,2024-11-01 18:26:20+00:00," Подборка лучших статей «Библиотеки программиста» за октябрь: сохраняй в заметки, чтобы не пропустить #самыйсок

 [Кризис IT-рынка: как джуны и кадровый голод меняют правила игр](https://proglib.io/sh/ApRHEskqWG)
🪶 [Как следовать принципу DRY при настройке Apache APISIX](https://proglib.io/sh/W60f1baPpe)
 [Как работают очереди и брокеры сообщений](https://proglib.io/sh/qNrnyGA7we)
 [Генеративно-состязательная нейросеть: ваша первая GAN-модель на PyTorch](https://proglib.io/p/generativno-sostyazatelnaya-neyroset-vasha-pervaya-gan-model-na-pytorch-2020-08-11)
 [Паттерн «Бэкенд для фронтенда»: преимущества, недостатки и лучшие практики для реализации](https://proglib.io/sh/jyCcsSLmMe)
 [Чем заменить Postman: 5 отличных инструментов для разработки API](https://proglib.io/sh/poivMY8yxC)
 [Почему все говорят о Kafka?](https://proglib.io/sh/HZB5I8uDcx)
 [Двойная игра в Power BI: как совмещать роли разработчика и администратора](https://proglib.io/sh/o6cVzlJ8vY)",5913,4,3,goproglib
5342,2024-11-01 11:56:23+00:00,"️ **Как писать качественные unit-тесты**: процент покрытия, мутанты и работа с моками

Марина Карулина, бэкенд-инженер в Авито, делится опытом повышения качества тестового покрытия сервисов. Вы узнаете про мутационные тесты, опасности использования моков и многое другое

 [Читать](https://habr.com/ru/articles/854546/)",6503,9,1,goproglib
5341,2024-10-31 19:34:25+00:00," Поделитесь самыми пугающими историями из своей карьеры: страшные баги, найденные в последний момент, случайные удаления данных, «бессмертные» ошибки и забавные, но пугающие инциденты.

Ждем ваших комментариев ",8410,6,13,goproglib
5340,2024-10-31 11:27:00+00:00," **Разработка блога на Go**: серия видеоуроков от Jon Calhoun, Go-разработчика и автора [gophercises.com](https://gophercises.com/) / [algorithmswithgo.com](https://algorithmswithgo.com/)

▶️ [Rendering Raw Markdown 
▶️](https://youtu.be/Wx8SMT82aa8?si=fFQ53fV0j7A4TH2c) [Rendering Markdown as HTML](https://youtu.be/PWUEXNSrLx4?si=nfNR6asPjmT_bP8k)
▶️ [Metadata via Frontmatter](https://youtu.be/r1FQ7uIfpc8?si=25n-Uv_o43RNlFQO)
▶️ [Index Page](https://youtu.be/dAb9T5qLaDw?si=Do9boz5fIeNv0T3J)",10592,22,0,goproglib
5339,2024-10-30 11:39:07+00:00," Просто напоминаем, что **в Awesome Go почти 3000 категоризированных ресурсов по языку и экосистеме 🫶**

Неизменно полезный ресурс, который продолжает получать частые обновления (почти [безостановочно)](https://github.com/avelino/awesome-go/commits/main/) и который стоит посетить/добавить в закладки.

 [Сайт](https://awesome-go.com/) & [GitHub](https://github.com/avelino/awesome-go)",9622,35,7,goproglib
5338,2024-10-29 20:19:02+00:00," **Какая одна из самых холиварных тем в жизни программистов?** Конечно, связанная с собесами, офферами и вот этим всем. 

Ниже — история про то, как начинающий гофер отказался от оффера на стажировку в Sber Devices. Прочитайте, уже более 170 комментариев

 [Читать](https://habr.com/ru/articles/853150/)",6447,11,8,goproglib
5337,2024-10-29 06:03:49+00:00,"** Генеративно-состязательная нейросеть: ваша первая GAN-модель на PyTorch**

Подробная инструкция построения генеративно-состязательных нейросетей (GAN) на примере двух моделей, реализованных с помощью фреймворка глубокого обучения PyTorch в нашей статье. 

 [Статья](https://proglib.io/p/generativno-sostyazatelnaya-neyroset-vasha-pervaya-gan-model-na-pytorch-2020-08-11)

__У нас есть курс как для начинающих программистов, так и для тех, кто уже шарит:__
 [Алгоритмы и структуры данных](https://proglib.academy/algorithms_and_data_structures?utm_source=tg_academy&utm_medium=post_GenerativnoSostyazatenliiNeurosetVashaPervayaGAN-modelNaPytorch)",6313,5,0,goproglib
5335,2024-10-28 06:00:06+00:00,"**️ Бенчмаркинг и тестирование** **производительности в Go
**
Насколько быстр ваш код? Тесты расскажут вам об этом. К счастью, в Go есть бенчмаркинг, интегрированный в toolchain, наряду с тестированием. Вот руководство по бенчмаркингу для новичков в Go

 [Читать](https://www.willem.dev/articles/benchmarks-performance-testing/)",8340,7,0,goproglib
5334,2024-10-27 15:22:34+00:00," Опытный разработчик Родион Горковенко** **за свои 15+ лет опыта прошел больше 100 собеседований — и почти четверть из них в этом году по Go. 

Под катом он делится наблюдениями и мыслями, которые могут помочь другим в поиске работы или в рекрутинге.

 [Читать](https://habr.com/ru/articles/846962/)",7196,18,4,goproglib
5333,2024-10-26 20:03:35+00:00," **Паттерн «Бэкенд для фронтенда»: преимущества, недостатки и лучшие практики для реализации**

Если ты хочешь стать настоящим мастером API, тебе нужно знать о паттерне BFF. В этой статье рассказываем, как создавать управляемую архитектуру с использованием BFF, избегая избыточной сложности и головной боли при поддержке.

 [Читать статью](https://proglib.io/sh/jyCcsSLmMe)
 [Зеркало](https://proglib.tech/p/pattern-bekend-dlya-frontenda-preimushchestva-nedostatki-i-luchshie-praktiki-dlya-realizacii-2024-10-16)",6279,47,3,goproglib
5332,2024-10-26 13:13:06+00:00," Phuong Le представил очередную занимательную серию статей про I/O в Go:

▪️ [Go I/O Readers, Writers и Data](https://victoriametrics.com/blog/go-io-reader-writer)
▪️ [Go I/O Closer, Seeker, WriterTo и ReaderFrom](https://victoriametrics.com/blog/go-io-closer-seeker-readfrom-writeto/)",9578,9,0,goproglib
5331,2024-10-26 10:14:35+00:00," Приглашаем на вебинар перед Хэллоуином: «**Нужна ли математика на собеседованиях?**» ‍️ 

Темные тучи сгущаются, и в воздухе витает мистическая атмосфера... Готовы ли вы окунуться в мир загадочной математики и раскрыть тайны успешного собеседования? Тогда ждем вас 28 октября в 20:00! 
https://proglib.io/w/c64dc12c

Что вас ждет в эту зловещую ночь:

 **Ошибаться не страшно:** узнаем, как неудачные проекты и опыт «в стол» превращают джуниоров в сеньоров. Расскажем истории о том, как ошибки закаляют и помогают достигать вершин мастерства.

** Собеседования без подготовки?** Обсудим, возможно ли пройти через испытания рекрутеров без специальной подготовки или это путь в лабиринт с привидениями.

 **Теория и практика** — зелье успеха:

• Выбор метрики оценки модели: какую метрику показать бизнесу, чтобы не столкнуться с гневом нечисти? Разберемся в разнице между MAPE и WAPE и когда какую применять.

• Трансформация распределений: как превратить логнормальное распределение в нормальное без волшебной палочки? Поговорим о том, зачем это нужно и как обойтись изменением функции потерь вместо магических превращений.

** Бонус для смельчаков:** раскроем секреты тестирования в маркетинге, которые помогут не заблудиться в темном лесу конкурентного рынка.

Не упустите шанс провести вечер в компании единомышленников, погрузиться в атмосферу Хэллоуина и получить ценные знания!

 **Записывайтесь на вебинар и готовьтесь к мистическим открытиям!**
https://proglib.io/w/c64dc12c",6307,1,0,goproglib
5330,2024-10-26 06:02:09+00:00,"** Чем заменить Postman: 5 отличных инструментов для разработки API**

Postman долгое время был основным инструментом для разработки и тестирования API, но сейчас для большинства разработчиков его ограничения стали перевешивать преимущества. Рассмотрим альтернативные инструменты, которые могут предложить больше возможностей, чем Postman — даже в бесплатной версии.

[Читаем здесь](https://proglib.io/sh/poivMY8yxC)",5326,3,10,goproglib
5328,2024-10-25 11:44:37+00:00," **Оптимизация и визуализация параллелизма тестов**: почему больше ядер не ускоряют ваши тесты Go 

Вы, вероятно, знаете о `t.Parallel()` для параллельного запуска тестов, но знали ли вы, что иногда это может замедлить тесты? [Robert Laszczak](https://twitter.com/roblaszczak) рассматривает некоторые инструменты и тактики, помогающие визуализировать и оптимизировать тесты + когда стоит запускать их параллельно.

 [Читать гайд](https://threedots.tech/post/go-test-parallelism/)",7051,11,2,goproglib
5325,2024-10-24 11:46:11+00:00," **Паттерны многопоточности в Go**

[Статья-шпаргалка](https://habr.com/ru/articles/852556/) по ключевым паттернам многопоточности:

• [Future/Promise —](https://habr.com/ru/articles/852556/#promise) асинхронный запрос на выполнение задачи, не блокирующий основной поток.
• [Generator](https://habr.com/ru/articles/852556/#generator) — простой и удобный способ создания потока данных. С его помощью можно запускать горутину, которая генерирует значения и передает их через канал.
• [Pipeline](https://habr.com/ru/articles/852556/#pipeline) — мощный паттерн, позволяющий разбить задачу на несколько этапов обработки данных, организуя плавный поток через горутины.
• [Fan-in и Fan-out](https://habr.com/ru/articles/852556/#fan-in-out) — fan-out помогает распараллелить выполнение одной задачи на несколько горутин, а fan-in помогает собрать результаты этих горутин в один поток данных.
• [Semaphore](https://habr.com/ru/articles/852556/#semaphore) — инструмент для контроля числа одновременно выполняемых горутин, защищающий от перегрузок системы.
• [Worker Pool](https://habr.com/ru/articles/852556/#worker-pool) — организует набор горутин для параллельной обработки задач, что особенно полезно для оптимизации производительности.
• [Обработка ошибок в горутинах](https://habr.com/ru/articles/852556/#errors) — паттерн, помогающий корректно и безопасно обрабатывать ошибки, возникающие в горутинах, через каналы.",8230,26,3,goproglib
5324,2024-10-24 09:06:03+00:00,"**️Разыгрываем флагманский смартфон**

«Библиотека программиста» разыгрывает один из трех смартфонов на выбор:
Samsung Galaxy S24 Ultra на 1 ТБ
Xiaomi 14 Ultra на 512 ГБ
iPhone 16 Pro Max на 512 ГБ

**** **А еще 99 участников розыгрыша получат скидку 50% на наш курс **[**Базовые модели ML и приложения**](https://proglib.academy/machine-learning-course)**!**
__Промокод будет действителен до 20 ноября. **
**__
Условия просты:
→ подписаться на [Библиотека нейротекста](https://t.me/neuro_text)
→ подписаться на [Библиотека нейрозвука](https://t.me/neuroaudio)
→ подписаться на [Библиотека нейрокартинок](https://t.me/neurokartinka)
→ нажать на кнопку «Участвовать» под этим постом

Итоги появятся 30 октября в 20:00 по московскому времени в нашем канале [Библиотека программиста](https://t.me/proglibrary). Затем мы свяжемся с победителем, который сам выберет смартфон. Тем, кто получит промокод, мы вышлем его в течение недели после окончания розыгрыша.

️ __Убедитесь, что вам можно написать в личные сообщения или следите за результатами — если мы не сможем с вами связаться, то не сможем и отправить приз. Доставить мы можем только в города России и Беларуси.__",4495,1,0,goproglib
5323,2024-10-23 16:42:17+00:00," **Почему все говорят о Kafka?**

Хочешь узнать, как обрабатывать миллионы событий в секунду и почему такие гиганты, как Netflix и Uber, без ума от Kafka? Давай разберемся, как этот инструмент может превратить поток данных в золотую жилу для твоего проекта.

Читать [статью](https://proglib.io/sh/HZB5I8uDcx)",6153,4,1,goproglib
5321,2024-10-23 06:01:15+00:00,"Кстати, несмотря на то, что канал `time.Timer` является буферизованным каналом с емкостью 1 элемент, проверка cap (timer.C) все равно вернет 0:

```package main

import (
    ""fmt""
    ""time""
)

func main() {
    t := time.NewTimer(0)
    fmt.Println(cap(t.C))
}```

 [Подробнее](https://go.dev/wiki/Go123Timer#cap-and-len)",6644,17,5,goproglib
5320,2024-10-22 19:37:22+00:00," **А вы отдыхаете на выходных?**

Ну это такие дни в течение недели, когда другие люди не работают, а отдыхают, то есть дают возможность организму/психике самовосстановиться.

 — да, только этим и занимаюсь
 — нет, доделываю «хвосты» по работе
 — не работаю, но занимаюсь пет-проектами
 — свой вариант (напишу в комментариях)

#интерактив",6561,200,2,goproglib
5319,2024-10-22 19:26:58+00:00,"🪄** Магия генератора Go-кода: краткое руководство по началу работы **

Существует не так много руководств по генерации кода Go, что вдохновило автора на создание [проекта](https://github.com/mrexox/gen-singleton-functions), который генерирует функции-обёртки для методов заданного типа. 

Этот конкретный пример может послужить хорошей отправной точкой для создания собственного генератора кода на Go.

 [Читать](https://evilmartians.com/chronicles/a-taste-of-go-code-generator-magic-a-quick-guide-to-getting-started)",7019,15,0,goproglib
5316,2024-10-21 20:35:20+00:00,"**Корутины: stackful 🆚 stackless**

В статье корутины рассматриваются как общий концепт, без привязки к конкретному языку. Вы узнаете об основных различиях между stackless и stackful корутинами: чем они отличаются, какие у них плюсы/минусы и многое другое.

 [Читать](https://habr.com/ru/articles/850970/)",8794,10,6,goproglib
5314,2024-10-21 11:42:43+00:00," **Фундаментальное и практическое руководство по эффективному изучению и постепенному созданию блокчейна с нуля на Go + gRPC**

Любите вы блокчейн или ненавидите, ваша точка зрения остается мнением до тех пор, пока вы не узнаете, как он работает. 

И как только вы получите эти знания (например, с помощью этого руководства), ваша точка зрения, вероятно, отойдет от любви или ненависти и остановится где-то посередине. 

Потому что блокчейны — это нечто большее, чем просто платформы для финансовых пирамид и розыгрышей, но они также далеки от того, чтобы быть панацеей.

 [GitHub](https://github.com/volodymyrprokopyuk/go-blockchain)",8239,34,0,goproglib
5313,2024-10-20 08:50:59+00:00," **Переход на Go глазами PHP-разработчика: 5 подводных камней**

Костя Козин (старший PHP-разработчик в Lamoda Tech) делится подводными камнями, которые могут возникнуть при переходе с одного языка на другой, и с которыми сталкивался он сам и его коллеги. Если знать о них заранее, то смена стека может пройти не так болезненно, а знакомство с Go станет более предсказуемым.

1️⃣ «В Go так принято»
2️⃣ Специфичность языка и маркетинг 
3️⃣ Go не снизит количество багов
4️⃣ На старте вас может тошнить от собственного кода, и это нормально
5️⃣ Низкое качество кода сразу после перехода

 [Читать статью полностью](https://habr.com/ru/companies/lamoda/articles/850456/)",6941,17,13,goproglib
5312,2024-10-19 19:05:43+00:00,"**Аллокация памяти**: paging 🆚 segmentation 

 [Источник](https://x.com/alexxubyte/status/1846578110977970501)

#инфографика",6072,4,1,goproglib
5311,2024-10-19 06:00:36+00:00,"**Вакансии «Библиотеки программиста» — ждем вас в команде!**

Мы постоянно растем и развиваемся, поэтому создали отдельную [страницу,](https://job.proglib.io/) на которой будут размещены наши актуальные вакансии. Сейчас мы ищем:
контент-менеджеров для ведения телеграм-каналов
Переводчик и автор оригинальных статей

[Подробности тут](https://job.proglib.io/) 

Мы предлагаем частичную занятость и полностью удаленный формат работы — можно совмещать с основной и находиться в любом месте

Ждем ваших откликов ",6299,3,0,goproglib
5310,2024-10-18 20:53:25+00:00," **Как работают очереди и брокеры сообщений**

Очередь сообщений — структура данных, которая хранит сообщения в порядке FIFO. Представьте, что вашему приложению нужно обрабатывать файлы, которые загружают пользователи. Очередь сообщений в этом случае может выступать как очередь задач, обрабатывающая задания асинхронно:

1️⃣ Пользователь загружает большой файл для обработки.
2️⃣ Веб-сервер принимает файл и создает задание.
3️⃣ Задание добавляется в очередь задач, а файл загружается в объектное хранилище.
4️⃣ Позже рабочий процесс забирает задания из очереди одно за другим и обрабатывает их, получая файл из хранилища.

Это самый простой пример. Очереди сообщений можно использовать для:

️ Планирования и управления фоновыми задачами.
️ Распределения задач между несколькими рабочими процессами.
️ Управления сервисами подписки и уведомлений.
️ Буферизации данных.
️ Повторных попыток обработки платежей и многого другого.

Подробнее читайте в нашем гайде 

 [Читать статью](https://proglib.io/sh/qNrnyGA7we)
 [Зеркало](https://proglib.tech/p/kak-rabotayut-ocheredi-i-brokery-soobshcheniy-2024-10-11)",6184,5,0,goproglib
5308,2024-10-18 11:38:18+00:00,"️ **GoToSocial 0.17.0** — сервер ActivityPub на базе Go 

[ActivityPub](https://www.w3.org/TR/activitypub/#Overview) — это стандарт, лежащий в основе открытых федеративных соцсетей вроде Mastodon. Это не Mastodon, но он предлагает некоторую совместимость с его API, поэтому вы можете использовать с ним клиентские приложения [Mastodon.](https://mastodon.social/)

 [GitHub](https://github.com/superseriousbusiness/gotosocial)",7118,9,3,goproglib
5307,2024-10-17 20:10:26+00:00," **Ситуация:**

Вам поступает задача, вы на глаз оцениваете ее в две недели и получаете одобрение по срокам. Сначала все идет хорошо, пилите проект и ничто не предвещает беды.

Со временем задача усложняется, потому что данные приходят с задержками и вразнобой. Вы не делитесь с руководителем своими трудностями, потому что тогда это можно посчитать за некомпетентность.

А когда приходит время сдачи работы, выясняется, что большинство работы сделано неправильно.

 **Как думаете, как стоило поступить исполнителю?**",6877,18,6,goproglib
5305,2024-10-17 06:13:58+00:00,"** Разработка circuit breaker на Go**: гайд для начинающих**
**
В распределенных системах ""breaking the circuit"" означает остановку повторяющейся операции с высокой частотой отказов, такой как отправка запросов в другой сервис, когда этот сервис перегружен. 

Circuit breaker уменьшает или блокирует дальнейшие запросы до тех пор, пока частота отказов снова не упадет ниже определенного уровня. Под катом — гайд по разработке библиотеки на Go с нуля.

 [Читать](https://rednafi.com/go/circuit_breaker/)",6799,9,0,goproglib
5304,2024-10-16 20:44:33+00:00," **Секреты внутреннего устройства аллокатора Go**: видеогайд от Владимира Балуна** **

⏱️ **Таймкоды:**

[00:00](https://m.youtube.com/watch?v=7K0HweCBJwI&t=0s) Введение
[01:49](https://m.youtube.com/watch?v=7K0HweCBJwI&t=109s) Концепция аллокатора
[06:09](https://m.youtube.com/watch?v=7K0HweCBJwI&t=369s) Линейный аллокатор
[11:22](https://m.youtube.com/watch?v=7K0HweCBJwI&t=682s) Блочный аллокатор
[16:21](https://m.youtube.com/watch?v=7K0HweCBJwI&t=981s) Стековый аллокатор
[20:18](https://m.youtube.com/watch?v=7K0HweCBJwI&t=1218s) Устройство malloc
[25:01](https://m.youtube.com/watch?v=7K0HweCBJwI&t=1501s) Недостатки malloc
[26:55](https://m.youtube.com/watch?v=7K0HweCBJwI&t=1615s) Устройство tcmalloc
[28:28](https://m.youtube.com/watch?v=7K0HweCBJwI&t=1708s) Устройство аллокатора Go
[32:55](https://m.youtube.com/watch?v=7K0HweCBJwI&t=1975s) Предсказуемая фрагментация памяти
[40:33](https://m.youtube.com/watch?v=7K0HweCBJwI&t=2433s) Где аллоцируются объекты в Go
[51:11](https://m.youtube.com/watch?v=7K0HweCBJwI&t=3071s) Почему аллокация на стеке работает быстрее, чем в куче
[52:35](https://m.youtube.com/watch?v=7K0HweCBJwI&t=3155s) Расширение и уменьшение стека в Go
[58:12](https://m.youtube.com/watch?v=7K0HweCBJwI&t=3492s) Зачем это все нужно знать (практические примеры)
[01:03:37](https://m.youtube.com/watch?v=7K0HweCBJwI&t=3817s) Пулы объектов (sync.Pool)
[01:06:57](https://m.youtube.com/watch?v=7K0HweCBJwI&t=4017s) Арены (memory arenas)
[01:14:30](https://m.youtube.com/watch?v=7K0HweCBJwI&t=4470s) Аллокатор ОС

▶️ [YouTube](https://youtu.be/7K0HweCBJwI) | [Rutube](https://rutube.ru/video/95be983c5a17cd9c6e68b604911e1d3b/?r=wd) | [VK](https://vk.com/video-139172865_456239249)",10281,29,0,goproglib
5302,2024-10-16 11:45:38+00:00,"️ **Go Blueprint** — инструмент для создания новых Go-проектов с определенной структурой 

Это один из растущего числа инструментов (еще один [GoForge)](https://github.com/tz3/goforge) для запуска нового Go-проекта с предопределенной структурой файлов и некоторой генерацией кода. 

Он позволяет вам запустить приложение на основе Chi, Gin, Fiber или других фреймворков, с поддержкой баз данных и дополнительных инструментов вроде HTMX и Tailwind CSS.

 [GitHub](https://github.com/Melkeydev/go-blueprint) & [Документация](https://docs.go-blueprint.dev/)",6585,30,32,goproglib
5301,2024-10-15 20:33:24+00:00," Пусть Т9 продолжит эту фразу за вас:

__Как же меня бесит в программировании...__

#интерактив",6797,24,7,goproglib
5298,2024-10-15 14:00:54+00:00,"[](https://www.bytesizego.com/blog/securing-grpc-golang) **Защита gRPC-сервисов с помощью JWT-аутентификации на Go**

gRPC является популярным выбором для создания веб-API благодаря своей эффективности и независимости от языка. Однако защита gRPC-сервисов так же важна, как и защита любой другой распределённой системы. 

gRPC предоставляет несколько механизмов для повышения безопасности. В гайде Matt Boyle разбирает пример реализации аутентификации в gRPC с упором на interceptors, metadata и JWT в качестве механизма аутентификации.

 [Читать](https://www.bytesizego.com/blog/securing-grpc-golang)",6409,18,0,goproglib
5295,2024-10-14 20:08:23+00:00,"️** go-pretty** — Go-инструмент для улучшения отображения таблиц, списков, индикаторов выполнения, текста и т. д. в CLI-приложениях. Главная фича — упор на кастомизацию.

 [GitHub](https://github.com/jedib0t/go-pretty)",8654,22,1,goproglib
5294,2024-10-13 12:00:24+00:00,"Я рад, что сделал это на Go 

— Thorsten Ball, автор книги **Writing An Interpreter In Go**, [размышляет](https://registerspill.thorstenball.com/p/glad-i-did-it-in-go) о том, что восемь лет спустя Go оказался подходящим языком для книги.

Just as impressive, I think: the code in the books has barely changed since then. I had to fix some typos and bugs over the years, but really the only change I had to do in order to keep the code up to date was to drop a three line go.mod in there, so that users with G 1.13 or later don’t have to use the GO111MODULE=off environment variable. I added the go.mod in 2020, four years ago and four years after the original release.",7578,19,0,goproglib
5293,2024-10-13 09:04:03+00:00,"** Основы математики в Machine Learning / Deep Learning**

 16 октября мы разберем ряд Тейлора, собственные векторы и другие ключевые понятия в ML – https://proglib.io/w/a5eddd40

Спикер: Иван Потапов – Staff Machine Learning Engineer at ShareChat. Руководит командой, отвечающей за качество рекомендаций, и имеет 8-летний опыт в сфере машинного обучения.

** Что будем обсуждать:**

– Т**еорию вероятностей: **случайные величины, математическое ожидание и дисперсию.

– **Линейную алгебру:** векторы, матрицы, собственные векторы и собственные значения.

– **Математический анализ: **производные и разложение функций в ряд Тейлора.

‍ А еще после каждого блока вас ждет практика в применении полученных знаний.

****** Почему это важно?**
Понимание математических основ помогает глубже разобраться в работающих под капотом алгоритмах ML/DL и эффективно применять их на практике.

Присоединяйтесь к нам и совершенствуйте свои навыки в машинном обучении!

 Регистрация по ссылке: https://proglib.io/w/a5eddd40",6522,1,0,goproglib
5292,2024-10-13 06:01:35+00:00,"**Самые полезные каналы для программистов в одной подборке!**

Сохраняйте себе, чтобы не потерять 

Для всех

[Библиотека программиста](https://t.me/proglibrary) — новости, статьи, досуг, фундаментальные темы
[Книги для программистов](https://t.me/progbook)
[IT-мемы](https://t.me/itmemlib)
[Proglib Academy](https://t.me/proglib_academy) — тут мы рассказываем про обучение и курсы
[Азбука айтишника](https://t.me/abc_for_it) — здесь мы познаем азы из мира программирования

Про нейросети
[Библиотека робототехники и беспилотников | Роботы, ИИ, интернет вещей ](https://t.me/robotics_autopilots_iot)
[Библиотека нейрозвука | Транскрибация, синтез речи, ИИ-музыка ](https://t.me/neuroaudio)
[Библиотека нейротекста | ChatGPT, Gemini, Bing ](https://t.me/neuro_text)
[Библиотека нейровидео | Sora AI, Runway ML, дипфейки ](https://t.me/neurovidos)
[Библиотека нейрокартинок | Midjourney, DALL-E, Stable Diffusion ](https://t.me/neurokartinka)

#️⃣C#

[Книги для шарпистов | C#, .NET, F#](https://t.me/csharpprogbook)
[Библиотека шарписта ](https://t.me/csharpproglib)— полезные статьи, новости и обучающие материалы по C#
[Библиотека задач по C#](https://t.me/csharp_problems_lib) — код, квизы и тесты
[Библиотека собеса по C#](https://t.me/csharp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Вакансии по C#, .NET, Unity Вакансии по PHP, Symfony, Laravel](https://t.me/csharpdevjob)

️DevOps

[Библиотека devops’а](https://t.me/devopsslib) — полезные статьи, новости и обучающие материалы по DevOps
[Вакансии по DevOps & SRE](https://t.me/devopssjob)
[Библиотека задач по DevOps](https://t.me/devops_problems_lib) — код, квизы и тесты
[Библиотека собеса по DevOps](https://t.me/devops_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования

PHP

[Библиотека пхпшника](https://t.me/phpproglib) — полезные статьи, новости и обучающие материалы по PHP
[Вакансии по PHP, Symfony, Laravel](https://t.me/phpdevjob)
[Библиотека PHP для собеса](https://t.me/php_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по PHP](https://t.me/php_problems_lib) — код, квизы и тесты

Python

[Библиотека питониста](https://t.me/pyproglib) — полезные статьи, новости и обучающие материалы по Python
[Вакансии по питону, Django, Flask](https://t.me/pydevjob)
[Библиотека Python для собеса](https://t.me/py_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Python](https://t.me/py_problems_lib) — код, квизы и тесты

Java

[Книги для джавистов | Java ](https://t.me/javaprogbook)
[Библиотека джависта](https://t.me/javaproglib) — полезные статьи по Java, новости и обучающие материалы
[Библиотека Java для собеса](https://t.me/java_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Java](https://t.me/java_problems_lib) — код, квизы и тесты
[Вакансии для java-разработчиков](https://t.me/javadevjob)

Data Science

[Книги для дата сайентистов | Data Science](https://t.me/dsprogbook)
[Библиотека Data Science](https://t.me/dsproglib) — полезные статьи, новости и обучающие материалы по Data Science
[Библиотека Data Science для собеса](https://t.me/ds_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Data Science](https://t.me/ds_problems_lib) — код, квизы и тесты
[Вакансии по Data Science, анализу данных, аналитике, искусственному интеллекту](https://t.me/datajob)

Go

[Книги для Go разработчиков](https://t.me/goprogbook)
[Библиотека Go разработчика](https://t.me/goproglib) — полезные статьи, новости и обучающие материалы по Go
[Библиотека Go для собеса](https://t.me/go_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Go](https://t.me/go_problems_lib) — код, квизы и тесты
[Вакансии по Go](https://t.me/godevjob)

C++

[Книги для C/C++ разработчиков](https://t.me/cppprogbook)
[Библиотека C/C++ разработчика](https://t.me/cppproglib) — полезные статьи, новости и обучающие материалы по C++
[Библиотека C++ для собеса](https://t.me/cpp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по C++](https://t.me/cpp_problems_lib) — код, квизы и тесты
[Вакансии по C++](https://t.me/cppdevjob)

Другие каналы

[Библиотека фронтендера](https://t.me/frontendproglib)
[Библиотека мобильного разработчика](https://t.me/mobileproglib)
[Библиотека хакера](https://t.me/hackproglib)
[Библиотека тестировщика](https://t.me/testerlib)
[Вакансии по фронтенду, джаваскрипт, React, Angular, Vue](https://t.me/jsdevjob)
[Вакансии для мобильных разработчиков](https://t.me/mobiledevjob)
[Вакансии по QA тестированию](https://t.me/testerrjob)
[InfoSec Jobs — вакансии по информационной безопасности](https://t.me/hackdevjob)
[Библиотека разработчика игр | Gamedev, Unity, Unreal Engine](https://t.me/gameproglib)

Чтобы добавить папку с нашими каналами, нажмите [сюда](https://t.me/addlist/17y04EbNMrlhNjZi)

Также у нас есть боты:
[Бот с IT-вакансиями](http://t.me/proglib_job_bot)
[Бот с мероприятиями в сфере IT](http://t.me/event_listener_bot)

Мы в других соцсетях:
[VK](https://vk.com/proglib)
[YouTube](https://www.youtube.com/c/%D0%91%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%B0)
[Дзен](https://zen.yandex.ru/proglib)
[Facebook](https://www.facebook.com/proglib/?locale=ru_RU) *
[Instagram](https://www.instagram.com/proglibrary/) *

__* Организация Meta запрещена на территории РФ__",6179,7,0,goproglib
5291,2024-10-12 22:51:49+00:00,"️ **sync.Map в Go**: правильный инструмент для правильной работы**

**Оказывается, `sync․Map` под капотом поддерживает две мапы, что может быть неидеально, если вы часто добавляете или удаляете ключи.**

**Читайте продолжение серии статей Phuong Le про сложные аспекты Go на простых иллюстрациях**

 **[Читать](https://victoriametrics.com/blog/go-sync-map/index.html)**
 **Другие статьи в серии:**
**[• Go sync.Mutex: нормальный/starvation режим](https://victoriametrics.com/blog/go-sync-mutex)
[• Go sync.WaitGroup и проблема выравнивания](https://victoriametrics.com/blog/go-sync-waitgroup)
[• Go sync.Pool и механика, стоящая за ним](https://victoriametrics.com/blog/go-sync-pool)
[• Go sync.Cond, самый недооцененный механизм синхронизации](https://victoriametrics.com/blog/go-singleflight/index.html)
[• Пакет singleflight](https://victoriametrics.com/blog/go-singleflight)",13546,9,0,goproglib
5290,2024-10-12 19:00:11+00:00," **Двойная игра в Power BI: как совмещать роли разработчика и администратора**

Когда твой руководитель говорит: «А теперь ты еще и администратор сервера Power BI». Гид по выживанию для разработчика, внезапно ставшего многостаночником.

Читать [статью](https://proglib.io/sh/o6cVzlJ8vY)",5382,0,0,goproglib
5289,2024-10-12 06:26:35+00:00,"[Опрос](https://docs.google.com/forms/d/1x3KzJB4HYRBfvaEK82s3dSkw0j6NNsqxvus-XZT9UEI/viewform?edit_requested=true)** «Как вы учитесь с помощью телефона: поделитесь своим опытом!»**

Дорогие подписчики, мы на миссии улучшений, и вы — наш ключ!  

Мы хотим стать ещё круче, и для этого нужно узнать, как вы учитесь! 

Заполните [мини-анкету](https://docs.google.com/forms/d/1x3KzJB4HYRBfvaEK82s3dSkw0j6NNsqxvus-XZT9UEI/viewform?edit_requested=true) о том, как вы используете мобильные приложения для прокачки знаний.

⏳ Займёт всего 5 минут — как раз успеете за чашкой кофе! А за ваш ценный вклад мы дарим 15% скидку на все курсы https://proglib.academy/ ",6198,2,1,goproglib
5288,2024-10-11 20:19:47+00:00,"🪶 **Как следовать принципу DRY при настройке Apache APISIX**

DRY — один из самых известных принципов разработки ПО: он помогает избежать ненужного повторения фрагментов кода, которые выполняют одни и те же действия. DRY также стоит применять при настройке конфигурации сложных систем, поскольку этот принцип:

️ Делает конфигурацию более компактной и легкой для понимания.
️ Упрощает поддержку — когда нужно внести изменения, вы делаете это только в одном месте.
️ Повышает читаемость — конфигурация становится более структурированной и логичной, что облегчает ее понимание.
️ Улучшает масштабируемость — при усложнении конфигурации принципы DRY помогают сохранять ее управляемой и расширяемой.
️ Сокращает время на настройку — используя переиспользуемые компоненты, можно быстрее создавать новые конфигурации или модифицировать существующие.

В качестве примера в статье рассматриваем, как применять DRY при настройке конфигурации API-шлюза Apache APISIX.

 [Читать статью](https://proglib.io/sh/W60f1baPpe)
 [Зеркало](https://proglib.tech/p/kak-sledovat-principu-dry-pri-nastroyke-apache-apisix-2024-09-25)",5871,7,1,goproglib
5287,2024-10-11 17:04:04+00:00,"Кстати, функция `equals` в пакете `maps` может использоваться для проверки того, содержат ли две мапы одинаковые пары «ключ-значение». 

[ Пример здесь](https://go.dev/play/p/PDOJP3vZN2v)",6093,40,0,goproglib
5286,2024-10-10 20:25:25+00:00," **Что вам помогает работать, когда устаете?** Когда в отпуск ну вообще никак, а сил уже нет.

 Может быть, чтение отвлеченной литературы, спорт, дневной сон, прогулки, встречи с друзьями, что-то ещё?

#интерактив",6814,0,5,goproglib
5284,2024-10-10 11:45:06+00:00,"** Go memory ballast: как перестать волноваться и полюбить кучу

**Еще в 2019 году команда Twitch оптимизировала работу одного из сервисов на Go, сократив использование процессора на 30% и уменьшив задержки API на 45% за счет так называемой «балластной» памяти.

Основная идея заключалась в создании большого блока предвыделенной памяти (балласта), что уменьшило частоту запуска GC в приложении. GC в Go запускается, когда размер кучи удваивается, и, создав большой балласт, команда смогла увеличить базовый размер кучи, тем самым снижая частоту срабатывания сборщика мусора. В результате нагрузка на процессор уменьшилась, так как сборка мусора стала происходить реже.

Балластная память в основном использует виртуальную память и не занимает физическую память, если к ней не обращаться напрямую. 

 Результаты: снижение числа циклов сборки мусора почти на 99% и значительное улучшение производительности без лишних затрат на память.

 [Подробнее](https://blog.twitch.tv/en/2019/04/10/go-memory-ballast-how-i-learnt-to-stop-worrying-and-love-the-heap/)",7189,43,1,goproglib
5283,2024-10-09 20:31:10+00:00," **Размышления о Go reflection** 

По-настоящему холиварная статья, которая, вероятно, вызовет разногласия. Как программист, который предпочитает использовать «самые обыденные функции» любого языка, пакет reflect Go не входил в список того, что Neil Macneale из Dolthub хотел попробовать, но он «погрузился в пучину рефлексии» и... до сих пор не является ее поклонником.

 [Читать](https://www.dolthub.com/blog/2024-10-04-reflecting-on-reflect/)",7314,8,0,goproglib
5282,2024-10-08 18:47:21+00:00,"Привет, друзья! 

Мы готовим статью **о распространенных ошибках в карьере программиста** и хотели бы услышать ваше мнение! Поделитесь своими мыслями и опытом, и самые полезные советы мы включим в нашу статью.

Вот несколько вопросов для вас:
 С какими ошибками в своей карьере программиста вы сталкивались? Как вы их преодолели?
 Какие советы вы бы дали начинающим разработчикам, чтобы избежать распространенных ловушек в программировании?
️ Что, по вашему мнению, важно учитывать при планировании своей карьеры в IT, чтобы минимизировать сожаления в будущем?

Спасибо за ваше участие! ",7814,6,6,goproglib
5281,2024-10-08 11:48:49+00:00,"Кстати, на Хабре опубликован перевод гайда про транзакции в БД на Go с использованием многослойной архитектуры  https://t.me/goproglib/5276

Читайте, если хотите узнать об организации кода таким образом, чтобы избежать путаницы между слоями.",9710,16,0,goproglib
5278,2024-10-07 11:48:11+00:00,"**️ Управление конкурентностью в Go: внутри кастомных примитивов синхронизации rqlite**

Написание распределенной базы данных подразумевает интенсивное использование конкурентности. Philip O'Toole, создатель [rqlite,](https://github.com/rqlite/rqlite) распределенной базы данных на основе SQLite, столкнулся с некоторыми ограничениями встроенного в Go инструментария конкурентности и создал несколько кастомных примитивов. Под катом автор делится наработками — кто знает, может какие-то из них пригодятся и вам.

 [Читать](https://philipotoole.com/concurrency-control-in-go-inside-rqlites-custom-synchronization-primitives/)",7391,8,2,goproglib
5277,2024-10-06 11:54:50+00:00,"️ **Prep** — небольшой инструмент для Go, который позволяет выполнять функции на этапе компиляции

By using prep.Comptime, you can evaluate functions at build time, replacing them with their computed results. Just like comptime from Zig. Except it’s not.

Нельзя отрицать, что идея интересная, хотя у неё есть ограничения, и `toolexec` [не был предназначен](https://github.com/golang/go/issues/35204#issuecomment-547168404) для поддержки произвольной перезаписи исходного кода.",9709,23,4,goproglib
5276,2024-10-05 16:03:49+00:00," **Распределенные транзакции в Go: прочтите, прежде чем попробовать**

В микросервисной архитектуре иногда возникает необходимость в транзакциях, которые должны охватывать несколько сервисов. Это приводит к проблемам, когда проблема на одном из этапов оставляет систему в несогласованном состоянии.

Miłosz Smółka утверждает, что попытка внедрить распределенные транзакции — это часто «избыточное решение», и рекомендует использовать альтернативы.

Одна из них — модель **eventual consistency**, при которой система не становится сразу согласованной, но в конечном итоге достигает согласованного состояния.

Также он упоминает **паттерн Outbox**, который используется для гарантии, что данные и события, записанные в базе данных, всегда будут доставлены и обработаны корректно.

 [Читать](https://threedots.tech/post/database-transactions-in-go/) 
 [Предыдущая статья](https://t.me/goproglib/5198)
 [Перевод на русский](https://habr.com/ru/articles/848596/)",8663,18,2,goproglib
5274,2024-10-04 20:32:19+00:00," **Подборка лучших статей «Библиотеки программиста» за сентябрь**: сохраняй в заметки, чтобы не пропустить #самыйсок

 [ТОП-10 перспективных студий разработки: лучшие компании для вашего карьерного роста](https://proglib.io/sh/FslQncNybv)
 [3 основных шаблона событийно-ориентированной архитектуры](https://proglib.io/sh/kwO0pnQMI3)
 [Сага: эффективный шаблон микросервисной архитектуры](https://proglib.io/sh/K0FhRp3MAU)
 [Самоучитель по Go для начинающих. Часть 16. Тестирование кода и его виды. Table-driven подход. Параллельные тесты](https://proglib.io/sh/RCwSEFDHq0)
️ [Секретное оружие бэкендера: 6 инструментов, о которых вы не знали](https://proglib.io/sh/k1Fj4RpX7i)
 [Динамическое программирование: как щелкать задачки, как орешки](https://proglib.io/sh/ivp9PZuYhW)
️ [5 признаков зависимости от программирования: как вернуть баланс в жизнь](https://proglib.io/p/5-priznakov-zavisimosti-ot-programmirovaniya-kak-vernut-balans-v-zhizn-2024-09-09)",7661,6,0,goproglib
5273,2024-10-04 19:17:04+00:00,"** Modview **— визуализатор графика зависимостей Go-проекта 

Простой способ визуализации зависимостей в проектах Go чистым графическим способом.

 [GitHub](https://github.com/bayraktugrul/modview)",7332,24,0,goproglib
5272,2024-10-04 06:00:47+00:00,"️ **Подпишись на нашу еженедельную email-рассылку, чтобы быть в курсе последних открытий и тенденций в мире бэкенда.**

В еженедельных письмах ты найдешь:
● Языки программирования и фреймворки для бэкенда
● Архитектура и проектирование серверных приложений
● Базы данных и управление данными
● Безопасность и защита данных
● Облачные технологии и DevOps
● API и интеграции
● Тестирование и отладка
● Инструменты и утилиты для бэкенд-разработчиков
● Лучшие практики и паттерны проектирования

[Подписаться](https://proglib.academy/backend-newsletter)",7704,2,0,goproglib
5270,2024-10-03 12:57:42+00:00," **Представлены релизы Go 1.23.2 и 1.22.8 **

Новая версия содержит исправления безопасности компилятора, cgo, рантайма, пакетов `maps`, `os`, `os/exec`, `time` `и` `unique`.

 [Анонс](https://groups.google.com/g/golang-announce/c/NKEc8VT7Fz0)
⬇️ [Скачать](https://go.dev/dl/#go1.23.2)

#новости",8131,15,0,goproglib
5269,2024-10-02 11:28:58+00:00,"‍ **Руководство по сборщику мусора Go

**Одна из тех самых страниц документации, которая должна быть под рукой у Go-разраба. В ней есть все о том, как работает система сборки мусора Go, с дополненным полезными интерактивными диаграммами.

 [Читать](https://tip.golang.org/doc/gc-guide)",14650,27,0,goproglib
5268,2024-10-01 20:22:55+00:00,"️** Заметки о веб-разработке на Go**

Знания, полученные из книг, — это здорово, но нет ничего лучше реального опыта, полученного на практике. Читайте заметки Julia Evans, если ваша работа как-то связана с вебом и Go.

 [Читать](https://jvns.ca/blog/2024/09/27/some-go-web-dev-notes/)",7747,9,2,goproglib
5267,2024-10-01 09:42:30+00:00," **Кризис IT-рынка: как джуны и кадровый голод меняют правила игры**

В условиях нехватки опытных специалистов и наплыва джунов, IT-компании вынуждены искать нестандартные подходы к найму. Рассмотрим основные тренды и стратегии адаптации рынка.

Читать [статью](https://proglib.io/sh/ApRHEskqWG)

#почитать",6153,10,4,goproglib
5264,2024-09-30 06:00:46+00:00,"‍ **Функциональные опции в Go**

Вы наверняка не раз слышали об этом паттерне. Почему бы не повторить еще раз? 

Опытом работы с паттерном делится руководитель команды разработки ядра цифровой медицины в Республике Узбекистан.

 [Читать](https://habr.com/ru/articles/842594/)",8088,29,3,goproglib
5262,2024-09-29 10:59:58+00:00," **caddy-exec** — модуль Caddy для выполнения однократных команд

Caddy — HTTP(S) сервер с поддержкой Go. Расширение caddy-exec позволяет настроить команды для глобального выполнения при старте/остановке, либо по определенному маршруту.

 [GitHub](https://github.com/abiosoft/caddy-exec)",8303,12,0,goproglib
5261,2024-09-29 07:36:49+00:00,"** Динамическое программирование: как щелкать задачки, как орешки**

Готов узнать, как решать задачки, от которых плавятся мозги? 

В этой статье раскрываем тайну происхождения термина «динамическое программирование» и показываем основные подходы к решению задач, которые часто встречаются на собеседованиях и соревнованиях.

Также у нас есть курс как для начинающих программистов, так и для тех, кто уже шарит:
 [Алгоритмы и структуры данных](https://proglib.academy/algorithms_and_data_structures?utm_source=tg_academy&utm_medium=post_DynamicProgKakShelkatZadachkiKakOreshki)

[ Ссылка на статью](https://proglib.io/sh/ivp9PZuYhW)",6537,3,0,goproglib
5260,2024-09-28 19:52:44+00:00,"‍ Пакет **unique** в Go 1.23 — отличный способ оптимизировать ваши ресурсы 

#tip by [Phuong Le](https://x.com/func25/status/1839966646435491947)",6798,14,4,goproglib
5259,2024-09-28 16:35:32+00:00," **Counterfeiter** — инyструмент для генерации автономных, типобезопасных тестовых заглушек на Go

При написании модульных тестов для объекта часто бывает полезно иметь фейковые реализации его зависимостей. В Go такие фейковые реализации не могут быть сгенерированы автоматически во время выполнения программы, и написание их вручную может быть достаточно трудоемким процессом. Counterfeiter позволяет просто генерировать тестовые заглушки для заданного интерфейса.

 [GitHub](https://github.com/maxbrunsfeld/counterfeiter)",6858,16,7,goproglib
5258,2024-09-27 10:25:05+00:00,"️ **Секретное оружие бэкендера: 6 инструментов, о которых вы не знали**

В новой статье рассказываем о шести малоизвестных, но невероятно мощных инструментах, которые превратят вас в настоящего супергероя бэкенд-разработки.

 [Читать по этой ссылке](https://proglib.io/sh/k1Fj4RpX7i)",6530,0,0,goproglib
5253,2024-09-26 18:35:21+00:00,"Привет, друзья! 

Мы хотим обсудить важную тему — **токсичность в среде разработчиков и значимость поддержки и наставничества**. Нам интересно узнать ваше мнение и опыт! Поделитесь своими мыслями, и самые полезные советы мы включим в нашу статью. Вот несколько вопросов для вас:

 __Приходилось ли вам сталкиваться с токсичными коллегами на работе? Как вы справлялись с этой ситуацией?__

 __Какие качества вы считаете важными для хорошего наставника в IT-сфере?__

 __Какие советы вы бы дали тем, кто хочет создать более поддерживающую и позитивную рабочую атмосферу?__

Спасибо за ваше участие! Ваши ответы помогут сделать рабочую среду лучше для всех. ",6427,10,5,goproglib
5251,2024-09-26 08:04:01+00:00,"‍** Sets в Go: использование типа map и сторонних пакетов** 

В Go нет нативного типа данных для sets, но мапы могут помочь вам реализовать свой собственный, а также такие пакеты, как [golang-set](https://github.com/deckarep/golang-set). Go-разработчик Willem Schots показывает, как это делается.

 [Читать](https://www.willem.dev/articles/sets-in-golang/)",6784,17,0,goproglib
5249,2024-09-25 04:58:23+00:00," **ТОП-10 перспективных студий разработки: лучшие компании для вашего карьерного роста**

Работа в аутсорсе — это как американские горки: пока одни видят в ней хаос и нестабильность, другие — возможность получить уникальный опыт и попробовать себя в разных ролях.

Однако устраиваться хоть в какую-нибудь студию, каких сейчас много — не лучшее решение, поскольку на старте бывают проблемы с финансированием и ни о какой стабильности не может быть и речи.

 [Читать статью](https://proglib.io/sh/FslQncNybv) 
 [Зеркало](https://proglib.tech/p/top-10-perspektivnyh-studiy-razrabotki-luchshie-kompanii-dlya-vashego-karernogo-rosta-2024-09-18)",6255,12,1,goproglib
5248,2024-09-24 16:32:17+00:00,"**⏱️ Работа со временем в Go
**
Время — один из самых сложных аспектов для работы в любом языке программирования. Go делает эту работу максимально простой. 

Matt Boyle рассказывает обо всем, что вам нужно знать о работе со временем и о том, как писать тестируемый код при работе со временем.

 [Читать](https://www.bytesizego.com/blog/golang-time)",6909,20,0,goproglib
5247,2024-09-23 16:21:07+00:00,"**️ Реализация package-level логирования на Go с использованием подхода, аналогичного log4j, широко известного фреймворка для логирования в Java**

Когда Go-команде (DoltHub) нужен логгер в стиле log4j с файловой конфигурацией для Go, она берет и пишет его с нуля. Под катом — подробный пошаговый гайд

 [Читать](https://www.dolthub.com/blog/2024-09-13-package-scoped-logging-in-go-log4j/)",7227,10,12,goproglib
5246,2024-09-23 11:18:26+00:00," **Кризис IT-рынка: как джуны и кадровый голод меняют правила игры**

В условиях нехватки опытных специалистов и наплыва джунов, IT-компании вынуждены искать нестандартные подходы к найму. Рассмотрим основные тренды и стратегии адаптации рынка.

Читать [статью](https://proglib.io/sh/ApRHEskqWG)

#почитать",5493,3,2,goproglib
5245,2024-09-22 07:37:32+00:00,"‍ **Создание масштабируемой системы обработки заказов с использованием Temporal и Go
**
Temporal — фреймворк для написания длительных workflows на Go. В этом практическом руководстве из шести частей показано, как создать систему обработки заказов с помощью Go, Temporal, Gin, sqlc, PostgreSQL и Docker.

[1️⃣](https://hungaikev.in/e-commerce-platform/part-1-setting-up-the-foundation/)[ Setting Up the Foundation](https://hungaikev.in/e-commerce-platform/part-1-setting-up-the-foundation/)
[2️⃣](https://hungaikev.in/e-commerce-platform/part-2-advanced-temporal-workflows/)[ Advanced Temporal Workflows](https://hungaikev.in/e-commerce-platform/part-2-advanced-temporal-workflows/)
[3️⃣](https://hungaikev.in/e-commerce-platform/part-3-advanced-database-operations/)[ Advanced Database Operations](https://hungaikev.in/e-commerce-platform/part-3-advanced-database-operations/)
[4️⃣](https://hungaikev.in/e-commerce-platform/part-4-monitoring-and-alerting/)[ Monitoring and Alerting](https://hungaikev.in/e-commerce-platform/part-4-monitoring-and-alerting/)
[5️⃣](https://hungaikev.in/e-commerce-platform/part-5-distributed-tracing-and-logging/)[ Distributed Tracing and Logging](https://hungaikev.in/e-commerce-platform/part-5-distributed-tracing-and-logging/)
[6️⃣](https://hungaikev.in/e-commerce-platform/part-6-production-readiness-and-scalability/)[ Production Readiness and Scalability](https://hungaikev.in/e-commerce-platform/part-6-production-readiness-and-scalability/)",9724,19,1,goproglib
5244,2024-09-21 17:38:25+00:00," **3 основных шаблона событийно-ориентированной архитектуры**

Знание данных шаблонов позволяет:

️ Создавать слабосвязанные системы, в которых сбой одного компонента не приводит к полному отказу всей системы, а составные части приложения легче масштабировать и модифицировать.
️ Эффективно управлять асинхронными операциями и обрабатывать непредсказуемые события в системе.
️ Разрабатывать отзывчивые и эффективные приложения, обрабатывающие данные в реальном времени.
️ Создавать высоконагруженные системы, в которых требуется быстрая реакция на события.
️ Эффективно использовать современные технологии, например потоковую обработку данных и бессерверные вычисления.

1️⃣ **Шаблон конкурирующих потребителей** используется для эффективного распределения большого количества асинхронных сообщений между несколькими потребителями. Ключевой момент в этом шаблоне — необходимость обработки каждого сообщения только одним потребителем. Разные инструменты и платформы решают эту задачу по-своему:
2️⃣ **Шаблон повторных попыток сообщений** используется для обработки ошибок при работе с очередями сообщений. Этот шаблон позволяет создать надежную систему обработки транзакций, способную справляться с временными сбоями и обеспечивающую контролируемый процесс для работы с проблемными транзакциями, например, при обработке платежей.
3️⃣ **Шаблон асинхронного запроса-ответа** позволяет создавать масштабируемые и устойчивые к сбоям системы, где сервисы могут взаимодействовать асинхронно, не блокируя друг друга и сохраняя способность корректно обрабатывать ответы даже при изменении состояния системы между запросом и ответом.

 [Подробнее читайте в нашей статье](https://proglib.io/sh/kwO0pnQMI3)
 [Зеркало](https://proglib.tech/p/3-osnovnyh-shablona-sobytiyno-orientirovannoy-arhitektury-2024-09-19https://proglib.tech/p/3-osnovnyh-shablona-sobytiyno-orientirovannoy-arhitektury-2024-09-19)",5620,12,0,goproglib
5240,2024-09-21 09:27:05+00:00,"‍ **Go Singleflight растворяется в вашем коде, а не в вашей базе данных: **продолжение серии статей Phuong Le про сложные аспекты Go на простых иллюстрациях**

**[Пакет singleflight](https://pkg.go.dev/golang.org/x/sync/singleflight) предоставляет механизм подавления дублирующихся вызовов функций. Он не является частью стандартной библиотеки, но поддерживается и развивается командой Go. **

 **[Читать](https://victoriametrics.com/blog/go-singleflight/index.html)**
 **Другие статьи в серии:**
**[• Go sync.Mutex: нормальный/starvation режим](https://victoriametrics.com/blog/go-sync-mutex)
[• Go sync.WaitGroup и проблема выравнивания](https://victoriametrics.com/blog/go-sync-waitgroup)
[• Go sync.Pool и механика, стоящая за ним](https://victoriametrics.com/blog/go-sync-pool)
[• Go sync.Cond, самый недооцененный механизм синхронизации](https://victoriametrics.com/blog/go-singleflight/index.html)",6500,19,2,goproglib
5239,2024-09-20 15:55:24+00:00,"️ **TinyGo Playground** — теперь с бОльшим количеством ресурсов

Вы еще не «трогали» TinyGo? TinyGo Playground позволяет вам писать код с симулированным оборудованием (например, светодиодами и т. д.) в вашем браузере. 

И теперь он имеет в два раза больше ЦП и ОЗУ для вашего удовольствия от тестирования. Теперь он также может показывать оценки энергопотребления для вашего кода.

 [Playground](https://play.tinygo.org/)",6877,35,0,goproglib
5237,2024-09-19 20:29:58+00:00,"**️ 5 признаков зависимости от программирования: как вернуть баланс в жизнь**

Если вы чувствуете, что код вытесняет всё остальное, эта статья поможет вам взглянуть на проблему по-новому и вернуться к полноценной жизни. Она охватывает такие аспекты, как уход в цифровой мир, использование стимуляторов, ментальное присутствие на работе, игнорирование хобби и нерациональные траты. Автор предлагает практические советы для восстановления баланса.

 [Читать статью](https://proglib.io/p/5-priznakov-zavisimosti-ot-programmirovaniya-kak-vernut-balans-v-zhizn-2024-09-09)",6192,12,6,goproglib
5236,2024-09-19 19:22:20+00:00,"Поделитесь своим опытом: какой шрифт, на ваш взгляд, самый удобный для долгих сессий кодинга и почему? ️

Ждем ваши ответы в комментариях! Самые интересные и полезные советы войдут в нашу статью. ",6100,3,10,goproglib
5233,2024-09-19 19:18:19+00:00,"Привет, друзья! 

Готовим статью «**Лучшие шрифты для программирования**» и хотим узнать ваше мнение! ️",5477,4,0,goproglib
5232,2024-09-19 12:02:15+00:00,"**Криптография в Go**: AES-шифрование

Гайд от John Arundel, ментора и автора множества книг по Go:

1️⃣ [AES в деталях](https://bitfieldconsulting.com/posts/cryptography-aes-internals)
2️⃣ [Реализация AES](https://bitfieldconsulting.com/posts/cryptography-aes-implementation)
3️⃣** **[AES-шифрование](https://bitfieldconsulting.com/posts/aes-encryption)",6540,16,0,goproglib
5230,2024-09-19 06:00:30+00:00,"Вакансии «Библиотеки программиста» — ждем вас в команде!

Мы постоянно растем и развиваемся, поэтому создали отдельную [страницу](https://ad.proglib.io/vacancy), на которой будут размещены наши актуальные вакансии. Сейчас мы ищем:
контент-менеджеров для ведения телеграм-каналов

[Подробности тут](https://ad.proglib.io/vacancy)

Мы предлагаем частичную занятость и полностью удаленный формат работы — можно совмещать с основной и находиться в любом месте

Ждем ваших откликов ",5750,5,4,goproglib
5229,2024-09-18 18:40:12+00:00,#назлобудня,5993,32,3,goproglib
5227,2024-09-18 12:02:07+00:00,"‍ **Заметки о запуске Go в браузере с помощью WebAssembly** 

Eli Bendersky объясняет основы вызова Go из JavaScript, манипулирования DOM, использования TinyGo для уменьшения размера бинаря WASM и одновременного запуска процессов с помощью Web Workers.

 [Читать](https://eli.thegreenplace.net/2024/notes-on-running-go-in-the-browser-with-webassembly/)",6423,14,7,goproglib
5224,2024-09-17 19:38:23+00:00,"Мы хотим провести большой розыгрыш и подарить победителю смартфон на выбор. Помимо iPhone, предлагаем вам выбрать, **какой ещё смартфон вы бы хотели видеть среди призов**",5820,0,0,goproglib
5223,2024-09-17 14:34:58+00:00,"️ **Ergo framework** — реализация идей, технологий и паттернов проектирования из мира Erlang на языке Go

В его основе лежит actor model, network transparency и набор готовых к использованию компонентов для разработки. Это существенно упрощает создание сложных и распределенных решений, сохраняя при этом высокий уровень надежности и производительности.

 [GitHub](https://github.com/ergo-services/ergo)",6191,11,7,goproglib
5222,2024-09-17 11:47:36+00:00," **Хардкорный вышмат для тех, кто интересуется ML, AI, DS**

Начать с вводных занятий можно здесь, ответив всего на 4 вопроса – https://proglib.io/w/f49f3553    

**Что будет на демо? **

Вводный урок от CPO курса; 

Лекции со всеми преподавателями МГУ по темам: теория множеств, непрерывность функции, основные формулы комбинаторики, матрицы и операции над ними, градиентный спуск;

Практические задания и дополнительные материалы! 

️Переходите и активируйте – https://proglib.io/w/f49f3553",5708,10,0,goproglib
5221,2024-09-16 20:55:06+00:00,"** Фронтенд-разработка с использованием Go templates и htmx 

**Простой гайд по работе с пакетом `text/template` стандартной библиотеки Go и инструментом `htmx` для создания интерактивного веб-UI.

 [Читать](https://nikshq.com/articles/building-a-web-frontend-with-go)",6124,19,1,goproglib
5220,2024-09-16 13:58:58+00:00," **Итоги конкурса: победитель определён**

Надеемся, что все отлично отпраздновали день программиста. А нам за два дня пришло много ответов на нашу[ задачу](https://t.me/proglibrary/9548).

У нас есть победитель, он выбран рандомно среди правильных ответов:
erdnya — аккаунт закрытый. Свяжитесь с @mdudarevcontact

Мы с ним свяжемся и дадим доступ к любому из следующих курсов

**Курсы на выбор:**
 Архитектуры и шаблоны программирования
 Основы программирования на Python
 Базовые модели ML и приложения
 Frontend Basic: принцип работы современного веба",6314,17,4,goproglib
5219,2024-09-16 08:52:06+00:00,"️ **Создание Go-приложений на базе LLM  **

Retrieval Augmented Generation (RAG) позволяет предоставлять LLM знания из кастомных ресурсов, от локальных текстовых файлов до репозиториев кода. Затем LLM может использовать эти новые знания для ответов на вопросы. 

В новом посте блога Go Eli Bendersky представляет простую концепцию сервера RAG и обсуждает три варианта реализации такого сервера на Go.
 
 [Читать](https://go.dev/blog/llmpowered)",6236,19,0,goproglib
5218,2024-09-15 09:08:13+00:00,"️ **live-pprof — **инструмент для мониторинга производительности Go-приложений в режиме реального времени

Это новый [проект,](https://github.com/moderato-app/live-pprof) поэтому ваши результаты могут отличаться, но идея стоит вашего внимания. 

Вместо того, чтобы профилировать приложение и смотреть на результаты после, почему бы не анализировать производительность в режиме реального времени (без установки инструментов вроде Docker, Prometheus, Grafana).

1️⃣ Кодим:

```package main

import (
    ""log""
    ""net/http""
    _ ""net/http/pprof""
)

func main() {
    log.Println(http.ListenAndServe(""localhost:6060"", nil))
}
```

2️⃣ Запускаем: `live-pprof 6060` или
`live-pprof http://localhost:6060/debug/pprof
`3️⃣ Проверяем: `http://localhost:6060/debug/pprof`",9823,42,0,goproglib
5217,2024-09-14 08:57:49+00:00,"Go-разработчики часто используют следующую конструкцию:

```f, err := os.Create(""file.txt"")
if err != nil {
    return err
}
defer f.Close()
```

Однако, для файлов с возможностью записи это может быть опасно, так как метод` Close() `может вернуть ошибку, которая игнорируется при использовании` defer.` 

Ошибки могут возникать на этапе закрытия файла, когда система завершает запись данных на диск. Чтобы избежать потери данных, важно проверять ошибки явным образом:

```f, err := os.Create(""file.txt"")
if err != nil {
    return err
}
if _, err := f.Write([]byte(""Hello, world!"")); err != nil {
    f.Close()
    return err
}
return f.Close()
```

Использование` defer `безопасно для чтения, но для записи стоит быть осторожнее и проверять ошибки вручную.

 [Подробнее](https://www.joeshaw.org/dont-defer-close-on-writable-files/)",9466,52,7,goproglib
5216,2024-09-13 14:38:45+00:00,"‍ **Go sync.Cond — самый недооцененный механизм синхронизации: **продолжение серии статей Phuong Le про сложные аспекты Go на простых иллюстрациях**

 **[Читать](https://victoriametrics.com/blog/go-sync-cond/)**
 **Другие статьи в серии:**
**[• Go sync.Mutex: нормальный/starvation режим](https://victoriametrics.com/blog/go-sync-mutex)
[• Go sync.WaitGroup и проблема выравнивания](https://victoriametrics.com/blog/go-sync-waitgroup)
[• Go sync.Pool и механика, стоящая за ним](https://victoriametrics.com/blog/go-sync-pool)",7267,17,1,goproglib
5215,2024-09-13 06:05:09+00:00,"**Самые полезные каналы для программистов в одной подборке!**

Сохраняйте себе, чтобы не потерять 

Для всех

[Библиотека программиста](https://t.me/proglibrary) — новости, статьи, досуг, фундаментальные темы
[Книги для программистов](https://t.me/progbook)
[IT-мемы](https://t.me/itmemlib)
[Proglib Academy](https://t.me/proglib_academy) — тут мы рассказываем про обучение и курсы
[Азбука айтишника](https://t.me/abc_for_it) — здесь мы познаем азы из мира программирования

Про нейросети
[Библиотека робототехники и беспилотников | Роботы, ИИ, интернет вещей ](https://t.me/robotics_autopilots_iot)
[Библиотека нейрозвука | Транскрибация, синтез речи, ИИ-музыка ](https://t.me/neuroaudio)
[Библиотека нейротекста | ChatGPT, Gemini, Bing ](https://t.me/neuro_text)
[Библиотека нейровидео | Sora AI, Runway ML, дипфейки ](https://t.me/neurovidos)
[Библиотека нейрокартинок | Midjourney, DALL-E, Stable Diffusion ](https://t.me/neurokartinka)

#️⃣C#

[Книги для шарпистов | C#, .NET, F#](https://t.me/csharpprogbook)
[Библиотека шарписта ](https://t.me/csharpproglib)— полезные статьи, новости и обучающие материалы по C#
[Библиотека задач по C#](https://t.me/csharp_problems_lib) — код, квизы и тесты
[Библиотека собеса по C#](https://t.me/csharp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Вакансии по C#, .NET, Unity Вакансии по PHP, Symfony, Laravel](https://t.me/csharpdevjob)

️DevOps

[Библиотека devops’а](https://t.me/devopsslib) — полезные статьи, новости и обучающие материалы по DevOps
[Вакансии по DevOps & SRE](https://t.me/devopssjob)
[Библиотека задач по DevOps](https://t.me/devops_problems_lib) — код, квизы и тесты
[Библиотека собеса по DevOps](https://t.me/devops_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования

PHP

[Библиотека пхпшника](https://t.me/phpproglib) — полезные статьи, новости и обучающие материалы по PHP
[Вакансии по PHP, Symfony, Laravel](https://t.me/phpdevjob)
[Библиотека PHP для собеса](https://t.me/php_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по PHP](https://t.me/php_problems_lib) — код, квизы и тесты

Python

[Библиотека питониста](https://t.me/pyproglib) — полезные статьи, новости и обучающие материалы по Python
[Вакансии по питону, Django, Flask](https://t.me/pydevjob)
[Библиотека Python для собеса](https://t.me/py_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Python](https://t.me/py_problems_lib) — код, квизы и тесты

Java

[Книги для джавистов | Java ](https://t.me/javaprogbook)
[Библиотека джависта](https://t.me/javaproglib) — полезные статьи по Java, новости и обучающие материалы
[Библиотека Java для собеса](https://t.me/java_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Java](https://t.me/java_problems_lib) — код, квизы и тесты
[Вакансии для java-разработчиков](https://t.me/javadevjob)

Data Science

[Книги для дата сайентистов | Data Science](https://t.me/dsprogbook)
[Библиотека Data Science](https://t.me/dsproglib) — полезные статьи, новости и обучающие материалы по Data Science
[Библиотека Data Science для собеса](https://t.me/ds_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Data Science](https://t.me/ds_problems_lib) — код, квизы и тесты
[Вакансии по Data Science, анализу данных, аналитике, искусственному интеллекту](https://t.me/datajob)

Go

[Книги для Go разработчиков](https://t.me/goprogbook)
[Библиотека Go разработчика](https://t.me/goproglib) — полезные статьи, новости и обучающие материалы по Go
[Библиотека Go для собеса](https://t.me/go_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Go](https://t.me/go_problems_lib) — код, квизы и тесты
[Вакансии по Go](https://t.me/godevjob)

C++

[Книги для C/C++ разработчиков](https://t.me/cppprogbook)
[Библиотека C/C++ разработчика](https://t.me/cppproglib) — полезные статьи, новости и обучающие материалы по C++
[Библиотека C++ для собеса](https://t.me/cpp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по C++](https://t.me/cpp_problems_lib) — код, квизы и тесты
[Вакансии по C++](https://t.me/cppdevjob)

Другие каналы

[Библиотека фронтендера](https://t.me/frontendproglib)
[Библиотека мобильного разработчика](https://t.me/mobileproglib)
[Библиотека хакера](https://t.me/hackproglib)
[Библиотека тестировщика](https://t.me/testerlib)
[Вакансии по фронтенду, джаваскрипт, React, Angular, Vue](https://t.me/jsdevjob)
[Вакансии для мобильных разработчиков](https://t.me/mobiledevjob)
[Вакансии по QA тестированию](https://t.me/testerrjob)
[InfoSec Jobs — вакансии по информационной безопасности](https://t.me/hackdevjob)
[Библиотека разработчика игр | Gamedev, Unity, Unreal Engine](https://t.me/gameproglib)

Чтобы добавить папку с нашими каналами, нажмите [сюда](https://t.me/addlist/17y04EbNMrlhNjZi)

Также у нас есть боты:
[Бот с IT-вакансиями](http://t.me/proglib_job_bot)
[Бот с мероприятиями в сфере IT](http://t.me/event_listener_bot)

Мы в других соцсетях:
[VK](https://vk.com/proglib)
[YouTube](https://www.youtube.com/c/%D0%91%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%B0)
[Дзен](https://zen.yandex.ru/proglib)
[Facebook](https://www.facebook.com/proglib/?locale=ru_RU) *
[Instagram](https://www.instagram.com/proglibrary/) *

__* Организация Meta запрещена на территории РФ__",6140,3,0,goproglib
5214,2024-09-13 06:01:30+00:00,"️ **Garble** — набор инструментов для обфускации Go-сборок

Обфускация не гарантирует безопасности, но если вы хотите, чтобы ваши бинари имели «как можно меньше информации об исходном коде», Garble — отличный вариант. Недавний выпуск исправил некоторые баги и добавил поддержку Go 1.23.

P. S. Выше — небольшой Makefile, который скомпилирует ваше
Go-приложение для Windows, Linux и Mac, при этом скрывая сборку с помощью Garble. 

 [GitHub](https://github.com/burrowers/garble)",6047,13,7,goproglib
5213,2024-09-12 19:46:21+00:00," Поделитесь опытом: на каком ноутбуке вы сейчас работаете и почему он вам нравится (или не нравится)? 

Ждем ваши ответы в комментариях! Самые полезные советы войдут в нашу статью. 

Спасибо за участие! ",5287,0,42,goproglib
5210,2024-09-12 19:42:22+00:00,"Привет, друзья! 

Готовим статью «**Лучший ноутбук для программирования в 2024 году**» и хотим узнать ваше мнение! ",5480,0,1,goproglib
5207,2024-09-12 13:26:07+00:00,"‍** Три способа оптимизировать работу с памятью на Go с помощью memory pools**

Александр Иванов, Go-разработчик в YADRO, делится опытом уменьшения влияния GC на выполнение программы и показывает бенчмарки для разных memory pools. 

Вы узнаете, какая из реализаций подойдет вашему проекту, а когда лучше не использовать memory pools и полагаться на встроенные механизмы рантайм-окружения Go.

 [Читать](https://habr.com/ru/companies/yadro/articles/842314/)",6949,12,0,goproglib
5205,2024-09-11 20:52:26+00:00,"‍ **Статическая и динамическая компоновка бинарных файлов Go **

Краткий обзор механизмов компоновки Go, сравнивающих различия в подходе между статическими и динамическими зависимостями и внутренними/внешними компоновщиками.

 [Читать](https://packagemain.tech/p/golang-statically-and-dynamically-linked-binaries)",6971,14,3,goproglib
5204,2024-09-11 11:18:20+00:00,"️**Задача для конкурса в честь дня программиста**

**Условие:**

Даны две строки s и f (начальная и конечная) и словарь D (набор слов). 

Нужно определить, можно ли преобразовать s в f, используя только слова из словаря D. При этом каждое преобразование должно менять только один символ, а длина слова должна оставаться неизменной. Если преобразование возможно, нужно найти кратчайшую последовательность таких преобразований и вернуть ее длину. Если преобразование невозможно, вернуть ""Преобразование невозможно"".

**Пример ввода 1:**
```    D = [""cat"", ""cot"", ""dot"", ""dog"", ""bat"", ""dag""]
    s = ""cat""
    t = ""dog""```
__Вывод:__
Минимальное количество шагов для преобразования 'cat' в 'dog': 3

**Пример ввода 2:**
```    D = [""cat"", ""cot"", ""bat""]
    s = ""cat""
    t = ""dog""```
__Вывод:__
Минимальное количество шагов для преобразования 'cat' в 'dog': Преобразование невозможно",5820,12,0,goproglib
5203,2024-09-11 11:18:20+00:00,"🆒 **Дарим наш курс за ответ на задачу**

В предверии **дня программиста** проводим конкурс: решите нашу задачу на тему программирования — рандомно выберем победителя

Подробные условия:
️ Решаем задачу со следующего поста
️ Решение присылаем в бота @ProglibContest_bot
️ Рандомно среди правильных ответов разыгрываем курс на выбор

Курсы на выбор:
 Архитектуры и шаблоны программирования
 Основы программирования на Python
 Базовые модели ML и приложения
 Frontend Basic: принцип работы современного веба

**Таймлайн**:
11-12 сентября — принимаем ответы
⬇️
13 сентября — подводим итоги",5155,6,1,goproglib
5202,2024-09-10 19:42:25+00:00,"Привет, друзья! 

Мы готовим статью о **будущем AI и его влиянии на разработку**. Нам важно ваше мнение! 

1️⃣ Как вы думаете, AI действительно изменит мир разработки? 
2️⃣ Какие плюсы и минусы использования AI в разработке вы видите? 
3️⃣ Есть ли у вас примеры успешного применения AI в ваших проектах? ️

Поделитесь своими идеями в комментариях! Самые интересные идеи и предложения мы обязательно включим в нашу статью. Спасибо за участие! ",5433,2,6,goproglib
5198,2024-09-10 16:56:24+00:00,"️ **Транзакции с базами данных в Go с многоуровневой архитектурой   **

Транзакции — это мьютексы в мире баз данных. Хотя ваше приложение может выполнять запись в базу данных строго последовательным образом, помните, что другие процессы могут одновременно выполнять запись в ту же таблицу.  Транзакции блокируют записи для обновления. 

Как и в случае с мьютексами, транзакции могут выполнять блокировку, поэтому тщательно выбирайте стратегию транзакций. И да, [присоединяйтесь к Miłosz Smółka в разработке Transaction Route 101.](https://threedots.tech/post/database-transactions-in-go/)",7562,14,0,goproglib
5196,2024-09-09 18:02:16+00:00," **GoForge** — CLI-инструмент для оптимизации инициализации Go-проекта 

Вместо ручного создания файлов и директорий для настройки структуры проекта, [GoForge](https://github.com/tz3/goforge) предоставляет альтернативу в одну строку:

```go install github.com/tz3/goforge@latest
goforge create 
или 
goforge create --title my-project --framework standard-library```",6202,13,3,goproglib
5195,2024-09-09 06:00:51+00:00," **Все о** **массивах и слайсах в Go**: видеогайд от Владимира Балуна** **

⏱️ **Таймкоды:
**
[00:00](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=0s) Введение
[00:47](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=47s) Устройство массивов в Go
[01:40](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=100s) Работа с массивами в Go
[10:00](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=600s) Перемещение массива в стеке
[11:29](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=689s) Итерация по массивам в Go
[15:11](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=911s) Где аллоцируются массивы в Go
[17:22](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=1042s) Педедача массива в функцию
[18:16](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=1096s) Слайсы в Go
[21:34](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=1294s) Реаллокация слайса в Go
[24:45](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=1485s) Резервирование памяти под слайс
[25:44](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=1544s) Создание слайса без инициализации
[27:38](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=1658s) Модификация строк в Go
[28:35](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=1715s) Приведение слайсов в строки и обратно без копирования
[30:13](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=1813s) Передача слайса в функцию
[31:12](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=1872s) Итерация по слайсам в Go
[33:55](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=2035s) Оптимизация итерации по слайсам в Go
[35:42](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=2142s) Получение слайсов в Go
[42:40](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=2560s) Получение слайса из массива в Go
[43:15](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=2595s) Конвертация слайса в массив в Go
[44:15](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=2655s) Конвертация слайса в указатель на массив в Go
[45:02](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=2702s) Указатель на нулевой массив в Go
[46:18](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=2778s) Удаление из конца слайса в Go
[46:51](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=2811s) Удаление из начала слайса в Go
[49:02](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=2942s) Реализация стека и очереди в Go
[50:00](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=3000s) Как увеличить размер слайса в Go
[50:48](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=3048s) Как уменьшить емкость слайса в Go
[54:05](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=3245s) Где аллоцируются слайсы в Go
[59:12](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=3552s) Как очистить слайс в Go
[01:01:51](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=3711s) В чем разница пустых и нулевых слайсов в Go
[01:05:17](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=3917s) Как сравнивать слайсы в Go
[01:07:53](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=4073s) Как скопировать данные слайса в Go
[01:09:47](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=4187s) Почему функция appeng возвращает слайсв в Go
[01:12:39](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=4359s) Потенциальные проблемы с функцией append в Go
[01:14:10](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=4450s) Реализация функции append в Go
[01:15:32](https://m.youtube.com/watch?v=7ij3u-0YsJI&t=4532s) Утечки памяти при работе со слайсами в Go

 [YouTube](https://www.youtube.com/watch?v=7ij3u-0YsJI) | [VK Видео](https://vk.com/video-139172865_456239246) | [Дзен](https://dzen.ru/video/watch/66ddebf96f233e4b198ed90e) [| Rutube](https://rutube.ru/video/503b921abdfd384b772fa516b3bc8feb/)",13703,36,24,goproglib
5194,2024-09-08 20:36:04+00:00," **Сага: эффективный шаблон микросервисной архитектуры**

Полную бизнес-транзакцию, как правило, очень сложно описать с помощью одной транзакции в базе данных. Возьмем, к примеру, процесс покупки в онлайн-магазине — с момента нажатия кнопки «Купить» до момента доставки заказа к вашей двери происходит серия шагов:

 **Размещение заказа**. Пользователь выбирает нужные товары, добавляет их в корзину и начинает процесс оформления заказа. Система сохраняет информацию о видах товаров, их количестве, имени заказчика, адресе и способе доставки.
 **Создание счета-фактуры**. После размещения заказа создается счет-фактура, который служит основной записью о транзакции и используется для выставления счета и учета.
 **Обработка платежа**. Инициируется процесс оплаты, пользователь предоставляет данные банковской карты или электронного кошелька. Оплата безопасно обрабатывается, и после успешного завершения заказ подтверждается.
 **Отправка товара**. После обработки платежа заказ готовится к отправке: создается информация для отслеживания, система уведомляет пользователя об ориентировочной дате доставки.

Каждый из этих шагов включает взаимодействие с различными микросервисами — сервисов заказов, платежным сервисом и сервисом доставки. Для успешного и последовательного выполнения бизнес-транзакции важна безупречная координация всех частей системы. Эта задача кажется очень сложной, но к счастью, есть универсальный и надежный паттерн, который помогает выстроить взаимодействие микросервисов самым оптимальным образом — Сага. О нем и пойдет речь в [статье](https://proglib.io/sh/K0FhRp3MAU).",5479,16,1,goproglib
5193,2024-09-08 08:20:26+00:00," **wp2hugo** — инструмент для миграции блогов с WordPress на Hugo, написанный на Go

Hugo — популярный генератор статических сайтов на базе Go, и этот инструмент позволяет легко конвертировать в него блоги на базе WordPress, включая множество особых случаев, в которых WordPress REST API не помогает.

 [GitHub](https://github.com/ashishb/wp2hugo)",7145,14,3,goproglib
5192,2024-09-07 12:58:19+00:00," Подборка лучших статей «Библиотеки программиста» за август: сохраняй в заметки, чтобы не пропустить #самыйсок

 [18 основных паттернов микросервисной архитектуры](https://proglib.io/sh/JTGIB70iAf)
 [5 мифов о работе в IT, которые мешают начать карьеру программиста](https://proglib.io/sh/b49Yz0Bvpq)
[ Страх ошибок: как он мешает вам писать код](https://proglib.io/sh/a6xOY5Jwrq)
 [9 основных паттернов для проектирования распределенных систем](https://proglib.io/sh/8NuhDMXRrd)
 [Иллюзия согласованности в PostgreSQL: как избежать неприятных сюрпризов](https://proglib.io/sh/PyJAfoucsE)
 [Прокачай свой бэкенд: 9 инструментов, которые стоит знать](https://proglib.io/sh/wFnhVR27N5)
 [Структуры данных для разработчиков: 10 самых важных](https://proglib.io/sh/74ZMC6Xdpb)
‍ [ТОП-7 самых раздражающих вопросов от эйчаров](https://proglib.io/sh/1NWJUI0jSD)
 [Паттерны коммуникации в распределенных системах](https://proglib.io/sh/njTbNmPz93)
⬇️ [Есть мнение: уровень знаний айтишников снизился](https://proglib.io/sh/Kay0u2M31S)
 [15 продвинутых лайфхаков для работы в терминале Linux](https://proglib.io/sh/ZjACtlbieu)
 [Компилятор своими руками: краткий гид для начинающих](https://proglib.io/sh/TucmFVtBGA)
 [Ускорьте свою базу данных: 7 проверенных методов масштабирования и оптимизации](https://proglib.io/sh/QugcqYpKAE)
 [Оптимизация использования памяти в PostgreSQL: секреты профессионалов](https://proglib.io/sh/C9JMApunPV)
 [Самоучитель по Go для начинающих. Часть 15. Конкурентность. Горутины. Каналы](https://proglib.io/sh/FfMkKRbQwl)",6139,5,1,goproglib
5191,2024-09-07 07:24:57+00:00,"‍ **Go sync.WaitGroup и проблема выравнивания**:** **продолжение серии статей Phuong Le про сложные аспекты Go на простых иллюстрациях**

**Интересно даже не то, как работает sync.WaitGroup, а то, как менялась его структура на протяжении многих версий.

 [Читать](https://victoriametrics.com/blog/go-sync-waitgroup/index.html)",6918,14,0,goproglib
5190,2024-09-06 11:29:14+00:00," **Представлены релизы Go 1.23.1 и 1.22.7**

 Новый выпуск включает исправления безопасности для пакетов `encoding/gob`, `go/build/constraint` и `go/parser`.

 [Анонс](https://groups.google.com/g/golang-announce/c/K-cEzDeCtpc)
 [Скачать](https://go.dev/dl/#go1.23.1)

#новости",6683,15,1,goproglib
5189,2024-09-05 20:30:25+00:00,"Привет, друзья! 

Мы готовим статью о самых странных и уникальных дистрибутивах Linux, и нам нужно ваше мнение! 

1️⃣ Какой самый необычный дистрибутив Linux вы когда-либо пробовали? Почему он вас удивил?
2️⃣ Есть ли у вас советы для новичков, которые только начинают работать с Linux? 

Поделитесь своими идеями в комментариях! Самые интересные идеи и предложения мы обязательно включим в нашу статью. Спасибо за участие! ",6479,11,18,goproglib
5188,2024-09-04 20:23:27+00:00," **Самоучитель по Go для начинающих. **Часть 16. Тестирование кода и его виды. Table-driven подход. Параллельные тесты**
**
В статье познакомимся с концепцией тестирования кода и её основными видами, изучим инструменты стандартного пакета testing, научимся запускать и визуализировать тесты. В качестве практического задания напишем и протестируем алгоритм «Решето Эратосфена».

 [Читать гайд](https://proglib.io/sh/RCwSEFDHq0)

 **Остальные части в серии:**

1. [Особенности и сфера применения Go, установка, настройка](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-1-osobennosti-i-sfera-primeneniya-go-ustanovka-nastroyka-2023-11-23)
2. [Ресурсы для изучения Go с нуля](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-2-resursy-dlya-izucheniya-go-s-nulya-2023-11-28)
3. [Организация кода. Пакеты, импорты, модули. Ввод-вывод текста.](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-3-organizaciya-koda-pakety-importy-moduli-vvod-vyvod-teksta-2023-12-07)
4. [Переменные. Типы данных и их преобразования. Основные операторы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-4-peremennye-tipy-dannyh-i-ih-preobrazovaniya-osnovnye-operatory-2023-12-14)
5. [Условные конструкции if-else и switch-case. Цикл for. Вложенные и бесконечные циклы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-5-uslovnye-konstrukcii-if-else-i-switch-case-cikl-for-vlozhennye-i-beskonechnye-cikly-2024-01-11)
6. [Функции и аргументы. Области видимости. Рекурсия. Defer](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-6-funkcii-i-argumenty-oblasti-vidimosti-rekursiya-defer-2024-01-24)
7. [Массивы и слайсы. Append и сopy. Пакет slices](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-7-massivy-i-slaysy-append-i-sopy-paket-slices-2024-02-08)
8. [Строки, руны, байты. Пакет strings. Хеш-таблица (map)](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-8-stroki-runy-bayty-paket-strings-hesh-tablica-map-2024-02-15)
9. [Структуры и методы. Интерфейсы. Указатели. Основы ООП](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-8-stroki-runy-bayty-paket-strings-hesh-tablica-map-2024-02-15)
10. [Введение в ООП. Наследование, абстракция, полиморфизм, инкапсуляция](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-10-vvedenie-v-oop-nasledovanie-abstrakciya-polimorfizm-inkapsulyaciya-2024-03-11)
11. [Обработка ошибок. Паника. Восстановление. Логирование](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-11-obrabotka-oshibok-panika-vosstanovlenie-logirovanie-2024-04-16)
12. [Обобщенное программирование. Дженерики](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-12-obobshchennoe-programmirovanie-dzheneriki-2024-05-03)
13. [Работа с датой и временем. Пакет time](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-13-rabota-s-datoy-i-vremenem-paket-time-2024-06-26)
14. [Интерфейсы ввода-вывода. Буферизация. Работа с файлами. Пакеты io, bufio, os](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-14-interfeysy-vvoda-vyvoda-buferizaciya-rabota-s-faylami-pakety-io-bufio-os-2024-07-18)
15. [Конкурентность. Горутины. Каналы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-15-konkurentnost-gorutiny-kanaly-2024-08-20)",256479,12,2,goproglib
5181,2024-09-04 14:24:45+00:00,"‍ **Срезы в деталях**: продолжение серии статей Phuong Le про сложные аспекты Go на простых иллюстрациях 

️ Как структурирован срез
️ Как растет срез
️ Как распределяется срез и многое другое 

 [Читать](https://victoriametrics.com/blog/go-slice/)",6167,11,1,goproglib
5179,2024-09-03 20:52:20+00:00," Платные подписки есть? А если найду?!

 **А у вас есть? На какие сервисы? Поделитесь в комментариях**

#холивар",6381,11,7,goproglib
5172,2024-09-02 17:31:39+00:00,"‍ **Разработка производительных и надежных Go-приложений**

Как GOMEMLIMIT помог сократить использование памяти: история команды Zomato.

 [Читать](https://blog.zomato.com/go-beyond-building-performant-and-reliable-golang-applications)",6119,10,0,goproglib
5170,2024-09-01 08:12:45+00:00,"**Советы по созданию приложений Bubble Tea  **

Разработка и внедрение TUI-приложений — не так сложны, не так ли? Несмотря на их простой внешний вид (по сравнению с UI под десктоп или веб), механика, лежащая в основе TUI, аналогична GUI. Автор руководства Луис Гарман столкнулся с некоторыми препятствиями и составил список советов для тех, кто хочет начать писать умеренно сложное приложение для TUI.

 [Читать](https://leg100.github.io/en/posts/building-bubbletea-programs/)",6679,23,1,goproglib
5169,2024-08-31 15:34:55+00:00,"️ **Структуры данных для разработчиков: 10 самых важных**

Структуры данных — фундамент эффективной разработки. Кратко разберем 10 ключевых структур данных, которые необходимо освоить каждому разработчику для создания производительных и масштабируемых приложений, а подробнее читайте в [статье](https://proglib.io/sh/74ZMC6Xdpb)

 Списки отлично подходят для хранения и обработки упорядоченных данных и полезны в различных приложениях, таких как управление задачами, ленты соцсетей и корзины интернет-магазинов.
 Массивы — упорядоченная коллекция элементов фиксированного размера и хорошо подходят для ситуаций, где размер коллекции известен или редко меняется. 
 Стеки следуют принципу «последним пришел — первым вышел». Они идеальны для реализации операций отмены/повтора в текстовых редакторах или ведения истории просмотров в веб-браузерах.
 Очереди работают по принципу «первым пришел — первым вышел». Они подходят для управления заданиями печати, отправки действий пользователя в играх на сервер или обработки сообщений в чат-приложениях.
 Кучи используются для планирования задач и управления памятью. Они особенно полезны в реализации очередей с приоритетами, где нужен доступ к элементу с наивысшим или наименьшим приоритетом.
 Деревья организуют данные иерархически. Они полезны для представления данных с естественными иерархиями или связями и могут использоваться в различных приложениях, таких как индексация баз данных.
 Хеш-таблицы позволяют эффективно искать, вставлять и удалять данные. Они используют хеш-функцию для сопоставления ключей с соответствующими местами хранения и обеспечивают доступ к сохраненным значениям за постоянное время.
 Суффиксные деревья специализируются на поиске строк в документах, что делает их идеальными для текстовых редакторов и алгоритмов поиска.
 Графы отслеживают отношения и находят пути, что делает их незаменимыми в социальных сетях, рекомендательных системах и алгоритмах поиска путей.
 KD-деревья хороши для поиска ближайших соседей и важны для картографических приложений и геолокационных сервисов.",5773,35,2,goproglib
5168,2024-08-31 07:20:20+00:00,"**** **-35% на курс по алгоритмам**

На курсе вы на практике познакомитесь со сложными алгоритмами и научитесь писать более короткий и эффективный код – https://proglib.io/w/2b500ef7

**23 390 рублей** ~~35 990 рублей~~ 

**Что еще вас ждет на курсе:
**
▪️ 150 практических заданий и 47 видеолекций;
 
▪️ Бессрочный доступ ко всем материалам курса;

▪️ Развернутая обратная связь по всем домашним заданиям, а также ссылки на полезные дополнительные материалы. 

 Переходите на сайт, читайте подробности и заходите на обучение по самым выгодным условиям – https://proglib.io/w/2b500ef7",6163,6,5,goproglib
5167,2024-08-31 05:15:06+00:00,"️ **Dbmate** — легковесный, независимый от фреймворка инструмент миграции баз данных 

Написан на Go, но может использоваться вместе с приложениями, использующими базы данных, написанными на любом языке. Поддерживает MySQL, Postgres, SQLite, ClickHouse, BigQuery и Spanner.

 [GitHub](https://github.com/amacneil/dbmate)",6352,14,26,goproglib
5165,2024-08-30 06:02:24+00:00,"Флаг `-cpu` можно использовать при запуске тестов Go, чтобы указать список значений `GOMAXPROCS`, с использованием которых необходимо запустить тесты. Например,
```go test -cpu=4,5 
```

запустит тесты 2 раза. Тесты сначала будут запущены с четырьмя процессорами, а затем второй раз — с пятью.

#tip",11583,53,0,goproglib
5163,2024-08-29 13:05:15+00:00,"**️Tetrigo — TUI-Powered Tetris, написанный на Go** 

Хотите ли вы просто играть в Tetris, создать свою собственную игру Tetris или, возможно, реализовать свой собственный необычный режим игры Tetris с помощью Go, эта реализация для вас. Она хорошо структурирована и использует Bubble Tea от Charm за кулисами.

 [GitHub](https://github.com/Broderick-Westrope/tetrigo)",7298,17,2,goproglib
5162,2024-08-28 20:07:35+00:00,"⬇️ **Есть мнение: уровень знаний айтишников снизился **

В последнее время тревожные мнения о снижении уровня знаний среди IT-специалистов все чаще звучат в профессиональном сообществе и СМИ. В этой статье мы выясним, так ли это на самом деле, рассмотрев конкретные примеры и факторы, влияющие на уровень знаний IT-специалистов.

__Не согласен, что знания убывают — тогда забирай курс по Алгоритмам от базы до эксперт уровня:__
 [Алгоритмы и структуры данных](https://proglib.academy/algorithms_and_data_structures?utm_source=tg_academy&utm_medium=post_Est'Mnenie:yrovenZnaniiAitishnikovSnizilca)

 [Ссылка](https://proglib.io/sh/Kay0u2M31S)",6237,30,0,goproglib
5161,2024-08-28 07:43:35+00:00,"‍ **Представлена новая версия TinyGo **

TinyGo — это фантастическая реализация Go на основе LLVM, ориентированная на микроконтроллеры и WebAssembly. Версия 0.33.0 приводит инструмент в соответствие со стандартами Go 1.23, добавляет поддержку WASI preview 2 и многое другое.

 [Подробнее](https://github.com/tinygo-org/tinygo)",6344,39,13,goproglib
5160,2024-08-27 18:06:27+00:00,"Привет, друзья! 

Мы готовим статью о том, что делать, если вы наврали в резюме, и нам нужна ваша помощь! 

Поделитесь своим опытом и мнением, а самые интересные и полезные советы мы обязательно включим в нашу статью.

 Сталкивались ли вы когда-нибудь с ситуацией, когда пришлось преувеличить свои навыки в резюме? Как вы с этим справились?
 Какой, по вашему мнению, самый эффективный способ исправить ситуацию, если вы немного приукрасили свое резюме?
 Как вы думаете, какая «ложь» в резюме может быть простительной, а какая — абсолютно недопустимой?

 Не стесняйтесь делиться своими историями и мнениями в комментариях! Ваш опыт может помочь другим избежать подобных ситуаций или найти выход, если они уже в них оказались. Спасибо за участие!",6301,11,5,goproglib
5159,2024-08-27 07:29:28+00:00,"** Освоение сообщений ISO 8583 с помощью Go**

ISO 8583 — стандарт ISO, описывающий процесс передачи и формат финансовых сообщений системами, обрабатывающими данные банковских платёжных карт.

В этом гайде Pavel Gabriel описывает, как он внедрил Go-пакет [moov-io/iso8583.](https://click.pstmrk.it/3s/github.com%2Fmoov-io%2Fiso8583%3Futm_source%3Dchristophberger%26utm_medium%3Demail%26utm_campaign%3D2024-08-25-its-not-magic/bP1H/xZO3AQ/AQ/1764114c-254b-4d37-a8db-80e0e04e672c/15/EewMwjkIsc) Даже если вы мало интересуетесь финансовыми операциями, гайд может послужить основой для внедрения аналогичных стандартов ISO.

 [Читать](https://alovak.com/2024/08/15/mastering-iso-8583-messages-with-golang/)",7393,12,0,goproglib
5158,2024-08-26 19:40:38+00:00,"Кстати, стандартная библиотека Go включает в себя простой в использовании обратный прокси-сервер

`httputil.NewSingleHostReverseProxy` создает обратный прокси-сервер, который перезаписывает URL-адреса на указанный целевой хост.

 [Документация](https://pkg.go.dev/net/http/httputil#NewSingleHostReverseProxy)",8862,50,9,goproglib
5157,2024-08-25 20:20:31+00:00," **GoNB** —** ядро Go Notebook для Jupyter**

[Notebook](https://en.wikipedia.org/wiki/Notebook_interface) облегчают так называемое literate programming (грамотное программирование), где вы видите результаты немедленно, как REPL, но с сохранением и контролем над исходным кодом. Распространенный в Python, GoNB приносит такую же возможность в мир Go. В последнем выпуске добавлена​​поддержка [Jupytext](https://jupytext.readthedocs.io/en/latest/).

 [GitHub](https://github.com/janpfeifer/gonb)",10697,39,2,goproglib
5147,2024-08-25 06:55:06+00:00,"‍ **Sync.Pool в деталях**: продолжение серии статей Phuong Le про сложные аспекты Go на простых иллюстрациях 

️ Как sync.Pool связан с планировщиком или моделями PMG?
️ Что такое проблема false sharing?
️ Как устроен sync.Pool?
️ Как работает механизм «кражи» sync.Pool?
️ Почему «Любой элемент, хранящийся в пуле, может быть автоматически удален в любое время без уведомления»?

 [Читать](https://victoriametrics.com/blog/go-sync-pool/index.html)",7831,18,0,goproglib
5146,2024-08-24 20:46:58+00:00,"`Sync.Pool` имеет два метода: `Get()`, и `Put()`. Но под капотом нечто большее️

 [Источник](https://x.com/func25/status/1826861157400875249)",6389,11,2,goproglib
5145,2024-08-24 16:07:53+00:00,"‍ **Применение Continuation-passing style (CPS) в Go**

Как этот стиль может улучшить читаемость/поддержку кода в проектах на Go и какие потенциальные подводные камни/ограничения можно встретить? Обо всем этом — под катом.

Вы узнаете, как с помощью CPS сделать инверсию control flow, как скрывать системные детали реализации и безопасно управлять ресурсами, таким образом получить надежный и читаемый код.

 [Читать](https://habr.com/ru/articles/836702/)",6699,28,3,goproglib
5144,2024-08-23 10:50:06+00:00," **Самоучитель по Go для начинающих. Часть 15. Конкурентность. Горутины. Каналы
**
В 15-й части самоучителя мы разберем работу базовых сущностей ОС для погружения в парадигму конкурентного программирования, а затем изучим основные способы её реализации в Go с помощью горутин и каналов.

 [Читать гайд](https://proglib.io/sh/FfMkKRbQwl)

 **Остальные части в серии:**

1. [Особенности и сфера применения Go, установка, настройка](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-1-osobennosti-i-sfera-primeneniya-go-ustanovka-nastroyka-2023-11-23)
2. [Ресурсы для изучения Go с нуля](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-2-resursy-dlya-izucheniya-go-s-nulya-2023-11-28)
3. [Организация кода. Пакеты, импорты, модули. Ввод-вывод текста.](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-3-organizaciya-koda-pakety-importy-moduli-vvod-vyvod-teksta-2023-12-07)
4. [Переменные. Типы данных и их преобразования. Основные операторы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-4-peremennye-tipy-dannyh-i-ih-preobrazovaniya-osnovnye-operatory-2023-12-14)
5. [Условные конструкции if-else и switch-case. Цикл for. Вложенные и бесконечные циклы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-5-uslovnye-konstrukcii-if-else-i-switch-case-cikl-for-vlozhennye-i-beskonechnye-cikly-2024-01-11)
6. [Функции и аргументы. Области видимости. Рекурсия. Defer](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-6-funkcii-i-argumenty-oblasti-vidimosti-rekursiya-defer-2024-01-24)
7. [Массивы и слайсы. Append и сopy. Пакет slices](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-7-massivy-i-slaysy-append-i-sopy-paket-slices-2024-02-08)
8. [Строки, руны, байты. Пакет strings. Хеш-таблица (map)](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-8-stroki-runy-bayty-paket-strings-hesh-tablica-map-2024-02-15)
9. [Структуры и методы. Интерфейсы. Указатели. Основы ООП](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-8-stroki-runy-bayty-paket-strings-hesh-tablica-map-2024-02-15)
10. [Введение в ООП. Наследование, абстракция, полиморфизм, инкапсуляция](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-10-vvedenie-v-oop-nasledovanie-abstrakciya-polimorfizm-inkapsulyaciya-2024-03-11)
11. [Обработка ошибок. Паника. Восстановление. Логирование](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-11-obrabotka-oshibok-panika-vosstanovlenie-logirovanie-2024-04-16)
12. [Обобщенное программирование. Дженерики](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-12-obobshchennoe-programmirovanie-dzheneriki-2024-05-03)
13. [Работа с датой и временем. Пакет time](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-13-rabota-s-datoy-i-vremenem-paket-time-2024-06-26)
14. [Интерфейсы ввода-вывода. Буферизация. Работа с файлами. Пакеты io, bufio, os](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-14-interfeysy-vvoda-vyvoda-buferizaciya-rabota-s-faylami-pakety-io-bufio-os-2024-07-18)",47189,18,6,goproglib
5143,2024-08-22 20:36:23+00:00,"Что первым приходит в голову разработчика, когда слышишь про Go? Google и микросервисы? Автор тоже так думал, но реальность оказалась значительно интереснее.

Под катом — разработка Desktop-приложения с учетом реалий Windows, которое запустит встроенный веб-сервер, с методом REST API на ассемблере.

 [Читать](https://habr.com/ru/articles/837454/)",5884,28,1,goproglib
5142,2024-08-22 18:04:22+00:00,"Привет, друзья! 

Мы готовим статью **о прокрастинации среди разработчиков и хотим узнать ваше мнение**!  Поделитесь своим опытом, а самые интересные и полезные советы мы обязательно включим в нашу статью. 

 Какая самая необычная причина прокрастинации у вас была в работе над проектом?
 Какой метод борьбы с прокрастинацией оказался для вас наиболее эффективным?
 Как вы справляетесь с когнитивной перегрузкой во время работы над сложными задачами?

Не стесняйтесь делиться своими историями и лайфхаками в комментариях!  Ваш опыт может помочь другим разработчикам справиться с прокрастинацией. Спасибо за участие!",5589,8,5,goproglib
5138,2024-08-22 13:36:36+00:00,"️ **Вендоринг в Go на практике**

Очередной гайд от Phuong Le о работе `go mod vendor` под капотом.

 [Читать](https://victoriametrics.com/blog/vendoring-go-mod-vendor/)",5504,14,0,goproglib
5137,2024-08-21 09:02:03+00:00,"‍ **Range Over Function Types в Go 1.23

**Текстовая версия выступления Ian Lance Taylor на GopherCon 2024 о том, почему эта фича была** **добавлена, что из себя представляет и как ее использовать.

 [Читать](https://go.dev/blog/range-functions)",9529,14,0,goproglib
5134,2024-08-21 05:24:11+00:00,"** Паттерны коммуникации в распределенных системах
**
**Распределенные системы** состоят из многих отдельных частей/узлов, работающих вместе, но физически расположенных в разных местах. Эти части системы должны общаться друг с другом через сеть, чтобы система могла функционировать как единое целое. 

Хотя коммуникация критически важна, правильно ее организовать бывает непросто: разработчики иногда пытаются использовать один и тот же подход ко всем задачам коммуникации, что может быть неэффективно. Важно понимать, что существуют разные способы организации коммуникации, и выбор правильного метода зависит от конкретной задачи. Рассмотрим основные паттерны коммуникации, которые можно использовать для решения разных задач.

️ **Запрос-ответ с HTTP
**
Этот синхронный паттерн коммуникации предполагает, что один сервис отправляет запрос другому сервису и ожидает ответа или ошибки, блокируя свою работу до получения результата. **REST**, наиболее популярный архитектурный стиль для этой модели коммуникации, использует методы протокола HTTP — **GET**, **POST**, **PUT** и **DELETE**.
 
Однако использование этого паттерна может привести к проблемам, если сервисы образуют** цепочку взаимодействий**: в таком случае сбой одного из сервисов может привести к отказу всей операции, а также к расточительному использованию ресурсов и каскадным сбоям.

️ **Общие данные**

Этот паттерн часто остается незамеченным, поскольку разработчики не всегда воспринимают его как модель коммуникации. В рамках этого подхода один компонент записывает данные в определенное место, а другой компонент считывает и обрабатывает эти данные. Например, один сервис может загрузить файл в облачное объектное хранилище (например, в корзину Amazon S3), а другой сервис затем извлекает этот файл для дальнейших действий.

Главное преимущество этого паттерна — простота реализации и возможность обеспечения взаимодействия между **устаревшими** и **современными** системами без проблем совместимости. Однако он не подходит для сценариев, требующих низкой задержки.

️ **Асинхронный запрос-ответ
**
В отличие от синхронного подхода, запрос-ответ может быть реализован асинхронно и без блокировки. В этом случае получающий сервис должен явно знать место назначения для отправки ответа. Для реализации этого паттерна идеально подходят **очереди сообщений**, которые позволяют буферизовать несколько запросов.

Основная сложность здесь — корреляция между запросом и ответом: экземпляр сервиса, отправивший запрос, может отличаться от экземпляра, получающего ответ, поэтому требуется способ отслеживания запросов.

️ **Коммуникация на основе событий**

В этом подходе сервисы не общаются напрямую друг с другом, а **генерируют события**, которые могут быть использованы другими сервисами. Это требует наличия места для отправки данных о событиях и механизма, позволяющего получающим сервисам обнаруживать эти события. Брокеры сообщений, такие как **RabbitMQ**, могут обрабатывать оба этих аспекта. Издатели используют API для отправки событий в брокер, который управляет подписками и уведомляет подписчиков при поступлении события.

Этот паттерн идеально подходит для создания слабосвязанных взаимодействий между сервисами. Однако брокер сообщений должен обеспечивать надежную доставку событий, их упорядочивание и согласованность. Кроме того, добавляется дополнительный компонент в систему.

‍ Подробнее читайте в [статье.](https://proglib.io/sh/njTbNmPz93)
 Материал взят из нашей еженедельной email-рассылки, посвященной бэкенду. [Подпишитесь,](https://proglib.io/w/e3a1750b) чтобы быть в числе первых, кто получит дайджест.",4108,18,0,goproglib
5133,2024-08-20 19:00:46+00:00,"Привет, друзья! 

Мы готовим статью на тему: «**5 признаков зависимости от программирования**». Нам очень важно ваше мнение! Поделитесь своим опытом и советами, и самые интересные из них мы включим в статью.

⌛ __Как вы понимаете, что программирование начинает занимать слишком много места в вашей жизни? Какие признаки вы замечаете?__

 __Какие методы и стратегии вы используете, чтобы сохранить баланс между работой и личной жизнью?__

 __Был ли у вас опыт, когда программирование негативно влияло на ваши отношения с близкими или здоровье? Как вы справились с этим?__

Ваши ответы помогут многим! Спасибо за участие!",5906,14,4,goproglib
5132,2024-08-20 17:31:33+00:00,"‍ **Неупорядоченный список аспектов, которых не хватает в Go**

Солидный список с некоторыми выполнимыми и не очень выполнимыми пунктами. С выполнимой стороны есть ordered maps и default arguments. С не очень выполнимой стороны null/nilability — давняя спорная тема, которая, вероятно, нарушит обратную совместимость.

 [Читать](https://kokada.capivaras.dev/blog/an-unordered-list-of-things-i-miss-in-go/)",5510,14,22,goproglib
5130,2024-08-19 18:28:51+00:00," **Оптимизация использования памяти в PostgreSQL: секреты профессионалов**

Сложные (и многочисленные) операции в базе данных требуют солидного объема оперативной памяти — например, для создания набора результатов PostgreSQL обычно приходится:

 Выполнить поиск по индексу.
 Извлечь связанные строки из одной или нескольких таблиц.
 Объединить, отфильтровать, агрегировать и отсортировать кортежи в пригодный для использования результат.

Каждый из этих шагов требует памяти, и PostgreSQL может обрабатывать тысячи таких запросов одновременно. Так что рано или поздно перед разработчиками любого серьезного проекта встает необходимость решения нескольких сложных вопросов:

 Как грамотно оптимизировать использование доступной памяти?
 В каком соотношении распределить ОЗУ между несколькими типами памяти, которые необходимы PostgreSQL для эффективной работы?
 Как предотвратить защитное завершение операционной системой процесса PostgreSQL, который использует слишком много памяти?

Для ответов на все эти вопросы нужно определить, сколько именно памяти использует PostgreSQL для основных процессов — а это сама по себе нетривиальная задача. Советы по настройке памяти так многочисленны и разнообразны, что в них сложно сориентироваться.

Поэтому в этой статье мы сведем всю мудрость экспертов к конкретным шагам, которые помогут максимально эффективно распорядиться доступной памятью.

 [Читать статью](https://proglib.io/sh/C9JMApunPV)
 [Зеркало](https://proglib.tech/p/optimizaciya-ispolzovaniya-pamyati-v-postgresql-sekrety-professionalov-2024-08-07)",5520,7,0,goproglib
5129,2024-08-19 11:48:40+00:00,"‍ **Go: как работает система тестирования  **

Что происходит, когда вы запускаете `go test`? Конечно, Go запускает ваши тесты. Но на практике это далеко не так просто и прямолинейно. 

Автор статьи Matt T. Proud любит понимать, как работают инструменты, с которыми он работает, поэтому он углубился во внутренности `go test` и обнаружил механизм, который является «довольно элегантным».

 [Читать](https://matttproud.com/blog/posts/go-testing-harness.html)",5907,7,1,goproglib
5128,2024-08-19 06:01:28+00:00,"Вакансии «Библиотеки программиста» — ждем вас в команде!

Мы постоянно растем и развиваемся, поэтому создали отдельную [страницу](https://ad.proglib.io/vacancy), на которой будут размещены наши актуальные вакансии. Сейчас мы ищем:
авторов в наше медиа proglib.io
контент-менеджеров для ведения телеграм-каналов

[Подробности тут](https://ad.proglib.io/vacancy)

Мы предлагаем частичную занятость и полностью удаленный формат работы — можно совмещать с основной и находиться в любом месте

Ждем ваших откликов ",5386,0,0,goproglib
5127,2024-08-18 18:02:04+00:00,"Вы наверняка знакомы со «стандартным» способом ветвления кода в зависимости от заданного значения:

```
switch a {
    case 1: 
        fmt.Println(""1"")
    case 2:
        fmt.Println(""2"")
    default:
        fmt.Println(""default"")
}
```

Так работает `switch` в Go и во многих других языках (за исключением того, что в Go не происходит перехода к последующим `case`).

Но оператор `switch` может делать больше. Вот несколько кейсов.

1. Несколько значений в одном `case`.

В `case` можно указать несколько значений для сопоставления:

```
switch a {
    case 1: 
        fmt.Println(""1"")
    case 2, 3, 4:
        fmt.Println(""2, 3 или 4"")
//  case 1,2:  // ошибка: дублирование case 1, дублирование case 2
//      fmt.Println(""1 или 2"")
}
```

Заданное значение может использоваться только в одном блоке `case`. Дублирование значений в `case` вызовет ошибку.

2. Инициализатор, как в цикле `for`.

Вы можете инициализировать значение перед использованием его в `switch`. Область видимости переменной `a` ограничена конструкцией `switch`:

```
switch a := f(); a {
    case 1: 
        fmt.Println(""1"")
    case 2:
        fmt.Println(""2"")
}
```

3. Нет выражения `switch`, но есть выражения `case`.

`case` не ограничен статическими значениями. Если вы опустите выражение `switch`, вы можете использовать выражения для каждого `case`:

```
switch {
    case a == 1: 
        fmt.Println(""1"")
    case a >=2 && a <= 4:
        fmt.Println(""2"")
    case a <= 5:
        fmt.Println(""3"")
}
```

Если текущее значение `a` совпадает более чем с одним `case`, выбирается первый подходящий.

4. Переключение по типу переменной.

Если ваш код получает значение интерфейса из какого-то источника, вы можете использовать переключение по типу, чтобы проверить фактический тип этого значения:

```
switch v := a.(type) {
    case int: 
        fmt.Println(""a — это int:"", v)
    case string, []byte:
        fmt.Println(""a — это string:"", v)
}
```

5. Переключение по типу параметра.

Это может показаться немного эзотерическим: вы можете определить дженерик функцию, где типовой параметр не используется в списке параметров. Вместо этого оператор `switch` может ссылаться на этот параметр, чтобы проверить значение параметра:

```
func do[T comparable](a any) {
    switch v := a.(type) {
    case int:
        fmt.Println(""a — это int:"", v)
    case T:
        fmt.Printf(""a — это %T: %v"", v, v)
    case []T:
        fmt.Println(""a — это срез:"", v)
    case []byte:
        fmt.Println(""a — это срез байт:"", v)
    }
}

func main() {
    do[bool](a)
    do[bool](true)
    do[int]([]int{1, 2, 3})
}
```

Как и с выражениями `case`, если фактический тип `a` совпадает с несколькими `case`, выбирается первый подходящий.

 [Go Playground](https://go.dev/play/p/l6bAV4ABBcP)

#tip",5632,76,2,goproglib
5126,2024-08-18 09:03:54+00:00,"️ **Использование Go для всего**

Зачем использовать 10 инструментов, если можно освоить один? Познакомьтесь с соло-разработчиком Маркусом, который превратил Go в свой швейцарский армейский нож. От CLI до игр для Nintendo Switch — Go делает все! 

 [Читать](https://www.maragu.dev/blog/go-is-my-hammer-and-everything-is-a-nail)",6255,22,7,goproglib
5125,2024-08-17 17:41:12+00:00," **Компилятор своими руками: краткий гид для начинающих

**В этой статье мы разберем анатомию простейшего компилятора: лексер, парсер и LLVM. Вы узнаете, как эти компоненты взаимодействуют для преобразования исходного кода в исполняемый файл.**

 **[Ссылка на статью](https://proglib.io/sh/TucmFVtBGA)",6227,9,0,goproglib
5117,2024-08-17 06:01:23+00:00,"** Объяснение Go maps**: как на самом деле хранятся пары ключ-значение**

**Очередной лонгрид от Phuong Le, который на простых иллюстрациях объясняет не самые простые аспекты Go. Этот гайд посвящен типу map и всему, что с ним связано.

 [Читать](https://victoriametrics.com/blog/go-map/)",6922,50,0,goproglib
5116,2024-08-16 16:32:14+00:00," Кстати, в Go 1.23 представлена ​​новая функция [Chunk](https://pkg.go.dev/slices#Chunk), которую можно использовать для разделения слайса на подслайсы.

▶️ Вывод:
```
Product list 0 [TV Fridge]
Product list 1 [Washing Machine Dish Washer]```",6336,82,4,goproglib
5115,2024-08-16 13:35:57+00:00,"****** Как меняется математика в разных индустриях: от мобильных игр к фондовым рынкам**

 22 августа [в прямом эфире](https://proglib.io/w/ae5dc67e) разберем как математика применяется в разных отраслях бизнеса. И какие математические навыки необходимы для успешной работы в каждой из них.

Приглашенный спикер: Павел Запольский – Senior Quantitative Researcher at Exness и Co-founder GrowLytics. Запустивший более 10 проектов по машинному обучению и анализу данных для ведущих компаний. 

 На вебинаре узнаете:

****** Математика в бизнесе:** Чем отличаются разные сферы друг от друга. Почему стоит понимать специфику сферы
****** ML и продуктовое IT:** Чем различается математическая сложность от индустрии к индустрии. Какие к ним необходимы уровни подготовки
****** Баевская математика в GameDev**. Баевская математика как альтернатива AB тестированию. Как математические методы применяются в разработке игр
****** Finance: **Что такое количественные финансы и математическое моделирование. Обсудим текущие индустриальные тренды в отрасли
****** Backtest:** Как знания математики делают ваши активы более надежными
****** На практике подробно разберем** два математических кейса по GameDev и Backtest.

️ Зарегистрироваться: https://proglib.io/w/ae5dc67e",5913,11,0,goproglib
5113,2024-08-16 06:57:56+00:00," **Ускорьте свою базу данных: 7 проверенных методов масштабирования и оптимизации**

Масштабирование улучшает производительность и повышает надежность систем хранения данных путем оптимизации использования ресурсов и распределения нагрузки. В этой статье мы рассмотрим 7 эффективных методов масштабирования и оптимизации базы данных.

 [Читать статью](https://proglib.io/sh/QugcqYpKAE)
 [Зеркало](https://proglib.tech/p/uskorte-svoyu-bazu-dannyh-7-proverennyh-metodov-masshtabirovaniya-i-optimizacii-2024-08-13)",5336,18,0,goproglib
5111,2024-08-15 06:01:45+00:00," [**Go 1.23 за 23 минуты**](https://www.bytesizego.com/go-1-23-in-23-minutes) — бесплатный мини-курс от Matt Boyle, включающий все ключевые моменты новой версии языка. 

️ Вы узнаете про:
• Итераторы. Что это такое и что вам нужно знать?
• Изменения в пакетах `slice` и `map`.
• Как новый пакет `unique` может помочь оптимизировать использование памяти.
• В чем заключается новое изменение телеметрии и как его можно (по желанию) включить.",8220,26,3,goproglib
5107,2024-08-14 19:36:45+00:00,"⤵️ **Сократите объем ресурсов и производительность сравнения с помощью нового пакета unique в Go 1.23**

Интернирование (англ. interning), термин, изначально [введенный Lisp](https://en.wikipedia.org/wiki/Interning_(computer_science)), представляет собой процесс хранения только одной копии значения в памяти и совместного использования уникальной ссылки на нее вместо выделения нескольких копий и пустой траты памяти. 

Например, компилятор Go уже выполняет интернирование строковых констант во время компиляции, поэтому вместо выделения нескольких идентичных строк он выделит один экземпляр строки и совместно использует ссылку на него, как показано на первом скрине. 

До Go 1.23 интернирование значений времени выполнения было доступно только через сторонние пакеты. Однако, начиная с Go 1.23, интернирование теперь включено в стандартную библиотеку через новый пакет `unique`. Go-разработчик Joseph Woodward  [демонстрирует](https://josephwoodward.co.uk/2024/08/performance-improvements-unique-package-go-1-23) преимущества нового пакета.",5518,25,5,goproglib
5106,2024-08-14 12:40:00+00:00,"[Golang Библиотека](https://t.me/golangsbook) - канал для скачивания Golang книг на русском и английском языке. 

**Что в нашем канале: 
**1. Книги по GO, которые помогут вам пройти собеседование на позицию Golang Developer.

2. Все книги на русском языке

3. Все книги можно скачать в 2 клика

4. Всё, никакой другой воды.

Подписывайтесь и скачивайте: @golangsbook",5362,5,0,goproglib
5105,2024-08-14 11:03:56+00:00,"** HTTP/0.9 с нуля** — первая часть серии «HTTP с нуля», посвященной истории популярного протокола

Создавая простые реализации каждой основной версии HTTP на Go, вы получите глубокое понимание того, как этот важнейший протокол сформировал Интернет, который мы используем каждый день, и как он превратился в то, что мы имеем сейчас.

 [Читать](https://kmcd.dev/posts/http0.9-from-scratch/)",5733,21,0,goproglib
5104,2024-08-14 07:04:31+00:00,"**Ответьте на 3 вопроса**, чтобы получить вводные занятия к курсу «Алгоритмы и структуры данных»

Получите вводные занятия, ответив на 3 вопроса – https://proglib.io/w/a069d47b    

**На вводной части вас ждут:**

1. Лекция «Производительность алгоритмов» от руководителя разработки Яндекс.Самокатов;

2. Лекция «Итеративные сортировки и линейные сортировки» от аспирант департамента искусственного интеллекта ВШЭ;

3. Практические задания после лекций;

4. Ссылки на дополнительные материалы для самостоятельного изучения.

️Переходите и начинайте учиться уже сегодня – https://proglib.io/w/a069d47b",5147,5,0,goproglib
5103,2024-08-14 05:00:30+00:00," Ну что ж, вот и настал тот самый день релиза Go 1.23.0. Правда, еще вчера 

 [Примечания к выпуску](https://go.dev/doc/go1.23)
⬇️ [Скачать](https://go.dev/dl/#go1.23.0)",5125,21,0,goproglib
5095,2024-08-13 09:03:10+00:00," Matt Holt, разработчик веб-сервера Caddy, выкатил в опенсорс инструмент
**timelinize**. Он организует данные вашей жизни из онлайн-аккаунтов, галереи, телефона и т. д. в единую унифицированную временную шкалу.

Timelinize распознает сущности и создает связи между сущностями и элементами (точками данных). Когда вы импортируете данные из нескольких источников данных/аккаунтов/устройств, инструмент распознает сущности и объединяет их, или вы можете сделать это вручную.

P. S. Проект может быть хорошей возможностью сделать вклад в открытый исходный код.

 [GitHub](https://github.com/timelinize/timelinize)",4889,22,0,goproglib
5094,2024-08-13 06:02:36+00:00,"**Самые полезные каналы для программистов в одной подборке!**

Сохраняйте себе, чтобы не потерять 

Для всех

[Библиотека программиста](https://t.me/proglibrary) — новости, статьи, досуг, фундаментальные темы
[Книги для программистов](https://t.me/progbook)
[IT-мемы](https://t.me/itmemlib)
[Proglib Academy](https://t.me/proglib_academy) — тут мы рассказываем про обучение и курсы
[Азбука айтишника](https://t.me/abc_for_it) — здесь мы познаем азы из мира программирования

Про нейросети
[Библиотека робототехники и беспилотников | Роботы, ИИ, интернет вещей ](https://t.me/robotics_autopilots_iot)
[Библиотека нейрозвука | Транскрибация, синтез речи, ИИ-музыка ](https://t.me/neuroaudio)
[Библиотека нейротекста | ChatGPT, Gemini, Bing ](https://t.me/neuro_text)
[Библиотека нейровидео | Sora AI, Runway ML, дипфейки ](https://t.me/neurovidos)
[Библиотека нейрокартинок | Midjourney, DALL-E, Stable Diffusion ](https://t.me/neurokartinka)

#️⃣C#

[Книги для шарпистов | C#, .NET, F#](https://t.me/csharpprogbook)
[Библиотека шарписта ](https://t.me/csharpproglib)— полезные статьи, новости и обучающие материалы по C#
[Библиотека задач по C#](https://t.me/csharp_problems_lib) — код, квизы и тесты
[Библиотека собеса по C#](https://t.me/csharp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Вакансии по C#, .NET, Unity Вакансии по PHP, Symfony, Laravel](https://t.me/csharpdevjob)

️DevOps

[Библиотека devops’а](https://t.me/devopsslib) — полезные статьи, новости и обучающие материалы по DevOps
[Вакансии по DevOps & SRE](https://t.me/devopssjob)
[Библиотека задач по DevOps](https://t.me/devops_problems_lib) — код, квизы и тесты
[Библиотека собеса по DevOps](https://t.me/devops_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования

PHP

[Библиотека пхпшника](https://t.me/phpproglib) — полезные статьи, новости и обучающие материалы по PHP
[Вакансии по PHP, Symfony, Laravel](https://t.me/phpdevjob)
[Библиотека PHP для собеса](https://t.me/php_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по PHP](https://t.me/php_problems_lib) — код, квизы и тесты

Python

[Библиотека питониста](https://t.me/pyproglib) — полезные статьи, новости и обучающие материалы по Python
[Вакансии по питону, Django, Flask](https://t.me/pydevjob)
[Библиотека Python для собеса](https://t.me/py_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Python](https://t.me/py_problems_lib) — код, квизы и тесты

Java

[Книги для джавистов | Java ](https://t.me/javaprogbook)
[Библиотека джависта](https://t.me/javaproglib) — полезные статьи по Java, новости и обучающие материалы
[Библиотека Java для собеса](https://t.me/java_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Java](https://t.me/java_problems_lib) — код, квизы и тесты
[Вакансии для java-разработчиков](https://t.me/javadevjob)

Data Science

[Книги для дата сайентистов | Data Science](https://t.me/dsprogbook)
[Библиотека Data Science](https://t.me/dsproglib) — полезные статьи, новости и обучающие материалы по Data Science
[Библиотека Data Science для собеса](https://t.me/ds_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Data Science](https://t.me/ds_problems_lib) — код, квизы и тесты
[Вакансии по Data Science, анализу данных, аналитике, искусственному интеллекту](https://t.me/datajob)

Go

[Книги для Go разработчиков](https://t.me/goprogbook)
[Библиотека Go разработчика](https://t.me/goproglib) — полезные статьи, новости и обучающие материалы по Go
[Библиотека Go для собеса](https://t.me/go_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Go](https://t.me/go_problems_lib) — код, квизы и тесты
[Вакансии по Go](https://t.me/godevjob)

C++

[Книги для C/C++ разработчиков](https://t.me/cppprogbook)
[Библиотека C/C++ разработчика](https://t.me/cppproglib) — полезные статьи, новости и обучающие материалы по C++
[Библиотека C++ для собеса](https://t.me/cpp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по C++](https://t.me/cpp_problems_lib) — код, квизы и тесты
[Вакансии по C++](https://t.me/cppdevjob)

Другие каналы

[Библиотека фронтендера](https://t.me/frontendproglib)
[Библиотека мобильного разработчика](https://t.me/mobileproglib)
[Библиотека хакера](https://t.me/hackproglib)
[Библиотека тестировщика](https://t.me/testerlib)
[Вакансии по фронтенду, джаваскрипт, React, Angular, Vue](https://t.me/jsdevjob)
[Вакансии для мобильных разработчиков](https://t.me/mobiledevjob)
[Вакансии по QA тестированию](https://t.me/testerrjob)
[InfoSec Jobs — вакансии по информационной безопасности](https://t.me/hackdevjob)
[Библиотека разработчика игр | Gamedev, Unity, Unreal Engine](https://t.me/gameproglib)

Чтобы добавить папку с нашими каналами, нажмите [сюда](https://t.me/addlist/17y04EbNMrlhNjZi)

Также у нас есть боты:
[Бот с IT-вакансиями](http://t.me/proglib_job_bot)
[Бот с мероприятиями в сфере IT](http://t.me/event_listener_bot)

Мы в других соцсетях:
[VK](https://vk.com/proglib)
[YouTube](https://www.youtube.com/c/%D0%91%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%B0)
[Дзен](https://zen.yandex.ru/proglib)
[Facebook](https://www.facebook.com/proglib/?locale=ru_RU) *
[Instagram](https://www.instagram.com/proglibrary/) *

__* Организация Meta запрещена на территории РФ__",5085,7,0,goproglib
5093,2024-08-12 18:29:02+00:00," Кстати, функция` Fields `в пакете` strings `разбивает строку по одному или нескольким последовательным пробельным символам и возвращает слайс строк.

 [Попробовать](https://go.dev/play/p/LHzA44GFu1q)",7623,39,3,goproglib
5091,2024-08-12 06:03:50+00:00,"** Validating Admission Controller в Kubernetes на Go**: полный** **гайд по разработке **

**Admission controllers предоставляют механизм для проверки или изменения запросов на создание объектов Kubernetes до того, как объект будет фактически создан.

 [Читать гайд](https://golangbot.com/go-kubernetes-validating-admission-controller/)",6031,9,0,goproglib
5090,2024-08-11 12:04:25+00:00," **15 продвинутых лайфхаков для работы в терминале Linux**

Рассказываем, как использовать малоизвестные, но мощные инструменты терминала: от редактирования длинных команд в текстовом редакторе до автоматизации сложных процессов с помощью tmux.

 [Ссылка](https://proglib.io/sh/ZjACtlbieu)",5386,14,0,goproglib
5089,2024-08-11 10:09:08+00:00,"** 10-недельная программа адаптации Go бэкенд-инженера**

Команда Stream [опубликовала](https://stream-wiki.notion.site/Stream-Go-10-Week-Backend-Eng-Onboarding-625363c8c3684753b7f2b7d829bcd67a) программу адаптации, которая используется для Go-разработчиков. 

 Она охватывает: 

• основы и производительность Go;
• базы данных, масштабирование и Redis, общие паттерны для масштабируемости; 
• лучшие практики тестирования; 
• обзор, измерение, ошибки и весь жизненный цикл кода; 
• Raft и WebRTC.",7010,39,0,goproglib
5088,2024-08-10 20:05:01+00:00," **approf** — нативное macOS-приложение для просмотра результатов профилирования [pprof](https://github.com/google/pprof), включающее drag/drop, изменение порядка, светлый/темный режим и сохранение сессий.

 [GitHub](https://github.com/moderato-app/approf)",6571,27,0,goproglib
5087,2024-08-10 10:52:43+00:00," **Oscar: архитектура агента-контрибьютора с открытым исходным кодом** 

Мы [писали ранее](https://t.me/goproglib/5071), что Russ Cox уходит с поста техдира Go, но он не покидает мир Go. На самом деле, он уже глубоко погружен в новый проект.

Russ работает над Oscar, системой ИИ-агентов для поддержки проектов с открытым исходным кодом. Первый бот, Gaby, уже запущен и работает в системе отслеживания проблем Go, и ожидается еще больше.
 
 [Подробнее](https://go.googlesource.com/oscar/+/refs/heads/master/README.md)",6062,22,0,goproglib
5085,2024-08-09 19:52:14+00:00,"‍ **ТОП-7 самых раздражающих вопросов от эйчаров**

Каждому, кто хоть раз проходил собеседование, знакома эта ситуация: сидишь, волнуешься, а тебе задают вопрос, который кажется настолько нелепым, что хочется просто встать и уйти. «Почему вы хотите работать именно у нас?», «Какая ваша самая большая слабость?», «Если бы вы были фруктом, то каким?»

Увы, подобные вопросы — не редкость. В нашей статье разберемся, зачем HR-менеджеры задают такие вопросы и как на них отвечать.

 [Статья](https://proglib.io/sh/1NWJUI0jSD)",5951,2,0,goproglib
5083,2024-08-09 15:27:11+00:00,"️ **Подбираем нужные автозапчасти: миллиарды комбинаций за 12 минут**

Кирилл Егоров, техлид двух юнитов Авито («Запчасти» и «Строительство и ремонт»), делится опытом использования Go для подбора запчастей. 

Вы узнаете, как его команда определяет, к каким автомобилям подходят запчасти из объявлений, как с помощью Go удается перебрать миллиарды вариантов и какие трудности пришлось решить при реализации этого решения.

 [Читать](https://habr.com/ru/companies/avito/articles/833272/)",6610,24,0,goproglib
5081,2024-08-08 13:01:29+00:00," **Иллюзия согласованности в PostgreSQL: как избежать неприятных сюрпризов**

Несмотря на то, что PostgreSQL обеспечивает строгую согласованность данных благодаря использованию многоверсионного параллельного контроля (MVCC), порядок выполнения транзакций может быть неожиданным для клиента. Это может привести к ситуации, когда записи появляются в неправильном порядке. Рассказываем, как и почему это происходит, и что делать для минимизации подобных проблем.

Читать [статью](https://proglib.io/sh/PyJAfoucsE)",5584,3,1,goproglib
5080,2024-08-07 18:02:14+00:00," **Представлены новые релизы Go 1.22.6 и 1.21.13**

Новая версия содержит исправления в компиляторе, компоновщике, командах go, `trace` и `covdata`, а также в пакетах `bytes`, `go/types` и `os/exec`.

 [Анонс](https://groups.google.com/g/golang-announce/c/X4q_-Wf-5g4)
⬇️ [Скачать](https://go.dev/dl/#go1.22.6) 

#новости",8585,12,2,goproglib
5079,2024-08-07 15:50:50+00:00," **9 основных паттернов для проектирования распределенных систем**

В этой статье мы рассмотрим 9 основных паттернов и области их применения, что поможет вам в проектировании высоконагруженных приложений.

Читать [статью](https://proglib.io/sh/8NuhDMXRrd)",5535,8,0,goproglib
5078,2024-08-07 08:13:13+00:00," **Go: жарим общие данные. Атомно, быстро и без мьютексов**

Современные процессоры имеют поддержку атомарных операций, что позволяет на основе них организовывать работу с общими данными до нескольких раз быстрее, чем с помощью общепринятых вариантов. 

Так как мьютексы реализованы на основе ОС, каналы сделаны на основе внутреннего кода Go с использованием тех же мьютексов из ОС под капотом, а атомарные операции делает сам процессор аппаратно за существенно меньшее количество тактов. Об этом и идет речь в статье

 [Читать](https://habr.com/ru/companies/ruvds/articles/833264/)",6654,18,3,goproglib
5077,2024-08-06 20:04:28+00:00,"⬆️🆕 Какой дополнительный soft skill вы бы добавили в список? 
 Как вы развиваете свои soft skills? 

Поделитесь своими мыслями и опытом в комментариях! Самые интересные идеи и предложения мы обязательно включим в статью. Спасибо за участие! ",6215,0,3,goproglib
5075,2024-08-06 17:23:24+00:00," **Страх ошибок: как он мешает вам писать код**

Страх совершить ошибку при внесении изменений в код может серьезно ограничивать профессиональный рост программиста. Как преодолеть этот психологический барьер и стать более эффективным разработчиком? Ответы — в [нашей статье](https://proglib.io/sh/a6xOY5Jwrq).",5883,10,3,goproglib
5074,2024-08-06 12:03:37+00:00,"**️ Как работают массивы в Go и почему могут возникнуть проблемы с циклом for-range**: практический гайд** **для Go-разработчика 

 [Читать](https://victoriametrics.com/blog/go-array/)",6432,20,0,goproglib
5073,2024-08-05 11:03:20+00:00," **5 мифов о работе в IT, которые мешают начать карьеру программиста**

Разоблачаем в нашей статье 5 распространенных мифов о карьере в IT: от замены программистов нейросетями до необходимости технического образования.

 [Ссылка](https://proglib.io/sh/b49Yz0Bvpq)",6361,6,0,goproglib
5072,2024-08-05 08:28:41+00:00," Запуск SMTP-сервера — это на 50% написание кода и на 50% работа с настройками DKIM, SPF и DMARC. В этой статье кофаундер Valyent Alexis Bouchez рассматривает обе стороны. Библиотека [go-smtp](https://github.com/emersion/go-smtp) в конечном итоге выполняет тяжелую работу.

 [Читать гайд](https://valyent.substack.com/p/build-your-own-smtp-server-in-go)",6568,12,0,goproglib
5071,2024-08-04 16:02:39+00:00,"С 1 сентября Austin Clements [займет](https://groups.google.com/g/golang-dev/c/0OqBkS2RzWw?pli=1) пост техдира Go вместо Russ Cox: как команды Go в Google, так и всего проекта Go

В настоящее время он является техдиром того, что можно назвать **Go core**, которое включает в себя toolchain компилятора, runtime и релизы. Cherry Mui возглавит последние направления.

I am not leaving the Go project, but I think the time is right for a change.

 Как думаете, сам уходит или «попросили»?",6854,37,11,goproglib
5070,2024-08-04 05:57:34+00:00," **18 основных паттернов микросервисной архитектуры**

Рассказываем о паттернах, которые представляют собой набор проверенных решений типичных проблем и задач в микросервисной архитектуре. Их правильное применение может значительно улучшить масштабируемость и надежность системы.

Читать [статью](https://proglib.io/sh/JTGIB70iAf)",6083,11,5,goproglib
5069,2024-08-03 06:03:06+00:00," **Подборка лучших статей «Библиотеки программиста» за июль**: сохраняй в заметки, чтобы не пропустить #самыйсок

🆚 [Docker или Podman: что лучше подойдет для вашего проекта](https://proglib.io/p/docker-ili-podman-chto-luchshe-podoydet-dlya-vashego-proekta-2024-07-01)
 [9 гифок, наглядно иллюстрирующих числовые последовательности](https://proglib.io/p/sequences)
 [Как понять, что с компанией точно что-то не так: 11 красных флагов на собеседовании](https://proglib.io/p/kak-ponyat-chto-s-kompaniey-tochno-chto-to-ne-tak-11-krasnyh-flagov-na-sobesedovanii-2024-07-04)
 [Жадные алгоритмы: все, что нужно знать для собеседования](https://proglib.io/sh/Dt5qdU3C1s)
 [5 признаков неопытного разработчика: как избежать типичных ошибок и ускорить профессиональный рост](https://proglib.io/p/5-priznakov-neopytnogo-razrabotchika-kak-izbezhat-tipichnyh-oshibok-i-uskorit-professionalnyy-rost-2024-07-16)
 [Самоучитель по Go для начинающих. Часть 14. Интерфейсы ввода-вывода. Буферизация. Работа с файлами. Пакеты io, bufio, os](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-14-interfeysy-vvoda-vyvoda-buferizaciya-rabota-s-faylami-pakety-io-bufio-os-2024-07-18)",8885,8,0,goproglib
5068,2024-08-02 09:37:44+00:00,"«**Go развивается в неверном направлении**» — заголовок статьи, которых появляется всё больше

На этот раз [высказался](https://itnext.io/go-evolves-in-the-wrong-direction-7dfda8a1a620) Aliaksandr Valialkin, фаундер и основной разработчик VictoriaMetrics, резюмировав

Печально, что Go начал развиваться в сторону увеличения сложности и неявного выполнения кода. Вероятно, нужно перестать добавлять функции, которые усложняют Go, и вместо этого сосредоточиться на основных функциях Go — простоте, производительности и быстродействии.
...
Go гораздо проще в использовании, чем Rust. Разве в таком случае нормально, что Go проигрывает Rust в производительности?

 [Читать перевод](https://habr.com/ru/companies/piter/articles/823496/)

 **А вы что думаете?**",7605,66,30,goproglib
5067,2024-08-01 19:07:35+00:00," **Минимальный набор знаний о concurrency, который нужен каждому разработчику**

Все знания о конкурентности, которые у вас есть, наверняка получены из множества разных источников. 

Если хочется навести порядок в голове и разобраться в сути дела, ловите руководство, которое можно осилить за короткое время.
 
 [Источник](https://bitbashing.io/concurrency-primer.html)",19995,30,1,goproglib
5066,2024-07-31 20:33:13+00:00," **Ключевые аспекты структурирования CLI-приложений на Go**: 

 основы пакета `flag`;
 создание кастомных типов флагов;
 настройка автоматической генерации справки для повышения удобства использования CLI.

 [Читать](https://www.bytesizego.com/blog/idiomatic-go-cli)",8002,14,1,goproglib
5064,2024-07-31 10:01:05+00:00," **Learn Go with Tests: Refactoring Checklist** 

Популярное руководство [Learn Go with Tests](https://quii.gitbook.io/learn-go-with-tests) дополнено новой главой, которая заставит вас задуматься о рефакторинге, о том, когда имеет смысл его проводить, а также о некоторых основных методах.

 [Читать](https://quii.gitbook.io/learn-go-with-tests/testing-fundamentals/refactoring-checklist)",7326,15,1,goproglib
5062,2024-07-30 12:04:16+00:00," **Cogent Core** — ~~очередной~~ новый кроссплатформенный GUI-фреймворк на базе Go, который позиционируется как альтернатива устоявшимся фреймворкам вроде Fyne, Wails, Gio и go-app.

[Блог со статьёй-анонсом](https://www.cogentcore.org/blog/initial-release/) фреймворка представляет собой интерактивное приложение Cogent Core с WebAssembly под капотом. Один и тот же код может быть запущен на macOS, Windows, Linux, iOS, Android с помощью CLI-инструмента, который управляет всеми деталями запуска и создания приложений для каждой платформы.

 [Видеоанонс](https://youtu.be/nZzdy3Kyypk?si=uA0v-4XbCNICDZ8b)
 [Основы разработки GUI с Cogent Core](https://youtu.be/B0QUoIkPQZU?si=yUIc7lKxIVQvUYv7)",7908,31,2,goproglib
5061,2024-07-29 19:29:17+00:00," **Лучший инструмент статического анализа для Go**: обзор от разработчика из DoltHub Nick Tobey

Что вы делаете, если `golint` и `go vet` не могут обнаружить проблемы, о которых вам нужно знать? API Go Analysis предоставляет единый способ выполнения всех видов проверок нашего кода, а `golangci-lint` — это, пожалуй, самая известная коллекция линтеров, использующих этот API.

 [Читать](https://www.dolthub.com/blog/2024-07-24-static-analysis/)",7585,21,1,goproglib
5060,2024-07-28 13:41:52+00:00," **gRPC через HTTP/3**

Хотя gRPC сыграл важную роль в продвижении HTTP/2, для HTTP/3 этого нельзя сказать, хотя HTTP/3 обещает несколько преимуществ, которые, кажется, исключительно хорошо применимы к gRPC-сервисам.

Автор рассматривает, что из себя представляет HTTP/3 и почему он идеально подходит для приложений gRPC. Вас ждут практические примеры на Go, демонстрирующие настройку и тестирование gRPC-серверов и клиентов с использованием HTTP/3.

 [Читать](https://kmcd.dev/posts/grpc-over-http3/)",10746,29,0,goproglib
5059,2024-07-27 20:53:28+00:00,"️ Вышла вторая часть видеогайда Владимира Балуна про** разработку рантайма Go на чистом C**

⏳ **Таймкоды:**
[00:00](https://www.youtube.com/watch?v=FiUMNQsT0kE&t=0s) Введение
[00:09](https://www.youtube.com/watch?v=FiUMNQsT0kE&t=9s) Устройство рантайма Go из предыдущего видео
[00:24](https://www.youtube.com/watch?v=FiUMNQsT0kE&t=24s) Развитие рантайма Go
[01:14](https://www.youtube.com/watch?v=FiUMNQsT0kE&t=74s) Прошлая архитектура рантайма Go
[01:45](https://www.youtube.com/watch?v=FiUMNQsT0kE&t=105s) Новая архитектура рантайма Go
[02:38](https://www.youtube.com/watch?v=FiUMNQsT0kE&t=158s) Реализация новой архитектуры
[06:23](https://www.youtube.com/watch?v=FiUMNQsT0kE&t=383s) Заключение",7904,40,2,goproglib
5053,2024-07-27 12:45:25+00:00," [**LinDB**](https://lindb.io/oss/lindb) — масштабируемая, высокопроизводительная и высокодоступная распределенная база данных временных рядов на базе Go 

К линейке систем баз данных на базе Go присоединяется LinDB — новая база данных временных рядов, ориентированная на производительность и доступность, доступ к которой можно получить через REST API. 

‍ [GitHub](https://github.com/lindb/lindb)",6212,16,5,goproglib
5051,2024-07-26 12:07:34+00:00,"‍ **Создание простых приложений для Mac с помощью Go**

Разработчик DarwinKit Jeff Lindsay рассказывает о новом релизе и делится опытом использования языка для создания простых приложений под Mac. [Кстати, выпуск v0.5.0](https://github.com/progrium/darwinkit/releases/tag/v0.5.0) стал самым крупным за всю историю проекта.

 [Читать](https://dev.to/progrium/how-i-build-simple-mac-apps-using-go-104j)",7034,28,0,goproglib
5050,2024-07-26 07:48:48+00:00,"️**  «Библиотека программиста» находится в поиске автора на написание книжных рецензий**

**Кто нужен?
**● Энтузиасты (джуны и выше), которые которые разбираются в IT
● Любители книг, которые хотели бы получать деньги за чтение и написание рецензий
● Работаем с самозанятыми (компенсируем налог), ИП

Мы предлагаем частичную занятость и полностью **удаленный** формат работы — можно совмещать с основной и находиться в любом месте

️  __Станьте частью нашей команды — присылайте резюме и примеры работ__ hello@proglib.io",6395,9,0,goproglib
5049,2024-07-25 18:05:20+00:00," **Как вы оцениваете свой текущий уровень владения Git?**

 — начальный (основы: clone, commit, push)
 — средний (ветвление, слияние, разрешение конфликтов)
 — продвинутый (rebase, cherry-pick, сложные сценарии слияний)
 — эксперт (внутреннее устройство Git, разработка собственных скриптов и инструментов)
 — свой вариант (напишу в комментариях)

#холивар",6426,274,2,goproglib
5046,2024-07-25 10:01:53+00:00,"️ **Анти-функциональные опции в Go**

Хотя необходимость паттерна «Функциональные опции» весьма очевидна в языке, который не поддерживает аргументы по умолчанию в функциях, чаще всего он излишне усложняет код. Ситуация ухудшается, если вам приходится поддерживать публичный API.

Автор предлагает взглянуть на пример «анти-функциональных опций» в Go, который, по его мнению, упрощает код, улучшает производительность и облегчает понимание API.

 [Читать](https://rednafi.com/go/dysfunctional_options_pattern/)",8821,24,0,goproglib
5045,2024-07-25 07:22:51+00:00,"️**ДАРИМ 40** **000₽** **ЗА ВИДЕО 
**
Конкурс года в «Библиотеке программиста»: смонтируйте короткий вертикальный ролик формата Shorts/Reels* на тему программирования и разработки — лучший автор получит 40 тысяч рублей 

Подробные условия:
️смонтируйте короткий смешной вертикальный ролик (можно и нужно использовать мемы)
️отправьте нам в бота @ProglibContest_bot
️лучшие ролики (по мнению редакции) мы будем выкладывать в канал и в наш инстаграм*
️тот, чей ролик соберет больше всего просмотров в инстаграм*, получит приз — 40 тысяч рублей

Какие ролики мы не принимаем:
не вашего авторства (проверим!)
длинные, невертикальные, несмешные

**Таймлайн**:
2 августа — заканчиваем принимать видео
⬇️
3 августа — начинаем загружать лучшие видео в инстаграм
⬇️
9 августа — подводим итоги

__*Организация Meta признана экстремистской в РФ__",5945,5,0,goproglib
5044,2024-07-24 19:08:47+00:00,"У Go-тимлида в Каруне Антона Околелова, как говорится, накипело. К бесконечным `if err != nil` за всё время работы он до конца привыкнуть так и не смог. В [статье](https://habr.com/ru/companies/karuna/articles/830346/) делится своими мыслями.

 **А вы привыкли?**",6529,61,18,goproglib
5042,2024-07-24 09:29:02+00:00,"** 5 признаков неопытного разработчика: как избежать типичных ошибок и ускорить профессиональный рост**

Независимо от уровня теоретической подготовки, переход от обучения к реальной практике всегда сопряжен с множеством вызовов. Начинающие разработчики часто сталкиваются с рядом типичных проблем, которые могут существенно замедлить их профессиональный рост. 

В этой статье мы рассмотрим наиболее распространенные проблемы, с которыми сталкиваются начинающие разработчики:

 [Читать статью](https://proglib.io/sh/kwe8pjqAN2)",5781,11,1,goproglib
5041,2024-07-23 18:01:56+00:00,"‍  **Профилирование в Go: практическое руководство**

Узкие места производительности могут быть неприятными для отслеживания, особенно в конкурентных приложениях. Go помогает решить эту проблему с помощью инструмента pprof, но вам нужно знать, как его использовать.

 [Читать](https://nyadgar.com/posts/go-profiling-like-a-pro/)",6857,20,0,goproglib
5039,2024-07-22 17:28:19+00:00,"‍  **Освоение принципов SOLID с примерами на Go

**Хотя Go не является чисто объектно-ориентированным языком, мы все равно можем применять принципы SOLID для улучшения кода на Go. Автор углубляется в каждый принцип, исследует его значение и разбирается, как эффективно использовать его в Go.

 [Читать](https://packagemain.tech/p/mastering-solid-principles-with-go)",7667,33,6,goproglib
5038,2024-07-21 20:33:24+00:00,"️ Скоро выйдет **Go 1.23**, а официальные заметки о выпуске довольно сухие. Поэтому Антон Жиянов подготовил интерактивную версию со множеством примеров.

 [Интерактивные заметки о выпуске](https://antonz.org/go-1-23/)",9179,44,2,goproglib
5037,2024-07-21 11:02:29+00:00," __Как эффективно и быстро обработать огромные объемы информации?__ Ответом на этот вызов стала концепция MapReduce, разработанная в недрах Google.

MapReduce — это парадигма программирования, созданная для обработки и генерации больших объемов данных с использованием параллельных распределенных алгоритмов. Основная фича проста: сначала данные разбиваются на небольшие части (фаза Map), а затем результаты этих частей агрегируются в финальный результат (фаза Reduce).

 **Зачем?**

 Масштабируемость: MapReduce позволяет распределять задачи на множество узлов, что значительно ускоряет обработку больших данных.
 Производительность: параллельное выполнение задач маппинга и редьюсинга обеспечивает порой очень высокую скорость обработки.
 Устойчивость к ошибкам: встроенные механизмы MapReduce обеспечивают восстановление после сбоев.
 Простота использования: разработчику нужно лишь определить функции Map и Reduce, а остальное берет на себя фреймворк.

Автор на примерах [разбирается](https://habr.com/ru/companies/otus/articles/828672/) с реализацией MapReduce на Go, какие оптимизации можно применить для улучшения производительности.",7811,25,0,goproglib
5036,2024-07-21 07:54:03+00:00,"**Ответьте на 3 вопроса**, чтобы получить вводные занятия к курсу «Алгоритмы и структуры данных»

Получите вводные занятия, ответив на 3 вопроса – https://proglib.io/w/6ee77144     

**На вводной части вас ждут:**

1. Лекция «Производительность алгоритмов» от руководителя разработки Яндекс.Самокатов;

2. Лекция «Итеративные сортировки и линейные сортировки» от аспирант департамента искусственного интеллекта ВШЭ;

3. Практические задания после лекций;

4. Ссылки на дополнительные материалы для самостоятельного изучения.

️Переходите и начинайте учиться уже сегодня – https://proglib.io/w/6ee77144",6404,3,0,goproglib
5035,2024-07-20 09:40:06+00:00,"‍ **Пакеты Go под капотом**: пополняемая серия руководств

• [context](https://habr.com/ru/articles/827544/)
• [bytes.Buffer](https://habr.com/ru/articles/827550/)
• [bytes](https://habr.com/ru/articles/828044/)",7214,14,0,goproglib
5034,2024-07-19 18:05:32+00:00,"** International Blue Screen Day**

Собрали мини-подборку фото и мемов по мотивам сегодняшних событий. 

#назлобудня",13556,0,0,goproglib
5023,2024-07-19 14:43:38+00:00,"️ **Инструменты сборки для Go 
**
Если стандартные инструменты сборки не справляются с поставленной задачей, ловите подборку опенсорсных инструментов сборки, которые стоит рассмотреть, включая Mage и Taskfile.

 [Читать](https://www.inkmi.com/blog/go-build-tools-make-bazel-just-xc-taskfile-mage)",6251,15,1,goproglib
5022,2024-07-18 21:00:02+00:00," **Самоучитель по Go для начинающих. Часть 14. Интерфейсы ввода-вывода. Буферизация. Работа с файлами. Пакеты io, bufio, os**

В этой статье рассмотрим основные методы ввода-вывода из пакета io, изучим механизм буферизации и его применение в Go, а также разберем, как работать с файлами с помощью пакета os.

 [Читать гайд](https://proglib.io/sh/2s1PSvtxf4)

 **Остальные части в серии:**

1. [Особенности и сфера применения Go, установка, настройка](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-1-osobennosti-i-sfera-primeneniya-go-ustanovka-nastroyka-2023-11-23)
2. [Ресурсы для изучения Go с нуля](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-2-resursy-dlya-izucheniya-go-s-nulya-2023-11-28)
3. [Организация кода. Пакеты, импорты, модули. Ввод-вывод текста.](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-3-organizaciya-koda-pakety-importy-moduli-vvod-vyvod-teksta-2023-12-07)
4. [Переменные. Типы данных и их преобразования. Основные операторы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-4-peremennye-tipy-dannyh-i-ih-preobrazovaniya-osnovnye-operatory-2023-12-14)
5. [Условные конструкции if-else и switch-case. Цикл for. Вложенные и бесконечные циклы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-5-uslovnye-konstrukcii-if-else-i-switch-case-cikl-for-vlozhennye-i-beskonechnye-cikly-2024-01-11)
6. [Функции и аргументы. Области видимости. Рекурсия. Defer](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-6-funkcii-i-argumenty-oblasti-vidimosti-rekursiya-defer-2024-01-24)
7. [Массивы и слайсы. Append и сopy. Пакет slices](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-7-massivy-i-slaysy-append-i-sopy-paket-slices-2024-02-08)
8. [Строки, руны, байты. Пакет strings. Хеш-таблица (map)](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-8-stroki-runy-bayty-paket-strings-hesh-tablica-map-2024-02-15)
9. [Структуры и методы. Интерфейсы. Указатели. Основы ООП](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-8-stroki-runy-bayty-paket-strings-hesh-tablica-map-2024-02-15)
10. [Введение в ООП. Наследование, абстракция, полиморфизм, инкапсуляция](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-10-vvedenie-v-oop-nasledovanie-abstrakciya-polimorfizm-inkapsulyaciya-2024-03-11)
11. [Обработка ошибок. Паника. Восстановление. Логирование](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-11-obrabotka-oshibok-panika-vosstanovlenie-logirovanie-2024-04-16)
12. [Обобщенное программирование. Дженерики](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-12-obobshchennoe-programmirovanie-dzheneriki-2024-05-03)
13. [Работа с датой и временем. Пакет time](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-13-rabota-s-datoy-i-vremenem-paket-time-2024-06-26)",48690,13,7,goproglib
5020,2024-07-18 12:52:30+00:00," **Профилирование в Go: практическое руководство **

Выявляйте узкие места производительности в своих приложениях, профилируя их активность и оптимизируя действия на основе результатов.

 [Читать гайд](https://nyadgar.com/posts/go-profiling-like-a-pro/)",6592,16,0,goproglib
5019,2024-07-17 19:17:14+00:00,"** Работа с аренами: почти избавляемся от GC**

Тимлид в Т-Банке Максим Горозий разбирается в причинах частого торможения программ на языках с GC и делится опытом управления памятью, медитируя над профайлингом, чтобы все работало быстро.

 [Читать](https://habr.com/ru/companies/oleg-bunin/articles/828972/)",6775,22,0,goproglib
5018,2024-07-17 14:05:06+00:00," **Разработка бинарного дерева поиска с помощью SIMD и ассемблера Go **

Когда вам нужно немного больше производительности, чем Go обеспечивает естественным образом, или доступ к базовым функциям ЦП, недоступным в Go, одним из способов сделать это является использование языка ассемблера.

 [Читать гайд](https://clement-jean.github.io/simd_binary_search_tree/)",6184,8,1,goproglib
5016,2024-07-16 17:25:32+00:00," Представлен **второй релиз-кандидат Go 1.23** 

 [Анонс](https://groups.google.com/g/golang-announce/c/jW315Nz132s)
 [Скачать](https://go.dev/dl/#go1.23rc2)

```$ go install golang.org/dl/go1.23rc2@latest 
$ go1.23rc2 download
```

#новости",5927,13,0,goproglib
5015,2024-07-15 13:30:15+00:00," **Как понять, что с компанией точно что-то не так: 11 красных флагов на собеседовании**

В этой статье мы расскажем о красных флагах, которые могут сигнализировать о серьезных проблемах в компании и помочь вам сделать правильный выбор.

Читать [статью](https://proglib.io/sh/708uC9voEk)",5811,7,15,goproglib
5014,2024-07-15 10:30:06+00:00,"‍ **bytes.Buffer по полкам**

`Buffer` — это буфер с переменным размером, который может быть использован для чтения и записи данных. При инициализации буфера с нулевым значением, он будет пустым и готовым к использованию.

Поля структуры `Buffer` в Go используются для управления внутренним состоянием буфера при чтении и записи данных.

 [Читать подробнее о внутреннем строении буфера](https://habr.com/ru/articles/827550/)",6257,9,9,goproglib
5013,2024-07-14 19:03:14+00:00,"↪️ **Communicating Sequential Processes**

Don't communicate by sharing memory, share memory by communicating.

Не пытайтесь передавать данные между горутинами через shared memory, которая защищена сложным нагромождением мьютексов, склонных к ошибкам. Это быстро приведёт к адским проблемам отладки конкурентного кода.

Вместо этого, пусть горутины используют свою локальную память и обмениваются данными, отправляя значения.

Это работает хорошо... до тех пор, пока вы не решите создать канал мап или канал срезов. Внезапно возникают data races.

 Почему?

Мапы и срезы — это типы данных, которые содержат указатели. Эти указатели ссылаются на места в памяти, где хранятся реальные данные.

И вот в чём подвох:

Go строго передаёт данные по значению (независимо от того, передаются ли данные функции или через канал).

Указатель — это всего лишь значение. На самом деле, указатель — это просто целое число без знака, которое представляет адрес ячейки памяти.

Поэтому, когда Go отправляет мапу или срез через канал, внутренний указатель также копируется. Глубокое клонирование не происходит. 

Теперь существуют два указателя в разных горутинах, которые указывают на одно и то же место в памяти. Один в отправляющей горутине, а другой — в принимающей. 

TL;DR:
 Никогда не отправляйте через канал ничего, что содержит указатель. Ни мапы, ни срезы, ни структуры с полями-указателями.
 Отправляйте примитивные типы данных, строки (они неизменяемы), структуры с простыми полями-значениями или массивы.",6656,32,37,goproglib
5012,2024-07-14 07:18:54+00:00," **Стоит ли использовать sqlc в 2024 году для проектов на Go**

Что использовать для доступа к реляционной базе данных? Обычный SQL, ORM или генератор кода SQL-first, например **sqlc**? Почему бы не спросить кого-нибудь, кто использует этот метод в течение многих лет. 

 [Читать статью](https://brandur.org/fragments/sqlc-2024)",6102,14,0,goproglib
5008,2024-07-13 16:51:15+00:00," **Обработка ошибок в веб-приложениях Go **

Полезный паттерн обработки ошибок для REST, gRPC и других Go-сервисов.

 [Читать гайд](https://boldlygo.tech/posts/2024-01-08-error-handling/)",5613,14,5,goproglib
5007,2024-07-13 06:00:25+00:00,"**Самые полезные каналы для программистов в одной подборке!**

Сохраняйте себе, чтобы не потерять 

Для всех

[Библиотека программиста](https://t.me/proglibrary) — новости, статьи, досуг, фундаментальные темы
[Книги для программистов](https://t.me/progbook)
[IT-мемы](https://t.me/itmemlib)
[Proglib Academy](https://t.me/proglib_academy) — тут мы рассказываем про обучение и курсы
[Азбука айтишника](https://t.me/abc_for_it) — здесь мы познаем азы из мира программирования

Про нейросети
[Библиотека робототехники и беспилотников | Роботы, ИИ, интернет вещей ](https://t.me/robotics_autopilots_iot)
[Библиотека нейрозвука | Транскрибация, синтез речи, ИИ-музыка ](https://t.me/neuroaudio)
[Библиотека нейротекста | ChatGPT, Gemini, Bing ](https://t.me/neuro_text)
[Библиотека нейровидео | Sora AI, Runway ML, дипфейки ](https://t.me/neurovidos)
[Библиотека нейрокартинок | Midjourney, DALL-E, Stable Diffusion ](https://t.me/neurokartinka)

#️⃣C#

[Книги для шарпистов | C#, .NET, F#](https://t.me/csharpprogbook)
[Библиотека шарписта ](https://t.me/csharpproglib)— полезные статьи, новости и обучающие материалы по C#
[Библиотека задач по C#](https://t.me/csharp_problems_lib) — код, квизы и тесты
[Библиотека собеса по C#](https://t.me/csharp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Вакансии по C#, .NET, Unity Вакансии по PHP, Symfony, Laravel](https://t.me/csharpdevjob)

️DevOps

[Библиотека devops’а](https://t.me/devopsslib) — полезные статьи, новости и обучающие материалы по DevOps
[Вакансии по DevOps & SRE](https://t.me/devopssjob)
[Библиотека задач по DevOps](https://t.me/devops_problems_lib) — код, квизы и тесты
[Библиотека собеса по DevOps](https://t.me/devops_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования

PHP

[Библиотека пхпшника](https://t.me/phpproglib) — полезные статьи, новости и обучающие материалы по PHP
[Вакансии по PHP, Symfony, Laravel](https://t.me/phpdevjob)
[Библиотека PHP для собеса](https://t.me/php_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по PHP](https://t.me/php_problems_lib) — код, квизы и тесты

Python

[Библиотека питониста](https://t.me/pyproglib) — полезные статьи, новости и обучающие материалы по Python
[Вакансии по питону, Django, Flask](https://t.me/pydevjob)
[Библиотека Python для собеса](https://t.me/py_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Python](https://t.me/py_problems_lib) — код, квизы и тесты

Java

[Книги для джавистов | Java ](https://t.me/javaprogbook)
[Библиотека джависта](https://t.me/javaproglib) — полезные статьи по Java, новости и обучающие материалы
[Библиотека Java для собеса](https://t.me/java_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Java](https://t.me/java_problems_lib) — код, квизы и тесты
[Вакансии для java-разработчиков](https://t.me/javadevjob)

Data Science

[Книги для дата сайентистов | Data Science](https://t.me/dsprogbook)
[Библиотека Data Science](https://t.me/dsproglib) — полезные статьи, новости и обучающие материалы по Data Science
[Библиотека Data Science для собеса](https://t.me/ds_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Data Science](https://t.me/ds_problems_lib) — код, квизы и тесты
[Вакансии по Data Science, анализу данных, аналитике, искусственному интеллекту](https://t.me/datajob)

Go

[Книги для Go разработчиков](https://t.me/goprogbook)
[Библиотека Go разработчика](https://t.me/goproglib) — полезные статьи, новости и обучающие материалы по Go
[Библиотека Go для собеса](https://t.me/go_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Go](https://t.me/go_problems_lib) — код, квизы и тесты
[Вакансии по Go](https://t.me/godevjob)

C++

[Книги для C/C++ разработчиков](https://t.me/cppprogbook)
[Библиотека C/C++ разработчика](https://t.me/cppproglib) — полезные статьи, новости и обучающие материалы по C++
[Библиотека C++ для собеса](https://t.me/cpp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по C++](https://t.me/cpp_problems_lib) — код, квизы и тесты
[Вакансии по C++](https://t.me/cppdevjob)

Другие каналы

[Библиотека фронтендера](https://t.me/frontendproglib)
[Библиотека мобильного разработчика](https://t.me/mobileproglib)
[Библиотека хакера](https://t.me/hackproglib)
[Библиотека тестировщика](https://t.me/testerlib)
[Вакансии по фронтенду, джаваскрипт, React, Angular, Vue](https://t.me/jsdevjob)
[Вакансии для мобильных разработчиков](https://t.me/mobiledevjob)
[Вакансии по QA тестированию](https://t.me/testerrjob)
[InfoSec Jobs — вакансии по информационной безопасности](https://t.me/hackdevjob)
[Библиотека разработчика игр | Gamedev, Unity, Unreal Engine](https://t.me/gameproglib)

Чтобы добавить папку с нашими каналами, нажмите [сюда](https://t.me/addlist/17y04EbNMrlhNjZi)

Также у нас есть боты:
[Бот с IT-вакансиями](http://t.me/proglib_job_bot)
[Бот с мероприятиями в сфере IT](http://t.me/event_listener_bot)

Мы в других соцсетях:
[VK](https://vk.com/proglib)
[YouTube](https://www.youtube.com/c/%D0%91%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%B0)
[Дзен](https://zen.yandex.ru/proglib)
[Facebook](https://www.facebook.com/proglib/?locale=ru_RU) *
[Instagram](https://www.instagram.com/proglibrary/) *

__* Организация Meta запрещена на территории РФ__",6227,2,0,goproglib
5006,2024-07-12 05:58:14+00:00,"__ __**Жадные алгоритмы: все, что нужно знать для собеседования**

Жадные алгоритмы позволяют эффективно решать определенный спектр оптимизационных задач. Однако их применение требует тщательного анализа задачи и структуры обрабатываемых данных, так как жадный подход не всегда гарантирует оптимальное решение. 

В этой статье мы рассмотрим основные принципы работы жадных алгоритмов, их преимущества и недостатки, а также разберем несколько практических примеров их применения.

 [Читать статью ](https://proglib.io/sh/Dt5qdU3C1s)
 [Зеркало](https://proglib.tech/p/zhadnye-algoritmy-vse-chto-nuzhno-znat-dlya-sobesedovaniya-2024-07-08)",61836,3,2,goproglib
5005,2024-07-11 20:08:13+00:00,"Привет, друзья! 

Мы готовим статью о самых раздражающих вопросах на собеседованиях и хотим узнать ваше мнение! 

 Какой вопрос на собеседовании вы считаете самым бесящим или нелепым? Почему?
 Как вы обычно отвечаете на вопрос «Расскажите о своих недостатках»? Поделитесь своими лайфхаками!
 Какой самый неожиданный или креативный вопрос вам задавали на собеседовании? Как вы на него ответили?

Ваши ответы помогут другим кандидатам подготовиться к собеседованиям! Самые интересные истории и советы попадут в нашу статью.

Ждём ваших комментариев! ",6183,4,11,goproglib
5003,2024-07-11 16:15:28+00:00," **Использование PGO для Go-приложений**

Мы публиковали множество примеров улучшений, которые разные команды увидели при использовании PGO. 

Но под катом вам ждет общее мнение Google о том, как приступить к работе самостоятельно, прежде чем вы углубитесь в документацию.

 [Читать](https://cloud.google.com/blog/products/application-development/using-profile-guided-optimization-for-your-go-apps)",7068,13,1,goproglib
5002,2024-07-10 20:09:29+00:00," **CxGo** — инструмент для транспиляции C в Go. Он использует [cc v3](https://pkg.go.dev/modernc.org/cc/v3) для предварительной обработки и анализа C (без зависимостей `clang/gcc`), а также настраиваемый модуль проверки типов и слой трансляции AST для получения наилучшего возможного результата.

 [GitHub](https://github.com/gotranspile/cxgo) & [Демо](https://gotranspile.dev/)",6786,23,1,goproglib
5000,2024-07-10 12:00:47+00:00,"‍ **Локальное исправление зависимостей в Go**

Eli Bendersky разбирает различные методы локального исправления зависимостей в Go, акцентируя внимание на нескольких подходах, включая использование директивы `replace` в `go.mod`, Go workspaces (`go.work`) и инструмент [gohack](https://github.com/rogpeppe/gohack). 

Они помогут быстро и эффективно вносить временные изменения в зависимости для отладки или проверки кода.
 
 [Читать](https://eli.thegreenplace.net/2024/locally-patching-dependencies-in-go/)",6892,7,0,goproglib
4999,2024-07-09 18:09:10+00:00,"Привет, друзья! 

Мы готовим статью о влиянии страха ошибок на работу программистов и хотим услышать ваше мнение! 

 Как вы справляетесь со страхом совершить ошибку в коде?
️ Какие инструменты или практики в вашей команде помогают уменьшить страх перед внесением изменений в код?
 Как вы превращаете свои ошибки в возможности для роста и развития?

 Поделитесь своим опытом! Ваши ответы могут помочь другим разработчикам! Лучшие идеи войдут в нашу статью.",6826,13,4,goproglib
4998,2024-07-09 14:04:46+00:00,"‍ Расс Кокс экспериментирует с ботом Gaby для автоматизации рутинных задач в Go issue tracker. Основная цель эксперимента — исследование эффективного использования больших языковых моделей (LLM), включая их ограничения. 

Часть функционала Gaby использует LLM, а часть — нет. Принцип работы бота — помощь мейнтейнерам проекта с использованием LLM, когда это полезно.

 [Документация](https://pkg.go.dev/rsc.io/gaby)
‍ [GitHub](https://github.com/rsc/gaby)",6583,10,0,goproglib
4997,2024-07-08 20:02:33+00:00," **500 миллионов HTTP-запросов на 2,5 миллиона хостов всего за пару часов**

Yes, I tried implementing it in Rust, but unfortunately, my brain is too small for async tokio types magic. Go, on the other hand, allowed the JS developer to write this whole thing, this is quite a statement about the language.

Этичный хакер и JavaScript-разработчик выбрал именно Go для решения этой задачи. Узнайте подробнее, какой подход он использовал, какие ограничения учитывал и как оптимизировал проект.

 [Читать](https://www.moczadlo.com/2024/how-i-sent-500-million-http-requests-in-under-24h)",9384,25,0,goproglib
4996,2024-07-08 17:51:36+00:00,"** 9 гифок, наглядно иллюстрирующих числовые последовательности

**Наш преподаватель Алексей Никитин делится своими знаниями по мат. анализу, важнейший раздел: __числовые последовательности__. Алексей Никитин — Кандидат физико-математических наук, доцент факультета ВМК МГУ. Он приложил немало усилий в создании раздела по мат. анализу нашего курса:
 [Математика для Data Science](https://proglib.academy/mathspro?utm_source=tg_academy&utm_medium=post_9gifNaglyadno)

 [Ссылка на статью](https://proglib.io/p/sequences)",6023,0,0,goproglib
4994,2024-07-07 20:13:31+00:00,"️ **SOLID в Go и щепотка паттернов**

Согласны ли вы с мнением, что настоящее понимание принципов SOLID приходит, когда ты видишь, как реализация одного принципа в коде неизбежно приводит к применению второго и третьего? Если согласны, добро пожаловать под кат

 [Читать](https://habr.com/ru/companies/domclick/articles/816885/)",8070,21,2,goproglib
4991,2024-07-07 06:52:50+00:00,"‍ В выпущенной в апреле [GoLand 2024.1](https://blog.jetbrains.com/go/2024/04/04/goland-2024-1-is-out/) кроме поддержки некоторых новых функций Go 1.22 добавили еще несколько полезных возможностей: 

️  Полнострочное автодополнение кода — новая функцию, которая автоматически дополняет целые строки кода с использованием локально запущенных контекстно-зависимых моделей глубокого обучения ИИ
️ Удаленная разработка: подсветка, рендеринг и общая плавность удаленной разработки теперь близки к тому, что вы испытываете при локальном программировании
️ Поддержка контейнеров разработки: IDE теперь полностью поддерживает dev-контейнеры и упрощает редактирование файла `devcontainer.json`",5825,56,1,goproglib
4989,2024-07-06 11:00:31+00:00,"️ Go-инструмент [River](https://riverqueue.com/) предоставляет атомарный, transaction-safe, надежный механизм организации очередей заданий для Go-приложений. Поддерживает PostgreSQL и рассчитан на масштабирование.

Недавно релизнулась версия [0.9,](https://github.com/riverqueue/river/releases) но самым крупным последним дополнением стал [River UI](https://riverqueue.com/blog/announcing-river-ui) — простой способ непосредственного мониторинга и визуализации того, что делает River.",7234,15,0,goproglib
4988,2024-07-05 19:31:26+00:00,"🆚 **Docker или Podman: что лучше подойдет для вашего проекта**

Контейнеризация приложений — одна из самых важных технологий в современной разработке. За последние 10 лет стандартом и синонимом контейнеризации стал Docker. Однако недавно у Docker появился мощный опенсорсный соперник — Podman, который во многом его превосходит.

Читать [статью](https://proglib.io/sh/uCNGr21J48)",5848,6,9,goproglib
4986,2024-07-05 11:21:11+00:00,"️ **Диагностическое логирование в режиме реального времени **

Обзор некоторых кейсов временного включения подробного логирования для устранения неполадок и обеспечения доступа к этим логам из любого места и в режиме реального времени.

 [Читать](https://evilmartians.com/chronicles/realtime-diagnostic-logging-or-how-to-really-spy-on-your-go-web-apps)",6323,8,0,goproglib
4985,2024-07-04 19:14:14+00:00,"**Мы пишем статью о способах измерения личностного роста программистов и нам нужна ваша помощь! **

 Какие метрики вы используете для оценки своего прогресса?
 Как вы понимаете, что выросли профессионально?
 Есть ли у вас свои уникальные способы отслеживания развития?

 **Поделитесь вашим опытом в комментариях!** Лучшие идеи попадут в нашу статью!

#интерактив",6371,14,5,goproglib
4984,2024-07-04 11:06:59+00:00,"‍ **Generic collection types на Go**: недостающая документация

В Go 1.18 появились дженерики, но Zach Musgrave (разработчик в DoltHub) обнаружил, что практических примеров и документации по данной теме не хватает. К счастью, он провел несколько экспериментов и поделился тем, что узнал после многих часов работы.

 [Читать гайд](http://dolthub.com/blog/2024-07-01-golang-generic-collections/)",6781,19,0,goproglib
4982,2024-07-03 12:24:25+00:00,"**APT-группировка ExCobalt снова в обойме и обзавелась новым бэкдором на Go**

В ходе расследования одного из инцидентов команда PT Expert Security Center нашла следы новой версии Go-инструмента, который встречался ранее в ряде российских компаний. 

О главных особенностях хакерского инструмента и том, как его удалось найти и привязать к ExCobalt, читайте в статье или отчете

 [Читать полный отчет](https://www.ptsecurity.com/ru-ru/research/pt-esc-threat-intelligence/ex-cobalt-go-red-tehnika-skrytogo-tunnelya/)
️‍ [Читать основные выжимки ](https://habr.com/ru/companies/pt/articles/825256/)

#hacking #blueteam",6697,10,0,goproglib
4980,2024-07-03 10:24:48+00:00," **Представлены релизы Go 1.22.5 и 1.21.12**

 Новый выпуск включает исправления безопасности для `net/http`.

 [Анонс](https://groups.google.com/g/golang-announce/c/gyb7aM1C9H4)
⬇️ [Скачать](https://go.dev/dl/#go1.22.5) 

#новости",5891,10,0,goproglib
4978,2024-07-02 18:23:21+00:00," **Сравнение моделей конкурентности в Rust и Go**

Краткие заметки о stackless и stackful корутинах.

 [Читать](https://kerkour.com/rust-vs-go-concurrency-models-stackfull-vs-stackless-coroutines)",6020,17,0,goproglib
4975,2024-07-02 14:01:52+00:00," **Подборка лучших статей «Библиотеки программиста» за июнь**: сохраняй в заметки, чтобы не пропустить #самыйсок

 [Самоучитель по Go для начинающих. Часть 13. Работа с датой и временем. Пакет time](https://proglib.io/sh/vMZAsKHzqP)
 [ТОП-15 самых востребованных профессий в ИТ: куда все катится в 2024 году](https://proglib.io/p/top-15-samyh-vostrebovannyh-professiy-v-it-kuda-vse-katitsya-v-2024-godu-2024-05-30)
️ [Топовая задачка на Stack Overflow: как найти k пропущенных чисел в потоке данных](https://proglib.io/sh/qxkbGjyDEh)
 [Создаём бота-автоответчика для Telegram на ChatGPT и Aiogram 3: пошаговое руководство](https://proglib.io/sh/4f2IOWytmP)
 [Продвинутый SQL: секреты профессионалов](https://proglib.io/sh/YtSeDQuIax)
️ [10 незаменимых плагинов для VS Code в 2024 году](https://proglib.io/sh/jd7sDNwHJ5)
 [Отклик на вакансию по email: как сделать так, чтобы ваше письмо выделялось](https://proglib.io/sh/j6rMKRZfVN)
 [Как стать мидлом за 3 года: 12 советов джунам](https://proglib.io/p/kak-stat-midlom-za-3-goda-12-sovetov-dzhunam-2024-06-11)
⭐ [13 ресурсов, чтобы выучить математику](https://proglib.io/w/cc270911)
#️⃣ [Логические и математические задачи с собеседований](https://proglib.io/w/45a4c80d)",6456,7,0,goproglib
4974,2024-07-02 12:34:22+00:00,"**️Вакансии «Библиотеки программиста» — ждем вас в команде!
**
Мы постоянно растем и развиваемся, поэтому создали отдельную [страницу](https://ad.proglib.io/vacancy), на которой будут размещены наши актуальные вакансии. Сейчас мы ищем:
авторов в наше медиа proglib.io
контент-менеджеров для ведения телеграм-каналов

Подробности [тут](https://ad.proglib.io/vacancy).

Мы предлагаем частичную занятость и полностью удаленный формат работы — можно совмещать с основной и находиться в любом месте

Ждем ваших откликов ",6095,1,0,goproglib
4973,2024-07-01 18:01:40+00:00,"‍ **Шпаргалка по Go** от команды 
Zero To Mastery для студентов Golang Bootcamp

 [Источник](https://zerotomastery.io/cheatsheets/golang-cheat-sheet/)",7230,21,0,goproglib
4972,2024-07-01 12:40:39+00:00," **Profile-guided optimisation** **на практике** 

Целесообразность и выгоды от включения PGO в ваших Go-сервисах могут варьироваться в зависимости от их характеристик, архитектуры и доступных механизмов поддержки.

У команды Grab, например, включение PGO привело к значительному снижению использования ЦП, памяти и объема данных для распределенной БД TalariaDB. Напротив, в случае с сервисом Catwalk улучшение составило всего 5%.

Под катом инженеры из Grab делятся достижениями и некоторыми советами.

 [Читать](https://engineering.grab.com/profile-guided-optimisation)",7231,6,0,goproglib
4971,2024-06-30 18:02:35+00:00,"** Go gamedev**: низкоуровневое API рисования в Ebitengine

Искандер Шарипов [продолжает](https://t.me/goproglib/4494) делиться опытом разработки игр на Go. Из нового материала вы узнаете, когда и как стоит использовать функцию Ebitengine под названием DrawTriangles. 

Есть как минимум два случая, когда DrawTriangles будет к месту:

 Генерации графики через шейдер [(DrawTrianglesShader).](https://pkg.go.dev/github.com/hajimehoshi/ebiten/v2#Image.DrawTrianglesShader)
 Рисование сразу нескольких одинаковых изображений за один вызов.

 [Читать](https://habr.com/ru/articles/825450/)

#геймдев",8273,10,0,goproglib
4970,2024-06-30 09:05:06+00:00,"** Обновление Go-модулей: практическое руководство от Карлоса Беккера

**Один из разработчиков Charm и автор GoReleaser делится несколькими быстрыми советами по изменению версий в `go.mod`.**

 **[Читать](https://carlosbecker.com/posts/pragmatic-gomod-bump/)",6425,7,0,goproglib
4969,2024-06-29 20:40:00+00:00," **Самоучитель по Go для начинающих. Часть 13. Работа с датой и временем. Пакет time**

В этой части самоучителя изучим способы работы с датами и временем в языке Go, разберем полезные функции пакета time и в заключение решим парочку интересных задач.

 [Читать гайд](https://proglib.io/sh/vMZAsKHzqP)

 **Остальные части в серии:**

1. [Особенности и сфера применения Go, установка, настройка](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-1-osobennosti-i-sfera-primeneniya-go-ustanovka-nastroyka-2023-11-23)
2. [Ресурсы для изучения Go с нуля](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-2-resursy-dlya-izucheniya-go-s-nulya-2023-11-28)
3. [Организация кода. Пакеты, импорты, модули. Ввод-вывод текста.](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-3-organizaciya-koda-pakety-importy-moduli-vvod-vyvod-teksta-2023-12-07)
4. [Переменные. Типы данных и их преобразования. Основные операторы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-4-peremennye-tipy-dannyh-i-ih-preobrazovaniya-osnovnye-operatory-2023-12-14)
5. [Условные конструкции if-else и switch-case. Цикл for. Вложенные и бесконечные циклы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-5-uslovnye-konstrukcii-if-else-i-switch-case-cikl-for-vlozhennye-i-beskonechnye-cikly-2024-01-11)
6. [Функции и аргументы. Области видимости. Рекурсия. Defer](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-6-funkcii-i-argumenty-oblasti-vidimosti-rekursiya-defer-2024-01-24)
7. [Массивы и слайсы. Append и сopy. Пакет slices](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-7-massivy-i-slaysy-append-i-sopy-paket-slices-2024-02-08)
8. [Строки, руны, байты. Пакет strings. Хеш-таблица (map)](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-8-stroki-runy-bayty-paket-strings-hesh-tablica-map-2024-02-15)
9. [Структуры и методы. Интерфейсы. Указатели. Основы ООП](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-8-stroki-runy-bayty-paket-strings-hesh-tablica-map-2024-02-15)
10. [Введение в ООП. Наследование, абстракция, полиморфизм, инкапсуляция](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-10-vvedenie-v-oop-nasledovanie-abstrakciya-polimorfizm-inkapsulyaciya-2024-03-11)
11. [Обработка ошибок. Паника. Восстановление. Логирование](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-11-obrabotka-oshibok-panika-vosstanovlenie-logirovanie-2024-04-16)
12. [Обобщенное программирование. Дженерики](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-12-obobshchennoe-programmirovanie-dzheneriki-2024-05-03)",28566,31,0,goproglib
4968,2024-06-29 05:50:06+00:00,"** Выжимаем из Go максимум производительности: **по мотивам [доклада](https://www.youtube.com/watch?v=QMC9Kg4Ogxg) на** **__Saint HighLoad++__

Никита Галушко, старший разработчик в отделе высоконагруженных систем и оптимизации ВКонтакте, делится хитростями повышения производительности Go.

 Вы узнаете:

• про память, а именно про small-size объекты и интерфейс;
• как сильно может влиять на производительность BCE (Bounds Check Elimination) и почему не все циклы `for`-`loop` одинаково полезны;
• про особенности, которые текущий компилятор Go накладывает на код;
• про оптимальную конвертацию `string` -> `[]byte` и `[]byte` -> `string`, конкатенацию и связанные с ней оптимизации.

 [Читать статю](https://habr.com/ru/companies/vk/articles/824484/)",10972,33,0,goproglib
4967,2024-06-28 19:57:09+00:00," **Отклик на вакансию по email: как сделать так, чтобы ваше письмо выделялось**

Вы отправляете десятки откликов на вакансии, но не получаете ответа? Возможно, дело в том, как вы пишете свои письма. Узнайте, какие ошибки могут стоить вам работы мечты и как их избежать.

 [Статья](https://proglib.io/sh/j6rMKRZfVN)",5769,2,1,goproglib
4964,2024-06-28 11:23:08+00:00,"️ **Kubernetes client-go examples** — репозиторий с примерами, демонстрирующих различные юзкейсы [client-go](https://github.com/kubernetes/client-go) (Go-клиент для Kubernetes), дополненные [предварительно настроенной средой онлайн-разработки](https://labs.iximiuz.com/playgrounds/k8s-client-go/).

Главная цель — протестировать свежую версию Go и пакетов k8s.io на основе поддерживаемых в настоящее время веток выпуска Kubernetes.

 [GitHub](https://github.com/iximiuz/client-go-examples)",6759,15,0,goproglib
4962,2024-06-27 15:02:32+00:00,"️ **10 незаменимых плагинов для VS Code в 2024 году**

Огромная популярность Visual Studio Code во многом связана с его расширяемостью: функциональность редактора можно существенно нарастить за счет установки дополнительных плагинов. 

В этой статье мы рассмотрим 10 суперполезных расширений, которые значительно упростят работу с кодом и повысят вашу продуктивность.

 [Читать статью](https://proglib.io/sh/jd7sDNwHJ5) 
 [Зеркало](https://proglib.tech/p/10-nezamenimyh-plaginov-dlya-vs-code-2024-06-24)",6029,27,4,goproglib
4961,2024-06-27 06:02:16+00:00,"** Структурирование кода для CLI-приложения на Go: **введение

Перед вами мини-гайд, в котором описаны первые шаги для разработки нового приложения Go CLI, начиная с некоторых наиболее популярных способов структурирования кода, описывая каждый из них и взвешивая их плюсы и минусы. 

Вы узнаете про концепцию предметно-ориентированного проектирования и рассмотрите, как Cobra CLI может создавать каркас для CLI-приложений, упрощая процесс начальной настройки.

 [Читать](https://www.bytesizego.com/blog/structure-go-cli-app)",6525,18,0,goproglib
4960,2024-06-26 19:06:32+00:00,"**️ Подкаст Go Time**: Как все делается в команде Go

К ведущей подкаста Go Time присоединились Cameron Balahan, Sameer Ajmani и Russ Cox из команды Go, чтобы обсудить внутреннюю «кухню» разработки языка и как они решают, что улучшить.

P. S. У этого выпуска также есть транскрибация для удобства перевода.

▶ [Слушать](https://changelog.com/gotime/318)",6407,9,0,goproglib
4959,2024-06-26 12:39:17+00:00," Несколько дней назад был представлен первый релиз-кандидат Go 1.23. Из [анонса](https://groups.google.com/g/golang-announce/c/8ciOP5ve_CM/m/fg9_BQpdFgA) вы не узнаете ничего нового, а вот проект [примечаний к выпуску](https://tip.golang.org/doc/go1.23) был немного детализирован.

 [Скачать](https://go.dev/dl/#go1.23rc1)",6405,12,0,goproglib
4957,2024-06-25 18:04:13+00:00,"Привет, друзья! 

Мы готовим статью о типичных ошибках начинающих разработчиков. И нам очень нужна ваша помощь! 

Поделитесь своим опытом и мнением в комментариях:
С какими сложностями вы сталкивались в начале своего пути в разработке?
Какие ошибки допускали и как их исправляли?
Что помогло вам быстрее расти профессионально?

Самые интересные и полезные советы мы обязательно включим в статью, а их авторов упомянем в публикации! ",6810,1,0,goproglib
4955,2024-06-25 16:35:41+00:00," **Три способа использования каналов в Go**

Каналы кажутся тривиальными на первый взгляд, но на самом деле их использование требует понимания всей экосистемы конкурентности Go. 

С таким пониманием вы сможете выбрать правильные примитивы для вашего юзкейса и не оказаться в ловушке мира взаимных блокировок. Под катом — взгляд на каналы от Макса Хоффмана из Dolthub.

 [Читать](https://www.dolthub.com/blog/2024-06-21-channel-three-ways/)",7319,11,0,goproglib
4954,2024-06-25 11:39:54+00:00,"️ **Coolify** — опенсорсная & self-hostable альтернатива Heroku, Netlify и Vercel. Инструмент поможет вам управлять вашими серверами, приложениями и базами данных на вашей VPS, Bare Metal, Raspberry PI и чем угодно. Все, что вам нужно, это SSH-соединение.

 [GitHub](https://github.com/coollabsio/coolify) & [Сайт](https://coolify.io/)",6940,0,0,goproglib
4949,2024-06-24 06:09:55+00:00,"️ **Ужасно подробные ошибки в API**: пишем на Go инструмент для работы с ними

Александр Лырчиков, разработчик системы хранения данных [TATLIN.UNIFIED](https://yadro.com/ru/tatlin/unified) в YADRO, делится опытом разработки инструмента для обработки ошибок Terror (TATLIN + error).

Инструмент может пригодиться, когда в вашем приложении переданных сообщений и HTTP-кодов не будет хватать. Он поможет сделать работу с кодом проще, а пользователи получат понятное описание ошибки и локализацию текста на разные языки. 

 [Читать](https://habr.com/ru/companies/yadro/articles/817719/)",7015,17,2,goproglib
4948,2024-06-23 14:02:36+00:00," **Продвинутый SQL: секреты профессионалов**

Рассказываем о сложных стратегиях оптимизации запросов, продвинутых типах соединений и тонкостях использования SELECT.

Читать [статью](https://proglib.io/sh/YtSeDQuIax)

#туториал",5829,7,0,goproglib
4943,2024-06-23 11:02:25+00:00," **Aqua** — декларативный менеджер версий CLI, написанный на Go

Унифицируйте версии инструментов в командах, проектах и ​​CI. Легко, безболезненно и безопасно.

 [GitHub](https://github.com/aquaproj/aqua) & [Документация](https://aquaproj.github.io/docs/) & [Демо](https://asciinema.org/a/498262?autoplay=1)",5653,7,0,goproglib
4942,2024-06-22 20:53:19+00:00,"️ **Паттерн Transactional Outbox**: теория и практика от Николая Тузова

⌛ **Таймкоды**:

[00:00](https://www.youtube.com/watch?v=OnVoIAAJeOk&t=0s) Какую проблему мы решаем
[05:47](https://www.youtube.com/watch?v=OnVoIAAJeOk&t=347s) Нам нужна атомарность
[07:03](https://www.youtube.com/watch?v=OnVoIAAJeOk&t=423s) Про Two-Phase Commit 
[07:36](https://www.youtube.com/watch?v=OnVoIAAJeOk&t=456s) NoSQL базы данных
[09:59](https://www.youtube.com/watch?v=OnVoIAAJeOk&t=599s) Гарантия доставки - ""At Least Once""
[11:48](https://www.youtube.com/watch?v=OnVoIAAJeOk&t=708s) Практика: пишем Outbox для сокращателя ссылок
[12:43](https://www.youtube.com/watch?v=OnVoIAAJeOk&t=763s) Storage: сохраняем сообщения в таблицу
[28:01](https://www.youtube.com/watch?v=OnVoIAAJeOk&t=1681s) Event Sender: отправка сообщений из таблицы
[36:52](https://www.youtube.com/watch?v=OnVoIAAJeOk&t=2212s) Подключаем Event Sender
[39:09](https://www.youtube.com/watch?v=OnVoIAAJeOk&t=2349s) Тестируем отправку сообщений
[41:12](https://www.youtube.com/watch?v=OnVoIAAJeOk&t=2472s) Итоги 

 [Смотреть полностью](https://youtu.be/OnVoIAAJeOk?si=4-nG3orxl3uJw0QP)",10869,51,0,goproglib
4941,2024-06-22 13:45:33+00:00,"️ **tbls** — Go-инструмент для документирования баз данных

Автоматически документируйте базу данных в формате Markdown со схемами, отображаемыми с помощью DOT, PlantUML, Mermaid или непосредственно на изображениях. По умолчанию вы получаете документацию, охватывающую столбцы, индексы, отношения и другие детали схемы.

 [GitHub](https://github.com/k1LoW/tbls) & [Пример](https://github.com/k1LoW/tbls/blob/main/sample/postgres/README.md)",6898,33,2,goproglib
4939,2024-06-21 14:01:45+00:00,"#️⃣ **Логические и математические задачи с собеседований**

Мы подготовили нетривиальные задачи математического и логического характера с собеседований, чтобы помочь вам лучше подготовиться к следующим вызовам. В статье вы найдете задачи, которые нередко встречаются на интервью и могут стать настоящим испытанием даже для опытных разработчиков. 

 [Читать статью](https://proglib.io/w/45a4c80d)",5461,8,2,goproglib
4937,2024-06-21 11:38:49+00:00,"️ **Распределенное файловое хранилище на Go** — десятичасовой курс от freeCodeCamp, разработанный Anthony De Meulemeester

Узнайте, как создать децентрализованную, полностью распределенную систему хранения файлов с помощью Go, которая может обрабатывать и передавать очень большие файлы. 

Курс охватывает проектирование системы, низкоуровневое программирование и сетевые протоколы, а также создание практичного и масштабируемого приложения.

 [Смотреть](https://youtu.be/IoY6bE--A54?si=wSsCMrYSzMMeocaY)",7569,41,0,goproglib
4936,2024-06-20 19:50:10+00:00,"Многие разрабы живут в парадигме системы грейдов, которая выглядит следующим образом: Junior —> Middle —> Senior —> Team Lead —> Head Of Function

Но не все сеньоры хотят становиться руководителями и заниматься людьми, процессами, командой. Поэтому во многих компаниях можно повышать грейд до топового «разработчика» (Top Individual Contributor), который больше влияет на продукт, а не на компанию. 

 Поделитесь опытом, есть ли в вашей компании высокогрейдовые инженеры? Вы бы выбрали такой путь развития, или все-таки вертикальный рост?

#холивар",6477,19,6,goproglib
4934,2024-06-20 13:15:57+00:00," **Go как платформа** 

В первой части [доклада](https://t.me/goproglib/4869) про повышение производительности Go-приложений с помощью PGO Cameron Balahan, Group Product Manager в Google Cloud, взглянул на Go не как на язык программирования, а как на платформу.

Под катом — своего рода разбор каждого слайда с комментариями. Это яркое напоминание о том, что все, что поставляется с Go «из коробки», образует комплексный набор развивающихся инструментов разработчика. 

 [Читать](https://eltonminetto.dev/en/post/2024-06-12-go-is-a-plataform/)",6697,6,1,goproglib
4933,2024-06-19 22:28:33+00:00," **Age** — простой, современный и безопасный Go-инструмент шифрования (и Go-библиотека) без настроек конфигурации и возможностью композиции в стиле UNIX.

 [GitHub](https://github.com/FiloSottile/age)",6498,11,0,goproglib
4931,2024-06-19 11:41:53+00:00," **Распространенные антипаттерны в веб-приложениях на Go **

Интересный чек-лист, который следует учитывать, чтобы не скатиться к бесполезным паттернам и вместо этого писать слабосвязанный код.

 [Читать](https://threedots.tech/post/common-anti-patterns-in-go-web-applications/)",7024,6,22,goproglib
4930,2024-06-18 20:04:52+00:00," Предложение по дизайну **итераторов в Go 1.23**: мысли Ginger Bill, одного из разработчиков языка

 [Читать перевод на русском](https://habr.com/ru/articles/822697/) & [Оригинал](https://www.gingerbill.org/article/2024/06/17/go-iterator-design/)",6286,11,6,goproglib
4929,2024-06-18 09:48:15+00:00,"⭐ **13 ресурсов, чтобы выучить математику**

Некоторые разработчики утверждают, что математика не обязательна, в то время как другие считают, что без её фундаментальных знаний невозможно стать программистом. Если вас мучает ее математическое незнание, то скорее читайте нашу статью.

 [Статья](https://proglib.io/w/cc270911)

Чтобы лучше разбираться в математике, прикрепляем наш курс:
 [Математика для Data Science](https://proglib.academy/mathspro?utm_source=proglib&utm_medium=partner&utm_campaign=proglib.academy&utm_content=link_menu)",6446,8,0,goproglib
4928,2024-06-17 20:04:06+00:00," **Обновления веб-сайта в реальном времени с помощью Go, SSE и htmx**

Miłosz Smółka, Principal Backend Engineer в GetHarley, демонстрирует Go, Server-Sent Events и htmx в действии на примере небольшого сайта микроблогов. Отличный лонгрид для новичков

 [Читать](https://threedots.tech/post/live-website-updates-go-sse-htmx/)",7276,16,0,goproglib
4927,2024-06-17 13:53:43+00:00,"**Ответьте на 3 вопроса**, чтобы получить вводные занятия к курсу «Алгоритмы и структуры данных»

Получите вводные занятия, ответив на 3 вопроса – https://proglib.io/w/a069d47b

**На вводной части вас ждут:**

1. Лекция «Производительность алгоритмов» от руководителя разработки Яндекс.Самокатов

2. Лекция «Итеративные сортировки и линейные сортировки» от аспирант департамента искусственного интеллекта ВШЭ

3. Практические задания после лекций

4. Ссылки на дополнительные материалы для самостоятельного изучения

️Переходите и начинайте учиться уже сегодня – https://proglib.io/w/a069d47b",7075,6,0,goproglib
4926,2024-06-17 11:45:29+00:00,"**️ Protobuf и buf: блеск, нищета и импортозамещение**

Текстовая версия [доклада](https://youtu.be/ffKYzfHYcog) Эдгара Сипки, Go-разработчика в Ozon Fintech, в рамках которого он рассказал об использовании buf для компиляции proto-файлов.

**buf** — мощная утилита для линтинга протофайлов, проверки обратной совместимости API, генерации кода и валидации запросов, которая недоступна в России из-за санкций. Под катом — предпосылки и история   разработки собственного решения в рамках импортозамещения.

 [Читать](https://habr.com/ru/companies/oleg-bunin/articles/816631/)",6991,20,2,goproglib
4924,2024-06-16 12:36:56+00:00,"️ **Go Class** — старый добрый курс (2020 год) по разработке на Go от Matt Holiday (KØDVB). Все ключевые темы в одном плейлисте!

 [Смотреть](https://youtube.com/playlist?list=PLoILbKo9rG3skRCj37Kn5Zj803hhiuRK6&si=tJQQkHaFPYvCfCUE)",8465,39,5,goproglib
4923,2024-06-16 09:36:03+00:00," **Как стать мидлом за 3 года: 12 советов джунам**

Переход от статуса **джуна **к **мидлу **— важная, и пожалуй, самая сложная веха в карьере любого разработчика. Рассказываем об эффективных приемах и дополнительных навыках, которые помогут вам сократить этот извилистый путь

 [Статья](https://proglib.io/p/kak-stat-midlom-za-3-goda-12-sovetov-dzhunam-2024-06-11)",7158,24,2,goproglib
4922,2024-06-15 17:47:26+00:00," Куда движется Go с функциями range over, итераторами и т. д.?

 [Go 1.23 Draft Release Notes](https://tip.golang.org/doc/go1.23)",7125,43,5,goproglib
4921,2024-06-15 09:14:49+00:00," **Виталий Лихачев, Олег Козырев: мок-собеседование на позицию сеньор Go-разработчика**

Вас ждет обсуждение реально встречающихся задач у Go-разрабов в больших микросервисных проектах, вопросов проектирования систем и того, как это выражается в коде. 

 [Смотреть](https://www.youtube.com/live/-dkS4TGx1gU?si=zb3fgLKodudI3ZGA&t=265)",7247,34,11,goproglib
4920,2024-06-14 18:03:54+00:00," **Tokenizer** — реализация токенизатора OpenAI tiktoken на чистом Go

Когда вы используете GPT OpenAI, ввод и вывод доставляются в «токенах», которые__ не__ совпадают с символами, слогами или словами, а находятся где-то посередине.

 [GitHub](https://github.com/tiktoken-go/tokenizer)",6734,5,9,goproglib
4919,2024-06-14 07:59:28+00:00,"**️Библиотека программиста» находится в поиске автора оригинальных статей**
**
Кто нужен?
**● Энтузиасты (джуны и выше), которые держат руку на пульсе, читают помимо книг зарубежные техноблоги
● Энтузиасты, которым есть что сказать

**Тематика**
● DevOps
● В четырех случаях из пяти вы предлагаете тему статьи

**Объем**
● От 7 до 15 тыс. знаков без учета кода
● 2-3 статьи в месяц

**Оплата**
● 8к руб. за статью
● Работаем с самозанятыми (компенсируем налог), ИП

**Я пишу «так себе», что делать?
**Чтобы написать статью, которую не стыдно опубликовать, достаточно овладеть инфостилем. У нас есть бесплатный курс для начинающих копирайтеров [«Статьи для IT: как объяснять и распространять значимые идеи»](https://stepik.org/course/101672). Время прохождения курса: 1-2 недели.

️Пишите на hello@proglib.io",6708,5,0,goproglib
4918,2024-06-13 18:17:05+00:00," Личный бренд айтишника — тема непростая. Когда сильных хард-скиллов уже недостаточно для роста в карьере, приходится искать способы выразить свою экспертность. 

 А как вы предпочитаете развивать свой личный бренд?

 — публикации на профессиональных площадках 
️ — преподавание 
 — выступления на конференциях/митапах
 — с экспертностью пока есть проблемки
 — свой вариант (напишу в комментариях)",6623,90,3,goproglib
4917,2024-06-13 11:56:32+00:00,"**️ Практическое введение в eBPF**: что это, как работает и как мы можем использовать ее с Go

eBPF — это технология, которая позволяет запускать изолированные программы в ядре Linux, предоставляя широкий спектр расширенных возможностей. 

Под катом рассматриваются два примера использования eBPF для мониторинга системных вызовов и входящих IP-пакетов.

 [Читать](https://sazak.io/articles/an-applied-introduction-to-ebpf-with-go-2024-06-06)",8978,22,0,goproglib
4916,2024-06-13 06:02:08+00:00,"**Самые полезные каналы для программистов в одной подборке!**

Сохраняйте себе, чтобы не потерять 

Для всех

[Библиотека программиста](https://t.me/proglibrary) — новости, статьи, досуг, фундаментальные темы
[Книги для программистов](https://t.me/progbook)
[IT-мемы](https://t.me/itmemlib)
[Proglib Academy](https://t.me/proglib_academy) — тут мы рассказываем про обучение и курсы

Про нейросети
[Библиотека робототехники и беспилотников | Роботы, ИИ, интернет вещей ](https://t.me/robotics_autopilots_iot)
[Библиотека нейрозвука | Транскрибация, синтез речи, ИИ-музыка ](https://t.me/neuroaudio)
[Библиотека нейротекста | ChatGPT, Gemini, Bing ](https://t.me/neuro_text)
[Библиотека нейровидео | Sora AI, Runway ML, дипфейки ](https://t.me/neurovidos)
[Библиотека нейрокартинок | Midjourney, DALL-E, Stable Diffusion ](https://t.me/neurokartinka)

#️⃣C#

[Книги для шарпистов | C#, .NET, F#](https://t.me/csharpprogbook)
[Библиотека шарписта ](https://t.me/csharpproglib)— полезные статьи, новости и обучающие материалы по C#
[Библиотека задач по C#](https://t.me/csharp_problems_lib) — код, квизы и тесты
[Библиотека собеса по C#](https://t.me/csharp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Вакансии по C#, .NET, Unity Вакансии по PHP, Symfony, Laravel](https://t.me/csharpdevjob)

️DevOps

[Библиотека devops’а](https://t.me/devopsslib) — полезные статьи, новости и обучающие материалы по DevOps
[Вакансии по DevOps & SRE](https://t.me/devopssjob)
[Библиотека задач по DevOps](https://t.me/devops_problems_lib) — код, квизы и тесты
[Библиотека собеса по DevOps](https://t.me/devops_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования

PHP

[Библиотека пхпшника](https://t.me/phpproglib) — полезные статьи, новости и обучающие материалы по PHP
[Вакансии по PHP, Symfony, Laravel](https://t.me/phpdevjob)
[Библиотека PHP для собеса](https://t.me/php_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по PHP](https://t.me/php_problems_lib) — код, квизы и тесты

Python

[Библиотека питониста](https://t.me/pyproglib) — полезные статьи, новости и обучающие материалы по Python
[Вакансии по питону, Django, Flask](https://t.me/pydevjob)
[Библиотека Python для собеса](https://t.me/py_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Python](https://t.me/py_problems_lib) — код, квизы и тесты

Java

[Книги для джавистов | Java ](https://t.me/javaprogbook)
[Библиотека джависта](https://t.me/javaproglib) — полезные статьи по Java, новости и обучающие материалы
[Библиотека Java для собеса](https://t.me/java_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Java](https://t.me/java_problems_lib) — код, квизы и тесты
[Вакансии для java-разработчиков](https://t.me/javadevjob)

Data Science

[Книги для дата сайентистов | Data Science](https://t.me/dsprogbook)
[Библиотека Data Science](https://t.me/dsproglib) — полезные статьи, новости и обучающие материалы по Data Science
[Библиотека Data Science для собеса](https://t.me/ds_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Data Science](https://t.me/ds_problems_lib) — код, квизы и тесты
[Вакансии по Data Science, анализу данных, аналитике, искусственному интеллекту](https://t.me/datajob)

Go

[Книги для Go разработчиков](https://t.me/goprogbook)
[Библиотека Go разработчика](https://t.me/goproglib) — полезные статьи, новости и обучающие материалы по Go
[Библиотека Go для собеса](https://t.me/go_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Go](https://t.me/go_problems_lib) — код, квизы и тесты
[Вакансии по Go](https://t.me/godevjob)

C++

[Книги для C/C++ разработчиков](https://t.me/cppprogbook)
[Библиотека C/C++ разработчика](https://t.me/cppproglib) — полезные статьи, новости и обучающие материалы по C++
[Библиотека C++ для собеса](https://t.me/cpp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по C++](https://t.me/cpp_problems_lib) — код, квизы и тесты
[Вакансии по C++](https://t.me/cppdevjob)

Другие каналы

[Библиотека фронтендера](https://t.me/frontendproglib)
[Библиотека мобильного разработчика](https://t.me/mobileproglib)
[Библиотека хакера](https://t.me/hackproglib)
[Библиотека тестировщика](https://t.me/testerlib)
[Вакансии по фронтенду, джаваскрипт, React, Angular, Vue](https://t.me/jsdevjob)
[Вакансии для мобильных разработчиков](https://t.me/mobiledevjob)
[Вакансии по QA тестированию](https://t.me/testerrjob)
[InfoSec Jobs — вакансии по информационной безопасности](https://t.me/hackdevjob)

Чтобы добавить папку с нашими каналами, нажмите [сюда](https://t.me/addlist/17y04EbNMrlhNjZi)

Также у нас есть боты:
[Бот с IT-вакансиями](http://t.me/proglib_job_bot)
[Бот с мероприятиями в сфере IT](http://t.me/event_listener_bot)

Мы в других соцсетях:
[VK](https://vk.com/proglib)
[YouTube](https://www.youtube.com/c/%D0%91%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%B0)
[Дзен](https://zen.yandex.ru/proglib)
[Facebook](https://www.facebook.com/proglib/?locale=ru_RU) *
[Instagram](https://www.instagram.com/proglibrary/) *

__* Организация Meta запрещена на территории РФ__",6179,2,0,goproglib
4913,2024-06-12 10:31:20+00:00,"‍ **Понимание Go в иллюстрациях:** [серия](https://dev.to/aurelievache/series/26234) визуальных гайдов от Aurélie Vache, Developer Advocate в OVHcloud

1. Variable
2. Constant
3. If
4. Switch
5. For
6. For ... range
7. Array
8. Map
9. Slice
10. Struct
11. Functions
12. Visibility",7442,40,0,goproglib
4912,2024-06-12 07:34:23+00:00,"******Что из этого сгенерировала нейросеть?**

Подписывайтесь на наш новый канал про нейросети для создания изображений, там есть:

Новые нейросети и инструменты, например, [вот](https://t.me/neurokartinka/149) модель генерирует картинки по наброску
[Промты](https://t.me/neurokartinka/139) для разных задач
[Лайфхаки](https://t.me/neurokartinka/128) по использованию нейросетей

[Подписывайтесь!](https://t.me/neurokartinka)",6243,1,0,goproglib
4911,2024-06-11 18:17:19+00:00,"Автор статьи Sergei Vorniches прошел через фриланс, стажировки, корпорации, смену профессии и даже запуск собственного SaaS'а. Очевидно, что за это время он получил много как позитивного, так и негативного опыта. В [статье](https://habr.com/ru/amp/publications/820433/) он описывает 5 важных уроков, которые хотел получить 10 лет назад.

 **Какие из них лично для вас являются наиболее важными в профессии айтишника?** Цифру пишите в комментарии",6314,11,1,goproglib
4910,2024-06-11 16:09:13+00:00,"** AOP в Go**: как рефлексировать, и почему вам не стоит этого делать

Александр Покровский, Java-программист по профессии и Go-разработчик по зову души, задумался о способах АОП в Go, прямо как в Java. 

Это когда вы генерируете обертки для функций в рантайме, позволяя красиво оборачивать логи, мониторинги и прочие довольно однотипные штуки, по аналогии с подходом в Java.

Узнайте подробнее, что из этого [получилось!](https://habr.com/ru/articles/819789/)",6694,4,6,goproglib
4909,2024-06-11 07:30:13+00:00,"**Proglib запускает канал Азбука айтишника**

Подписывайтесь на наш новый канал про айти для неайтишников — для совсем новичков и тех, кто постоянно взаимодействует с айтишниками.

У нас есть рубрики:
⭐ [База](https://t.me/abc_for_it/41) — в ней рассказываем про термины из IT простым языком
⭐ [Проект](https://t.me/abc_for_it/32) — объясняем, из чего состоят айтишные проекты и сколько они могут стоить 
⭐ [Психология айтишника](https://t.me/abc_for_it/16) — тут говорим про софт-скиллы, особенности работы и взаимодействия

[Подписывайтесь!](https://t.me/abc_for_it)",6623,0,0,goproglib
4908,2024-06-10 20:16:01+00:00," **Bubble Table** — настраиваемый интерактивный компонент таблицы для элегантного TUI-фреймворка Bubble Tea.

 [GitHub](https://github.com/Evertras/bubble-table)",7210,17,0,goproglib
4907,2024-06-10 11:49:28+00:00," **Создаём бота-автоответчика для Telegram на ChatGPT и Aiogram 3: пошаговое руководство**

Не так давно в Telegram вышло большое обновление — «Telegram для бизнеса». В данный момент оно доступно для Premium-пользователей, а в будущем, вероятно, станет отдельным режимом. Одна из его интересных функций — возможность подключить к учётной записи бота для взаимодействия с клиентами в личных чатах.

В новой статье мы рассказываем, как создать такого Telegram-бота, который будет принимать личные сообщения только в нерабочее время и для ответа использовать ChatGPT от OpenAI.

 [Читать статью](https://proglib.io/sh/4f2IOWytmP)
 [Зеркало](https://proglib.tech/p/sozdaem-bota-avtootvetchika-dlya-telegram-na-chatgpt-i-aiogram-3-poshagovoe-rukovodstvo-2024-06-03)",7310,6,0,goproglib
4906,2024-06-09 19:10:15+00:00," Если у вас запущено множество локальных серверов, и вам надоело обращаться к ним как `localhost:8081`, `localhost:9000` и т. д., посмотрите в сторону Caddy. Он сделает настройку «доменов» для локальных серверов проще простого.

Предположим, у вас есть локальный сервер на порту 9000. После установки Caddy, выполните команду:

```
caddy reverse-proxy --from myserver.localhost --to :9000
```

и откройте https://myserver.localhost. Вы увидите, что сервер на `localhost:9000` отвечает. Caddy даже предоставляет локальные TLS-сертификаты. 

А если вы хотите проксировать больше серверов таким образом, создайте файл с именем `Caddyfile` и введите конфигурацию хоста следующим образом:

```
myapp.localhost {
    reverse-proxy :9000
}

myhugoblog.localhost {
    reverse-proxy :1313
}
```

#tip",9079,54,11,goproglib
4905,2024-06-09 13:50:46+00:00,"️ **Топовая задачка на Stack Overflow: как найти k пропущенных чисел в потоке данных**

Это продолжение [статьи про задачу](https://t.me/dsproglib/5070), в которой нужно определить, какое число вынули из мешка со 100 уникальными числами. В новой части мы показываем решение с помощью алгоритма сверки множеств, симметрических функций и уравнения k-й степени.

 [Читать статью](https://proglib.io/sh/qxkbGjyDEh)
 [Зеркало](https://proglib.tech/p/topovaya-zadachka-na-stack-overflow-kak-nayti-k-propushchennyh-chisel-v-potoke-dannyh-2024-06-04)",5798,2,4,goproglib
4904,2024-06-09 09:59:17+00:00," Когда речь заходит о создании веб-сервисов на Go, каждый фреймворк предлагает свой набор правил и инструментов. Изначально это кажется большим плюсом: вы можете выбрать именно то, что подходит под ваши конкретные нужды и стиль работы. 

Но представьте ситуацию, когда в одном проекте необходимо совместить модули, написанные с использованием разных фреймворков. Это сравнимо с попыткой собрать пазл, где каждая часть произведена разными производителями и не сочетается с остальными.

Стандартизация — ключ к решению этих проблем. Переход к использованию gRPC и HTTP/2, а также адаптация таких инструментов, как gRPC-Gateway, открывает новые горизонты в вопросах совместимости и универсальной коммуникации. 

Под катом — детальный взгляд на стандартизацию с помощью gRPC-Gateway

 [Читать](https://habr.com/ru/companies/ozonbank/articles/817381/)",6622,8,5,goproglib
4903,2024-06-09 07:10:53+00:00,"️**Proglib запускает канал про ИИ** **в сфере видео
**
Вот несколько топовых постов за последнее время:

[⭐️](https://t.me/neurovidos/83)[Инструмент,](https://t.me/neurovidos/83) который сам делает короткие вертикальные видео из ваших длинных роликов, например, на ютуб
[⭐️](https://t.me/neurovidos/72)[Подборка](https://t.me/neurovidos/72) нейро-генераторов видео с пробным периодом
[⭐️](https://t.me/neurovidos/99)[Анонс](https://t.me/neurovidos/99) ИИ-«нетфликса», который будет штамповать вам мультики по запросам

[Подписывайтесь!](https://t.me/neurovidos)",6081,0,0,goproglib
4902,2024-06-08 14:38:35+00:00," **ТОП-15 самых востребованных профессий в ИТ: куда все катится в 2024 году**

Мы часто обсуждаем зарплаты айтишников в России. Однако не стоит забывать про США, ведь это страна — мечта для многих программистов. В этой статье расскажем, сколько зарабатывают айтишники в США.

Вкатываться в айти в 2024 году однозначно стоит. Только в США базовые зарплаты всех ИТ-специалистов в США выросли на 2,6%, — спрос на квалифицированных ИТ-специалистов остаётся высоким.

 [Читать статью ](https://proglib.io/p/top-15-samyh-vostrebovannyh-professiy-v-it-kuda-vse-katitsya-v-2024-godu-2024-05-30)
 [Зеркало](https://proglib.tech/p/top-15-samyh-vostrebovannyh-professiy-v-it-kuda-vse-katitsya-v-2024-godu-2024-05-30)",6030,0,6,goproglib
4900,2024-06-08 12:40:06+00:00," **Bob** — набор инструментов для работы с SQL в Go, с поддержкой Postgres, MySQL и SQLite. 

Bob переходит от необработанных строк SQL-запросов к полностью типизированным запросам с моделями и фабриками, созданными для базы данных.

 [Документация](https://bob.stephenafamo.com/docs/) 
‍ [GitHub](https://github.com/stephenafamo/bob)",6505,11,5,goproglib
4899,2024-06-08 08:02:53+00:00,"**Новый канал по разработке игр
**
Мы наконец-то запустили канал по разработке игр — теперь все самое важное и полезное из мира геймдева можно узнать в одном месте.

[Подписаться](https://t.me/gameproglib)",6805,12,0,goproglib
4898,2024-06-07 15:32:13+00:00,"‍ **Логирование в Go**: от основ до профи

Гайд основан на выдержках из новой книги Matt Boyle под названием **Foundations of Debugging for Golang**.

 [Читать](https://www.bytesizego.com/blog/guide-to-logging-in-go)",10739,16,7,goproglib
4896,2024-06-07 11:43:29+00:00,"️**Proglib запускает канал про ИИ** **в сфере видео
**
Вот несколько топовых постов за последнее время:

⭐️[Инструмент](https://t.me/neurovidos/83), который сам делает короткие вертикальные видео из ваших длинных роликов, например, на ютуб
⭐️[Подборка](https://t.me/neurovidos/72) нейро-генераторов видео с пробным периодом
⭐️[Анонс](https://t.me/neurovidos/99) ИИ-«нетфликса», который будет штамповать вам мультики по запросам

[Подписывайтесь!](https://t.me/neurovidos)",7900,15,0,goproglib
4895,2024-06-06 20:42:13+00:00," Шахматы, настолки, компьютерные игры, музыка, чтение и многое другое...
** **
** А какое хобби есть у вас**? Поделитесь в комментариях",8023,21,3,goproglib
4894,2024-06-06 11:29:02+00:00," **Rill** — Go Concurrency Toolkit

Это набор инструментов для потоковой передачи, параллельной обработки и построения пайплайнов. Главная цель — красиво абстрагировать сложные вещи и уменьшить количество шаблонов. 

 [GitHub](https://github.com/destel/rill)",7601,22,4,goproglib
4891,2024-06-05 10:05:36+00:00," **Представлены релизы Go 1.22.4 и 1.21.11**

  Новый выпуск включает исправления безопасности для **archive/zip** и **net/netip**.

 [Анонс](https://groups.google.com/g/golang-announce/c/XbxouI9gY7k)
⬇️ [Скачать](https://go.dev/dl/#go1.22.4)

#новости",7510,19,1,goproglib
4888,2024-06-04 11:41:45+00:00,"️ **OR подкаст**: есть ли Go после Python?

Ведущие подкаста от Evrone и Дмитрий Гонозов (ментор в Яндекс.Практикуме, разработчик в Evrone) разбираются, какие языки лучше Go, что ждет Go-разработчиков после курсов, нужно ли вообще погружаться в технологию или можно быть универсальным разработчиком?

⏱️ **Таймкоды:**

[00:00](https://m.youtube.com/watch?v=1DSy97KY730&t=0s) Начало
[01:12](https://m.youtube.com/watch?v=1DSy97KY730&t=72s) Кто в гостях и что обсуждаем?
[02:59](https://m.youtube.com/watch?v=1DSy97KY730&t=179s) Новичкам комфортно со стандартной библиотекой Go?
[05:08](https://m.youtube.com/watch?v=1DSy97KY730&t=308s) Что ждет после курсов Golang
[07:30](https://m.youtube.com/watch?v=1DSy97KY730&t=450s) База у Go и Python одинаковая?
[10:32](https://m.youtube.com/watch?v=1DSy97KY730&t=632s) Можно ли быть универсальным Software Engineer
[14:27](https://m.youtube.com/watch?v=1DSy97KY730&t=867s) Как знание других языков может помешать в обучении?
[16:43](https://m.youtube.com/watch?v=1DSy97KY730&t=1003s) Всех надо учить, где писать бизнес-логику
[18:56](https://m.youtube.com/watch?v=1DSy97KY730&t=1136s) Изучать Golang мешает прошлый бэкграунд
[20:12](https://m.youtube.com/watch?v=1DSy97KY730&t=1212s) Не Python-разработчик, а Django-разработчик. Про фреймворки
[24:02](https://m.youtube.com/watch?v=1DSy97KY730&t=1442s) Насколько тяжело вкатиться в GO
[26:24](https://m.youtube.com/watch?v=1DSy97KY730&t=1584s) В Go нет обработки ошибок?
[27:34](https://m.youtube.com/watch?v=1DSy97KY730&t=1654s) Go круче Python, Ruby, .NET и других языков?
[33:53](https://m.youtube.com/watch?v=1DSy97KY730&t=2033s) Go бывает много? Куча микросервисов и огромный монолит
[37:02](https://m.youtube.com/watch?v=1DSy97KY730&t=2222s) Go — скучный язык для скучной разработки
[42:10](https://m.youtube.com/watch?v=1DSy97KY730&t=2530s) Жалеет ли гошник, что стал гошником?

#подкасты",8084,30,0,goproglib
4887,2024-06-03 19:09:24+00:00," **tinymath** — быстрая математическая Go-библиотека для ограниченных окружений 

Если вы используете Go для работы с микроконтроллерами или WebAssembly, эта библиотека жертвует некоторой точностью ради производительности и небольшим размером кода для общих тригонометрических, округляющих, логарифмических и подобных функций. Большинство алгоритмов портированы из Rust-библиотеки [Micromath](https://github.com/tarcieri/micromath).

‍ [GitHub](https://github.com/orsinium-labs/tinymath)",7517,16,4,goproglib
4886,2024-06-02 20:53:51+00:00," **Как простая задачка поставила в тупик программистов (и как они из него выбрались)**

В 2010 году пользователь Stack Overflow не справился с задачей на собеседовании. Обсуждение способов решения этого задания стало одной из самых популярных тем на платформе.

Об этой истории, а также о способах решения задачи, читайте в нашей статье
 [Ссылка](https://proglib.io/sh/LQOXIGU8SN) 
 [Зеркало](https://proglib.tech/p/kak-prostaya-zadachka-postavila-v-tupik-programmistov-i-kak-oni-iz-nego-vybralis-2024-05-27)",6869,9,20,goproglib
4885,2024-06-02 10:55:06+00:00,"**️ Альтернативы Make-файлам, написанные на Go**

make — старейший инструмент сборки. Он существует на каждой Unix-системе и поэтому является выбором номер один для многих проектов. Тем не менее, у make есть свои особенности, особенно в отношении синтаксиса и поведения правил Makefile. 

Пробелы имеют значение, а пересборка определяется по дате изменения файла, — это лишь два примера, заставляющих разработчиков искать лучшие альтернативы. Два инструмента, особенно для проектов на Go, — это **Taskfile** и **Mage**. О них и идет речь в статье.

 [Читать](https://eltonminetto.dev/en/post/2024-05-26-alternatives-make/)",7746,9,7,goproglib
4884,2024-06-01 09:08:09+00:00,"️ **Видеогайд про внутреннее устройство планировщика Go от Владимира Балуна**

⏳ **Таймкоды:**

[00:00](https://www.youtube.com/watch?v=P2Tzdg8n9hw&t=0s) — Введение
[03:00](https://www.youtube.com/watch?v=P2Tzdg8n9hw&t=180s) — Потоки операционной системы
[07:34](https://www.youtube.com/watch?v=P2Tzdg8n9hw&t=454s) — Легковесные потоки
[10:16](https://www.youtube.com/watch?v=P2Tzdg8n9hw&t=616s) — Основные концепции рантайма Go
[15:21](https://www.youtube.com/watch?v=P2Tzdg8n9hw&t=921s) — Масштабирование рантайма Go
[18:45](https://www.youtube.com/watch?v=P2Tzdg8n9hw&t=1125s) — Локальные очереди
[21:45](https://www.youtube.com/watch?v=P2Tzdg8n9hw&t=1305s) — Work sharing и work stealing
[26:08](https://www.youtube.com/watch?v=P2Tzdg8n9hw&t=1568s) — Syscalls в планировщике Go
[27:41](https://www.youtube.com/watch?v=P2Tzdg8n9hw&t=1661s) — Handoff
[34:50](https://www.youtube.com/watch?v=P2Tzdg8n9hw&t=2090s) — Netpoller
[37:33](https://www.youtube.com/watch?v=P2Tzdg8n9hw&t=2253s) — Очереди в планировщике Go
[42:28](https://www.youtube.com/watch?v=P2Tzdg8n9hw&t=2548s) — Примитивы синхронизации 
[48:57](https://www.youtube.com/watch?v=P2Tzdg8n9hw&t=2937s) — Циклы",15035,54,0,goproglib
4883,2024-05-31 14:04:08+00:00,"️ Docker ушёл из РФ! Инструкция по восстановлению доступа к Docker Hub для пользователей из России

Docker заблокировал доступ к своему главному репозиторию Docker Hub для пользователей из России. Однако есть способы обойти это ограничение и продолжить работу. В этом посте мы расскажем, как настроить альтернативные репозитории и зеркала.

 [Читать статью](https://proglib.io/sh/7XJFa3dYke)
 [Зеркало](https://proglib.tech/p/docker-ushel-iz-rf-instrukciya-po-vosstanovleniyu-dostupa-k-docker-hub-dlya-polzovateley-iz-rossii-2024-05-30)",7280,48,19,goproglib
4882,2024-05-31 09:30:36+00:00,"**Как обрабатывать ошибки в Go**: свежий гайд от JetBrains

Из [гайда](https://www.jetbrains.com/guide/go/tutorials/handle_errors_in_go/) вы узнаете, как обрабатывать ошибки в Go на практике:

️ Введение
️ Предварительные условия
️ Популярные методы обработки ошибок в Go
️ Лучшие практики обработки ошибок в Go
️ Обработка определенных типов ошибок
️ Распространенные ошибки, которых следует избегать",8475,19,1,goproglib
4881,2024-05-30 13:38:06+00:00,"‍ **Domain Driven Design в Go — это почти не больно**

Как выглядят паттерны DDD в большом проекте? А самое главное, стоит ли их вообще использовать? Илья Сергунин, backend-разработчик в Авито, разбирается, какими инструментами можно реализовать DDD на Go и оценивает, насколько это больно.

В статье он объясняет, как можно натянуть DDD на Go без синтаксического сахара и магии Java-подобных языков, и без больших крутых ORM c Data mapper, которые также отсутствуют в Go.

 [Читать](https://habr.com/ru/companies/oleg-bunin/articles/791420/)",8475,20,1,goproglib
4879,2024-05-29 18:04:36+00:00," **На сколько просели зарплаты в ИТ в 2024 году?**

Благодаря открытым данным с сайта Хабр Карьера мы узнали, какие основные тенденции ждать в зарплатном секторе, и сколько получают ИТ-специалисты сейчас.

 Например, в первом полугодии 2023 года в среднем джунам предлагали 80 тысяч рублей, а спустя год это число упало до 72,5 тысячи рублей.

 [Остальные данные — в статье](https://proglib.io/sh/UYohZfN8Js)
 [Зеркало](https://proglib.tech/p/na-skolko-proseli-zarplaty-v-it-v-2024-godu-2024-05-23)",6606,2,4,goproglib
4877,2024-05-29 11:48:00+00:00,"‍ **От и Go: доклады для гоферов про инструменты для фаззинга, kuber-кластер на Go и не только**

Подборка презентаций с инструкциями по созданию кастомных решений, которые инженеры и разработчики из YADRO, Avito Tech, Ozon Fintech и других технологических компаний уже опробовали на собственных продуктах. 

Если вашей команде не хватает инструмента для фаззинга или обработки ошибок на Go — можете сделать их по примерам, которые представили инженеры в выступлениях и презентациях.

 [Внедряем фаззинг: какой инструмент вам подойдет](https://drive.yadro.com/s/KCwTJnaRKy3Q2LF) / Иван Золотников, инженер в YADRO
 [Создаем замену buf: сеанс реверс-инжиниринга](https://drive.yadro.com/s/pkmqBMfdpNdAnkz) / Эдгар Сипки, разработчик в Ozon Fintech, и Василий Близнецов, разработчик в Positive Technologies
 [Доступно о паттернах, умных обработчиках и красивой синхронизации в Go](https://drive.yadro.com/s/4q8T2wBenmHM8QY) / Олег Козырев, старший инженер в AvitoTech
 [Учим сервис сообщать понятно об ошибке пользователям, программистам и машинам](https://drive.yadro.com/s/QAynq8dwyKobCkC) / Александр Лырчиков, разработчик в команде систем хранения данных в YADRO 
 [Пишем свой mini-k8s на Go с helm-шаблонизатором](https://drive.yadro.com/s/wwHS7ZKBAfZ4FXD) / Станислав Иванкевич, старший программист в команде разработки DataMasters в VK Tech
 [Снижаем нагрузку на Garbage Collector и ускоряем работу с памятью, используя sync.Pool](https://drive.yadro.com/s/cWfSRA6cKRZWp2M) / Александр Иванов, тимлид в команде телекома в YADRO ",7905,9,1,goproglib
4876,2024-05-28 19:04:24+00:00," **Разрабы, какую музыку вы предпочитаете слушать во время работы?**

 — энергичная и мотивирующая музыка (рок, поп, электронная)
 — спокойная и расслабляющая музыка (классическая, джаз, саундтреки)
️ — предпочитаю работать в тишине

#холивар",7105,287,5,goproglib
4875,2024-05-28 12:10:06+00:00," **Реализация MVCC и основных уровней изоляции транзакций SQL**

Гайд по разработке базы данных из 400 строк кода с базовой поддержкой пяти стандартных уровней транзакций SQL: read uncommitted, read committed, repeatable read, snapshot isolation и serializable. Автор использует multi-version concurrency control (MVCC) и optimistic concurrency control (OCC).

 [Читать](https://notes.eatonphil.com/2024-05-16-mvcc.html)",7407,20,0,goproglib
4874,2024-05-27 20:27:47+00:00,"‍️ **33 лучших вуза России для будущих программистов 2024-2025**

Составили список из 33-х вузов, где вы научитесь думать как программист и получите фундаментальные знания в области математики, информатики, компьютерных наук и так далее. Для удобства вузы отсортированы по среднему проходному баллу ЕГЭ: от наибольшего к наименьшему.

 [Читать статью](https://proglib.io/p/28-luchshih-vuzov-rossii-dlya-budushchih-programmistov-2022-2023-2022-09-09)
 [Зеркало](https://proglib.tech/p/28-luchshih-vuzov-rossii-dlya-budushchih-programmistov-2022-2023-2022-09-09)",6734,0,0,goproglib
4869,2024-05-27 13:40:06+00:00," **Повышение производительности Go-приложений с помощью PGO** 

Профилируя Go-приложения во время выполнения, Go-компилятор может принимать более эффективные решения по оптимизации в последующих сборках, что приводит к существенному повышению производительности процессора. 

Узнайте подробнее из доклада Cameron Balahan, Michael Pratt и James Ma на Google I/O 2024, как работает PGO и как вы можете использовать ее для улучшения (и измерения) производительности своих приложений в Google Cloud и за его пределами.

 [Смотреть](https://youtu.be/FwzE5Sdhhdw?si=DyS5VSGzv5WD22GH)",7061,13,0,goproglib
4868,2024-05-26 08:30:50+00:00,"Не возвращайте err в Go. Вместо этого добавьте недостающие сведения, необходимые для отладки.

Некоторые разрабы любят жаловаться, что в Go приходится писать множество блоков `if err != nil { return err }`. Они не понимают, как работают ошибки в Go. 

Дело в том, что на самом деле то, на что они жалуются, является совершенно неправильным способом обработки ошибок в Go: возврат `err` напрямую — это антипаттерн.

В статье автор показывает, что он имеет в виду, на примере кода: библиотеки для настройки mTLS-соединения. 

 [Читать](https://akavel.com/go-errors)",9265,47,2,goproglib
4867,2024-05-25 11:01:52+00:00," **Как мы создали ИИ-стартап на хакатоне выходного дня в Германии**

Инженер ПО рассказал нам о своих выходных на хакатоне в Кельне, где с командой пытался создать AI-стартап всего за два дня. Участники прошли путь от подачи идей в пятницу вечером до демонстрации работающего приложения к воскресенью.

В качестве бонуса автор привёл список основных пунктов, которые необходимо выполнить для создания стартапа.

 [Читать статью](https://proglib.io/p/kak-my-sozdali-ii-startap-na-hakatone-vyhodnogo-dnya-v-germanii-2024-05-21)
 [Зеркало](https://proglib.tech/p/kak-my-sozdali-ii-startap-na-hakatone-vyhodnogo-dnya-v-germanii-2024-05-21)",6122,0,0,goproglib
4866,2024-05-25 07:50:27+00:00," **Визуализация покрытия кода Go в виде древовидной карты**

Интересный способ визуализировать большие проекты с помощью результатов `go test -coverprofile`.

```$ go install github.com/nikolaydubina/go-cover-treemap@latest
$ go test -coverprofile cover.out ./...
$ go-cover-treemap -coverprofile cover.out > out.svg
```

‍ [GitHub](https://github.com/nikolaydubina/go-cover-treemap)",6968,46,3,goproglib
4865,2024-05-24 19:30:33+00:00,"Доклады были опубликованы уже месяц назад, но лучше поздно, чем никогда 

 [Как стать сеньором](https://youtu.be/fDIbcGVQXdQ?si=rtFVBEEo4S2SBCBM) / Василий Романов (VK, Облако Mail ru)
 [Domain Driven Design в Go — это не больно (почти)](https://youtu.be/VyUGi8_n66A?si=0ievtOGLQlWMnyYk) / Илья Сергунин (Авито)
 [Go в Domain Driven Design](https://youtu.be/JcsKI7QyDrs?si=5gI8Tpg4hsRlewyF) / Дмитрий Анисов (GS Labs)
 [Как научить сервис сообщать об ошибке, чтобы это было понятно пользователям, машинам](https://youtu.be/Fm7ElOxedyM?si=NqiO03dstzfuhvX-) / Александр Лырчиков (YADRO)
 [Работа с аренами — почти избавляемся от GC](https://youtu.be/XZXagAmk_uk?si=CyP-55OpUlNCkNoa) / Максим Горозий (Тинькофф)
 [Собеседования на senior-разработчика: проверяем soft skills вопросами на hard skills](https://youtu.be/LAKqGjUf9zI?si=Ii7BhiJJ7ijCwUwi) / Иван Матвеев
 [Потоки данных, графы, стейт-машина — строим бизнес-логику в Go-микросервисах](https://youtu.be/aObp355K-nk?si=WAzoVtab5VGLtAhu) / Апрес Антонян
 [Выжимаем из Go максимум производительности](https://youtu.be/QMC9Kg4Ogxg?si=jyeZrfFraXSxM-Bb) / Никита Галушко (VK, ВКонтакте)

 [Весь плейлист](https://youtube.com/playlist?list=PL4jag8ijtDPx4Ybd8H0fFpy_tEqYr3isQ&si=L7J_epOulr_rhYqV)

#чтопроисходит",7531,15,0,goproglib
4864,2024-05-24 12:33:38+00:00,"‍ **Популярные ошибки в Go и как их избежать**

Go известен своей лаконичностью и простотой синтаксиса, но даже в нём есть множество подводных камней, с которыми можно столкнуться в работе. Дмитрий Королёв, бэкенд-разработчик в Авито, разбирает распространённые ошибки с примерами и рассказывает, как их можно избежать.

 [Читать](https://habr.com/ru/companies/avito/articles/813697/)",6473,24,1,goproglib
4863,2024-05-24 07:52:29+00:00,"️ **Интерактивное исследование распространенных стратегий организации очередей**

Перед вами [мини-исследование](https://encore.dev/blog/queueing), в котором изучается организация очередей в контексте HTTP-запросов. Автор начинает с простых концепций и постепенно разбирается с более сложными очередями.

 Под катом:

️ Чем полезны очереди
️ 3 разных типа очереди
️ Как эти 3 очереди сравниваются друг с другом
️ 1 дополнительная стратегия организации очередей, которую вы можете применить к очередям любого типа, чтобы не отбрасывать приоритетные запросы",6159,17,0,goproglib
4862,2024-05-23 18:36:10+00:00,"️**Схема типичного стартапа** ️

 Есть здесь те, кто работает в стартапе? Что скажете?

#холивар",6061,46,1,goproglib
4859,2024-05-23 12:06:02+00:00," **Мысли об использовании Go для биоинформатики**

Биоинформатик и инженер по обработке данных [размышляет](https://bionics.it/posts/golang-for-bioinformatics) об использовании различных языков для научной работы, уделяя особое внимание Go и Rust, Python, Crystal, Julia и Zig. 

У Go много плюсов, но, по его мнению, он не прорвался в биоинформатику в крупных масштабах, хотя за пределами этой области у него был феноменальный рост? 

Любопытно, что автор оценивает количество строк для работы с файлами и вообще сложность этой операции с точки зрения среднестатистического программиста. На основании этого делает выводы, сравнивая с языком D и его четырьмя строками. 

 **Как вам такой подход?**",5742,29,0,goproglib
4858,2024-05-22 20:13:57+00:00,"3️⃣ **defer как инициализация**

В 4-м примере `main` вызывает `mysteriousDefer()` как отложенную функцию, поэтому все, что напечатает `mysteriousDefer()`, должно быть напечатано после того, как `main` выполнит свои выводы.

Однако если вы запустите этот код, вы получите следующий вывод:

```
f runs
main runs
func returned by f runs
```

**Почему это антипаттерн**

Этот «хитрый трюк» позволяет объединить инициализацию и очистку в одной функции.

Вы заметили двойные скобки в вызове `defer`?

```
defer mysteriousDefer()()
```

Обычно вы бы вызвали отложенную функцию так:

```
defer mysteriousDefer()
```

Вторые скобки вызывают `mysteriousDefer()` перед тем, как она будет оценена директивой `defer`. Затем `mysteriousDefer()` печатает свое сообщение и возвращает другую функцию, которая является фактической функцией, отложенной `defer`.

Этот запутанный набор трудно понять, а двойная пара скобок легко может быть пропущена при беглом ревью кода.

Что плохого в написании функции инициализации и функции очистки отдельно?",7393,23,0,goproglib
4854,2024-05-22 20:13:55+00:00,"‍ **3 антипаттерна в Go**

Попытка написать «умный» код всегда оборачивается проблемами, когда другим разработчикам приходится его поддерживать (где «другие» включают вас самих через четыре недели).

1️⃣ **Точечный импорт**

Точечный импорт позволяет импортировать пакет и использовать его экспортируемые идентификаторы без префикса имени пакета.

Например, если вы импортируете `fmt` через `.`, вы можете вызвать `Println()` и другие функции без префикса `fmt.`.

**Почему это антипаттерн?**

Экспортируемые идентификаторы из этого пакета выглядят так, как будто они определены в текущем пакете. Это плохо по двум причинам:

1. Это запутывает, когда ищешь определение идентификатора в текущем пакете.
2. Некоторые пакеты имеют заменители, которые экспортируют те же идентификаторы. Если эти пакеты импортируются через точечный импорт, можно подумать, что идентификаторы принадлежат оригинальному пакету, хотя на самом деле они принадлежат заменителю.

2️⃣ **Chaining **

Если метод обновляет свой ресивер и ничего не может пойти не так при этом обновлении, метод не должен ничего возвращать. Несколько таких методов можно вызывать один за другим (пример #2).

Для объединения методов в цепочку нужно, чтобы каждый метод возвращал свой ресивер. Тогда мы можем вызывать второй метод, как в 3-м примере.

Ура, мы сэкономили одну строку!

**Почему это антипаттерн**

Три причины:

1. Мы ничего не приобрели. Цепочки методов не дают нам ничего, чего у нас уже нет.
2. Методы в цепочке не могут возвращать ошибки. Если есть ошибки, нужно вернуться к обычному паттерну. Теперь у вас в коде два разных стиля: цепочки и обычный.
3. Код на Go предпочитает, чтобы чтение кода фокусировалось на левой стороне. Это означает короткие строки и мало уровней вложенности (в идеале только один). Цепочки методов могут легко пересекать весь экран и даже вызвать разрыв строки, что делает код трудночитаемым и некрасивым.

 Продолжение ",5040,22,16,goproglib
4853,2024-05-22 09:28:15+00:00,"‍ **Generic concurrency в Go**: исследование совместного использования дженериков и горутин для создания полезных паттернов конкурентной обработки

Автор затронул тему маппинга коллекций (множеств, последовательностей) элементов. Маппинг — это процесс, который приводит к новой коллекции элементов, где каждый элемент является результатом вызова некоторой функции `f()` с соответствующим элементом из исходной коллекции.

 [Читать](https://sergey.kamardin.org/articles/generic-concurrency-in-go/)",6325,22,0,goproglib
4852,2024-05-21 19:01:46+00:00," **А как в вашем проекте накатываются изменения в основную ветку?**

 — создаю pull request и жду его одобрения перед мержем
 — мержу изменения напрямую в основную ветку
️ — прохожу через код-ревью перед мержем
 — использую автоматическую систему CI/CD для мержа после прохождения всех тестов
 — свой вариант (напишу в комментариях)

#холивар",6199,154,6,goproglib
4850,2024-05-21 14:03:23+00:00," **Анализ Go-бинарей с использованием gftrace**: райтап одной из машин с известной площадки Hack The Box

Вы научитесь работать с инструментом **gftrace**, который позволяет отслеживать вызовы системных функций и их параметры в Windows. Автор показывает, как с помощью **gftrace** можно анализировать поведение бинарного файла, отслеживая такие операции, как создание файлов, чтение данных, создание сокетов и выполнение процессов.

 [Читать](https://0xdf.gitlab.io/2024/05/07/gftrace.html)",6833,7,0,goproglib
4848,2024-05-21 12:26:14+00:00,"️**Proglib запускает канал про ИИ** **для генерации звука
**
Там мы будем рассказывать про все существующие нейросети, которые генерируют музыку и голос — с пошаговыми инструкциями, инструментами и лайфхаками. 

⭐️генерация голоса и музыки
⭐️замена и перевод речи
⭐️распознавание звуков

[Подписывайтесь!](https://t.me/neuroaudio)",6893,8,0,goproglib
4843,2024-05-20 19:43:28+00:00,"‍ **Как сделать README вашего GitHub-профиля динамическим**

Здесь, увы, нет Go, но есть аккуратная демонстрация того, как не так уж сложно придать вашему GitHub-профилю дополнительную изюминку, добавив сообщения в блоге или другую информацию.

 [Читать](https://tduyng.dev/blog/dynamic-github-profile-readme/)",7181,25,0,goproglib
4842,2024-05-20 18:13:30+00:00,"️ **Дорожная карта по проектированию API**

Пошаговое руководство, которое поможет вам научиться проектировать и создавать надежные API.

 [Скачать оригинал](https://roadmap.sh/api-design) (PDF-файл в комментариях)",5599,16,1,goproglib
4836,2024-05-20 07:39:58+00:00,"️ **Видеогайд про оптимизацию кода на Go от Владимира Балуна**

⏳ **Таймкоды:**

[00:00](https://m.youtube.com/watch?v=TjzeCWaTOtM&t=0s) — Введение
[00:17](https://m.youtube.com/watch?v=TjzeCWaTOtM&t=17s) — Подход с RWMutex
[01:40](https://m.youtube.com/watch?v=TjzeCWaTOtM&t=100s) — Подход с Mutex
[02:10](https://m.youtube.com/watch?v=TjzeCWaTOtM&t=130s) — Подход с Atomic
[03:39](https://m.youtube.com/watch?v=TjzeCWaTOtM&t=219s) — Подход с шардированием
[04:36](https://m.youtube.com/watch?v=TjzeCWaTOtM&t=276s) — Подход с выравниванием при шардировании
[05:42](https://m.youtube.com/watch?v=TjzeCWaTOtM&t=342s) — False sharing
[08:13](https://m.youtube.com/watch?v=TjzeCWaTOtM&t=493s) — Заключение",7448,53,0,goproglib
4835,2024-05-19 07:05:46+00:00,"**Разработка CI-системы на Go

****«**Какой системой CI вы пользуетесь?» — «Своей собственной»

Автор по шагам пишет CI-систему с нуля и планирует расширить функционал в следующих публикациях. Следите за обновлениями

 [Часть 1](https://x-dvr.github.io/dev-blog/posts/building-ci-in-go-1/)",7357,37,0,goproglib
4834,2024-05-18 18:01:40+00:00," **Именованием ok считается вредным?**

«Как существует неписаное правило, что каждая переменная ошибки в Go должна называться `err`, так и существует неписаное правило, что каждая переменная существования в мапе должна называться `ok`». Но Zach Musgrave из команды DoltHub считает, что мы можем и должны стремиться к лучшему.

  [Читать](https://www.dolthub.com/blog/2024-05-10-ok-considered-harmful/)",6864,40,8,goproglib
4833,2024-05-18 14:04:18+00:00,"‍ «**Ужасный Golang. Как потерять 100млн**» — доклад Юрия Бедарева на GollangConf (HighLoad++ 2022) 

__Осторожно: автор делится опытом работы с Go, полученным при работе техлидом в Утконос Онлайн.__ __Его мнение не является истиной в последней инстанции__.

 Случалось ли у вас так, что команда проекта резко увольняется до его релиза? В жизни автора доклада такое случилось. Внутри [доклада](https://youtu.be/uFcnlNnawrU?si=WviGL4-t4Kf-BdeB)

 Что не стоит брать в проект.
 Saga — быстрое внедрение. Один из способов реализации в микросервисной архитектуре.
 DDD — о чем молчат. 
 Дженерики, когда они так нужны.
 Мониторинг.
 Как переписали микросервисы и сделали стандарт внутри компании.",7300,33,0,goproglib
4832,2024-05-17 19:44:24+00:00,"️ **40 незаменимых API для разработчиков**

Разработчики постоянно ищут способы оптимизировать свою работу. Мы собрали 40 API, которые помогут вам сэкономить время, повысить эффективность и добавить новые функции в ваши проекты.

 [Читать статью](https://proglib.io/sh/oWjGNs5Jyc)
 [Зеркало](https://proglib.tech/p/40-nezamenimyh-api-dlya-razrabotchikov-2024-05-14)",6017,14,0,goproglib
4831,2024-05-17 08:30:50+00:00," Пакет `reflect` вероятнее всего будет поддерживать функцию `TypeAssert`, которая позволит избежать дополнительных аллокаций памяти и улучшить производительность:

```
func TypeAssert[T any](v reflect.Value) (T, bool)

// эквивалентна

v.Interface().(T)
```

 [Подробнее](https://github.com/golang/go/issues/62121)",6899,27,0,goproglib
4830,2024-05-16 20:43:06+00:00," **Были ли у вас на собесах вопросы, на которые вы не могли или затруднялись ответить**? Напишите их в комментариях — разберемся вместе 

#холивар",7040,8,67,goproglib
4828,2024-05-16 14:20:11+00:00," **Бесплатное восстановление ЦП с помощью PGO**

В начале года компания Dolt [делилась](https://www.dolthub.com/blog/2024-02-02-profile-guided-optimization/) опытом работы с PGO, но тут масштабы посерьезнее: команда observability в Cloudflare [экспериментирует и извлекает выгоду](https://blog.cloudflare.com/reclaiming-cpu-for-free-with-pgo/) из PGO в своих Go-сервисах. Учитывая масштабы запуска последних на тысячах ядер Cloudflare, конечный результат впечатляет.

Под катом автор делится историей об экспериментах с PGO: сбор репрезентативных профилей в продакшн инфраструктуре, а затем деплой новых бинарей PGO и измерение экономии ресурсов ЦП.

 [Читать](https://blog.cloudflare.com/reclaiming-cpu-for-free-with-pgo/)",7968,16,0,goproglib
4827,2024-05-15 16:45:06+00:00,"‍ **Разработка DNS-резолвера на Go**

Есть много способов сделать это быстро, но если вы вдруг захотели покопаться в пакетах и узнать,__ __как это работает под капотом, добро пожаловать под кат

 [Читать](https://domenicoluciani.com/2024/05/07/create-dns-resolver.html)",9223,18,0,goproglib
4826,2024-05-14 18:27:17+00:00,"** А теперь самый важный вопрос, который когда-либо был на нашем канале. Что выберете? **

userId —** **
userID —** **
user_id —** ️**

#холивар",7097,611,16,goproglib
4824,2024-05-14 11:05:06+00:00,"‍ **errors.Is(), errors.As(), errors.Unwrap(), кастомные ошибки и многое другое**: подробное руководство для Go-разработчика

 [Читать](https://adrianlarion.com/golang-error-handling-demystified-errors-is-errors-as-errors-unwrap-custom-errors-and-more/)",10402,20,0,goproglib
4822,2024-05-13 18:05:23+00:00,"‍ **Использование пакетов crypto/aes и crypto/cipher на практике: **простые примеры для Go-разработчика

 [Читать гайд](https://aran.dev/posts/using-golang-crypto-aes-and-crypto-cipher-packages/)",7582,19,2,goproglib
4821,2024-05-13 06:04:08+00:00,"**Самые полезные каналы для программистов в одной подборке!**

Сохраняйте себе, чтобы не потерять 

Для всех

[Библиотека программиста](https://t.me/proglibrary) — новости, статьи, досуг, фундаментальные темы
[Книги для программистов](https://t.me/progbook)
[IT-мемы](https://t.me/itmemlib)
[Proglib Academy](https://t.me/proglib_academy) — тут мы рассказываем про обучение и курсы

Про нейросети
[Библиотека робототехники и беспилотников | Роботы, ИИ, интернет вещей ](https://t.me/robotics_autopilots_iot)
[Библиотека нейрозвука | Транскрибация, синтез речи, ИИ-музыка ](https://t.me/neuroaudio)
[Библиотека нейротекста | ChatGPT, Gemini, Bing ](https://t.me/neuro_text)
[Библиотека нейровидео | Sora AI, Runway ML, дипфейки ](https://t.me/neurovidos)
[Библиотека нейрокартинок | Midjourney, DALL-E, Stable Diffusion ](https://t.me/neurokartinka)

#️⃣C#

[Книги для шарпистов | C#, .NET, F#](https://t.me/csharpprogbook)
[Библиотека шарписта ](https://t.me/csharpproglib)— полезные статьи, новости и обучающие материалы по C#
[Библиотека задач по C#](https://t.me/csharp_problems_lib) — код, квизы и тесты
[Библиотека собеса по C#](https://t.me/csharp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Вакансии по C#, .NET, Unity Вакансии по PHP, Symfony, Laravel](https://t.me/csharpdevjob)

️DevOps

[Библиотека devops’а](https://t.me/devopsslib) — полезные статьи, новости и обучающие материалы по DevOps
[Вакансии по DevOps & SRE](https://t.me/devopssjob)
[Библиотека задач по DevOps](https://t.me/devops_problems_lib) — код, квизы и тесты
[Библиотека собеса по DevOps](https://t.me/devops_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования

PHP

[Библиотека пхпшника](https://t.me/phpproglib) — полезные статьи, новости и обучающие материалы по PHP
[Вакансии по PHP, Symfony, Laravel](https://t.me/phpdevjob)
[Библиотека PHP для собеса](https://t.me/php_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по PHP](https://t.me/php_problems_lib) — код, квизы и тесты

Python

[Библиотека питониста](https://t.me/pyproglib) — полезные статьи, новости и обучающие материалы по Python
[Вакансии по питону, Django, Flask](https://t.me/pydevjob)
[Библиотека Python для собеса](https://t.me/py_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Python](https://t.me/py_problems_lib) — код, квизы и тесты

Java

[Книги для джавистов | Java ](https://t.me/javaprogbook)
[Библиотека джависта](https://t.me/javaproglib) — полезные статьи по Java, новости и обучающие материалы
[Библиотека Java для собеса](https://t.me/java_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Java](https://t.me/java_problems_lib) — код, квизы и тесты
[Вакансии для java-разработчиков](https://t.me/javadevjob)

Data Science

[Книги для дата сайентистов | Data Science](https://t.me/dsprogbook)
[Библиотека Data Science](https://t.me/dsproglib) — полезные статьи, новости и обучающие материалы по Data Science
[Библиотека Data Science для собеса](https://t.me/ds_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Data Science](https://t.me/ds_problems_lib) — код, квизы и тесты
[Вакансии по Data Science, анализу данных, аналитике, искусственному интеллекту](https://t.me/datajob)

Go

[Книги для Go разработчиков](https://t.me/goprogbook)
[Библиотека Go разработчика](https://t.me/goproglib) — полезные статьи, новости и обучающие материалы по Go
[Библиотека Go для собеса](https://t.me/go_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Go](https://t.me/go_problems_lib) — код, квизы и тесты
[Вакансии по Go](https://t.me/godevjob)

C++

[Книги для C/C++ разработчиков](https://t.me/cppprogbook)
[Библиотека C/C++ разработчика](https://t.me/cppproglib) — полезные статьи, новости и обучающие материалы по C++
[Библиотека C++ для собеса](https://t.me/cpp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по C++](https://t.me/cpp_problems_lib) — код, квизы и тесты
[Вакансии по C++](https://t.me/cppdevjob)

Другие каналы

[Библиотека фронтендера](https://t.me/frontendproglib)
[Библиотека мобильного разработчика](https://t.me/mobileproglib)
[Библиотека хакера](https://t.me/hackproglib)
[Библиотека тестировщика](https://t.me/testerlib)
[Вакансии по фронтенду, джаваскрипт, React, Angular, Vue](https://t.me/jsdevjob)
[Вакансии для мобильных разработчиков](https://t.me/mobiledevjob)
[Вакансии по QA тестированию](https://t.me/testerrjob)
[InfoSec Jobs — вакансии по информационной безопасности](https://t.me/hackdevjob)

Чтобы добавить папку с нашими каналами, нажмите [сюда](https://t.me/addlist/17y04EbNMrlhNjZi)

Также у нас есть боты:
[Бот с IT-вакансиями](http://t.me/proglib_job_bot)
[Бот с мероприятиями в сфере IT](http://t.me/event_listener_bot)

Мы в других соцсетях:
[VK](https://vk.com/proglib)
[YouTube](https://www.youtube.com/c/%D0%91%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%B0)
[Дзен](https://zen.yandex.ru/proglib)
[Facebook](https://www.facebook.com/proglib/?locale=ru_RU) *
[Instagram](https://www.instagram.com/proglibrary/) *

__* Организация Meta запрещена на территории РФ__",6932,9,0,goproglib
4817,2024-05-12 09:05:06+00:00,"‍ **database/sql: плохой, хороший, злой**

Алексей Мясников, руководитель Application Team в команде разработки YDB, рассказывает о реализации драйвера `database/sql` для распределённой БД, такой как YDB, какие проблемы при этом придётся преодолеть и как менялся подход с выходом новых версий Go. 

 [Читать](https://habr.com/ru/companies/oleg-bunin/articles/808097/)",6252,12,0,goproglib
4816,2024-05-11 17:01:48+00:00,"‍ ‍ **Borgo** — новый язык программирования, который пытается быть более выразительным, чем Go, но менее сложным, чем Rust. Он комбинирует лучшие черты Go и Rust, восполняя недостатки каждого из языков. Проект развивает [Marco Sampellegrini](https://marcosampellegrini.com/), автор книги [The Simple Haskell Handbook](https://marcosampellegrini.com/simple-haskell-book) и разработчик системы непрерывной интеграции [Quad CI](https://github.com/alpacaaa/quad-ci).

В Borgo используется статическая типизация, аналогичные Go типы и синтаксис, похожий на Rust. Указание точек с запятой в конце строк в коде на Borgo не является обязательным. Код на языке Borgo компилируется в представление на Go, которое полностью совместимо с существующими пакетами для Go. Код компилятора написан на Rust и распространяется под лицензией ISC.

 [Сайт](https://borgo-lang.github.io/) & [Источник](https://www.opennet.ru/opennews/art.shtml?num=61104)",6433,86,66,goproglib
4815,2024-05-11 14:54:27+00:00,"  **GoWrap** — CLI-инструмент, который генерирует декораторы для интерфейсов Go с использованием простых шаблонов. 

Внутри множество примеров для простого добавления метрик, трассировки, пулов и многих других фич в существующий код.

‍ [GitHub](https://github.com/hexdigest/gowrap)",7358,11,0,goproglib
4814,2024-05-10 06:15:46+00:00,"** ntcharts** (Nimble Terminal Charts) — Go-инструмент для отображени гистограмм, линий, временных рядов и других диаграмм с помощью Bubble Tea. В репозитории много примеров для вдохновения

‍ [GitHub](https://github.com/NimbleMarkets/ntcharts)",7237,37,0,goproglib
4813,2024-05-09 18:48:13+00:00," **Кстати, каким клиентом Git пользуетесь?**

 — консольным
️ — встроенным в редактор/IDE
 — сторонним графическим
 — свой вариант (напишу в комментариях)

#холивар #айтисловарь",7476,346,14,goproglib
4810,2024-05-09 09:01:37+00:00,"️ **Прикладное введение в eBPF с Go**

Практический гайд** **с акцентом на практику использования eBPF командой Edge Delta.

 [Читать](https://edgedelta.com/company/blog/applied-introduction-ebpf-go)",6494,19,13,goproglib
4809,2024-05-08 18:16:09+00:00," Подборка лучших статей «Библиотеки программиста» за апрель: сохраняй в заметки, чтобы не пропустить #самыйсок

 [7 признаков неопытного программиста](https://proglib.io/sh/hnlodUtcf8)
️ [Названия веток и комментарии к коммитам в Git: лучшие практики](https://proglib.io/sh/4dGgOvNqwt)
‍️ [Дискриминация на работе: в чем проявляется и что делать, если вы с ней столкнулись](https://proglib.io/sh/alXoLR9Umd)
‍ [Как я входил в IT: опыт подписчиков «Библиотеки программиста»](https://vc.ru/hr/1105021-kak-ya-vhodil-v-it-opyt-podpischikov-biblioteki-programmista)
  [Самоучитель по Go для начинающих. ](https://proglib.io/sh/xmZV4bneBY)[Часть 11. Обработка ошибок. Паника. Восстановление. Логирование](https://proglib.io/sh/xmZV4bneBY)
 [Исследование рынка: 8 наиболее востребованных языков программирования в 2024 году](https://proglib.io/sh/bO0t14qyEl)",7637,3,0,goproglib
4808,2024-05-08 11:01:30+00:00," **Разработка фуллстек веб-приложения на Go + React**: туториал от Jetbrains

[▪️Часть 1](https://www.jetbrains.com/guide/go/tutorials/webapp_go_react_part_one/)
[▪️Часть 2](https://www.jetbrains.com/guide/go/tutorials/webapp_go_react_part_two/)
[▪️Часть 3](https://www.jetbrains.com/guide/go/tutorials/webapp_go_react_part_three/)",10142,30,1,goproglib
4807,2024-05-08 07:14:45+00:00," **7 типов программистов, которых вы встретите на собеседовании**

Осторожно! Данная статья носит шуточный характер и не преследует цели обидеть кого-либо. Все ситуации выдуманы, а совпадения — случайны.

 [Читать статью](https://proglib.io/sh/U69omsRyfu)
 [Зеркало](https://proglib.tech/p/7-tipov-programmistov-kotoryh-vy-vstretite-na-sobesedovanii-2024-05-03)",6023,0,0,goproglib
4800,2024-05-07 19:36:03+00:00,"** Представлены релизы Go 1.22.3 и 1.21.10

 **`cmd/go`: выполнение произвольного кода во время сборки на darwin**
️ **`net`: неправильно сформированное сообщение DNS может вызвать бесконечный цикл

 [Подробнее](https://groups.google.com/g/golang-announce/c/wkkO4P9stm0) 
 [Скачать](https://go.dev/dl/#go1.22.3)

#новости",6224,21,1,goproglib
4798,2024-05-07 08:29:29+00:00,"**‍️ Остаться в живых (keepalive) feat. HTTP/2, Go & gRPC-Go**

Бэкенд-разработчик из Ozon Tech разбирается с механизмами, которые позволяют проверять стабильность соединения между клиентом и сервером в случае, когда обычные TCP keepalive из-за сложности архитектуры не могут определить состояние сервера.

 [Читать](https://habr.com/ru/companies/ozontech/articles/810427/)",6292,20,0,goproglib
4797,2024-05-06 18:56:56+00:00,"️ **Открытые и скрытые вакансии в IT: как найти работу мечты**

Существует целый пласт скрытых вакансий, о которых знает ограниченный круг лиц. Как найти эти вакансии и не упустить свой шанс? Читайте в нашей статье.

 [Читать статью](https://proglib.io/sh/CIRiOb0y2u)
 [Зеркало](https://proglib.tech/p/otkrytye-i-skrytye-vakansii-v-it-kak-nayti-rabotu-mechty-2024-05-03)",5715,6,0,goproglib
4795,2024-05-06 14:44:38+00:00," **gorush** — сервер push-уведомлений, основанный на Gin и поддерживающий APNS (Apple Push Notification Service), Firebase и HMS Push Server (Huawei).

 [GitHub](https://github.com/appleboy/gorush)",6141,17,0,goproglib
4793,2024-05-05 18:40:32+00:00,"🅾️ **Что такое «О» большое: объясняем на простых примерах**

«О» большое (Big O notation) — это математическая нотация, которая позволяет оценить, как изменяется время выполнения алгоритма или объём используемой памяти в зависимости от размера входных данных.

Мы написали подробный гайд по видам сложности, проиллюстрировав их понятными примерами. 

 [Читать статью](https://proglib.io/sh/zC5oI1BqVl)
 [Зеркало](https://proglib.tech/p/chto-takoe-o-bolshoe-obyasnyaem-na-prostyh-primerah-2024-04-27)",5581,6,1,goproglib
4791,2024-05-05 06:38:03+00:00," [**Awesome Ebitengine**](https://github.com/sedyh/awesome-ebitengine) — коллекция фреймворков, библиотек и софта для гоферов, использующих Ebitengine.

[Ebitengine](https://github.com/hajimehoshi/ebiten) — опенсорсная библиотека с простым API, позволяющим быстро и легко писать 2D-игры, которые можно деплоить на нескольких платформах.

 [GitHub](https://github.com/sedyh/awesome-ebitengine)",6207,15,2,goproglib
4790,2024-05-04 19:04:27+00:00," **55 промтов для ChatGPT, которые помогут подготовиться к собеседованию**

Вы когда-нибудь задумывались, как можно использовать искусственный интеллект для того, чтобы подготовиться к техническим собеседованиям лучше, быстрее и эффективнее? Мы вот — да! И поэтому подготовили 55 промтов, которые помогут сделать это.

В статье собраны шаблоны запросов, которые желательно «докрутить» под себя.

 [Читать статью](https://proglib.io/sh/fVmeEi3ztg)
 [Зеркало](https://proglib.tech/p/55-promtov-dlya-chatgpt-kotorye-pomogut-podgotovitsya-k-sobesedovaniyu-2024-04-25)",4992,7,1,goproglib
4789,2024-05-04 11:16:06+00:00,"‍ **Эволюция стандартной библиотеки Go с math/rand/v2**

С момента первого релиза Go в марте 2012 года изменения в стандартной библиотеке ограничивались обещанием совместимости Go. Хотя это и обеспечивало стабильность для Go-разработчиков, со временем стало ясно, что в первоначальных API были допущены ошибки, которые невозможно исправить без нарушения совместимости. В некоторых случаях изменились лучшие практики и соглашения. В связи с этим возникла необходимость в плане внесения важных, разрушающих изменений.

Статья Расса Кокса посвящена новому пакету` math/rand/v2 `в Go 1.22, который является первым ""v2"" в стандартной библиотеке. Он вносит необходимые улучшения в API` math/rand,` но что более важно, он служит примером того, как команда Go может пересматривать другие пакеты стандартной библиотеки по мере необходимости.

 [Читать](https://go.dev/blog/randv2)",6120,20,0,goproglib
4788,2024-05-03 18:01:59+00:00,"  ** Самоучитель по Go для начинающих. Часть 12. Обобщенное программирование. Дженерики**

В этой части самоучителя подробно изучим парадигму обобщенного программирования и её реализацию в языке Go, на практическом примере рассмотрим дженерики и их основные составляющие. В конце статьи решим несколько интересных задач для закрепления материала.


 [Читать гайд](https://proglib.io/sh/QvGON38hDY)

 **Остальные части в серии:**

1. [Особенности и сфера применения Go, установка, настройка](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-1-osobennosti-i-sfera-primeneniya-go-ustanovka-nastroyka-2023-11-23)
2. [Ресурсы для изучения Go с нуля](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-2-resursy-dlya-izucheniya-go-s-nulya-2023-11-28)
3. [Организация кода. Пакеты, импорты, модули. Ввод-вывод текста.](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-3-organizaciya-koda-pakety-importy-moduli-vvod-vyvod-teksta-2023-12-07)
4. [Переменные. Типы данных и их преобразования. Основные операторы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-4-peremennye-tipy-dannyh-i-ih-preobrazovaniya-osnovnye-operatory-2023-12-14)
5. [Условные конструкции if-else и switch-case. Цикл for. Вложенные и бесконечные циклы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-5-uslovnye-konstrukcii-if-else-i-switch-case-cikl-for-vlozhennye-i-beskonechnye-cikly-2024-01-11)
6. [Функции и аргументы. Области видимости. Рекурсия. Defer](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-6-funkcii-i-argumenty-oblasti-vidimosti-rekursiya-defer-2024-01-24)
7. [Массивы и слайсы. Append и сopy. Пакет slices](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-7-massivy-i-slaysy-append-i-sopy-paket-slices-2024-02-08)
8. [Строки, руны, байты. Пакет strings. Хеш-таблица (map)](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-8-stroki-runy-bayty-paket-strings-hesh-tablica-map-2024-02-15)
9. [Структуры и методы. Интерфейсы. Указатели. Основы ООП](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-8-stroki-runy-bayty-paket-strings-hesh-tablica-map-2024-02-15)
10. [Введение в ООП. Наследование, абстракция, полиморфизм, инкапсуляция](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-10-vvedenie-v-oop-nasledovanie-abstrakciya-polimorfizm-inkapsulyaciya-2024-03-11)
11. [Обработка ошибок. Паника. Восстановление. Логирование](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-11-obrabotka-oshibok-panika-vosstanovlenie-logirovanie-2024-04-16)",22760,18,0,goproglib
4787,2024-05-03 11:32:35+00:00,"️ **Обработка ошибок при написании REST, gRPC или других сервисов на Go**: алгоритм от Jonathan Hall

Традиционные методы обработки ошибок в HTTP-обработчиках могут быть повторяющимися и неидиоматичными. Например, часто приходится вручную обрабатывать HTTP-статусы для каждой ошибки, что увеличивает вероятность ошибок и делает код громоздким.

Автор предлагает алгоритм, в котором ошибки обрабатываются более естественным и эффективным способом. В нём функции обработчика могут просто возвращать ошибку, и «правильные» действия будут выполнены автоматически: ошибка будет правильно преобразована и отправлена пользователю, а также будет установлен соответствующий HTTP-статус.

 [Читать](https://habr.com/ru/articles/811361/)",7266,19,0,goproglib
4784,2024-05-02 07:01:47+00:00," **Sonic** — Go-библиотека для асинхронной сетевой и I/O разработки, которая предоставляет согласованную асинхронную модель с упором на достижение минимально возможной задержки в Go (не путайте с одноименным инструментом для [ведения блогов](https://github.com/go-sonic/sonic) или [JSON-библиотекой](https://github.com/bytedance/sonic)).

‍ Исходники библиотеки открыла компания Talos, специализирующаяся на торговой инфраструктуре. «Sonic — это альтернатива пакету `net`. Она устраняет необходимость использования нескольких горутин для обработки нескольких соединений и операций чтения/записи в одном процессе». 

 [Подробнее](https://www.talos.com/insights/talos-goes-sonic) & [GitHub](https://github.com/talostrading/sonic)",9473,24,12,goproglib
4783,2024-05-01 12:02:49+00:00," **Токены для LLM: byte pair encoding на Go **

Основной элемент в современных языковых моделях — это токен. Новые захватывающие LLM обладают длинными контекстными окнами, измеряемыми миллионами токенов.

 Но что это такое?

Eli Bendersky [разобрался](https://eli.thegreenplace.net/2024/tokens-for-llms-byte-pair-encoding-in-go/) и рассмотрел наиболее часто используемый алгоритм для разделения текста на токены, предоставил полную реализацию на Go и показал площадку для экспериментов. 

Полученная реализация не нацелена на скорость, но она совместима с библиотекой tiktoken от OpenAI и генерирует идентичные результаты, работая с теми же файлами словаря.",7250,15,23,goproglib
4782,2024-04-30 19:01:09+00:00,"‍ **Две причины, по которым стоит передавать указатели на структуры в Go**

Как вы решаете, использовать ли указатель при передаче структур в функции? У Preslav Rachev есть несколько надежных критериев, основанных на принципах предметно-ориентированного проектирования, которые могут дать вам новый, более удобный в сопровождении подход.

 [Читать](https://preslav.me/2024/04/23/two-reasons-to-prefer-struct-pointers-in-golang/)",7620,19,18,goproglib
4781,2024-04-30 16:54:15+00:00," **Удается ли вам отдыхать вне работы?**

 — да, почти всегда
 — да, иногда
 — нет, всегда работа в голове
 — какой отдых? Я же айтишник

#холивар",6631,283,4,goproglib
4780,2024-04-30 06:44:23+00:00," **С нуля до продакшена: путь Go в Google

**Автор девять лет проработал SRE в Google и делится историей о том, как Go рос и был принят за годы его становления. Это история о гонке за простоту, надежность и скорость.

 [Читать](https://i-admin.cetico.org/posts/early-days-golang-google/)",7526,16,1,goproglib
4779,2024-04-29 20:43:27+00:00," Применение чистой архитектуры: гайд по использованию Go и концепций чистой архитектуры для создания простого блога

 [Читать](https://habr.com/ru/companies/timeweb/articles/810857/)",8206,32,43,goproglib
4778,2024-04-28 14:42:41+00:00,"‍ **Как команда Dolt использует GitHub Actions** для создания оптимизированных** **сборок, ориентированной на производительность

Взгляд за кулисы процесса сборки Dolt и того, как команда внедрила PGO в пайплайн. 

 [Читать](https://www.dolthub.com/blog/2024-04-19-golang-pgo-builds-using-github-actions/)",7321,4,0,goproglib
4777,2024-04-27 05:05:06+00:00,"‍ **Fuzzing-тестирование: практическое применение**

Никита Догаев, бэкенд тимлид в команде Контента на портале поставщиков Wildberries, поделился опытом применения фаззинга для нагрузочных и интеграционных тестирований. 

Вы узнаете про генерацию текстов на армянском языке, тестирование SQL-запросов, возможность использования фаззера и unit-тестирование бок о бок.

 [Читать](https://habr.com/ru/companies/wildberries/articles/808911/)",10582,16,11,goproglib
4776,2024-04-26 17:00:06+00:00,"‍ Функция `Join` пакета errors конкатенирует список ошибок и возвращает ошибку, если хотя бы одна из переданных ошибок не `nil`.

`Join` возвращает `nil`, если все переданные ошибки равны `nil`.

#tip by [Golangbot](https://x.com/bot_golang/status/1762989762648957015)",9764,39,5,goproglib
4774,2024-04-26 09:25:06+00:00,"‍ Очень** **длинная история у такой маленькой фичи: **cmp.Or из Go 1.22**

Выше — разные юзкейсы от автора фичи Carlana Johnson.

 [Читать подробнее](https://blog.carlana.net/post/2024/golang-cmp-or-uses-and-history/)",8075,27,3,goproglib
4770,2024-04-25 09:01:12+00:00,"‍‍ **Реализация поиска семантически похожих текстов (или товаров) на Go и Postgres** (pgVector)

Казалось бы, в Postgres и так есть неплохой полнотекстовый поиск (tsvector/tsquery), и вы из коробки можете проиндексировать тексты, а потом поискать по ним. 

Но на самом деле это не совсем то, что нужно — такой поиск работает лишь по чётким совпадениям слов. То есть Postgres не догадается, что «кошка гонится за мышью» — это довольно близко к «котёнок охотится на грызуна». Антон Околелов, Go-тимлид в компании Karuna, [делится кейсом](https://habr.com/ru/companies/karuna/articles/809305/) решения этой проблемы: 
 
️ Преобразовываем тексты в наборы чисел (векторы)
️ Сохраняем векторы в базе с помощью pgvector
️ Легко ищем близкие друг к другу векторы или ищем их по вектору-запросу
️ Ускоряем индексами",10907,51,0,goproglib
4769,2024-04-25 06:02:24+00:00,"**️Качаем мозги к лету!**

Курс [«Алгоритмы и структуры данных»](https://proglib.io/w/da6727d1) для тех, кто хочет научиться работать с алгоритмами, подготовиться к собеседованию крупную IT-компанию и начать брать более сложные проекты.

️ [Алгоритмы и структуры данных](https://proglib.io/w/da6727d1) ~~35 990 ₽~~ **21 594** **₽**

⭐️ **Переходите и активируйте бесплатные вводные занятия курса** — https://proglib.io/w/da6727d1

**Вас ждут:**

– 150 практических заданий и 47 видеолекций

– бессрочный доступ к обучению

– поддержка преподавателя в чате

А также очень харизматичный спикер из Яндекса ",7092,10,0,goproglib
4768,2024-04-24 20:57:25+00:00," `io.TeeReader` можно использовать для копирования содержимого одного ридера в новый. Этот метод полезен, когда тело HTTP-запроса нужно прочитать дважды.

 Юзкейс: логирование входящих запросов с помощью middleware перед обработкой запросов.

#tip by [Golangbot](https://twitter.com/bot_golang/status/1782131703495975113)",10328,45,3,goproglib
4767,2024-04-24 20:16:20+00:00,"‍ Скоро во всех подъездах

#жиза",6253,74,1,goproglib
4764,2024-04-24 05:53:24+00:00,"‍ **Разработка полноценного распределенного хранилища файлов на Go**: десятичасовой гайд от популярного Go-ютубера Anthony GG 

 [Смотреть](https://youtu.be/bymQakvTY40?si=hXvBPayxuDd_sK96)",7969,58,6,goproglib
4763,2024-04-23 18:43:10+00:00," **А какой фидбек в вашей команде?**

 — как позитивный, так и негативный
 — в основном конструктивный
 — бесполезный
 — у нас нет фидбека

#холивар",7166,102,1,goproglib
4762,2024-04-23 11:25:06+00:00,"‍‍** Как использовать миграции базы данных в сервисах на Go**: гайд для начинающих

Автор работает с библиотекой [golang-migrate,](https://github.com/golang-migrate/migrate) которая позволяет выполнять миграции из различных источников данных.

 [Читать](https://habr.com/ru/articles/809301/)",7189,12,6,goproglib
4753,2024-04-22 20:54:59+00:00," **Как изменились зарплаты айтишников за 2023 год**

Команда NEWHR Data провела [опрос](https://newhr.org/data/salary-change-2023) 3074 айтишников. Ниже — главные выводы исследования: 

1️⃣ **Рост зарплат — у 59% айтишников**

Несмотря на кризис, более чем у половины айтишников зарплаты выросли. Причём этот рост не зависит от специализации, грейда или типа компании, в которой работает респондент.

2️⃣ **Зарплаты чаще росли в российских компаниях, а не иностранных**

У 65% айтишников, работающих на российские компании, зарплаты по итогам года выросли. Среди сотрудников иностранных компаний рост коснулся только 50%. Разрыв можно объяснить разными ситуациями на рынке труда. В России — дефицит опытных специалистов и фокус на их привлечении/удержании. За рубежом такого дефицита нет.

3️⃣ **У опытных айтишников зарплаты растут чаще, чем у неопытных**

Чаще всего зарплаты росли у middle-специалистов: об этом сообщили 65% опрошенных этого грейда. Реже всего — у junior (50%). Вознаграждение грейда senior, тимлидов и топ-менеджеров увеличивалось примерно одинаково (около 60%).

4️⃣ **Повышение оклада (не индексация) — ключевой фактор роста зарплат в российских компаниях**

Это может говорить о стремлении российских компаний удержать сотрудников, компенсировать инфляцию и снижение курса рубля. Работодатели хотят быть конкурентоспособными в гонке за специалистами на внутреннем рынке.

5️⃣ **Смена компании — ключевой фактор роста зарплат в иностранных компаниях**

После заморозки найма и сокращений в 2022 году зарубежный рынок в 2023-м начал оттаивать. Появились возможности устроиться в иностранные компании. Поэтому русскоязычные айтишники в 2023 году активно искали и находили работу за рубежом.

#инфографика",5022,15,0,goproglib
4752,2024-04-22 12:00:49+00:00," Ваш код хорошо написан, содержит множество тестов, выполняет надлежащую обработку ошибок, логирует свои действия, но вы все равно не можете выяснить, откуда берется эта ужасная ошибка, которая продолжает преследовать? 

🫀Пришло время для операции на открытом сердце — отладки кода. Delve — отладчик для Go на основе CLI, адаптированный к модели конкурентности и рантайму. Он позволяет устанавливать точки останова, проверять горутины, а также оценивать переменные и манипулировать ими в режиме реального времени. Delve поддерживает удаленную отладку и легко интегрируется с основными IDE, включая VS Code.

 Читать [гайд по работе с Delve](https://earthly.dev/blog/golang-dlv/)",6142,15,13,goproglib
4751,2024-04-22 09:09:50+00:00,"** Исследование рынка: 8 наиболее востребованных языков программирования в 2024 году**

Результаты исследования рынка IT-вакансий, проведенного DevJobsScanner. Были проанализированы 14 миллионов объявлений и выявлены 8 наиболее востребованных языков программирования.

[Читать статью](https://proglib.io/sh/bO0t14qyEl)

#почитать",5519,8,1,goproglib
4750,2024-04-21 06:01:54+00:00," **Huma** — современный, простой, быстрый и гибкий микрофреймворк для создания HTTP REST/RPC API на Go, поддерживаемый OpenAPI 3 и JSON Schema.

 [GitHub](https://github.com/danielgtaylor/huma) & [Сайт](https://huma.rocks/)",6845,30,2,goproglib
4749,2024-04-20 20:58:49+00:00,#жиза #linux,6174,54,27,goproglib
4748,2024-04-20 06:23:25+00:00,"‍ Microsoft запускает блог Go, который будет ориентирован на использование Go с Azure и вклад Microsoft в экосистему Go в целом.

 [Подробнее](https://devblogs.microsoft.com/go/welcome-to-the-microsoft-for-go-developers-blog/)

#новости",6585,45,0,goproglib
4747,2024-04-19 18:36:24+00:00,"  **Самоучитель по Go для начинающих. Часть 11. Обработка ошибок. Паника. Восстановление. Логирование**

Рассмотрим устройство механизма ошибок в Go и методы их обработки, познакомимся с функциями паники и восстановления, а также научимся логировать информацию о состоянии программы с помощью различных логеров.

 [Читать гайд](https://proglib.io/sh/xmZV4bneBY)

 **Остальные части в серии:**

1. [Особенности и сфера применения Go, установка, настройка](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-1-osobennosti-i-sfera-primeneniya-go-ustanovka-nastroyka-2023-11-23)
2. [Ресурсы для изучения Go с нуля](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-2-resursy-dlya-izucheniya-go-s-nulya-2023-11-28)
3. [Организация кода. Пакеты, импорты, модули. Ввод-вывод текста.](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-3-organizaciya-koda-pakety-importy-moduli-vvod-vyvod-teksta-2023-12-07)
4. [Переменные. Типы данных и их преобразования. Основные операторы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-4-peremennye-tipy-dannyh-i-ih-preobrazovaniya-osnovnye-operatory-2023-12-14)
5. [Условные конструкции if-else и switch-case. Цикл for. Вложенные и бесконечные циклы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-5-uslovnye-konstrukcii-if-else-i-switch-case-cikl-for-vlozhennye-i-beskonechnye-cikly-2024-01-11)
6. [Функции и аргументы. Области видимости. Рекурсия. Defer](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-6-funkcii-i-argumenty-oblasti-vidimosti-rekursiya-defer-2024-01-24)
7. [Массивы и слайсы. Append и сopy. Пакет slices](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-7-massivy-i-slaysy-append-i-sopy-paket-slices-2024-02-08)
8. [Строки, руны, байты. Пакет strings. Хеш-таблица (map)](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-8-stroki-runy-bayty-paket-strings-hesh-tablica-map-2024-02-15)
9. [Структуры и методы. Интерфейсы. Указатели. Основы ООП](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-8-stroki-runy-bayty-paket-strings-hesh-tablica-map-2024-02-15)
10. [Введение в ООП. Наследование, абстракция, полиморфизм, инкапсуляция](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-10-vvedenie-v-oop-nasledovanie-abstrakciya-polimorfizm-inkapsulyaciya-2024-03-11)",22296,22,1,goproglib
4746,2024-04-19 12:00:45+00:00,"‍ **Go — объектно-ориентированный язык программирования? **

Спорная и часто обсуждаемая тема, но прежде чем отмахнуться от нее как от кликбейта, прочитайте причины автора David Wickes, почему он думает: «Go — очень объектно-ориентированный язык программирования. Думаю, даже больше, чем Java…»

 [Читать](https://blog.gypsydave5.com/posts/2024/4/12/go-is-an-object-oriented-programming-language/)",6285,10,11,goproglib
4745,2024-04-18 18:42:12+00:00," **Любите костыли?**

 — весь мой текущий проект — сплошной костыль
 — нет, всегда стараюсь избегать костылей
 — это часть рабочего процесса. Если сработает, можно выпилить костыль и написать код с нуля как следует

#холивар",6534,215,7,goproglib
4742,2024-04-18 06:10:20+00:00,"‍ Кстати, GoLand умеет связывать Go template с типами приложения:
```{{- /*gotype: package/path.type_name*/ -}}
```

Речь про механизм шаблонов, который разделен на два пакета: `text/template` и `html/template`. Они схожи по функциональности, с той разницей, что `html/template` позволяет генерировать защищенный от внедрения HTML-код. Кроме того, они помогают в написании кода в других приложениях, включая настройку [Helm](https://helm.sh/) и [менеджера пакетов Kubernetes](https://kubernetes.io/) .

 [Подробнее](https://www.jetbrains.com/help/go/integration-with-go-templates.html)",9236,26,10,goproglib
4741,2024-04-17 10:07:58+00:00,"‍ **Ускорение Go-тестов на CI**

Александр Павлов, сеньор Go-разработчик в СберМаркете, делится опытом ускорения Go-пайплайнов в PaaS.

 [Читать](https://habr.com/ru/companies/sbermarket/articles/806725/)",6835,32,0,goproglib
4740,2024-04-16 18:23:59+00:00," Разрабы, на какие статьи вы переходили или какие последние ссылки открывали из Telegram? Речь идёт не только о наших статьях и ссылках, а о любых.

 Присылайте ссылку или просто напишите в комментах в стиле «был пост про …»",6910,14,2,goproglib
4736,2024-04-16 14:38:05+00:00,"‍ [**Результаты первого полугодия 2024 года**](https://go.dev/blog/survey2024-h1-results)** в опросе Go-разработчиков **

 Все как обычно: 

️ разработчики настроены позитивно, 
️ они верят, что команда Go поступает правильно, 
️ многие считают, что Go отлично подходит для приложений с искусственным интеллектом.

 **Что думаете на счет последнего?**",5889,38,0,goproglib
4734,2024-04-15 19:33:12+00:00,"‍ **Производительность Go с версии 1.0 до 1.22**

Автор сравнивает производительность [GoAWK](https://github.com/benhoyt/goawk) (интерпретатор AWK с поддержкой CSV) при компиляции с использованием каждой выпущенной версии Go от 1.0 до 1.22.

 [Читать](https://benhoyt.com/writings/go-version-performance-2024/)",6690,22,3,goproglib
4733,2024-04-15 14:49:09+00:00,"**Реализация in-memory кэша на Go**: пример с использованием дженериков и без

️ map[string]interface**
**️ Кэш со сроком действия (TTL)
️ In-memory кэш с** **использованием дженериков**

 **[Читать](https://www.mohitkhare.com/blog/go-in-memory-cache/)",7154,15,7,goproglib
4732,2024-04-14 20:45:36+00:00,"**Value receivers и nil**

Представьте себе структуру с двумя методами: один использует pointer receiver, а другой — value receiver.

```
package main

type S struct {
    N int
}

func (s *S) PointerRcv() {
}

func (s S) ValueRcv() {
}
```

Что происходит, если receiver равен `nil`?

```
func main() {
    var s *S // s равно nil
    s.PointerRcv()
    s.ValueRcv()
}
```

Переменная `s` принимает нулевое значение типа `*S`, которое является `nil`. Поскольку ни один из методов не обращается к receiver'у, оба вызова метода должны пройти без проблем.

Однако, если мы [выполняем](https://play.golang.com/p/qEOdySX_MQ6) этот код, вызов `s.ValueRcv()` вызовет панику!

 Что происходит?

Рассмотрим, что методы — это просто функции с некоторым синтаксическим сахаром. Метод `func (s S) f()` семантически идентичен функции `func f(s S)`. Method receiver становится первым аргументом функции.

Таким образом, вышеуказанный код может быть переписан без методов следующим образом:

```
package main

type S struct {
    N int
}

func PointerFunc(s *S) {
}

func ValueFunc(s S) {
}

func main() {
    var s *S 

    PointerFunc(s)
    ValueFunc(*s)
}
```

Теперь должно быть легко понять, почему `ValueFunc()` вызывает панику. Указатель `s` должен быть разыменован при передаче его в `ValueFunc()`. Разыменование `nil` указателя невозможно и приводит к панике.

Для метода `func (s *S) PointerRcv()`, receiver (или параметр функции во втором примере) не нуждается в разыменовании. Следовательно, паники не будет.

Так что, если у вас есть тип с pointer/value receivers, будьте осторожны, чтобы не вызывать какие-либо методы для `nil` значения этого типа.

#tip",6322,56,1,goproglib
4731,2024-04-14 16:33:46+00:00,"‍ Обзор сравнительно новых (и поэтому малоизвестных) команд Git, которые сделают вашу повседневную работу проще:

️ `git switch` — просто переключает ветку
️ `git restore` — восстанавливает файл до последней зафиксированной версии
️ `git sparse-checkout` — загружает в рабочую копию только подмножество файлов из большого репозитория
️ `git worktree` — управляет несколькими рабочими деревьями, связанными с одним репозиторием
️ и другие

 Читать [перевод](https://habr.com/ru/articles/799413/) & [оригинал](https://martinheinz.dev/blog/109)",5668,24,1,goproglib
4721,2024-04-14 08:04:36+00:00,"‍ **GoLand**: [путеводитель по основным фичам](https://www.jetbrains.com/ru-ru/go/features/) популярной IDE

️ Редактор кода
️ Встроенные инструменты и интеграция
️ Фронтенд и бэкенд
️ Экосистема плагинов",5751,44,8,goproglib
4720,2024-04-13 17:14:54+00:00," Подборка вопросов от [Кирилла Мокевнина](https://twitter.com/mokevnin/status/1778514285917778078), которые имеет смысл задать на собесах для проверки уровня разработчика и навыков решения прикладных задач (типовых для веба)

 [Читать остальные вопросы](https://twitter.com/mokevnin/status/1778514285917778078)

 **Веб-разработчики, как вам?**",5120,0,0,goproglib
4710,2024-04-13 09:01:48+00:00," **12 трюков Go, которые можно взять на вооружение**

[Простые советы](https://blog.devtrovert.com/p/12-personal-go-tricks-that-transformed) для повышения продуктивности:

1. Time elapsed trick
1.5. Two-Stage Defer
2. Slice pre-allocation
3. Chaining
4. Go 1.20 enables parsing of slices into arrays or array pointers
5. Using import with ‘_’ for package initialization
6. Use import with dot .
7. Multiple errors can now be wrapped into a single error with Go 1.20
8. Trick to Check Interface at Compile Time
9. ~~Ternary with generic~~ (Should be avoided)
10. Avoid Naked Parameter
11. Ways to verify if an interface is truly nil
12. Unmarshal time.Duration in JSON",5954,20,5,goproglib
4709,2024-04-13 06:16:06+00:00,"**Самые полезные каналы для программистов в одной подборке!**

Сохраняйте себе, чтобы не потерять 

Для всех

[Библиотека программиста](https://t.me/proglibrary) — новости, статьи, досуг, фундаментальные темы
[Книги для программистов](https://t.me/progbook)
[IT-мемы](https://t.me/itmemlib)
[Proglib Academy](https://t.me/proglib_academy) — тут мы рассказываем про обучение и курсы

Про нейросети
[Библиотека робототехники и беспилотников | Роботы, ИИ, интернет вещей ](https://t.me/robotics_autopilots_iot)
[Библиотека нейрозвука | Транскрибация, синтез речи, ИИ-музыка ](https://t.me/neuroaudio)
[Библиотека нейротекста | ChatGPT, Gemini, Bing ](https://t.me/neuro_text)
[Библиотека нейровидео | Sora AI, Runway ML, дипфейки ](https://t.me/neurovidos)
[Библиотека нейрокартинок | Midjourney, DALL-E, Stable Diffusion ](https://t.me/neurokartinka)

#️⃣C#

[Книги для шарпистов | C#, .NET, F#](https://t.me/csharpprogbook)
[Библиотека шарписта ](https://t.me/csharpproglib)— полезные статьи, новости и обучающие материалы по C#
[Библиотека задач по C#](https://t.me/csharp_problems_lib) — код, квизы и тесты
[Библиотека собеса по C#](https://t.me/csharp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Вакансии по C#, .NET, Unity Вакансии по PHP, Symfony, Laravel](https://t.me/csharpdevjob)

️DevOps

[Библиотека devops’а](https://t.me/devopsslib) — полезные статьи, новости и обучающие материалы по DevOps
[Вакансии по DevOps & SRE](https://t.me/devopssjob)
[Библиотека задач по DevOps](https://t.me/devops_problems_lib) — код, квизы и тесты
[Библиотека собеса по DevOps](https://t.me/devops_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования

PHP

[Библиотека пхпшника](https://t.me/phpproglib) — полезные статьи, новости и обучающие материалы по PHP
[Вакансии по PHP, Symfony, Laravel](https://t.me/phpdevjob)
[Библиотека PHP для собеса](https://t.me/php_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по PHP](https://t.me/php_problems_lib) — код, квизы и тесты

Python

[Библиотека питониста](https://t.me/pyproglib) — полезные статьи, новости и обучающие материалы по Python
[Вакансии по питону, Django, Flask](https://t.me/pydevjob)
[Библиотека Python для собеса](https://t.me/py_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Python](https://t.me/py_problems_lib) — код, квизы и тесты

Java

[Книги для джавистов | Java ](https://t.me/javaprogbook)
[Библиотека джависта](https://t.me/javaproglib) — полезные статьи по Java, новости и обучающие материалы
[Библиотека Java для собеса](https://t.me/java_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Java](https://t.me/java_problems_lib) — код, квизы и тесты
[Вакансии для java-разработчиков](https://t.me/javadevjob)

Data Science

[Книги для дата сайентистов | Data Science](https://t.me/dsprogbook)
[Библиотека Data Science](https://t.me/dsproglib) — полезные статьи, новости и обучающие материалы по Data Science
[Библиотека Data Science для собеса](https://t.me/ds_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Data Science](https://t.me/ds_problems_lib) — код, квизы и тесты
[Вакансии по Data Science, анализу данных, аналитике, искусственному интеллекту](https://t.me/datajob)

Go

[Книги для Go разработчиков](https://t.me/goprogbook)
[Библиотека Go разработчика](https://t.me/goproglib) — полезные статьи, новости и обучающие материалы по Go
[Библиотека Go для собеса](https://t.me/go_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Go](https://t.me/go_problems_lib) — код, квизы и тесты
[Вакансии по Go](https://t.me/godevjob)

C++

[Книги для C/C++ разработчиков](https://t.me/cppprogbook)
[Библиотека C/C++ разработчика](https://t.me/cppproglib) — полезные статьи, новости и обучающие материалы по C++
[Библиотека C++ для собеса](https://t.me/cpp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по C++](https://t.me/cpp_problems_lib) — код, квизы и тесты
[Вакансии по C++](https://t.me/cppdevjob)

Другие каналы

[Библиотека фронтендера](https://t.me/frontendproglib)
[Библиотека мобильного разработчика](https://t.me/mobileproglib)
[Библиотека хакера](https://t.me/hackproglib)
[Библиотека тестировщика](https://t.me/testerlib)
[Вакансии по фронтенду, джаваскрипт, React, Angular, Vue](https://t.me/jsdevjob)
[Вакансии для мобильных разработчиков](https://t.me/mobiledevjob)
[Вакансии по QA тестированию](https://t.me/testerrjob)
[InfoSec Jobs — вакансии по информационной безопасности](https://t.me/hackdevjob)

Чтобы добавить папку с нашими каналами, нажмите [сюда](https://t.me/addlist/17y04EbNMrlhNjZi)

Также у нас есть боты:
[Бот с IT-вакансиями](http://t.me/proglib_job_bot)
[Бот с мероприятиями в сфере IT](http://t.me/event_listener_bot)

Мы в других соцсетях:
[VK](https://vk.com/proglib)
[YouTube](https://www.youtube.com/c/%D0%91%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%B0)
[Дзен](https://zen.yandex.ru/proglib)
[Facebook](https://www.facebook.com/proglib/?locale=ru_RU) *
[Instagram](https://www.instagram.com/proglibrary/) *

__* Организация Meta запрещена на территории РФ__",5450,12,0,goproglib
4708,2024-04-12 19:20:10+00:00,Такие дела 🫡,6364,40,25,goproglib
4706,2024-04-12 11:27:41+00:00,"‍ **Запуск Go-кода из Elixir с использованием Web Assembly
**
WebAssembly объединяет языки программирования — на этот раз это Elixir and Go. Узнайте, как [wasmex](https://github.com/tessi/wasmex) работает в действии. 

 [Читать](https://yasoob.me/posts/running-go-web-assembly-from-elixir/)",5832,0,6,goproglib
4703,2024-04-11 13:00:45+00:00," Пополняемая база знаний для подготовки к собесу по бекэнду на Go:

‍ [GitHub](https://github.com/pers0na2dev/golangreview)
 [Вопросы HR](https://golangreview.ru/docs/category/%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-hr-%D0%BE%D0%B2)
 [Вопросы по Go](https://golangreview.ru/docs/category/%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%BF%D0%BE-golang)
 [Вопросы по окружению](https://golangreview.ru/docs/category/%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%BF%D0%BE-%D0%BE%D0%BA%D1%80%D1%83%D0%B6%D0%B5%D0%BD%D0%B8%D1%8E)
 [Вопросы по Linux](https://golangreview.ru/docs/category/%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%BF%D0%BE-linux)
 [Вопросы по проектированию систем](https://golangreview.ru/docs/category/%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%BD%D1%8B%D0%B9-%D0%B4%D0%B8%D0%B7%D0%B0%D0%B9%D0%BD)",7941,34,0,goproglib
4702,2024-04-11 11:22:26+00:00," **Топ-9 паттернов для обмена данными и взаимодействия между компонентами/сервисами в распределенных системах**

 Peer-to-Peer
 API Gateway
 Pub-Sub
 Request-Response
 Event Sourcing
 ETL
 Batching
 Streaming Processing
 Orchestration

 [Источник](https://x.com/alexxubyte/status/1778082844612640966)

#инфографика",5017,28,0,goproglib
4701,2024-04-11 06:03:35+00:00,"**Ответьте на 3 вопроса**, чтобы получить вводные занятия к курсу «Алгоритмы и структуры данных»

Получите вводные занятия, ответив на 3 вопроса – https://proglib.io/w/a069d47b

**На вводной части вас ждут:**

1. Лекция «Производительность алгоритмов» от руководителя разработки Яндекс.Самокатов

2. Лекция «Итеративные сортировки и линейные сортировки» от аспирант департамента искусственного интеллекта ВШЭ

3. Практические задания после лекций

4. Ссылки на дополнительные материалы для самостоятельного изучения

️Переходите и начинайте учиться уже сегодня – https://proglib.io/w/a069d47b",5392,3,0,goproglib
4700,2024-04-10 20:19:18+00:00," В объектно-ориентированных языках [Проблема Ромба](https://ru.m.wikipedia.org/wiki/%D0%A0%D0%BE%D0%BC%D0%B1%D0%BE%D0%B2%D0%B8%D0%B4%D0%BD%D0%BE%D0%B5_%D0%BD%D0%B0%D1%81%D0%BB%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5) является известной ловушкой модели множественного наследования.

Что оно имеет общего с Go? Без наследования, не говоря уже о множественном наследовании, что может пойти не так?

В Go вполне возможно построить отношение зависимости в форме ромба через встраивание структур. Хотя встраивание структур не то же самое, что наследование, это также форма «продвижения» методов из встроенной во встраивающую структуру. 

Если встроенная структура `B` имеет метод `Foo()`, встраивающая структура `D` может вызвать `Foo()` напрямую, вместо вызова `B.Foo()`. Если структура `D` встраивает `B` и `C`, которые оба определяют метод `Foo()` (который может опционально реализовывать интерфейс A), тогда у нас есть Проблема Ромба [(пример).](https://go.dev/play/p/EJxOoXDICfw)

К счастью, Go предотвращает нас от случайного вызова неправильного `Foo()`. Решение Go даже попало в [Википедию:](https://en.wikipedia.org/wiki/Multiple_inheritance?utm_source=christophberger&utm_medium=email&utm_campaign=2024-04-07-performance-security-and-a-diamond-problem#Mitigation)

Go prevents the diamond problem at compile time. If a structure D embeds two structures B and C which both have a method F(), thus satisfying an interface A, the compiler will complain about an ""ambiguous selector"" if D.F() is called, or if an instance of D is assigned to a variable of type A. B and C's methods can be called explicitly with D.B.F() or D.C.F().

 Еще один хороший пример того, почему так важно и полезно, чтобы язык обнаруживал как можно больше проблем на этапе компиляции.

#этобаза",5658,18,1,goproglib
4699,2024-04-10 16:30:07+00:00,"‍ **Как я входил в IT**: опыт подписчиков «Библиотеки программиста»

Недавно мы провели опрос среди наших читателей, и сделали несколько интересных открытий, которые пригодятся всем, кто решил войти в ИТ в 2024 году.

 [Читать результаты опроса](https://vc.ru/hr/1105021-kak-ya-vhodil-v-it-opyt-podpischikov-biblioteki-programmista)",5207,15,1,goproglib
4698,2024-04-10 13:51:17+00:00,"‍ «**Планировщик Go: имплементация языка с облегченной конкурентностью**» — один из топовых докладов о планировщике Go от Дмитрия Вьюкова из Google. 

Вы узнаете, как реализовано это волшебство: от работы основных компонентов и работы в целом до разбора конкретных аспектов, таких как блокировка обработки системных вызовов и реализация расширяемых стеков.

▶️ [Смотреть](https://youtu.be/-K11rY57K7k?si=45ZIVMWHc5XFSdw6)",7257,19,0,goproglib
4691,2024-04-09 07:57:55+00:00," **xgo** — инструмент, который добавляет функцию `Trap` и предоставляет такие инструменты, как `Mock` и `Trace`. Главная цель — помочь разработчикам писать юнит-тесты и отлаживать их проще и быстрее.

 [Подробнее](https://blog.xhd2015.xyz/posts/xgo-monkey-patching-in-go-using-toolexec/)
 [GitHub](https://github.com/xhd2015/xgo)",9229,12,3,goproglib
4690,2024-04-08 20:37:52+00:00,"‍️ **Дискриминация на работе: в чем проявляется и что делать, если вы с ней столкнулись**

Дискриминация в IT — серьезная проблема, с которой сталкиваются до 40% работников. Как распознать притеснения по возрасту, инвалидности или семейному положению и отстоять свои права?

 [Читать статью](https://proglib.io/sh/alXoLR9Umd)",5719,29,33,goproglib
4688,2024-04-08 14:21:15+00:00," Изучение исходников других проектов — отличный способ обучения для Go-разраба. Ловите один из интересных примеров с уклоном в веб-разработку

 [Househunt](https://github.com/willemschots/househunt) — полноценное веб-приложение на Go, изучив исходили которого вы найдете ответы на несколько важных вопросов:

️ Как структурировать проект и куда правильно раскидать файлы?
️ Как объединить разные пакеты?
️ Как писать модульные и интеграционные тесты?
️ .. и многие другие.

 [Статья](https://www.willem.dev/articles/example-web-application-project/) о предпосылках разработки проекта",7418,25,25,goproglib
4687,2024-04-07 18:55:28+00:00,"‍ **Сгенерируйте своего гофера**

 [Gopher-Verse](https://tech.creativefabrica.com/) — увлекательный проект от Creative Fabrica , который использует обученную модель для генеративного создания гоферов в стиле Go на основе ваших подсказок. Результаты неоднозначные, но забавные.",6908,15,0,goproglib
4686,2024-04-07 09:49:38+00:00,"️ **Названия веток и комментарии к коммитам в Git: лучшие практики**

Git — самая популярная система контроля версий: большинство разработчиков используют ее и для личных, и для командных проектов. При этом многие разработчики, особенно начинающие, небрежно подходят к выбору названий веток и оформлению коммитов.

Это оставляет не лучшее впечатление об их профессионализме, но что еще хуже — затрудняет командную работу и усложняет поддержание кодовой базы. В этой статье мы разберем лучшие практики для работы с ветками и коммитами.

 [Читать статью](https://proglib.io/sh/4dGgOvNqwt)
 [Зеркало](https://proglib.tech/p/nazvaniya-vetvey-i-kommentarii-k-kommitam-v-git-luchshie-praktiki-2024-04-01)",6479,24,0,goproglib
4685,2024-04-06 11:30:47+00:00,"‍ Роутинг в Go — общая проблема, для решения которой уже построили кучу фреймворков. Google сама [признаётся,](https://go.dev/blog/routing-enhancements) что они вдохновлялись сторонними решениями и лучшее добавили в `net/http` новой версии языка.  

 С приходом Go 1.22 всё необходимое для роутинга из коробки умеет делать `http.ServeMux`: он различает HTTP-методы, хосты и домены, а также может шаблонизировать пути через плейсхолдеры.  

 [Читайте подробнее](https://habr.com/ru/companies/avito/articles/805097/) о новых возможностях роутинга на простых примерах от Мичурина Алексея из AvitoTech.",7217,46,0,goproglib
4684,2024-04-05 15:01:22+00:00," Существует множество отличных инструментов для разработки CLI-приложений на Go. Но что, если вы хотите создать, например, интерактивный шелл на Go? Вариантов уже не так много.

Команда Dolt использовала для этих целей инструмент [abiosoft/ishell](https://github.com/abiosoft/ishell) и научилась извлекать из него максимальную пользу. Читайте подробнее [гайд,](https://www.dolthub.com/blog/2023-03-29-interactive-shell-golang/) из которого узнаете:

️ как настроить интерактивный шелл с помощью команд, которые вы хотите обрабатывать;
️ как выйти из шелла и как использовать встроенные функции пакета. 

Все это не на абстрактных примерах, а на основе встроенного шелла SQL Dolt.",7296,11,0,goproglib
4682,2024-04-04 05:55:05+00:00,"  Вышли релизы Go 1.22.2 and 1.21.9, которые исправляют CVE-2023-45288. 

 [Подробнее об уязвимости](https://groups.google.com/g/golang-announce/c/YgW0sx8mN3M)
 [Скачать](https://go.dev/dl/#go1.22.2)

#новости",7970,18,0,goproglib
4680,2024-04-03 19:33:54+00:00," **Beego** — высокопроизводительный фреймворк для разработки RESTful API, веб-приложений и бэкенд-сервисов, вдохновленный Tornado, Sinatra и Flask. Недавно была представлена версия [2.2.0](https://github.com/beego/beego/releases/tag/v2.2.0)

 [GitHub](https://github.com/beego/beego)",7443,28,1,goproglib
4678,2024-04-03 11:44:50+00:00,"** Data Flow Analysis для Go 

**GoLand 2023.3 поддерживает data flow analysis (DFA). Эта фича представляет собой тип статического анализа кода, который анализирует данные, проходящие через программу. Читайте подробнее о механизмах ее работы и кейсах обнаружения ошибок на лету!

 [Читать](https://blog.jetbrains.com/go/2024/03/26/data-flow-analysis-for-go/)",7205,20,2,goproglib
4676,2024-04-02 19:33:52+00:00," **Как изменился ваш информационный пузырь за год?**

Помните свои информационные предпочтения год назад? Многое изменилось! Социальные сети, мессенджеры, YouTube, подкасты — все эти каналы ежедневно борются за наше внимание. У каждого из нас за год сформировался свой уникальный информационный рацион. Пройдите наш опрос и расскажите, как изменились ваши вкусы в медиапотреблении.

 [Пройти опрос](https://forms.gle/NWyEdM4kn1PRFTmM8) (__займёт ~4 минуты)__",6620,20,0,goproglib
4675,2024-04-02 16:17:05+00:00,"‍ **Freeze** — новый инструмент от команды Charm для генерации изображений кода и вывода терминала.

️ Может быть полезен для создания документации, обучающих материалов, блогов или просто для того, чтобы поделиться красиво оформленным кодом или результатами выполнения команд в соцсетях.

 [GitHub](https://github.com/charmbracelet/freeze)",6737,28,0,goproglib
4674,2024-04-01 19:14:06+00:00," **Интервью Роба Пайка для Medium**

Вообще-то редакторы предполагали, что Пайк расскажет о пятнадцати годах программирования с применением языка, основным идеологом которого он считается. К окончанию беседы выяснилось, что интервьюер извлек больше информации, чем предполагал, и, естественно, редакторы решили урезать содержание «для пользы индустрии», но, как обычно получается в таких случаях, произошла утечка информации.

 [Читать](https://habr.com/ru/articles/797665/)",8168,80,4,goproglib
4673,2024-04-01 05:53:07+00:00," **7 признаков неопытного программиста**

Давайте попробуем отделить зерна от плевел и вывести несколько общих признаков, по которым можно определить неопытного программиста.

 [Читать статью](https://proglib.io/sh/hnlodUtcf8)
 [Зеркало](https://proglib.tech/p/7-priznakov-neopytnogo-programmista-2024-03-26)",27696,26,1,goproglib
4672,2024-03-31 18:00:06+00:00,"️ Новый видеогайд про **разработку рантайма Go на чистом C** от Владимира Балуна, который охватывает некоторые фундаментальные темы

⏳ **Таймкоды:**

[00:00](https://www.youtube.com/watch?v=AnxA3J0uFRc&t=0s) — Введение
[00:14](https://www.youtube.com/watch?v=AnxA3J0uFRc&t=14s) — Процессы в ОС
[00:32](https://www.youtube.com/watch?v=AnxA3J0uFRc&t=32s) — Ресурсы процессов
[00:52](https://www.youtube.com/watch?v=AnxA3J0uFRc&t=52s) — Потоки в ОС
[01:09](https://www.youtube.com/watch?v=AnxA3J0uFRc&t=69s) — Контекст потоков
[01:16](https://www.youtube.com/watch?v=AnxA3J0uFRc&t=76s) — Планировщик ОС
[01:44](https://www.youtube.com/watch?v=AnxA3J0uFRc&t=104s) — Context switching в ОС
[02:38](https://www.youtube.com/watch?v=AnxA3J0uFRc&t=158s) — Проблемы context switching
[03:36](https://www.youtube.com/watch?v=AnxA3J0uFRc&t=216s) — Context switching в приложении
[04:58](https://www.youtube.com/watch?v=AnxA3J0uFRc&t=298s) — Совместный context switching
[05:23](https://www.youtube.com/watch?v=AnxA3J0uFRc&t=323s) — Планировщик в приложении
[05:46](https://www.youtube.com/watch?v=AnxA3J0uFRc&t=346s) — Отдельный контекст планирования
[06:05](https://www.youtube.com/watch?v=AnxA3J0uFRc&t=365s) — Процесс планирования корутин
[06:32](https://www.youtube.com/watch?v=AnxA3J0uFRc&t=392s) — Сопрограммы и подпрограммы",8201,41,1,goproglib
4671,2024-03-31 07:03:41+00:00,"‍ **Разработка блога на Go**: мини-серия гайдов от опытного гофера Jon Calhoun

 [Часть 1](https://www.calhoun.io/building-a-blog-exercise/). Введение
 [Часть 2](https://www.calhoun.io/building-a-blog-part-1/). Рендеринг сырого Markdown 
 [Часть 3](https://www.calhoun.io/building-a-blog-part-2/). Рендеринг Markdown как HTML",7248,27,0,goproglib
4666,2024-03-30 18:02:22+00:00,"🪿 «**Внутри S3**» — доклад Павла Левдика из Yandex Infrastructure про то, как он и его команда катают гусей

А «гусём» называется бэкенд S3 API: он написан на Go, а из словосочетания Go + S3 получился goose. Возможно, вы также слышали про GeeseFS, высокопроизводительный FUSE‑клиент для S3. C его помощью вы можете на своём ноутбуке или виртуалке подмонтировать папку, которая будет работать с бакетом S3.

[Читайте](https://habr.com/ru/companies/yandex/articles/803703/) или [смотрите](https://youtu.be/8rjTYfD_hAg?si=NdgxQdSvwPjZSCzz) подробнее о том, как сделать так, чтобы ни один клиент (даже с самым неудобным паттерном нагрузки) не положил сервис.",8611,15,1,goproglib
4665,2024-03-30 12:37:43+00:00,"️️ **Соединения в SQL. Часть 2. Сложные типы соединений**

В первой части статьи мы узнали, что такое соединения и рассмотрели простые типы соединений: внутреннее, правое и левое. В заключение рассмотрим более сложные варианты, которые позволяют получать выборки для более интересных случаев

 [Ссылка на статью](https://proglib.io/sh/6cVbqehOaZ)",5923,11,4,goproglib
4664,2024-03-29 19:08:21+00:00,"️ **Подборка статей** (и не только) **для гофера**

 [Google представила три новые «безопасные» библиотеки Go](https://bughunters.google.com/blog/4925068200771584/the-family-of-safe-golang-libraries-is-growing) — SafeText, SafeOpen и SafeArchive — для предотвращения распространенных проблем безопасности при работе с YAML, открытии файлов и обработке архивов
 [Кейс с утечкой горутины](https://brainbaking.com/post/2024/03/the-case-of-a-leaky-goroutine/). Обнаружив «бесконечную фабрику горутин», вызывающую проблемы в приложении, автор делится своими выводами, чтобы вы могли избежать подобной участи
 [Улучшения дженериков Go для мап и срезов](https://henry.precheur.org/go/generics_improvements_for_maps_and_slices/) — «Жизнь в Go была хороша, и она становится лучше»
 «[Go Enums все еще отстой](https://www.zarl.dev/articles/enums-take-two)» — продолжение давней дискуссии
 [raycaster-go](https://github.com/harbdog/raycaster-go) — базовый движок 3D-рейкастинга на базе Ebitengine (смотрите [демо](https://youtu.be/O0LWGqNDyxc?si=FOMZZP63TAOaow2M), если интересна эта тема)

#дайджест",6589,15,0,goproglib
4662,2024-03-29 13:31:40+00:00," **DBeaver** — бесплатный инструмент для работы с базами данных. Подойдет как простым разрабам, так и программистам SQL/баз данных, а также аналитикам.

️ Поддерживает любую базу данных с драйвером JDBC. Под капотом:

1️⃣ Имеет множество фич, включая редактор метаданных, редактор SQL, редактор расширенных данных, ERD, экспорт/импорт/миграцию данных, планы выполнения SQL и т. д.
2️⃣ Построен на базе платформы Eclipse.
3️⃣ Использует архитектуру плагинов и предоставляет дополнительные функции для следующих баз данных: MySQL/MariaDB, PostgreSQL, Greenplum, Oracle, IBM Db2, Exasol, SQL Server, Sybase/SAP ASE, SQLite, Firebird, H2, HSQLDB, Derby, Teradata, Vertica, Netezza, Informix и другие.

 [GitHub](https://github.com/dbeaver/dbeaver)

#инструменты",6267,0,0,goproglib
4658,2024-03-29 07:02:32+00:00,"‍ **5 способов писать эффективный код на Go**: от названий переменных до архитектуры

Руководитель группы разработки подсистем Геннадий Ковалёв и эксперт по разработке ПО Даниил Подольский в YADRO обсуждают пять способов повышения эффективность разработки в команде Go-программистов.

Вы узнаете, как называть переменные, составлять документацию и продумывать архитектуру так, чтобы специалистам в команде и смежных отделах было легко работать с кодом. 

 [Читать](https://habr.com/ru/companies/yadro/articles/803323/)",5987,17,0,goproglib
4657,2024-03-29 04:50:54+00:00,"**‍ Путь разработчика: один язык на всю жизнь или постоянное переобучение?**

Мир IT постоянно развивается, и то, что было актуально вчера, сегодня может оказаться устаревшим. Мы хотим узнать, как часто разработчики меняют сферу деятельности и направление разработки в погоне за новыми знаниями и возможностями.

 [Поделитесь](https://docs.google.com/forms/d/1INU8EoaFU82zrSVPqMimAe7etCsdiMA-LkG91czLj8o/edit) своим мнением и опытом. Ваши ответы помогут нам лучше понять тенденции и предпочтения в сообществе разработчиков

__Опрос займёт у вас примерно 4 минуты.__",4908,5,0,goproglib
4656,2024-03-28 20:01:44+00:00," **Для чего в приведенном коде предназначена конструкция ""_ struct{}""?**

Конструкция `_ struct{}` используется для предотвращения создания литералов структур без именованных полей при инициализации `ProgInfo`. 

Это значит, что мы не сможем случайно инициализировать `ProgInfo` без указания имён полей, что может помочь избежать ошибок и повысить читаемость кода, особенно когда структура со временем расширяется новыми полями.

В Go, когда мы инициализируем структуру без указания имён полей, например:

```
info := ProgInfo{0, 1, 2, 3}
```

Это называется неименованным или позиционным литералом. Такой способ инициализации может привести к ошибкам, особенно если порядок полей в структуре изменится или будут добавлены новые поля.

Добавление поля `_ struct{}` делает такую инициализацию невозможной, требуя от разработчика использовать именованные литералы, где каждое значение присваивается конкретному имени поля:

```
info := ProgInfo{
    Flags:    0,
    Reguse:   1,
    Regset:   2,
    Regindex: 3,
}```",4971,145,15,goproglib
4653,2024-03-28 06:22:52+00:00,"‍‍ **Визуальный гайд по срезам**

Насыщенный кодом и диаграммами [гайд](https://sazak.io/articles/visual-guide-to-slices-in-go-2024-03-25), в котором: 

 рассказываются принципы работы срезов под капотом, 
 описывается создание срезов, манипуляции с использованием `make` и `append`, 
 объясняется, как растет емкость, а также синтаксис срезов для создания новых срезов из существующих.",6625,30,0,goproglib
4652,2024-03-27 19:39:20+00:00,"‍ **Изучите X за Y минут, где X = Go**

Давно пишете на Go, но хотите освежить знания? Ловите практичное интерактивное руководство, основанное на [Learn Go in Y Minutes](https://learnxinyminutes.com/docs/go/) от Christoph Berger, автора информационного бюллетеня Applied Go. 

 [Читать](https://codapi.org/try/go/)",6643,16,0,goproglib
4650,2024-03-27 08:01:26+00:00,"‍ **script** — Go-библиотека для выполнения тех задач, с которыми хорошо справляются шелл-скрипты: чтения файлов, выполнения подпроцессов, подсчета/сопоставления строк и т. д.

 [GitHub](https://github.com/bitfield/script)",6683,29,0,goproglib
4649,2024-03-27 05:02:26+00:00,"**-35% на полугодовой курс по алгоритмам!**

 [Алгоритмы и структуры данных](https://proglib.io/w/5a72cc41)

**23 390 рублей** ~~35 990 рублей~~ до 1 апреля

Курс для тех, кто хочет научиться работать с алгоритмами, подготовиться к собеседованию крупную IT-компанию и начать брать более сложные проекты.

 **Переходите и активируйте вводные занятия курса** — https://proglib.io/w/5a72cc41

**Вас ждут:**

– 150 практических заданий и 47 видеолекций

– бессрочный доступ к обучению

– поддержка преподавателя в чате

А также очень харизматичный спикер из Яндекса ",6137,14,0,goproglib
4648,2024-03-26 19:07:03+00:00, Ну #жиза ведь?,5933,41,31,goproglib
4647,2024-03-26 18:07:05+00:00,"‍️ Work-life balance — это баланс между работой и личной жизнью. Соблюдать его — значит придерживаться образа жизни, при котором каждая сфера деятельности находится в гармонии с остальными и не наносит им ущерба.

 Другими словами, work-life balance позволяет успешно совмещать работу, отдых, семью, хобби, здоровье и другие важные аспекты нашей жизни.

 **А вам удается его соблюдать?**

 — да, только на этом и держусь
 — нет, обычно работа в приоритете
 — вы о чем вообще?
 — свой вариант (напишу в комментариях)",6125,167,3,goproglib
4646,2024-03-26 16:32:46+00:00," Помните [доклад Matt Boyle](https://t.me/goproglib/4606) о том, как он использует Go и другие инструменты для мониторинга сахарного диабета первого типа? 

️ Реализованный проект помог ему понять своё заболевание и управлять им так, как привычнее всего: как будто это распределённая система.

 Если вам интересна тема применения Go с такой стороны, читайте [статью Мэтью](https://www.bytesizego.com/blog/keeping-alive-with-go) в оригинале или в [переводе на русский.](https://habr.com/ru/companies/ruvds/articles/799329/)",6195,9,1,goproglib
4645,2024-03-25 20:45:54+00:00," **Регулярные выражения в Go**: от базовых шаблонов до продвинутых методов

Полный гайд для Go-разработчика, из которого вы узнаете о регулярных выражениях и всех концепциях, применимых к синтаксису Google RE2, включая флаги, наборы символов, диапазоны и повторение.

 [Читать](https://www.honeybadger.io/blog/a-definitive-guide-to-regular-expressions-in-go/)",6907,15,0,goproglib
4644,2024-03-25 14:27:42+00:00,"‍ **Введение в Domain-Driven Design через разработку ToDo приложения на Go**

[Пополняемый гайд](https://nesh.me/clean-domain-todo-golang.html?utm_source=christophberger&utm_medium=email&utm_campaign=2024-03-23-learn-go-make-go-code-faster-extend-go#implementing-the-functionality) по разработке простого приложения на Go с использованием принципов DDD и чистой архитектуры. 

 **Чему вы научитесь:
**
️ Как применять DDD и чистую архитектуру в проектах на Go.
️ Практическому использованию структур и интерфейсов для организации кода и логики приложения.
️ Созданию эффективных тестов для проверки функциональности приложения.

Следите за обновлениями — автор планирует улучшить проект, используя BDD и Cucumber для тестов, внедрив новые методы хранения списка (inmem, db) и многое другое.",7127,23,2,goproglib
4643,2024-03-25 11:12:06+00:00,"️**Proglib запускает канал про ИИ-помощников
**
Будем максимально подробно рассказывать про все существующие нейросети-помощники, которые генерируют текст или код — с пошаговыми инструкциями, промтами, инструментами и лайфхаками. 

⭐️ChatGPT
⭐️Gemini
⭐️Claude
⭐️Bing
И другие!

[Подписывайтесь!](https://t.me/neuro_text)",5941,10,0,goproglib
4642,2024-03-24 19:35:46+00:00," [**Konf**](https://github.com/nil-go/konf) — простой загрузчик конфигурации для Go, который читает/отслеживает файлы, переменные окружения, флаги и облачные сервисы (AWS, Azure, GCP). Недавно была представлена версия [1.0.0](https://github.com/nil-go/konf/releases/tag/v1.0.0).

konf предлагает другой взгляд на то, как программы на Go могут читать конфигурацию, не привязываясь к конкретному источнику конфигурации.

 **Основные возможности:**

 `konf.Unmarshal` для чтения конфигурации в любой тип объекта.
 `konf.OnChange` для регистрации колбэков при изменении конфигурации.
 `konf.Explain` для понимания, откуда загружается конфигурация.
 Различные провайдеры для загрузки конфигурации из облаков (AWS, Azure и GCP).
 Zero dependencies в core модуле, который поддерживает загрузку конфигурации из переменных окружения, флагов и встроенной файловой системы.",10756,45,0,goproglib
4641,2024-03-24 07:18:15+00:00," **20+ вопросов, которые стоит задать на собеседовании в стартап**

Узнайте, на что обратить внимание, чтобы найти стартап, который не только «выстрелит», но и даст вам возможность вырасти как специалисту.

 [Читать статью](https://proglib.io/sh/WfPzaKkAQr)
 [Зеркало](https://proglib.tech/p/20-voprosov-kotorye-stoit-zadat-na-sobesedovanii-v-startap-2024-03-22)",34889,6,0,goproglib
4640,2024-03-23 20:02:25+00:00,"️Несколько свежих мок-собесов и подкаст на общую тему

 Подкаст { между скобок }: [«Владимир Балун, Вячеслав Горюнов, Виталий Лихачев: зачем переходить на Golang»](https://www.youtube.com/live/vxAFHcQQjjo?si=UiYmVsLMImQVwdmr)
 [Открытое собеседование на Middle Go-разработчика от Дмитрия Дорофеева](https://youtu.be/rFkU-8GVnVI?si=1-qMUq409fK0Gnr7)
 [Открытое собеседование на Junior Go разработчика от Александра Трапезникова](https://youtu.be/MmIdk_0HhVI?si=72NEDAEyiYfvkQpY)
 [Открытое интервью на Middle Go-разработчика от Сергея Парамошкина](https://youtu.be/q1TMgT-wHlk?si=1hiSpTyS1q4q0pKj)",9720,27,1,goproglib
4639,2024-03-23 18:40:26+00:00,"‍ **Тебе повезло, ты богатый айтишник**

Как показали [результаты](https://vc.ru/hr/1016451-kak-ya-vhodil-v-it-opyt-podpischikov-biblioteki-programmista) нашего исследования, даже с профильным образованием найти первую работу в ИТ бывает нелегко. Большинству свитчеров первый оффер дается еще сложнее: огромный объем необходимых знаний и навыков нужно получить как можно быстрее.

Многие учатся (самостоятельно или на курсах) без отрыва от основной работы. Самые отчаянные войтивайтишники бросают работу и начинают учиться, живя на скромные сбережения. Герой этой истории, фронтендер Олег, начинал именно так. Под катом — его история.

 [Читать статью](https://proglib.io/sh/Kw4kvrR6Wb)
 [Зеркало](https://proglib.tech/p/tebe-povezlo-ty-bogatyy-aytishnik-2024-03-19)",5909,7,0,goproglib
4638,2024-03-23 09:45:55+00:00,"‍ **Kubernetes** — один из самых популярных инструментов для деплоя приложений и сервисов. Его можно использовать как в проде, так и в качестве среды для локального запуска сервисов на машинах разработчиков.

Ведущий разраб юнита Platform as a Service в Авито Павел Агалецкий рассказывает, как поднять маленький кластер Kubernetes на локальной машине с помощью общедоступных инструментов и задеплоить Hello World! на Go.

 [Читать](https://habr.com/ru/companies/avito/articles/799689/)",7061,23,0,goproglib
4637,2024-03-22 11:42:42+00:00," По просьбе подписчиков «Библиотеки программиста» мы провели опрос и выяснили, что у большинства айтишников зарплата в 2023 году выросла.

️ Как выглядит доход среднего айтишника и какие факторы окажут влияние на динамику ИТ-зарплат в 2024 году — расскажем в статье на VC.

 [Читать](https://vc.ru/hr/1075978-kak-izmenilis-zarplaty-v-it-za-2023-god-i-chego-zhdat-v-2024)

P. S. Свои предложения для исследований пишите в комменты",6166,13,0,goproglib
4636,2024-03-22 05:41:37+00:00,"‍ **Изучение Go в 2024 году: от новичка до профи**

Автор **Domain-Driven Design with Golang** Matt Boyle объединил все источники, которые он считает полезными и стоящими, в одну статью. 

Читайте подробнее, чтобы узнать о крутых книгах/блогах, видеокурсах/докладах на конференциях, подкастах и, самое главное, проектах для закрепления изученного. 

 [Читать](https://www.bytesizego.com/blog/learning-golang-2024)",8167,29,0,goproglib
4635,2024-03-21 18:02:02+00:00," **Каким вы видите для себя идеальный собес?**

Пример недушного собеса по мотивам [статьи](https://habr.com/ru/articles/724754/) опытного интервьюера Олега Плотникова:

1️⃣ Вопрос про предыдущий опыт: в двух словах описать самый интересный (сложный) проект.

 В чем суть проекта? Размер команды? Роль? Основной вклад? Срок проекта? И т. д.

2️⃣ Типовая задача, с которой реально придется сталкиваться, но решаемая за 5-15 минут + несколько вопрос в глубину про понимание инструмента (языка, фреймворка).

 Три основных аспекта, по которым оценивается кандидат:

 Харды и наличие релевантного опыта.
 Коммуникация (софт скиллы). Умение общаться, быстро и структурировано объяснить суть вопроса.
 Проактивность в обучении и страсть к делу.

 За каждый навык дается до трех баллов. Есть хоть один ноль — сразу до свидания.

 0 — все плохо
 1 — с пивом покатит
 2 — хорошо
 3 — прекрасно

 **Что думаете?**

#холивар",6495,26,0,goproglib
4634,2024-03-21 11:43:29+00:00," **Failsafe-go** — Go-библиотека для создания отказоустойчивых приложений на Go. Она позволяет обернуть исполняемую логику одной или несколькими resilience политиками, которые могут быть комбинированы и составлены по мере необходимости. 

 К таким политикам относятся: [Retry,](https://failsafe-go.dev/retry) [Circuit Breaker,](https://failsafe-go.dev/circuit-breaker) [Rate Limiter,](https://failsafe-go.dev/rate-limiter) [Timeout,](https://failsafe-go.dev/timeout) [Fallback,](https://failsafe-go.dev/fallback) [Hedge](https://failsafe-go.dev/hedge) и [Bulkhead.](https://failsafe-go.dev/bulkhead)

```fallback := fallback.WithResult(backupConnection)
circuitBreaker := circuitbreaker.WithDefaults[any]()
timeout := timeout.With[any](10*time.Second)

// Get with fallback, retries, circuit breaker, and timeout
failsafe.Get(Connect, fallback, retryPolicy, circuitBreaker, timeout)
```

 [GitHub](https://github.com/failsafe-go/failsafe-go)
 [Сайт](https://failsafe-go.dev/)",6736,32,0,goproglib
4633,2024-03-21 07:41:48+00:00," **Что не так с MVP: как создать конкурентоспособный продукт**

Традиционная концепция MVP нуждается в пересмотре — авторы предлагают альтернативный подход, основанный на тесном взаимодействии с целевой аудиторией и непрерывных итерациях для создания действительно ценного продукта.

 [Читать статью](https://proglib.io/sh/FVcsLI5kwf)
 [Зеркало](https://proglib.tech/p/chto-ne-tak-s-mvp-kak-sozdat-konkurentosposobnyy-produkt-2024-03-15)",5890,8,0,goproglib
4632,2024-03-20 20:06:30+00:00," **Могут ли адреса двух переменных быть одновременно равными и разными?**

Код ниже определяет глобальную переменную `a` и локальную переменную `b` внутри `main()`. Затем он выводит адреса обеих переменных и, наконец, сравнивает их.

 Сравнение должно оцениваться как `true`, верно?

```var a struct{}

func main() {
    var b struct{}

    fmt.Printf(""&a: %p\n"", &a)
    fmt.Printf(""&b: %p\n"", &b)

    fmt.Println(""&a == &b:"", &a == &b)
}
```

Пример выводит:

```&a: 0x58e360
&b: 0x58e360
&a == &b: false
```

`a` и `b` — это пустые структуры, которые имеют нулевой размер, следовательно, они не должны занимать ячейки памяти. Они вообще не должны иметь адрес. Так что сравнивать их адреса с самого начала не имеет смысла.

Так что компилятор Go формально присваивает переменным нулевого размера адрес ради избежания введения специального случая переменных «без адреса». Компилятор может даже присвоить им один и тот же адрес, потому что для переменных нулевого размера не имеет значения, какой формальный адрес у них есть.

 Спецификация Go говорит:

Две различные переменные нулевого размера могут иметь одинаковый адрес в памяти

#tip",6600,94,1,goproglib
4626,2024-03-20 10:38:00+00:00,"‍ **Как написать README для Go-проекта, который привлечет внимание разработчиков** 

Авторы Go-проекта [Daytona](https://github.com/daytonaio/daytona) поделились несколькими советами по созданию файла README, которые позволили добиться впечатляющих результатов: 4k звезд за первую неделю.

Вы узнаете, как создать впечатляющий заголовок, захватывающее содержание, соблюдать «гигиену» проекта и многое другое. 

 [Читать](https://www.daytona.io/dotfiles/how-to-write-4000-stars-github-readme-for-your-project)",7542,15,0,goproglib
4625,2024-03-19 18:09:13+00:00,"Разраб [предложил создать](https://github.com/maximal/http-267) HTTP-статус имени Олега Тинькова (признан иноагентом Министерством юстиции РФ) под названием **267 Doubtful But Okay**, который означает, что запрос имеет сомнительную семантику, но он принят и обработан. Код статуса 267 выбран по году рождения Олега (1967 год).

 **Как вам идея?**

 — сомнительно, но окэй
 — давно пора

#холивар",8981,488,8,goproglib
4623,2024-03-19 09:27:23+00:00," **Улучшения трассировки выполнения в Go 1.22: низкие накладные расходы и масштабируемость**

В одном из последних обновлений Go команда [представила](https://go.dev/blog/execution-traces-2024) значительные улучшения в механизме трассировки выполнения, делая его более мощным и эффективным инструментом для разработчиков:

️ **Низкие накладные расходы:** благодаря оптимизации трассировок стека, временные затраты CPU на трассировки выполнения были сокращены до 1-2% для многих приложений, что делает трассировку более пригодной для постоянного использования.

️ **Масштабируемость трассировок:** переработка формата трассировок и их событий позволила снизить требования к памяти при анализе трассировок, решая проблему анализа больших объемов данных.

️ **Flight recording:** позволяет непрерывно вести трассировку и сохранять только самые последние данные трассировки, что идеально подходит для захвата событий, произошедших непосредственно перед важным инцидентом.

️ **API для чтения трассировок:** упрощает программный анализ трассировок, делая их более доступными для разработчиков.",6373,22,0,goproglib
4622,2024-03-18 18:37:20+00:00," **Open Source по-русски: путь к технологической независимости или обочина прогресса?**

Для одних организаций open source является ключом к преодолению зависимости от иностранных вендоров и драйвером инноваций, для других — дырой в безопасности и обочиной технологического прогресса.

Мы хотим изучить текущее состояние и возможности открытого ПО в России. Пройдите опрос и помогите нам увидеть ситуацию глазами IT-профессионалов. 

[ Ссылка на опрос  ](https://forms.gle/4ze3UKQgqR6k8yMK7)

__Прохождение займёт примерно 4 минуты__",5813,16,6,goproglib
4621,2024-03-18 13:08:45+00:00," **Челлендж по обработке миллиарда строк на Go**: от 1 минуты 45 секунд до 4 секунд

Популярный челлендж в сообществе Java-разработчиков, который вирусился в январе, потихоньку дошел из гоферов. И вопрос уже не столько в реализации, сколько в оптимизации.

Автор описывает девять решений на Go, каждое из которых быстрее предыдущего. Первое, простое и идиоматичное, выполняется 1 минуту 45 секунд, а последнее — примерно 4 секунды. 

 [Читать](https://habr.com/ru/articles/798215/)",7149,29,9,goproglib
4620,2024-03-17 19:30:46+00:00," **10 суровых истин, которые должен знать каждый джун**

Вы думаете, что карьера в ИТ — это сплошные плюшки? Забудьте! Реальность жестока: низкие зарплаты на старте, бесконечные задачи и битва за релокацию. Откройте глаза на суровые реалии прямо сейчас!

 [Читать статью](https://proglib.io/sh/6RNS8awiBy)
 [Зеркало](https://proglib.tech/p/10-surovyh-istin-kotorye-dolzhen-znat-kazhdyy-dzhun-2024-03-13)",6117,39,0,goproglib
4619,2024-03-17 07:31:30+00:00,"️ **Расширение границ в Go**: от net.Dial до системных вызовов, AF_PACKET и молниеносного AF_XDP

Под катом — сравнительный анализ производительности отправки пакетов в Linux. Если вам нравятся сети, Go и бенчмаркинг, то однозначно понравится этот мини-ресёрч.

 [Читать](https://toonk.io/sending-network-packets-in-go/)",6696,24,0,goproglib
4617,2024-03-16 20:28:37+00:00," **Что такое Low order bits (LOB) в контексте типа map в Go?** 

LOB в контексте типа `map` в Go относятся к младшим битам хэш-значения ключа, используемых для определения позиции элемента в массиве бакетов внутри мапы.

Когда мы вставляем или извлекаем элемент из мапы, используется хэш-функция для преобразования ключа в хэш-код. Этот хэш-код затем используется для определения, в каком бакете должен быть размещен или найден элемент. 

Вместо использования всего хэш-кода напрямую, часто используются только его младшие биты, поскольку они обеспечивают равномерное распределение элементов по бакетам, что важно для эффективности хэш-таблицы.",6037,34,0,goproglib
4616,2024-03-16 16:51:44+00:00,"‍‍ **Go + Kubernetes: кейс из практики **

 Автор [делится](https://lalatron.hashnode.dev/when-kubernetes-and-go-dont-work-well-together) специфической проблемой, возникшей в одном из продакшн-окружений: при вызове определенного API-эндпоинта возникала ошибка 502 Bad Gateway только в одном продакшн-окружении. При этом контейнер в Kubernetes поде перезапускается, но без каких-либо ошибок в логах.

 Оказывается, контейнер был убит из-за превышения лимита памяти (OOMKilled). Эндпоинт был разработан для получения большого объема данных для работы мобильного приложения в офлайн-режиме, но не ожидалось, что объем данных будет настолько большим.

‍️ Проблема связана с работой сборщика мусора в Go, который расширяет кучу при необходимости, не зная о лимитах памяти, установленных для контейнера в Kubernetes. Это может привести к превышению лимита памяти и остановке контейнера.

️ Введение переменной окружения` GOMEMLIMIT `в Go 1.19 позволяет установить мягкий лимит памяти для сборщика мусора, что помогает управлять использованием памяти более эффективно и предотвратить OOM. В [статье](https://lalatron.hashnode.dev/when-kubernetes-and-go-dont-work-well-together) показано, как настроить` GOMEMLIMIT `в файле деплоя Kubernetes, чтобы он соответствовал установленному лимиту памяти.

️ Решение не является универсальным, и в некоторых кейсах может быть предпочтительнее быстро завершить работу с использованием настроек по умолчанию, чем пытаться использовать всю доступную память перед остановкой процесса из-за ошибки OOM.",6454,38,0,goproglib
4615,2024-03-15 20:34:53+00:00,"#инфографика

 **CI/CD пайплайн в деталях**

1️⃣ SDLC с CI/CD

Жизненный цикл разработки программного обеспечения (SDLC) состоит из нескольких ключевых этапов: разработка, тестирование, деплой и cопровождение. CI/CD автоматизирует и интегрирует эти этапы, обеспечивая более быстрые и надежные выпуски. Когда код помещается в Git-репозиторий, он запускает автоматизированный процесс сборки и тестирования. 

Для проверки кода запускаются сквозные тестовые примеры. Если тесты пройдены, код может быть автоматически развернут в staging/production окружении. Если проблемы обнаружены, код отправляется обратно в разработку для исправления ошибок. Эта автоматизация обеспечивает быструю обратную связь с разработчиками и снижает риск ошибок в продакшене.

2️⃣ Разница между CI и CD

Непрерывная интеграция (CI) автоматизирует процессы сборки, тестирования и слияния. В рамках CI запускаются тесты всякий раз, когда код фиксируется для раннего обнаружения проблем интеграции. Это поощряет частые фиксации кода и быструю обратную связь.

Непрерывная доставка (CD) автоматизирует процессы выпуска, такие как изменения инфраструктуры и развертывание. Это гарантирует, что программное обеспечение может быть надежно выпущено в любое время с помощью автоматизированных рабочих процессов. CD также может автоматизировать этапы ручного/аппрувал тестирования, необходимые перед деплоем в продакшене.

3️⃣ CI/CD пайплайн

Типичный CI/CD пайплайн состоит из нескольких связанных этапов:

 Разработчик фиксирует изменения кода в системе управления версиями
 CI-сервер обнаруживает изменения и запускает сборку
 Код компилируется и тестируется
 Результаты тестирования сообщаются разработчику
 В случае успеха артефакты развертываются в staging окружениях
 Дальнейшее тестирование может быть проведено на стадии подготовки перед выпуском
 Система CD внедряет утвержденные изменения в продакшен

 [Источник](https://twitter.com/bytebytego/status/1692419434693132649)",5777,21,0,goproglib
4613,2024-03-15 14:38:41+00:00," **FormStream** — быстрый потоковый Go-парсер для `multipart/form-data`, который предоставляет враппер для использования с `net/http`, `echo` и `gin`.

```parser, err := formstream.NewParser(r)
if err != nil {
    return err
}

err = parser.Register(""icon"", func(r io.Reader, header formstream.Header) error {
    name, _, _ := parser.Value(""name"")
    password, _, _ := parser.Value(""password"")

    return saveUser(r.Context(), name, password, r)
}, formstream.WithRequiredPart(""name""), formstream.WithRequiredPart(""password""))
if err != nil {
    return err
}

err = parser.Parse()
if err != nil {
    return err
}
```

 [GitHub](https://github.com/mazrean/formstream)",6318,23,0,goproglib
4610,2024-03-14 06:02:24+00:00," **Создание системы логической репликации Postgres на Go**

Разработчики Go базы данных Dolt работают над функцией репликации данных из Postgres и делятся опытом разработки протокола логической репликации на Go.

 [Читать](https://www.dolthub.com/blog/2024-03-08-postgres-logical-replication/)",6700,11,1,goproglib
4609,2024-03-13 16:01:26+00:00," Искандер Шарипов опубликовал pre-1 часть своей [серии статей](https://t.me/goproglib/4494) о разработке RPG на основе Ebitengine, в которой он пишет отдельный демо-проект и представляет базовые приёмы разработки игр на Go.

#геймдев",6646,27,2,goproglib
4608,2024-03-13 11:56:29+00:00," **IntelliJ Developer Tools Plugin** — аналог CyberChef, но для продуктов JetBrains. Это универсальный набор инструментов на все случаи жизни внутри IDE, которые могут пригодиться разработчику. 

 [GitHub](https://github.com/marcelkliemannel/intellij-developer-tools-plugin)",5890,17,2,goproglib
4607,2024-03-13 06:02:55+00:00,"**Самые полезные каналы для программистов в одной подборке!**

Сохраняйте себе, чтобы не потерять 

Для всех

[Библиотека программиста](https://t.me/proglibrary) — новости, статьи, досуг, фундаментальные темы
[Книги для программистов](https://t.me/progbook)
[IT-мемы](https://t.me/itmemlib)
[Proglib Academy](https://t.me/proglib_academy) — тут мы рассказываем про обучение и курсы

#️⃣C#

[Книги для шарпистов | C#, .NET, F#](https://t.me/csharpprogbook)
[Библиотека шарписта ](https://t.me/csharpproglib)— полезные статьи, новости и обучающие материалы по C#
[Библиотека задач по C#](https://t.me/csharp_problems_lib) — код, квизы и тесты
[Библиотека собеса по C#](https://t.me/csharp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Вакансии по C#, .NET, Unity Вакансии по PHP, Symfony, Laravel](https://t.me/csharpdevjob)

️DevOps

[Библиотека devops’а](https://t.me/devopsslib) — полезные статьи, новости и обучающие материалы по DevOps
[Вакансии по DevOps & SRE](https://t.me/devopssjob)
[Библиотека задач по DevOps](https://t.me/devops_problems_lib) — код, квизы и тесты
[Библиотека собеса по DevOps](https://t.me/devops_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования

PHP

[Библиотека пхпшника](https://t.me/phpproglib) — полезные статьи, новости и обучающие материалы по PHP
[Вакансии по PHP, Symfony, Laravel](https://t.me/phpdevjob)
[Библиотека PHP для собеса](https://t.me/php_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по PHP](https://t.me/php_problems_lib) — код, квизы и тесты

Python

[Библиотека питониста](https://t.me/pyproglib) — полезные статьи, новости и обучающие материалы по Python
[Вакансии по питону, Django, Flask](https://t.me/pydevjob)
[Библиотека Python для собеса](https://t.me/py_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Python](https://t.me/py_problems_lib) — код, квизы и тесты

Java

[Библиотека джависта](https://t.me/javaproglib) — полезные статьи по Java, новости и обучающие материалы
[Библиотека Java для собеса](https://t.me/java_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Java](https://t.me/java_problems_lib) — код, квизы и тесты
[Вакансии для java-разработчиков](https://t.me/javadevjob)

Data Science

[Книги для дата сайентистов | Data Science](https://t.me/dsprogbook)
[Библиотека Data Science](https://t.me/dsproglib) — полезные статьи, новости и обучающие материалы по Data Science
[Библиотека Data Science для собеса](https://t.me/ds_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Data Science](https://t.me/ds_problems_lib) — код, квизы и тесты
[Вакансии по Data Science, анализу данных, аналитике, искусственному интеллекту](https://t.me/datajob)

Go

[Книги для Go разработчиков](https://t.me/goprogbook)
[Библиотека Go разработчика](https://t.me/goproglib) — полезные статьи, новости и обучающие материалы по Go
[Библиотека Go для собеса](https://t.me/go_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Go](https://t.me/go_problems_lib) — код, квизы и тесты
[Вакансии по Go](https://t.me/godevjob)

C++

[Книги для C/C++ разработчиков](https://t.me/cppprogbook)
[Библиотека C/C++ разработчика](https://t.me/cppproglib) — полезные статьи, новости и обучающие материалы по C++
[Библиотека C++ для собеса](https://t.me/cpp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по C++](https://t.me/cpp_problems_lib) — код, квизы и тесты
[Вакансии по C++](https://t.me/cppdevjob)

Другие профильные каналы

[Библиотека фронтендера](https://t.me/frontendproglib)
[Библиотека мобильного разработчика](https://t.me/mobileproglib)
[Библиотека хакера](https://t.me/hackproglib)
[Библиотека тестировщика](https://t.me/testerlib)

Каналы с вакансиями

[Вакансии по фронтенду, джаваскрипт, React, Angular, Vue](https://t.me/jsdevjob)
[Вакансии для мобильных разработчиков](https://t.me/mobiledevjob)
[Вакансии по QA тестированию](https://t.me/testerrjob)
[InfoSec Jobs — вакансии по информационной безопасности](https://t.me/hackdevjob)

Чтобы добавить папку с нашими каналами, нажмите сюда

Также у нас есть боты:
[Бот с IT-вакансиями](http://t.me/proglib_job_bot)
[Бот с мероприятиями в сфере IT](http://t.me/event_listener_bot)

Мы в других соцсетях:
[VK](https://vk.com/proglib)
[YouTube](https://www.youtube.com/c/%D0%91%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%B0)
[Дзен](https://zen.yandex.ru/proglib)
[Facebook](https://www.facebook.com/proglib/?locale=ru_RU) *
[Instagram](https://www.instagram.com/proglibrary/) *

* Организация Meta запрещена на территории РФ",5830,4,0,goproglib
4606,2024-03-12 20:24:53+00:00,"‍ Подборка топовых докладов, особенно последний ️

 [Go и большие языковые модели](https://youtu.be/ml5rs4dWxi4?si=90w4L6sv0Iuqmthy) / Chang Sau Sheong
 [Техники конкурентности Go для self-healing приложений](https://youtu.be/Oz3ik0USQmM?si=-SZWlSiMdRBpPxwH) / Chris Shepherd
 [Модернизация CLI-приложений с использованием Go](https://youtu.be/DlhyRbOYfqc?si=tiJ6mEtqsZ2aVAfr) / Marian Montagnino
 [Low latency паттерны в Go](https://youtu.be/Y7jpcHkEABc?si=caH8H4fMg4GROu4W) / Kirill Che
 [Три техники для создания высокопроизводительных парсеров](https://youtu.be/KwbrbwtSSeY?si=xdjeipYk2Eqv3ZlQ) / Dave Cheney
 [Специальный выпуск Билла Кеннеди](https://youtu.be/Dm7yuoYTx54?si=2eHY_-6CJdCKFuKr) 
 [Интеграция данных: создание систем для быстрого обслуживания клиентов на Go](https://youtu.be/WsNyj-Eo6bY?si=AZP0LzfO2WtuS3Tz) / Wu Huijie
 [Путешествие больших языковых моделей и что будет дальше](https://youtu.be/xiDPfLpFxK0?si=jL31i4C8Z77e1CcB) / Chew Xuanyi
 [Как спроектировать тестовый набор, который вам понравится поддерживать](https://youtu.be/fgqu0KWimRo?si=SpbMWKRrcJZhLkJ0) / Björn Andersson
 [Как я поддерживаю свою жизнь с помощью Go](https://youtu.be/TWZZNWIaGm4?si=9kqu4vx7nIdjWdmM) / Matt Boyle

#чтопроисходит",6902,15,1,goproglib
4604,2024-03-12 06:00:22+00:00," **Самоучитель по Go для начинающих. Часть 10. Введение в ООП. Наследование, абстракция, полиморфизм, инкапсуляция**

В этой части самоучителя разберем основные понятия и принципы объектно-ориентированного программирования, а также рассмотрим примеры их реализации в языке Go. В конце статьи применим изученный материал на практике, решив 2 интересные задачи.

 [Читать гайд](https://proglib.io/sh/5nOHNEUYL1)

 **Остальные части в серии:**

1. [Особенности и сфера применения Go, установка, настройка](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-1-osobennosti-i-sfera-primeneniya-go-ustanovka-nastroyka-2023-11-23)
2. [Ресурсы для изучения Go с нуля](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-2-resursy-dlya-izucheniya-go-s-nulya-2023-11-28)
3. [Организация кода. Пакеты, импорты, модули. Ввод-вывод текста.](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-3-organizaciya-koda-pakety-importy-moduli-vvod-vyvod-teksta-2023-12-07)
4. [Переменные. Типы данных и их преобразования. Основные операторы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-4-peremennye-tipy-dannyh-i-ih-preobrazovaniya-osnovnye-operatory-2023-12-14)
5. [Условные конструкции if-else и switch-case. Цикл for. Вложенные и бесконечные циклы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-5-uslovnye-konstrukcii-if-else-i-switch-case-cikl-for-vlozhennye-i-beskonechnye-cikly-2024-01-11)
6. [Функции и аргументы. Области видимости. Рекурсия. Defer](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-6-funkcii-i-argumenty-oblasti-vidimosti-rekursiya-defer-2024-01-24)
7. [Массивы и слайсы. Append и сopy. Пакет slices](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-7-massivy-i-slaysy-append-i-sopy-paket-slices-2024-02-08)
8. [Строки, руны, байты. Пакет strings. Хеш-таблица (map)](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-8-stroki-runy-bayty-paket-strings-hesh-tablica-map-2024-02-15)
9. [Структуры и методы. Интерфейсы. Указатели. Основы ООП](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-8-stroki-runy-bayty-paket-strings-hesh-tablica-map-2024-02-15)",22830,28,0,goproglib
4603,2024-03-11 18:57:07+00:00,"**️****Итоги недели в мире ИИ и обзоры новых сервисов**

У нас вышла очередная статья на  по мотивам еженедельной рассылки про последние новости и тенденции в мире ИИ.

Ниже — небольшая выдержка из статьи, а целиком [читайте здесь](https://vc.ru/dev/1070644-itogi-nedeli-v-mire-ii-i-obzory-novyh-servisov-claude-3-oboshel-chatgpt-4-po-vsem-pokazatelyam) 

**Новости**

▫️ Создан [новый тест](https://scale.com/blog/measuring-mitigating-risk-wmdp) для ИИ — WMDP (Weapons of Mass Destruction Proxy), который будет проверять модели на знание:
    - способов создания и применения всех видов оружия массового поражения;
    - методов взлома систем кибербезопасности.
▫️Глава OpenAI Сэм Альтман [обнародовал](https://openai.com/blog/openai-elon-musk) переписку с Илоном Маском, в которой последний указывает на то, что ожидает от OpenAI прибыли. Это противоречит недавним [заявлениям](https://t.me/dsproglib/4729) Маска.

 **Инструменты**

[▫️Corgea](https://corgea.com/blog/introducing-corgea) — находит и автоматически исправляет уязвимости в коде.
[▫️GenWebBilder](https://genwebbuilder.com/) — делает полнофункциональные веб-сайты по скетчам и скриншотам.
[▫️Framedrop AI](https://www.framedrop.ai/) — автоматически конвертирует длинные видео, влоги и стримы в рилсы и короткие клипы для X и TikTok.
[▫️Vocalo AI](https://vocalo.ai/) — личный репетитор, который научит свободно говорить по-английски.

 **Робототехника**

Профессор Кен Голдберг из Университета Беркли [поделился](https://decrypt.co/220360/humanoid-android-household-robots-ethics-capabilities-cost) соображениями по поводу технических, этических и экономических проблем, которые препятствуют широкому внедрению ИИ-роботов на данном этапе.

️ __Вы можете подписаться на email-рассылку __[__здесь__](https://proglib.academy/ai-newsletter?utm_source=vc-11-03-2024)",5861,6,1,goproglib
4601,2024-03-11 12:01:20+00:00," **Из грязи в князи: вкатился с нуля в IT за границей**

 Мы ищем тех, кто начинал карьеру в IT за границей без опыта и специальной подготовки. Хотим услышать ваши истории успеха и препятствий, с которыми вы столкнулись.

 Если вы готовы рассказать свою историю — напишите нам на hello@proglib.io",6299,19,3,goproglib
4600,2024-03-11 09:05:27+00:00," **Введение в модульное тестирование на Go**

 [Практический мини-гайд](https://betterstack.com/community/guides/testing/unit-testing-in-go/), из которого вы узнаете:

️ Про возможности стандартной библиотеки Go для тестирования 
️ Как проводить и интерпретировать результаты тестов
️ Как решить проблемы при неудачных тестах
️ Как создавать и анализировать отчеты о покрытии кода",6633,15,0,goproglib
4597,2024-03-10 20:25:29+00:00," [JSON Lines](https://jsonlines.org/examples/) (JSONL) — формат для сохранения табличных данных в Go, в котором каждая строка является допустимым JSON-объектом. 

Это позволяет обрабатывать данные построчно, упрощает использование CLI-инструментов (grep, awk, wc) и уменьшает неоднозначность по сравнению с CSV. Каждая строка JSONL может содержать более сложные данные, чем CSV-строка.

#tip",6613,31,0,goproglib
4596,2024-03-10 09:26:06+00:00," **Как устроен бинарный исполняемый файл? **

Julia Evans погружается в структуру бинаря и разбирается с содержимым ELF-файлов в Linux с помощью `readelf`, `nm` и `objdump`.

 [Читать](https://jvns.ca/blog/2014/09/06/how-to-read-an-executable/)",6652,29,4,goproglib
4594,2024-03-09 11:05:57+00:00," **Код на Go: форматирование и линтинг**

Соблюдать стиль кода вручную бывает непросто — нужно держать в голове принятые в команде требования. Ведущий разработчик юнита Platform as a Service в Авито Павел Агалецкий рассказывает и показывает, как использовать удобные готовые инструменты для форматирования и линтинга кода на Go. 

[00:00](https://www.youtube.com/watch?v=GNErp2NNWaA&t=0s) — Вступление
[00:08](https://www.youtube.com/watch?v=GNErp2NNWaA&t=8s) — Зачем нужно форматирование кода на Go
[00:45](https://www.youtube.com/watch?v=GNErp2NNWaA&t=45s) — Форматер кода fmt
[01:51](https://www.youtube.com/watch?v=GNErp2NNWaA&t=111s) — Зачем нужен линтер кода на Go
[02:08](https://www.youtube.com/watch?v=GNErp2NNWaA&t=128s) — Линтер vet
[03:52](https://www.youtube.com/watch?v=GNErp2NNWaA&t=232s) — Линтер golangci-lint
[06:40](https://www.youtube.com/watch?v=GNErp2NNWaA&t=400s) — Линтер gofumpt
[06:59](https://www.youtube.com/watch?v=GNErp2NNWaA&t=419s) — Запускаем линтер gofumpt в режиме исправления ошибок
[07:27](https://www.youtube.com/watch?v=GNErp2NNWaA&t=447s) — Конфигурационный файл для golangci-lint
[08:09](https://www.youtube.com/watch?v=GNErp2NNWaA&t=489s) — Git Hooks
[08:34](https://www.youtube.com/watch?v=GNErp2NNWaA&t=514s) — Устанавливаем Left Hook
[09:29](https://www.youtube.com/watch?v=GNErp2NNWaA&t=569s) — Настраиваем запуск golangci-lint перед коммитом
[09:37](https://www.youtube.com/watch?v=GNErp2NNWaA&t=577s) — Коммитим изменения
[09:54](https://www.youtube.com/watch?v=GNErp2NNWaA&t=594s) — Заключение",6987,27,2,goproglib
4593,2024-03-08 10:30:35+00:00," **pdfcpu** — библиотека обработки и управления PDF-файлами. Вы можете проверять, оптимизировать, разделять и объединять PDF-файлы, извлекать элементы и многое другое. Выпущенная недавно версия 0.7.0 включает поддержку PDF 2.0, повышение производительности и несколько других фич.

 [GitHub](https://github.com/pdfcpu/pdfcpu)
 [Сайт](https://pdfcpu.io/)",6680,22,3,goproglib
4592,2024-03-07 13:57:54+00:00," Представлены релизы Go 1.22.1 и 1.21.8, включающие исправления для crypto/x509, html/template, net/http, net/http/cookiejar и net/mail.

 [Анонс](https://groups.google.com/g/golang-announce/c/5pwGVUPoMbg)
⬇️ [Скачать](https://go.dev/dl/#go1.22.1)

#новости",6755,18,11,goproglib
4591,2024-03-07 10:51:25+00:00,"️ **ТОП-10 онлайн-конструкторов резюме**

Эта статья для тех, кто устал скидывать работодателям шаблонное резюме, сделанное на Хедхантере, и хочет попробовать что-нибудь новое.

 [Читать статью](https://proglib.io/sh/c9YrxhF6L5)
 [Зеркало](https://proglib.tech/p/top-10-onlayn-konstruktorov-rezyume-2024-02-27)",6094,0,0,goproglib
4585,2024-03-07 06:03:23+00:00,"**Ответьте на 3 вопроса**, чтобы получить вводные занятия к курсу «Алгоритмы и структуры данных»

Получите вводные занятия, ответив на 3 вопроса – https://proglib.io/w/6ea6577e

**На вводной части вас ждут:**

1. Лекция «Производительность алгоритмов» от руководителя разработки Яндекс.Самокатов

2. Лекция «Итеративные сортировки и линейные сортировки» от аспирант департамента искусственного интеллекта ВШЭ

3. Практические задания после лекций

4. Ссылки на дополнительные материалы для самостоятельного изучения

️Переходите и начинайте учиться уже сегодня – https://proglib.io/w/6ea6577e",5927,5,0,goproglib
4584,2024-03-06 20:37:47+00:00,"#инфографика 

[**Наиболее распространенные юзкейсы Kafka**](https://twitter.com/Aurimas_Gr/status/1693549605437264178)

1⃣ Отслеживание активности веб-приложения/веб-сайта
2⃣ Репликация баз данных
3⃣ Агрегация логов/метрик
4⃣ Потоковая обработка
5⃣ Обмен сообщениями",5900,26,0,goproglib
4582,2024-03-06 12:29:17+00:00,"** Влияние предварительного выделения памяти срезов на производительность в Go
**
‍ Многие гоферы знают, что предварительное выделение памяти для срезов влияет на производительность. 

 Основная идея заключается в том, что когда емкость среза меньше 256, каждое расширение создает новый срез с удвоенной емкостью; когда емкость превышает 256, каждое расширение создает новый срез с емкостью, увеличенной в 1,25 раза. 

 Предварительное выделение памяти для срезов теоретически должно улучшать производительность по сравнению с динамическим выделением, но точное количество улучшений требует количественного измерения. 

 Ловите [бенчмарки и полезные советы](https://oilbeater.com/en/2024/03/04/golang-slice-performance/) по использованию инструментов, которые позволят легко обнаружить потенциальные оптимизации и интегрировать в CI.",6827,18,7,goproglib
4579,2024-03-05 15:02:08+00:00," **Risor** — скриптовый язык для разработчиков на Go и DevOps, предназначенный для быстрого и гибкого написания скриптов. Недавно была представлена [версия 1.4](https://risor.io/blog/release_1_4)[️](https://risor.io/blog/release_1_4)

Он позволяет использовать фичи стандартной библиотеки Go и поддерживает выполнение скомпилированного байткода на легковесной виртуальной машине. 

Инструмент написан полностью на Go и предлагает синтаксис, который является гибридом Go и Python. Он идеально подходит для создания CLI-приложений и скриптов, интегрируемых с различными Go-пакетами и сервисами. 

 [GitHub](https://github.com/risor-io/risor)",5930,21,1,goproglib
4578,2024-03-04 18:01:20+00:00,"**One Billion Rows Challenge на Go
**
Челлендж [«Один миллиард строк»](https://github.com/gunnarmorling/1brc) направлен на то, чтобы увидеть, насколько быстро Java может агрегировать 1 000 000 000 значений из текстового файла. 

Под катом — подобный эксперимент, но на Go. [Shraddha Agrawal](https://twitter.com/shraddhaag) добилась производительности порядка 14 секунд, начиная с > 6 минут.

 [Читать](https://www.bytesizego.com/blog/one-billion-row-challenge-go)",6527,18,0,goproglib
4575,2024-03-03 13:13:38+00:00," **Podinfo** — шаблон Go-микросервиса для Kubernetes. Это небольшое приложение на базе Go, демонстрирующее лучшие практики при запуске микросервисов в Kubernetes, включая проверки работоспособности, graceful shutdown и др.

 [GitHub](https://github.com/stefanprodan/podinfo)",8294,50,0,goproglib
4574,2024-03-02 16:57:11+00:00,"‍ **Практический взгляд на разработку REST API в Go 1.22**

Быстрый гайд в духе канала TutorialEdge по разработке REST API на Go 1.22.

 [Смотреть](https://youtu.be/tgLvIghsJFo?si=WTjqSbtqY3bdn3eJ)",7794,38,0,goproglib
4573,2024-03-02 07:44:07+00:00," **Подборка лучших статей «Библиотеки программиста» за февраль**: сохраняй в заметки, чтобы не пропустить #самыйсок

 [Стартапы vs IT-гиганты: куда лучше устроиться Junior-разработчику](https://proglib.io/sh/OgYqVNeIDi)
 [Спортивная мотивация и мотивация в IT, что общего?](https://proglib.io/sh/vQRs8Jem06)
‍ [15 игр, которые научат программированию](https://proglib.io/sh/M59YzlP6sx)
‍ [Менторство в IT: как стать айтишником, найти работу мечты и облегчить себе жизнь](https://proglib.io/sh/jP1SXv5ntG)

 Самоучитель по Go для начинающих:
 [Часть 6. Функции и аргументы. Области видимости. Рекурсия. Defer](https://proglib.io/sh/6Jqk05hDuF)
 [Часть 7. Массивы и слайсы. Append и сopy. Пакет slices](https://proglib.io/sh/eYLQFjskzq)
 [Часть 8. Строки, руны, байты. Пакет strings. Хеш-таблица (map)](https://proglib.io/sh/6VlJsnWOyv)",7207,7,0,goproglib
4572,2024-03-01 19:07:09+00:00,Типичный #холивар двух айтишников,7388,55,5,goproglib
4571,2024-03-01 14:47:49+00:00," **TinyGo 0.31.0: теперь с поддержкой Go 1.22 **

Go-компилятор для микроконтроллеров и компактных однопроцессорных систем получает поддержку Go 1.22, собственную бинарную сборку macOS Arm64, поддержку Nim Flake и обновление до LLVM 17.

 [Подробнее](https://github.com/tinygo-org/tinygo/releases/tag/v0.31.0)",7102,28,2,goproglib
4570,2024-02-29 17:58:10+00:00,"** Как Uber обслуживает более 40 млн rps с помощью встроенного кэша**

Docstore — распределенная база данных Uber, построенная на основе MySQL. Храня десятки ПБ данных и обслуживая десятки миллионов запросов в секунду, это один из крупнейших механизмов базы данных в Uber, используемый микросервисами из всех бизнес-вертикалей.

С момента ее создания в 2020 году количество пользователей и юзкейсов Docstore значительно выросло. Проблема ясна — надо масштабироваться. В качестве решения команда Uber написала систему для кэширования CacheFront. Впечатляющие результаты внедрения и полезные практические наработки — [под катом](https://www.uber.com/blog/how-uber-serves-over-40-million-reads-per-second-using-an-integrated-cache/).",7949,0,0,goproglib
4565,2024-02-29 11:31:11+00:00," **Знания — сила! Что должен изучить каждый программист?**

Мы запускаем опрос среди наших читателей, чтобы выяснить, какие ключевые компетенции необходимо развивать программисту на текущий момент. Какие направления стоит изучать в первую очередь? Уровень каких знаний влияет на зарплату в отрасли?

Мы проведем анализ ответов и составим ТОП-лист навыков, которые не помешают освоить каждому программисту и разработчику для успешного карьерного роста!

 [Пройти опрос](https://docs.google.com/forms/d/e/1FAIpQLScdkERKZhQOKl0XZy9O4OwiHjaIne2DB837gHg-oyfb2i4Zow/viewform)",6796,5,0,goproglib
4564,2024-02-28 20:42:01+00:00," **routegroup** — легковесная Go-библиотека для группировки роутов и интеграции middleware с `http.ServeMux` от соавтора подкаста «Радио-Т» Umputun.

 [Слушать про анонс инструмента](https://radio-t.com/p/2024/02/24/podcast-898/) (01:18:30-01:34:40)
 [GitHub](https://github.com/go-pkgz/routegroup)",6823,17,1,goproglib
4563,2024-02-28 05:00:56+00:00," **Go enums — отстой**

Хотя заголовок кажется кликбейтным, в Go действительно технически нет перечислений (enums), что автор статьи [считает](https://www.zarl.dev/articles/enums) недостатком. Однако в Go есть ключевое слово `iota`, которое представляет собой самоинкрементируемое целое число, позволяя создавать некую форму перечислений.

В статье поднимаются некоторые интересные моменты, касающиеся кейсов использования перечислений, того, как обходные пути раздражают больше, чем могли на самом деле, и [предлагается](https://github.com/zarldev/goenums) использовать мапу для ассоциации перечислений со строковыми значениями и наоборот. Подход автора также включает методы для преобразования в JSON и обратно.

 [Читать](https://www.zarl.dev/articles/enums)",7269,15,17,goproglib
4562,2024-02-27 18:06:12+00:00," Представьте ситуацию, что вы можете стабильно получать одинаковые деньги как в стартапе, так и в большой компании. Что бы вы выбрали?

 — стартап, горящие глаза и вот это всё 
 — большую компанию! Там можно быстрее набраться коммерческого опыта
 — свой вариант (напишу в комментариях)

#холивар",6732,230,16,goproglib
4560,2024-02-27 06:01:46+00:00," ObjectBox Go — встроенная база данных, которую можно использовать как альтернативу SQLite, gorm и т. д. На прошлой неделе была представлен[а 1.8](https://github.com/objectbox/objectbox-go/releases/tag/v1.8.0).0.

️ ObjectBox проста в использовании благодаря интуитивно понятному встроенному API:

```
id, err := box.Put(&Person{ FirstName: ""Joe"", LastName:  ""Green"" })
```

 [Документация](https://golang.objectbox.io/)
 [GitHub](https://github.com/objectbox/objectbox-go)",7743,20,12,goproglib
4559,2024-02-26 06:01:48+00:00,"На Хабре появился перевод [той самой статьи](https://t.me/goproglib/4517) Мэта Райера о разработке HTTP-сервисов спустя 13 лет работы с Go

 [Читать](https://habr.com/ru/articles/793166/)",9589,26,3,goproglib
4558,2024-02-25 18:15:45+00:00,"️ «[Go под капотом](https://youtu.be/rloqQY9CT8I?si=K3jHXazQX5m7-9am)» — доклад Антона Сергеева на Kolesa Go Meetup

 **Что вы узнаете из доклада?**

️ Как работает Go изнутри?
️ Чем его принципы отличаются от других популярных языков?
️ Что нужно знать о работе компилятора, операционной системы и компьютера, чтобы пользоваться Go эффективно?
️ Как устроены горутины, и почему в языке есть несколько способов сделать одно и то же, когда речь идет о конкурентности?

‍️ Да, докладу уже 4 года. Но это, как говорится, база.",8541,36,13,goproglib
4557,2024-02-25 13:09:56+00:00," **Самоучитель по Go для начинающих. Часть 9. Структуры и методы. Интерфейсы. Указатели. Основы ООП**

В этом уроке самоучителя подробно рассмотрим структуры, методы и интерфейсы в Go, уделим особое внимание их особенностям и применению. В заключение познакомимся с конструкциями type assertion и type switch.

 [Читать гайд](https://proglib.io/sh/RSBx6HLOzr)

 **Остальные части в серии:**

1. [Особенности и сфера применения Go, установка, настройка](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-1-osobennosti-i-sfera-primeneniya-go-ustanovka-nastroyka-2023-11-23)
2. [Ресурсы для изучения Go с нуля](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-2-resursy-dlya-izucheniya-go-s-nulya-2023-11-28)
3. [Организация кода. Пакеты, импорты, модули. Ввод-вывод текста.](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-3-organizaciya-koda-pakety-importy-moduli-vvod-vyvod-teksta-2023-12-07)
4. [Переменные. Типы данных и их преобразования. Основные операторы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-4-peremennye-tipy-dannyh-i-ih-preobrazovaniya-osnovnye-operatory-2023-12-14)
5. [Условные конструкции if-else и switch-case. Цикл for. Вложенные и бесконечные циклы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-5-uslovnye-konstrukcii-if-else-i-switch-case-cikl-for-vlozhennye-i-beskonechnye-cikly-2024-01-11)
6. [Функции и аргументы. Области видимости. Рекурсия. Defer](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-6-funkcii-i-argumenty-oblasti-vidimosti-rekursiya-defer-2024-01-24)
7. [Массивы и слайсы. Append и сopy. Пакет slices](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-7-massivy-i-slaysy-append-i-sopy-paket-slices-2024-02-08)
8. [Строки, руны, байты. Пакет strings. Хеш-таблица (map)](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-8-stroki-runy-bayty-paket-strings-hesh-tablica-map-2024-02-15)",10124,11,1,goproglib
4556,2024-02-24 20:11:40+00:00,"️ Многим гоферам нравится использовать команду `go run` для запуска Go-кода как скриптов. Это хорошо работало до версии Go 1.22.

 Начиная с Go 1.22, вам нужно либо указать опцию командной строки ""`-gcflags=-lang=go1.xx`"", либо поместить ""`//go:build go1.xx`"" в некоторые исходники, чтобы избежать непреднамеренное поведение.

 [Источник](https://twitter.com/go100and1/status/1760637389775700025)",6718,38,4,goproglib
4555,2024-02-24 06:01:19+00:00," [**Gofakeit**](https://github.com/brianvoe/gofakeit) — Go-библиотека для генерации случайных данных 

С помощью библиотеки вы можете сгенерировать  случайные имена, адреса электронной почты, номера телефонов, названия должностей и т. д., или заполнить структуры с использованием аннотированных типов данных. 

Недавно выпущенная версия [7.0](https://github.com/brianvoe/gofakeit/releases/tag/v7.0.0) интегрирована с `math/rand/v2` из Go 1.22, что может упростить использование в некоторых кейсах.

#перечитываястарое",6686,48,6,goproglib
4554,2024-02-23 18:01:00+00:00,"‍ **Cosplore3D**: [серия статей](https://dev.to/chigbeef_77/series/26268) для тех, кто хочет разобраться с работой 3D-графики. 

Cosplore3D — игра в жанре экшн и исследования космоса на Go + Ebitengine. Будут планеты, космические корабли, инопланетяне и т. д. 

 [Wolfenstein 3D Raycaster](https://dev.to/chigbeef_77/wolfenstein-3d-raycaster-cosplore3d-pt1-2iop)
 [Fixing Raycasting](https://dev.to/chigbeef_77/fixing-raycasting-cosplore3d-pt2-5a15)
 [Creating a Storyline](https://dev.to/chigbeef_77/creating-a-storyline-cosplore3d-pt3-4hai)
 [Adding Enemies](https://dev.to/chigbeef_77/adding-enemies-coslore3d-pt4-4dj)
 [Creating A HUD](https://dev.to/chigbeef_77/creating-a-hud-cosplore3d-pt5-4j41)
 [Colors, Images, Graphics](https://dev.to/chigbeef_77/idk-yet-cosplore3d-pt6-4lgo)
 [Ankaran, Level 1](https://dev.to/chigbeef_77/ankaran-level-1-cosplore3d-pt7-2fhb)
 [Killing Those Blobs](https://dev.to/chigbeef_77/killing-those-blobs-cosplore3d-pt8-dp0) 
 [Not Walking Through Walls](https://dev.to/chigbeef_77/not-walking-through-walls-cosplore3d-pt9-b45)
 [You Can't See Through Walls](https://dev.to/chigbeef_77/you-cant-see-through-walls-cosplore3d-pt10-k5m)
 [Creating A Level Editor](https://dev.to/chigbeef_77/creating-a-level-editor-cosplore-pt11-3f3n)
 [The Cosplorer, Level 2](https://dev.to/chigbeef_77/the-cosplorer-cosplore3d-pt12-4o82)
 [All The Enemies](https://dev.to/chigbeef_77/all-the-enemies-cosplore3d-pt13-me0)
 [Enikoko, Level 3](https://dev.to/chigbeef_77/enikoko-level-3-cosplore3d-pt14-4d8f) 
 [Level 4, Schmeltool](https://dev.to/chigbeef_77/level-4-schmeltool-coslpore-pt15-395e)
 [Game -> Playable](https://dev.to/chigbeef_77/game-playable-cosplore3d-pt16-bck)
 [Creating A Menu](https://dev.to/chigbeef_77/creating-a-menu-cosplore3d-pt17-d2m)
 [Boss 1, The Beast](https://dev.to/chigbeef_77/boss-1-the-beast-cosplore3d-pt18-ff7) 
 [Boss 2, The Champion](https://dev.to/chigbeef_77/boss-2-the-champion-cosplore3d-pt19-3hp8)
 [Adding Sound Effects](https://dev.to/chigbeef_77/adding-sound-effects-cosplore3d-pt20-522)",6417,11,0,goproglib
4552,2024-02-23 09:00:58+00:00,"** The Twelve-Factor App**

 Вы наверняка знаете про документ-методологию для создания SaaS-приложений от команды Heroku. В нем обобщается весь опыт использования и наблюдения за самыми разнообразными SaaS-приложениями в дикой природе. 

 Как можно погрузиться в эту тему? Прочитать [оригинал,](https://12factor.net/) [перевод на русский](https://12factor.net/ru/) или [посмотреть видеогайд](https://youtu.be/uKyyIWkKDW8?si=Fty2RWKoGnqpx7ks) от канала **defer panic**, в котором разобран каждый из 12-ти пунктов.

⏱️ **Таймкоды:**

[00:00](https://m.youtube.com/watch?v=uKyyIWkKDW8) — Вступление
[02:01](https://m.youtube.com/watch?v=uKyyIWkKDW8&t=121s) — №1. Кодовая база
[04:50](https://m.youtube.com/watch?v=uKyyIWkKDW8&t=290s) — №2. Зависимости
[07:04](https://m.youtube.com/watch?v=uKyyIWkKDW8&t=424s) — №3. Конфигурация
[09:26](https://m.youtube.com/watch?v=uKyyIWkKDW8&t=566s) — №4. Внешние сервисы
[10:40](https://m.youtube.com/watch?v=uKyyIWkKDW8&t=640s) — №5. Сборка, релиз и выполнение
[13:02](https://m.youtube.com/watch?v=uKyyIWkKDW8&t=782s) — №6. Процессы без состояния
[14:42](https://m.youtube.com/watch?v=uKyyIWkKDW8&t=882s) — №7. Привязка портов (port binding)
[16:04](https://m.youtube.com/watch?v=uKyyIWkKDW8&t=964s) — №8. Конкурентность
[17:10](https://m.youtube.com/watch?v=uKyyIWkKDW8&t=1030s) — №9. Одноразовые и утилитарные процессы
[19:54](https://m.youtube.com/watch?v=uKyyIWkKDW8&t=1194s) — №10. Паритет окружений
[23:40](https://m.youtube.com/watch?v=uKyyIWkKDW8&t=1420s) — №11. Логи
[25:32](https://m.youtube.com/watch?v=uKyyIWkKDW8&t=1532s) — №12. Инструменты",6968,17,1,goproglib
4551,2024-02-23 06:01:05+00:00," **Самоучитель по Go для начинающих. Часть 8. Строки, руны, байты. Пакет strings. Хеш-таблица (map)**

Ранее в уроке про типы данных мы познакомились со строками, рунами и байтами. В этой статье расширим наши знания об этих типах, рассмотрим пакет strings и подробно изучим хеш-таблицы.

 [Читать статью](https://proglib.io/sh/6VlJsnWOyv)

 **Остальные части в серии:**

1. [Особенности и сфера применения Go, установка, настройка](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-1-osobennosti-i-sfera-primeneniya-go-ustanovka-nastroyka-2023-11-23)
2. [Ресурсы для изучения Go с нуля](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-2-resursy-dlya-izucheniya-go-s-nulya-2023-11-28)
3. [Организация кода. Пакеты, импорты, модули. Ввод-вывод текста.](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-3-organizaciya-koda-pakety-importy-moduli-vvod-vyvod-teksta-2023-12-07)
4. [Переменные. Типы данных и их преобразования. Основные операторы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-4-peremennye-tipy-dannyh-i-ih-preobrazovaniya-osnovnye-operatory-2023-12-14)
5. [Условные конструкции if-else и switch-case. Цикл for. Вложенные и бесконечные циклы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-5-uslovnye-konstrukcii-if-else-i-switch-case-cikl-for-vlozhennye-i-beskonechnye-cikly-2024-01-11)
6. [Функции и аргументы. Области видимости. Рекурсия. Defer](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-6-funkcii-i-argumenty-oblasti-vidimosti-rekursiya-defer-2024-01-24)
7. [Массивы и слайсы. Append и сopy. Пакет slices](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-7-massivy-i-slaysy-append-i-sopy-paket-slices-2024-02-08)",18464,11,1,goproglib
4550,2024-02-22 18:01:21+00:00,"️ У каждого языка программирования есть свои уникальные особенности и предпочтительные паттерны проектирования. Go — отличный пример, когда особенности языка задают свой стиль разработки. 

 Расскажите в комментариях, какой паттерн проектирования вы использовали в своем последнем проекте и почему выбрали именно его? Были ли какие-то уникальные проблемы, которые решил этот паттерн?

#интерактив",6538,2,16,goproglib
4549,2024-02-22 14:21:30+00:00,"️ С каким бы скепсисом вы ни относились к индексу TIOBE, согласно ему в феврале Go вошел в десятку лучших, заняв 8-е место.

 [Подробнее](https://www.tiobe.com/tiobe-index/)",6908,44,13,goproglib
4548,2024-02-21 19:01:26+00:00," **В чем сила пакета singleflight?**

`singleflight` предоставляет механизм подавления дублирующихся вызовов функций. Например, наше приложение запрашивает данные из API или базы данных. 

Если несколько запросов инициируют один и тот же вызов, это может привести к множественным идентичным вызовам к БД или API. Это создает нагрузку на систему, ведет к потерям CPU, памяти и пропускной способности сети.

Matthew Boyle, автор Domain-Driven Design with Golang, [приводит](https://www.bytesizego.com/blog/single-flight) пример использования `singleflight` для устранения дублирующихся вызовов. В примере, несмотря на то, что 5 горутин одновременно запрашивают данные для одного и того же ключа, функция `fetchData` будет вызвана только один раз благодаря функции `group.Do` из пакета `singleflight`.

`singleflight` также может используется в serverless кейсах. Google App Engine, например, применяет его как часть функции инициализации, поскольку там нет `main.go`.

#tip",7242,34,0,goproglib
4546,2024-02-21 06:06:38+00:00," **Искусство интеграции Go и C: гайд по работе с cgo**

 Автор [рассматривает](https://ericchiang.github.io/post/cgo/) ключевые аспекты и лучшие практики взаимодействия с C-библиотеками, акцентируя внимание на:

 Введении в cgo: обзор основных концепций и использования пакета C в Go.
 Работе с массивами и срезами: техники для безопасной и эффективной передачи данных между Go и C.
 Строковых преобразованиях: методы для конвертации строк между Go и C, включая управление памятью.
 Управлении указателями: решения для обработки указателей Go в контексте C, избегая проблем со сборщиком мусора.
 Обработке errno в Go: подходы к обработке ошибок в интегрированных системах Go и C.
 Экспорте Go в C: обсуждение возможностей и ограничений использования Go в качестве shared library.
 Лучших практиках и общих подводных камнях: советы и предостережения для разрабов, использующих cgo.",7181,27,5,goproglib
4545,2024-02-20 20:40:08+00:00,"Я и моя команда DevOps пытаемся устранить неполадки кластера Kubernetes в продакшене

#жиза",6344,72,1,goproglib
4543,2024-02-20 11:52:34+00:00,"️ **Go 1.22: Rangefunc Experiment**

[Перевод](https://habr.com/ru/articles/794564/) материала с [Go Wiki](https://go.dev/wiki/RangefuncExperiment) о**  **простых одноуровневых циклах:

️ Что такое range func?
️ Нюансы
️ Push/Pull - семантика
️ Как попробовать
️ Пример: перебор слайса в случайном порядке
️ Послесловие",7249,9,0,goproglib
4542,2024-02-19 18:10:23+00:00,"️ **Начните со стандартной библиотеки Go**

 Начиная проект, новички часто задают следующие вопросы:

 Какой логгер/веб-фреймворк/... следует использовать?
 Какую ORM лучше использовать?

‍️ Эти вопросы заданы из лучших побуждений, но все они упускают из виду ключевой аспект — Go имеет отличную стандартную библиотеку.

 [Читайте подробнее](https://matthewsanabria.dev/posts/start-with-the-go-standard-library/), почему иногда действительно следует начать с использования стандартной библиотеки Go.",6960,21,6,goproglib
4540,2024-02-19 06:02:19+00:00,"** От Go к Rust: два типа читаемого кода

**Читаемость кода часто связана с тем, насколько синтаксис и концепции языка знакомы разработчику. Что кажется читаемым одному, может быть непонятным другому.

Автор [статьи разделил](https://earthly.dev/blog/readability/) понятия «читаемость для новичков» (как быстро можно начать читать новый ЯП) и «читаемость для опытных» (как быстро опытный разработчик может понять код).

«При чем тут Go и Rust?» — спросите вы. А при том, что по мнению автора Go выбирает читаемость для новичков, в то время как Rust оптимизируется для опытных разработчиков.

Важно соблюдать баланс между упрощением кода для новичков и предоставлением продвинутых инструментов для опытных разрабов**.

** **Что думаете?**",7205,12,26,goproglib
4539,2024-02-18 07:14:39+00:00,"️ Новый видеогайд про **lock-free структуры данных в Go** от Владимира Балуна:

⏳ **Таймкоды:**

[00:00](https://www.youtube.com/watch?v=NNaxnmRF8Iw&t=0s) — Lock-free структуры данных
[00:41](https://www.youtube.com/watch?v=NNaxnmRF8Iw&t=41s) — Реализация стека на связном списке
[01:59](https://www.youtube.com/watch?v=NNaxnmRF8Iw&t=119s) — Неправильная реализация lock-free стека
[06:17](https://www.youtube.com/watch?v=NNaxnmRF8Iw&t=377s) — Правильная реализация lock-free стека
[09:43](https://www.youtube.com/watch?v=NNaxnmRF8Iw&t=583s) — ABA проблема
[11:55](https://www.youtube.com/watch?v=NNaxnmRF8Iw&t=715s) — Hazard pointers
[12:13](https://www.youtube.com/watch?v=NNaxnmRF8Iw&t=733s) — Tagged pointers",8052,34,0,goproglib
4538,2024-02-17 18:01:09+00:00," **errcheck** — инструмент для проверки непроверенных  ошибок в Go-коде. Недавно вышла версия [1](https://github.com/kisielk/errcheck/releases/tag/v1.7.0)[.7.0](https://github.com/kisielk/errcheck/releases/tag/v1.7.0).

 Для базового использования просто укажите интересующий путь к пакету в качестве первого аргумента:

```errcheck github.com/kisielk/errcheck/testdata
```

 Проверить все пакеты в текущей директории:

```errcheck ./...
```

 Или проверьте все пакеты в вашем $GOPATH и $GOROOT:

```errcheck all
```
 
 [GitHub](https://github.com/kisielk/errcheck)",6984,23,0,goproglib
4537,2024-02-17 12:32:11+00:00,"** Остаться или уйти? Оптимальный срок работы на одном месте**

Вы любите свою работу, интересные проекты вам гарантированы, зарплата повышается каждый год. Но вот уже 5 лет вы трудитесь в одной и той же компании. Не пора ли что-то изменить, пока мотивация окончательно не улетучилась?

Многие опытные айтишники сталкиваются с такой дилеммой. С одной стороны, текущее место работы устраивает. С другой — хочется разнообразия, новых задач и знаний.

**Должен ли современный IT-специалист менять работу чаще, чем раз в 5 лет?** Или лучше наращивать экспертизу в рамках одной компании? А может дело совсем не в сроках, а в качестве задач и развитии карьеры?

 [Расскажите о своём опыте в нашем новом опросе](https://forms.gle/VY4Sz4U81eXqoHmi8) ",6658,31,0,goproglib
4536,2024-02-17 08:13:04+00:00," **Самоучитель по Go для начинающих. Часть 7. Массивы и слайсы. Append и сopy. Пакет slices**

Рассмотрим реализацию массивов и слайсов в языке Go, разберем функции append и copy, изучим пакет slices и по традиции решим несколько занимательных задач.

 [Читать статью](https://proglib.io/sh/eYLQFjskzq)
 [Часть 1](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-1-osobennosti-i-sfera-primeneniya-go-ustanovka-nastroyka-2023-11-23)
 [Часть 2](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-2-resursy-dlya-izucheniya-go-s-nulya-2023-11-28)
 [Часть 3](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-3-organizaciya-koda-pakety-importy-moduli-vvod-vyvod-teksta-2023-12-07)
 [Часть 4](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-4-peremennye-tipy-dannyh-i-ih-preobrazovaniya-osnovnye-operatory-2023-12-14)
 [Часть 5](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-5-uslovnye-konstrukcii-if-else-i-switch-case-cikl-for-vlozhennye-i-beskonechnye-cikly-2024-01-11)
 [Часть 6](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-6-funkcii-i-argumenty-oblasti-vidimosti-rekursiya-defer-2024-01-24)",19393,22,0,goproglib
4535,2024-02-16 19:44:40+00:00,"**Топовые доклады с **[**GopherCon Europe: Berlin 2023**](https://www.youtube.com/watch?v=igFz-5rdn2Y&list=PLtoVuM73AmsJWvXYd_9rbYXcbv1UdzeLT&pp=iAQB)

 [Keynote: The State Of Go](https://youtu.be/igFz-5rdn2Y?si=Daa8KTw-q3ReVDr8) / Cameron Balahan
 [Reaching the Unix Philosophy's Logical Extreme with Webassembly](https://youtu.be/QNDvfez6QL0?si=LqA5ikOpUPjAHDI3) / Xe Iaso
 [Towards Modern Development of Cloud Applications](https://youtu.be/Q90osDkqZt0?si=ZpDybVjCQnuH033S) / Robert Grandl
 [Go Right Ahead! Simple Hacks to Cut Memory Usage by 80&](https://youtu.be/YlTRodoYOZ4?si=i5zJHox6ubS4xzrR) / Yiscah Levy Silas
 [A Fast Structured Logging Package](https://youtu.be/tC4Jt3i62ns?si=U56eG31Kp0B5W817) / Jonathan Amsterdam
 [Useful Functional-Options Tricks for Better Libraries](https://youtu.be/5uM6z7RnReE?si=uCG_FntiJFiyIEFV) / Julien Cretel
 [I'm Excited to Use Generics in Go 1.21](https://youtu.be/qng9-EuVG1M?si=p2gPAmTQNMWrp0W6) / Robert Burke
 [Writing a TSDB from Scratch: Performance Optimization](https://youtu.be/NdjuW98ep_w?si=u4rTQyDJIcVPub1N) / Roman Khavronenko
 [Go Sync or Go Home](https://youtu.be/y2zc9gvIMPM?si=s5b_Yu6TKA9Gz2Gy) / Yarden Laifenfeld",7426,14,0,goproglib
4533,2024-02-16 06:01:52+00:00," **Сохранение объекта Go в JSON-файле**

Используйте `jsonfile` для сохранения значения Go в файле JSON.

```type JSONFile
    func Load[Data any](path string) (*JSONFile[Data], error)
    func New[Data any](path string) (*JSONFile[Data], error)
    func (p *JSONFile[Data]) Read(fn func(data *Data))
    func (p *JSONFile[Data]) Write(fn func(*Data) error) error
```

В несколько строк кода этого [репозитория](https://github.com/crawshaw/jsonfile) вложено немного больше мыслей, чем вы могли ожидать. Если вам нужна более подробная информация, смотрите заметки в [блоге](https://crawshaw.io/blog/jsonfile).",6356,14,0,goproglib
4532,2024-02-15 20:03:09+00:00," **Как вы относитесь к парному программированию? **Это то самое,** **при котором два разраба работают вместе над одной задачей, сидя за одним рабочим местом.

‍ Кирилл Мокевкин [разобрался](https://t.me/orgprog/81), что к чему, — если вам интересна эта тема.

#холивар",6227,24,1,goproglib
4531,2024-02-15 18:09:12+00:00,"** Рост или падение? Изменение зарплат в IT за 2023 год**

Чтобы разобраться в этом вопросе, «Библиотека программиста» решила провести [опрос](https://forms.gle/VxZPPuPn3o8HphMD6) среди читателей издания. Мы хотим понять, выросли ли ваши зарплаты в 2023 году и если да, то на сколько процентов. Или может быть наоборот — ваши доходы снизились на фоне кризисных явлений в экономике?

Примите участие в нашем коротком опросе и поделитесь своим мнением! Вместе мы проанализируем текущую ситуацию на рынке труда в IT-сфере и поймем, что ждёт эту отрасль дальше. Ждём ваших ответов!

Опрос займёт у вас примерно 4 минуты.

 [Ссылка на опрос](https://forms.gle/VxZPPuPn3o8HphMD6)",11153,12,0,goproglib
4530,2024-02-15 16:05:55+00:00,"️ **Основные особенности gRPC**: на заметку разработчику

**gRPC** (Remote Procedure Calls) — это система удалённого вызова процедур с открытым исходным кодом, первоначально разработанная в Google в 2015 году. Под капотом используется HTTP/2 для транспорта и Protocol Buffers в качестве языка описания интерфейса.

**Protocol Buffers** (Protobuf): gRPC по умолчанию использует Protocol Buffers (файлы .proto) в качестве языка описания интерфейса (IDL). Это делает сообщения gRPC меньше и быстрее по сравнению с JSON или XML. Protobuf позволяет определять структуру данных и интерфейс сервиса в едином формате, что упрощает сериализацию/десериализацию данных.
**Транспорт на основе HTTP/2**: gRPC использует HTTP/2 для транспорта, что позволяет реализовать ряд улучшений по сравнению с HTTP/1.x. Включая такие фичи, как мультиплексирование потоков, сжатие заголовков, приоритизация запросов и поддержка серверного push.
**Поддержка множества языков программирования**: gRPC поддерживает широкий спектр ЯП, включая C#, Java, Python, и Go, что делает его универсальным инструментом для создания распределенных систем.
**Двунаправленный стриминг**: gRPC поддерживает стриминг запросов и ответов, что позволяет разрабатывать сложные real-time приложения вроде чат-сервисов.

 [Источник](https://x.com/alexxubyte/status/1757800097314955610)

#инфографика",5604,13,1,goproglib
4528,2024-02-15 06:03:32+00:00," **TinyGo + WASM** в действии

 Найдено на просторах [X](https://x.com/deadprogram/status/1757855105380962553)",6197,19,4,goproglib
4527,2024-02-14 19:01:35+00:00," **Практический взгляд на уменьшение зависимостей в Go-библиотеках**

 «Зачем уменьшать зависимости?» — спросите вы. Как минимум для уменьшения сложности, снижения риска, сокращения времени сборки и уменьшения размера итогового бинаря.

 [Под катом](https://dgt.hashnode.dev/reducing-go-dependencies) — взгляд на этот вопрос с примерами в [Huma](https://huma.rocks/) , Go-фреймворке для создания REST API с использованием OpenAPI, который может вдохновить вас на рассмотрение аналогичных вариантов для ваших собственных проектов.",6418,6,0,goproglib
4526,2024-02-14 16:24:09+00:00,"🩷‍ Пока влюбленные шлют друг другу валентинки, айтишники отмечают свой профессиональный праздник. 14 февраля считается неофициальным днем компьютерщика.

‍️ Так совпало, что именно в этот день в 1946 году общественности был продемонстрирован первый работающий электронный компьютер ENIAC I. Именно к этому событию приурочено празднование.

 А ведь раньше действительно айтишников называли компьютерщиками… Или кого там так называли? Кто винду мог переустановить?",6333,11,4,goproglib
4525,2024-02-14 14:22:53+00:00,"**‍ Менторство в IT: как стать айтишником, найти работу мечты и облегчить себе жизнь**

Как вкатиться в IT и найти работу с помощью ментора? Чем могут помочь наставники и с какими запросами к ним приходят? А главное — где найти хорошего специалиста?

 [Рассказываем обо всём в новой статье](https://proglib.io/sh/jP1SXv5ntG) 
 [Зеркало](https://proglib.tech/p/mentorstvo-v-it-kak-stat-aytishnikom-nayti-rabotu-mechty-i-oblegchit-sebe-zhizn-2024-02-01)",5643,6,0,goproglib
4521,2024-02-13 12:00:06+00:00,"**goldmark** — Go-парсер markdown, который имеет три ключевых характеристики:

️ Легко расширяем
️ Совместим с CommonMark
️ Имеет хорошо структурированную архитектуру

```import (
    ""bytes""
    ""github.com/yuin/goldmark""
    ""github.com/yuin/goldmark/extension""
    ""github.com/yuin/goldmark/parser""
    ""github.com/yuin/goldmark/renderer/html""
)

md := goldmark.New(
          goldmark.WithExtensions(extension.GFM),
          goldmark.WithParserOptions(
              parser.WithAutoHeadingID(),
          ),
          goldmark.WithRendererOptions(
              html.WithHardWraps(),
              html.WithXHTML(),
          ),
      )
var buf bytes.Buffer
if err := md.Convert(source, &buf); err != nil {
    panic(err)
}
```

 [GitHub](https://github.com/yuin/goldmark)
 [Goldmark playground](https://yuin.github.io/goldmark/playground/)",6098,12,0,goproglib
4520,2024-02-13 09:05:15+00:00,"‍ **15 игр, которые научат программированию**

А также помогут подготовиться к техническому собеседованию, развить алгоритмическое мышление и просто провести свободное время с пользой.

[Читать статью](https://proglib.io/sh/M59YzlP6sx)",5489,8,1,goproglib
4519,2024-02-13 06:00:08+00:00,"**Самые полезные каналы для программистов в одной подборке!**

Сохраняйте себе, чтобы не потерять 

Для всех

[Библиотека программиста](https://t.me/proglibrary) — новости, статьи, досуг, фундаментальные темы
[Книги для программистов](https://t.me/progbook)
[IT-мемы](https://t.me/itmemlib)
[Proglib Academy](https://t.me/proglib_academy) — тут мы рассказываем про обучение и курсы

#️⃣C#

[Книги для шарпистов | C#, .NET, F#](https://t.me/csharpprogbook)
[Библиотека шарписта ](https://t.me/csharpproglib)— полезные статьи, новости и обучающие материалы по C#
[Библиотека задач по C#](https://t.me/csharp_problems_lib) — код, квизы и тесты
[Библиотека собеса по C#](https://t.me/csharp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Вакансии по C#, .NET, Unity Вакансии по PHP, Symfony, Laravel](https://t.me/csharpdevjob)

️DevOps

[Библиотека devops’а](https://t.me/devopsslib) — полезные статьи, новости и обучающие материалы по DevOps
[Вакансии по DevOps & SRE](https://t.me/devopssjob)
[Библиотека задач по DevOps](https://t.me/devops_problems_lib) — код, квизы и тесты
[Библиотека собеса по DevOps](https://t.me/devops_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования

PHP

[Библиотека пхпшника](https://t.me/phpproglib) — полезные статьи, новости и обучающие материалы по PHP
[Вакансии по PHP, Symfony, Laravel](https://t.me/phpdevjob)
[Библиотека PHP для собеса](https://t.me/php_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по PHP](https://t.me/php_problems_lib) — код, квизы и тесты

Python

[Библиотека питониста](https://t.me/pyproglib) — полезные статьи, новости и обучающие материалы по Python
[Вакансии по питону, Django, Flask](https://t.me/pydevjob)
[Библиотека Python для собеса](https://t.me/py_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Python](https://t.me/py_problems_lib) — код, квизы и тесты

Java

[Библиотека джависта](https://t.me/javaproglib) — полезные статьи по Java, новости и обучающие материалы
[Библиотека Java для собеса](https://t.me/java_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Java](https://t.me/java_problems_lib) — код, квизы и тесты
[Вакансии для java-разработчиков](https://t.me/javadevjob)

Data Science

[Книги для дата сайентистов | Data Science](https://t.me/dsprogbook)
[Библиотека Data Science](https://t.me/dsproglib) — полезные статьи, новости и обучающие материалы по Data Science
[Библиотека Data Science для собеса](https://t.me/ds_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Data Science](https://t.me/ds_problems_lib) — код, квизы и тесты
[Вакансии по Data Science, анализу данных, аналитике, искусственному интеллекту](https://t.me/datajob)

Go

[Книги для Go разработчиков](https://t.me/goprogbook)
[Библиотека Go разработчика](https://t.me/goproglib) — полезные статьи, новости и обучающие материалы по Go
[Библиотека Go для собеса](https://t.me/go_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Go](https://t.me/go_problems_lib) — код, квизы и тесты
[Вакансии по Go](https://t.me/godevjob)

C++

[Книги для C/C++ разработчиков](https://t.me/cppprogbook)
[Библиотека C/C++ разработчика](https://t.me/cppproglib) — полезные статьи, новости и обучающие материалы по C++
[Библиотека C++ для собеса](https://t.me/cpp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по C++](https://t.me/cpp_problems_lib) — код, квизы и тесты
[Вакансии по C++](https://t.me/cppdevjob)

Другие профильные каналы

[Библиотека фронтендера](https://t.me/frontendproglib)
[Библиотека мобильного разработчика](https://t.me/mobileproglib)
[Библиотека хакера](https://t.me/hackproglib)
[Библиотека тестировщика](https://t.me/testerlib)

Каналы с вакансиями

[Вакансии по фронтенду, джаваскрипт, React, Angular, Vue](https://t.me/jsdevjob)
[Вакансии для мобильных разработчиков](https://t.me/mobiledevjob)
[Вакансии по QA тестированию](https://t.me/testerrjob)
[InfoSec Jobs — вакансии по информационной безопасности](https://t.me/hackdevjob)

Чтобы добавить папку с нашими каналами, нажмите сюда

Также у нас есть боты:
[Бот с IT-вакансиями](http://t.me/proglib_job_bot)
[Бот с мероприятиями в сфере IT](http://t.me/event_listener_bot)

Мы в других соцсетях:
[VK](https://vk.com/proglib)
[YouTube](https://www.youtube.com/c/%D0%91%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%B0)
[Дзен](https://zen.yandex.ru/proglib)
[Facebook](https://www.facebook.com/proglib/?locale=ru_RU) *
[Instagram](https://www.instagram.com/proglibrary/) *

* Организация Meta запрещена на территории РФ",5629,1,0,goproglib
4518,2024-02-12 20:34:41+00:00," **Как нестандартно войти в АйТи**

Многие IT-специалисты приходят в эту сферу нестандартным путем — кто-то начинал как самоучка, а кто-то стал программистом случайно. Был ли у вас необычный старт карьеры в IT?

[Расскажите нам свою историю](https://forms.gle/iaPx7JkdKtzgG8hp9)! Ваш опыт может вдохновить тех, кто мечтает о переменах, но пока не решается начать.

️ С нетерпением ждем ваших комментариев!",5465,14,9,goproglib
4517,2024-02-12 06:02:10+00:00,"️ **Разработка HTTP-сервисов спустя 13 лет** **работы с Go**: подход Мэта Райера, техдира Grafana Labs в команде машинного обучения

Почти шесть лет назад Мэт написал пост на такую же тему, который стал вирусным и значительно повлиял на его взгляды относительно этой темы.

 [В новом материале](https://grafana.com/blog/2024/02/09/how-i-write-http-services-in-go-after-13-years/) Мэт рассматривает ряд тем, связанных с созданием сервисов на Go, в том числе:

️ Структурирование серверов и обработчиков для максимального удобства сопровождения
️ Советы и рекомендации по оптимизации для быстрого запуска и graceful shutdown  
️ Как выполнять общую работу, применимую ко многим типам запросов
️ Как правильно тестировать сервисы",8627,18,0,goproglib
4516,2024-02-11 13:15:34+00:00,"️ **Jaegar + Open Telemetry в действии**: простой пример для Go-разработчика

 Пример файла Docker Compose для запуска [Jaeger:](https://www.jaegertracing.io/)

```version: '3'
services:
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - ""16686:16686"" # UI
      - ""14268:14268"" # Collector
      - ""14250:14250"" # gRPC
      - ""9411:9411""   # Zipkin
```

 Пример минимального Go-приложения для демонстрации интеграции [Open Telemetry:](https://opentelemetry.io/)

```package main

import (
    ""context""
    ""go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp""
    ""go.opentelemetry.io/otel""
    ""go.opentelemetry.io/otel/exporters/jaeger""
    ""go.opentelemetry.io/otel/sdk/resource""
    ""go.opentelemetry.io/otel/sdk/trace""
    semconv ""go.opentelemetry.io/otel/semconv/v1.7.0""
    ""log""
    ""math/rand""
    ""net/http""
    ""time""
)

func main() {
    // Initialize Jaeger Exporter
    exporter, err := jaeger.New(jaeger.WithCollectorEndpoint())
    if err != nil {
       log.Fatal(err)
    }

    // Create Trace Provider
    tp := trace.NewTracerProvider(
       trace.WithBatcher(exporter),
       trace.WithResource(resource.NewWithAttributes(
          semconv.SchemaURL,
          semconv.ServiceNameKey.String(""app-one""),
       )),
    )

    otel.SetTracerProvider(tp)

    http.Handle(""/"", otelhttp.NewHandler(http.HandlerFunc(SimpleHandler), ""Hello""))
    log.Fatal(http.ListenAndServe("":8081"", nil))
}

func SimpleHandler(w http.ResponseWriter, r *http.Request) {
    _, _ = w.Write([]byte(""Hello, World!""))
}
```

 [Источник](https://www.bytesizego.com/blog/open-telemetry-using-go) 

#tip",7107,28,0,goproglib
4515,2024-02-11 06:02:28+00:00," **Лучшие практики управления контекстом в Go**

 Есть три ключевых правила работы с контекстом:

1️⃣ Только функции entry point должны создавать новый контекст, например, используя `context.Background()`
2️⃣ Контекст передается только вниз по цепочке вызовов
3️⃣ Не следует хранить контекст в структурах или использовать его после возврата функции

Первые два относительно просты, а вот третье стало причиной написания статьи.

 [Читать](https://zenhorace.dev/blog/context-control-go/)",6724,24,0,goproglib
4513,2024-02-10 20:27:12+00:00," **Как отложенная (ленивая) инициализация может положить Go-сервис в Cloud Run?**

Инженер из Google Valentin Deleplace делится историей повышения производительности Go-сервиса с помощью [double-checked locking](https://en.wikipedia.org/wiki/Double-checked_locking) (второй скрин).
  
 [Читать](https://cloud.google.com/blog/products/serverless/troubleshooting-performance-of-a-cloud-run-go-app)",6640,16,0,goproglib
4512,2024-02-10 17:08:06+00:00," **Спортивная мотивация и мотивация в IT, что общего?**

Рассказываем, как использовать психологические инструменты из спорта, чтобы увеличить внутреннюю мотивацию и повысить продуктивность. 

 [Читать статью](https://proglib.io/sh/vQRs8Jem06)
 [Зеркало](https://proglib.tech/p/sportivnaya-motivaciya-i-motivaciya-v-it-chto-obshchego-2024-02-02)",27220,17,0,goproglib
4511,2024-02-10 10:54:49+00:00," Filippo Valsorda, эксперт по криптографии и бывший член команды Go, [делится подробностями](https://words.filippo.io/dispatches/mlkem768/) разработки библиотеки **mlkem768**

 [mlkem768](https://pkg.go.dev/filippo.io/mlkem768) — это реализация ML-KEM-768 на чистом Go + [sha3](https://pkg.go.dev/golang.org/x/crypto/sha3). ML-KEM представляет собой механизм обмена ключами постквантовой криптографии, который в настоящее время стандартизируется NIST. 

 И да, Filippo написал часть библиотеки в прямом эфире. Тоже можно [посмотреть](https://youtu.be/MyB7A93C-V0?si=uZUIpkg-k0IU6aob) ",5956,8,2,goproglib
4510,2024-02-09 19:17:12+00:00,"** Подборка лучших статей «Библиотеки программиста» за январь:** сохраняй в заметки, чтобы не пропустить #самыйсок

️ [Чек лист идеального отдыха: 5 психологических техник расслабления](https://proglib.io/p/chek-list-idealnogo-otdyha-5-psihologicheskih-tehnik-rasslableniya-2023-12-28)
‍ [Особенности работы в ИТ: информация из первых рук](https://vc.ru/hr/968925-osobennosti-raboty-v-it-informaciya-iz-pervyh-ruk)
️ [Синдром упущенного отпуска: почему так опасно игнорировать заслуженный отдых](https://proglib.io/p/sindrom-upushchennogo-otpuska-pochemu-tak-opasno-ignorirovat-zasluzhennyy-otdyh-2024-01-09)
 [Итоги недели в мире ИИ и обзоры новых сервисов: новые модели для генерации впечатляющих видео](https://vc.ru/dev/983596-itogi-nedeli-v-mire-ii-i-obzory-novyh-servisov-novye-modeli-dlya-generacii-vpechatlyayushchih-video)
⬆️ [10 факторов, влияющих на зарплату программиста](https://proglib.io/p/10-faktorov-vliyayushchih-na-zarplatu-programmista-2024-01-22)
‍ [Психология и ИТ: 17 личностных качеств, необходимых для успешной карьеры](https://proglib.io/p/psihologiya-i-it-17-lichnostnyh-kachestv-neobhodimyh-dlya-uspeshnoy-karery-2024-01-23)
 Самоучитель по Go для начинающих:
 [Часть 5. Условные конструкции if-else и switch-case. Цикл for. Вложенные и бесконечные циклы](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-5-uslovnye-konstrukcii-if-else-i-switch-case-cikl-for-vlozhennye-i-beskonechnye-cikly-2024-01-11)
 [Часть 6. Функции и аргументы. Области видимости. Рекурсия. Defer](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-6-funkcii-i-argumenty-oblasti-vidimosti-rekursiya-defer-2024-01-24)",8403,6,0,goproglib
4509,2024-02-09 12:03:59+00:00,"Matthew Boyle, автор книги **Domain-Driven Design with Golang**, создал мини-курс по основным изменениям в Go 1.22. Врывайтесь

‍ [Смотреть](https://www.bytesizego.com/what-s-new-in-go-1-22)",6147,17,0,goproglib
4508,2024-02-09 06:02:46+00:00,"**Начать курс **[**«Алгоритмы и структуры данных»**](https://proglib.io/w/b00fcfd1)** с вводной части можно уже сегодня
**
Курс для разработчиков, которые хотят подготовиться к собеседованию в технологическую компанию или продвинуться по карьерной лестнице.

Начать вводные занятия можно здесь – https://proglib.io/w/b00fcfd1

На курсе вас ждет:

▪️ бессрочный доступ

▪️ 47 видеолекций

▪️ 150 практических заданий

▪️ бессрочная поддержка в чате студентов

▪️развернутая обратная связь по всем домашним заданиям

Подробная программа – https://proglib.io/w/40510c9e

Переходите, оставляйте заявку на вводные занятия и знакомьтесь с самым харизматичным спикером – Степаном Мацкевичем. Он определенно получил приз зрительских симпатий от наших студентов ",6057,10,0,goproglib
4507,2024-02-08 20:07:41+00:00," **12 факторов CLI-приложений**

Go — тот самый язык, который отлично подходит и активно используется для разработки CLI-приложений. 

 Вот 12 аспектов, о которых стоит знать при разработке последних:

1. Качественная документация
2. Использование флагов вместо аргументов
3. Возможность легко определить версию 
4. Правильное использование stdout и stderr для вывода сообщений и данных
5. Обработка ошибок
6. Использование цветов, индикаторов выполнения и прогресс-баров для улучшения UX 
7. Использование подсказок для ввода данных, когда это возможно
8. Эффективное отображение данных в таблицах
9. Оптимизация времени запуска и выполнения
10. Поддержка открытого исходного кода и вовлечение сообщества
11. Четкое разделение и описание подкоманд в CLI
12. Использование стандартов XDG для хранения файлов конфигурации, данных и кэша

 Подробнее на [Medium](https://medium.com/@jdxcode/12-factor-cli-apps-dd3c227a0e46) или в PDF",6413,24,0,goproglib
4505,2024-02-07 20:54:58+00:00," Устали сначала собирать, а потом анализировать данные о различных CVE из NVD и других критически важных источников? Команда ProjectDiscovery позаботилась об этом и [представила](https://blog.projectdiscovery.io/announcing-cvemap-from-projectdiscovery/) новый инструмент [cvemap](https://github.com/projectdiscovery/cvemap).

Он предоставляет структурированный и простой в навигации CLI к различным базам данных уязвимостей, а также позволяет выполнить:

️ Поиск и запрос набора данных CVE
️ Сопоставление CVE с Known Exploited Vulnerabilities Catalog
️ Сопоставление CVE и Exploit Prediction Scoring System
️ Сопоставление CVE и Common Platform Enumeration
️ Сопоставление CVE с PoC'ами на GitHub
️ Сопоставление CVE с Nuclei Template
️ Сопоставление CVE с отчетами HackerOne

```go install github.com/projectdiscovery/cvemap/cmd/cvemap@latest
```

#news #tools #CVE",6419,19,0,goproglib
4504,2024-02-07 20:54:58+00:00, Очередной любопытный CLI-инструмент на Go от команды ProjectDiscovery ,6075,2,0,goproglib
4503,2024-02-07 11:47:55+00:00," **Выпущена версия Go 1.22.0!**

 Мини-обзор изменений и новых возможностей:

1️⃣ **Изменения в языке:
**
️ Изменения в поведении переменных в циклах` for`. Теперь каждая итерация цикла создает новые переменные, чтобы избежать ошибок совместного использования.
️ Циклы` for `теперь могут итерировать по целым числам.

2️⃣ **Команда go:
**
️ В` workspaces `теперь можно использовать директорию` vendor `с зависимостями.
️ Команда` go get `больше не поддерживается в режиме` GOPATH.`
️ Изменения в` go mod init `и` go test -cover`.

3️⃣ **Обновлен веб-интерфейс инструмента**` trace.`

4️⃣ **Инструмент vet:
**
️ Изменения в поведении` vet `в соответствии с новой семантикой переменных цикла.
️ Новые предупреждения для `append` и другие.

5️⃣ **Рантайм: **улучшения производительности и снижение использования памяти.

6️⃣ **Компилятор: **улучшения в Profile-guided Optimization (PGO) и другие оптимизации.

7️⃣ **Linker: **изменения в флагах `-s/-w` и другие улучшения.

8️⃣ **Bootstrap: **требуется последний релиз Go 1.20 или более новый для bootstrap.

9️⃣ **Основная библиотека:
**
️ Новый пакет` math/rand/v2`.
️ Новый пакет` go/version`.
️ Улучшенные шаблоны роутинга в HTTP и многое другое.

️ [Примечания к выпуску](https://go.dev/doc/go1.22)
 [Скачать](https://go.dev/dl/#go1.22.0)",7669,55,36,goproglib
4502,2024-02-06 20:12:11+00:00," **Какие существуют распространенные паттерны конкурентности в Go?** 

Паттерны конкурентности в Go обычно строятся вокруг горутин и каналов. 

Вот несколько основных паттернов конкурентности, которые широко используются в Go:

 **Worker pools**: подразумевает создание нескольких горутин (воркеров) для выполнения задач из очереди. 

 **Fan-in** (собирает данные из множества источников) и **Fan-out** (распределяет задачи между несколькими обработчиками).

 **Pipeline**: организация горутин в серию обработчиков, где каждая горутина выполняет определенную подзадачу. Каждая стадия пайплайна читает из одного канала и пишет в другой, формируя цепочку обработки данных.

 **Publish/Subscribe**: создание механизма, в котором одни горутины (издатели) публикуют сообщения в канал, а другие горутины (подписчики) читают эти сообщения.

 **Context passing**: использование пакета `context` для управления жизненным циклом и отмены горутин. Это особенно полезно в сетевых приложениях и при выполнении запросов к базам данных.

 **Errgroup**: использование пакета `errgroup` для параллельного выполнения задач с возможностью обработки ошибок и отмены всех задач при возникновении первой ошибки.

 **Select statement**: использование оператора `select` для ожидания нескольких операций с каналами. `select` позволяет горутине ожидать несколько коммуникационных операций, блокируясь до готовности одной из них.

 Подробнее: доклад [Go Concurrency Patterns](https://www.youtube.com/watch?v=f6kdp27TYZs) Роба Пайка ([слайды](https://go.dev/talks/2012/concurrency.slide)) и [Advanced Go Concurrency Patterns](https://www.youtube.com/watch?v=QDDwwePbDtw) ([слайды](https://go.dev/talks/2013/advconc.slide)) Sameer Ajmani",5566,46,2,goproglib
4501,2024-02-06 18:19:09+00:00,"‍️ Есть такое слово «надо», которое отравляет многим жизнь. Надо получить вышку, надо жениться до стольких-то лет и родить детей до стольких-то, надо зарабатывать столько-то и еще много-много «надо».

️ Как с этим жить? Попробуйте вместо «надо» поставить «полезно». И если бесполезно — то не надо!

 **А какое слово отравляет вашу жизнь? Поделитесь в комментариях** ",6129,28,7,goproglib
4500,2024-02-06 10:02:18+00:00,"** Стартапы vs IT-гиганты: куда лучше устроиться Junior-разработчику**

Представим ситуацию: вы начинающий разработчик с очень востребованным стеком (да, звучит как фантастика, но допустим). И так уж сложилось, что перед вами стоит выбор: пойти работать в стартап или крупную компанию. Причем предлагаемые условия абсолютно идентичны и там, и там.

Что же делать в такой ситуации?

 [Разбираемся в статье](https://proglib.io/sh/OgYqVNeIDi)
 [Зеркало](https://proglib.tech/p/startapy-vs-it-giganty-kuda-luchshe-ustroitsya-junior-razrabotchiku-2024-01-30)",5788,0,0,goproglib
4496,2024-02-06 06:05:21+00:00," **Type assertion vs. type switches в Go**

Хотя автор статьи работал Go-разрабом, некоторая путаница в этих понятиях у него осталась, поэтому он решил разобраться более подробно. Читайте о различиях на практике

 [Читать](https://rednafi.com/go/type_assertion_vs_type_switches/)",6366,9,0,goproglib
4495,2024-02-05 09:08:34+00:00,"** Эпикфейл: карьера катится к чертям**

‍️ У всех нас случались провалы в карьере, о которых не хочется распространяться. Неловкий момент на собеседовании, провал проекта из-за глупой ошибки, конфликт с начальством — такие ситуации хочется поскорее забыть. Однако часто именно они дают нам самые ценные уроки и закаляют как профессионалов.

 [Поделитесь](https://docs.google.com/forms/d/e/1FAIpQLScldUgfdrMIV44cq3IMBuM0Vulrh_MYiQepv49FpOjo7A5R1A/viewform) своей историей карьерного провала в нашем новом опросе и расскажите, к чему он привел в итоге. Быть может, эта ошибка позволила вам пересмотреть свой путь и выбрать более подходящую профессию? А может, вы сделали правильные выводы и сейчас добились успеха?

 [Поделиться историей](https://docs.google.com/forms/d/e/1FAIpQLScldUgfdrMIV44cq3IMBuM0Vulrh_MYiQepv49FpOjo7A5R1A/viewform)",6050,9,10,goproglib
4494,2024-02-05 06:02:04+00:00," Вам интересна тема геймдева на Go? 

Искандер Шарипов [начал](https://habr.com/ru/articles/791192/) серию статей о разработке RPG на основе движка Ebitengine:

 [Часть 0.](https://habr.com/ru/articles/791192/) Знакомство с Ebitengine
 [Часть 0.5.](https://habr.com/ru/articles/799497/) Доработка структуры игры и перевод на сцены + разработка отдельного демо-проекта

#геймдев",6932,31,0,goproglib
4493,2024-02-04 09:52:58+00:00,"‍ **Решение задач с **[**Advent of Code 2023**](https://adventofcode.com/2023)** на Go** от голландского разраба
Danny van Kooten

 Что внутри:

 Решения каждой задачи, начиная с первого дня
 Комментарии к коду, объясняющие решения и подходы автора
 Тесты и бенчмарки для оценки производительности

 [GitHub](https://github.com/dannyvankooten/advent-of-code/tree/main/2023-go)",7228,31,1,goproglib
4492,2024-02-03 20:02:14+00:00," Апгрейд нод Kubernetes без простоев продакшена

#жиза",7382,71,0,goproglib
4491,2024-02-03 17:08:05+00:00," **Baby API** — простой Go CRUD API фреймворк. Вы можете использовать его для кастомной обработки запросов/ответов с помощью реализованных Renderer и Binder из [go-chi/render](https://github.com/go-chi/render). 

Используйте предоставленные функции расширения для добавления дополнительных функций API: `OnCreateOrUpdate`, `Storage`, `AddCustomRoute`, `Patch` и многие другие.

```package main

import ""github.com/calvinmclean/babyapi""

type TODO struct {
    babyapi.DefaultResource

    Title       string
    Description string
    Completed   bool
}

func main() {
    api := babyapi.NewAPI[*TODO](
        ""TODOs"", ""/todos"",
        func() *TODO { return &TODO{} },
    )
    api.RunCLI()
}
```

Чтобы показать фреймворк в действии, автор написал простой веб-проект с помощью HTMX и Go. Все подробности — под катом.

 [Читать](https://dev.to/calvinmclean/how-to-build-a-web-application-with-htmx-and-go-3183)",6492,11,0,goproglib
4490,2024-02-03 14:30:28+00:00,"‍ Опытные разработчики часто дают совет начинающим: «Лучший способ стать лучше в любом языке программирования — писать больше кода и как можно больше практиковаться». 

 Поначалу это действительно так, но по мере того, как вы начнёте осваивать язык, лучший способ совершенствоваться — это также читать код других разрабов.

 Вот несколько случайных проектов, с которых можно начать:

 [xbar](https://github.com/matryer/xbar) — позволяет поместить выходные данные любого скрипта/программы в строку меню macOS
 [service](https://github.com/ardanlabs/service) — стартовый набор для написания сервисов на Go с использованием Kubernetes
 [Bubble Tea](https://github.com/charmbracelet/bubbletea) — мощный легковесный TUI-фреймворк
 [GoBoy](https://github.com/Humpheh/goboy) — эмулятор Nintendo GameBoy и GameBoy Color, написанный на go",6651,11,0,goproglib
4489,2024-02-02 18:23:19+00:00," Пополняемый плейлист с докладами на конференции **GopherCon 2023**:

 [Обзор изменений в Go](https://youtu.be/e_5k-jY6dH4?si=DaKAC-nbjkzLHPTY), Russ Cox
 [Будущее JSON в Go](https://youtu.be/mBinOZ4KW7k?si=0DsVRHHh7k_zVNRw), Joe Tsai
 [Постулаты, которые помогут преодолеть синдром самозванца](https://youtu.be/KIfYHJaRcmo?si=8S54pGDavfzxeHmI), Kate Pond: переосмысление постулатов Go, представленных Робом Пайком в 2015 году 

#чтопроисходит",6949,10,0,goproglib
4488,2024-02-02 14:50:30+00:00," **memos** — опенсорсный self-hosting инструмент для заметок, ориентированный на конфиденциальность. Под капотом используется Go + Echo + SQLite и TypeScript.

 [GitHub](https://github.com/usememos/memos) & [Сайт](https://www.usememos.com/)",6391,21,0,goproglib
4485,2024-02-01 20:41:24+00:00," **Анонимная сеть Hidden Lake на практике**

Hidden Lake — по умолчанию F2F (friend-to-friend) сеть, где каждый пользователь устанавливает доверенных участников, с которыми впоследствии будет связываться и которые смогут отправлять ему сообщения. 

Если один абонент для другого не будет находиться в списке друзей, и при этом попытается отправить ему сообщение, то получатель данное сообщение просто проигнорирует. 

Это все понятно и хочется практики? Автор [демонстрирует](https://habr.com/ru/articles/789968/) пример файлообменника на основе сети Hidden Lake, разработанный на Go.",5882,25,0,goproglib
4482,2024-02-01 10:50:08+00:00," **Самоучитель по Go для начинающих. Часть 6. Функции и аргументы. Области видимости. Рекурсия. Defer**

В этом уроке рассмотрим функции, аргументы, области видимости, затронем тему указателей, узнаем про рекурсию и её применение в программировании, а также научимся использовать ключевое слово defer.

 [Читать статью](https://proglib.io/sh/6Jqk05hDuF)
 [Часть 1](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-1-osobennosti-i-sfera-primeneniya-go-ustanovka-nastroyka-2023-11-23)
 [Часть 2](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-2-resursy-dlya-izucheniya-go-s-nulya-2023-11-28)
 [Часть 3](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-3-organizaciya-koda-pakety-importy-moduli-vvod-vyvod-teksta-2023-12-07)
 [Часть 4](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-4-peremennye-tipy-dannyh-i-ih-preobrazovaniya-osnovnye-operatory-2023-12-14)
 [Часть 5](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-5-uslovnye-konstrukcii-if-else-i-switch-case-cikl-for-vlozhennye-i-beskonechnye-cikly-2024-01-11)",18782,23,0,goproglib
4481,2024-01-31 20:01:00+00:00,"**Go 1.22** **в деталях: **разработка новых фич за кулисами

 [reflect.TypeFor](https://blog.carlana.net/post/2024/golang-reflect-type-for/)
 [slices.Concat](https://blog.carlana.net/post/2024/golang-slices-concat/)",6619,16,0,goproglib
4478,2024-01-31 11:34:37+00:00,"Хотите интегрировать функциональность JavaScript в Go-проект? Просто используйте [goja,](https://github.com/dop251/goja) движок ECMAScript/JavaScript, разработанный на чистом Go. 

Он позволяет интегрировать функциональность JavaScript непосредственно в проекты на Go, без необходимости использования внешних JS-движков__

 __[GitHub](https://github.com/dop251/goja)",7355,36,11,goproglib
4475,2024-01-30 12:01:52+00:00,"Программируйте со скоростью мысли

** Zed** — высокопроизводительный многопользовательский редактор кода с открытым исходным кодом от создателей Atom и Tree-sitter. Он сочетает в себе мощь IDE с оперативностью легкого редактора, обеспечивая производительность, которую вы можете почувствовать под рукой.

 Он написан на Rust и поддерживает:

 Полное синтаксическое дерево для каждого буфера по мере ввода, обеспечивая точную подсветку кода, автоматический отступ, просмотр схемы с возможностью поиска
 GitHub Copilot с возможностью генерации/рефакторинга кода с помощью GPT-4
 Встроенный полнофункциональный терминал для доступа к командной строке 
 Модальное редактирования в стиле Vim, а также использование хоткеев и командной палитры
 Работу с кодом на любом устройстве
 Набор светлых/темных тем, а также возможности кастомизации
 Каналы для обсуждения, планирования и написания кода с командой, включая возможности аудио и текстового чата

 [GitHub ](https://github.com/zed-industries/zed)
 [Сайт](https://zed.dev/)",6811,0,0,goproglib
4472,2024-01-30 12:01:51+00:00,"Go-разрабы, кто-то из вас уже попробовал новый редактор Zed? Если да, то как впечатления?",5828,0,7,goproglib
4471,2024-01-29 20:13:20+00:00," Команда Google недавно сделала новое семейство мультимодальных ИИ-моделей Gemini доступным через API с щедрым уровнем бесплатного использования, а также выпустила SDK для нескольких популярных ЯП, включая Go.

Eli Bendersky [показал](https://eli.thegreenplace.net/2023/using-gemini-models-from-go/) простой пример работы с Go SDK, в котором текстовые вопросы к модели сочетаются с изображениями.

 [Подробнее](https://eli.thegreenplace.net/2023/using-gemini-models-from-go/)",7370,22,90,goproglib
4470,2024-01-29 06:12:02+00:00,"**Ginkgo** — современный Go-фреймворк для тестирования, который создан на основе пакета `testing` и дополнен библиотекой [Gomega](https://github.com/onsi/gomega)[.](https://github.com/onsi/gomega)

Фреймворк предоставляет подход к написанию тестов, близкий к методологии BDD, и используется для упрощения процесса написания сложных тестовых сценариев, делая вывод тестов более читаемым и понятным. 

 [GitHub](https://github.com/onsi/ginkgo)",6519,22,0,goproglib
4469,2024-01-28 19:19:48+00:00," **Как исключить зависимости разработки из бинарных файлов в Go**: по мотивам [статьи](https://rednafi.com/go/omit_dev_dependencies_in_binaries/) Redowan Delowar

В настоящее время, в отличие от Python или NodeJS, Go не позволяет указывать зависимости разработки отдельно от зависимостей приложения. Однако автор предпочитает явно указывать зависимости разработки для лучшей воспроизводимости.

Работая над новым CLI-инструментом для проверки неработающих URL-адресов в файлах markdown, автор столкнулся с интересным соглашением: можно указать зависимости разработки в файле `tools.go` и затем исключить их при сборке бинарного файла, используя тег сборки.

Вот как это работает. Предположим, у нашего проекта `foo` есть следующая структура:

```foo
├── go.mod
├── go.sum
└── main.go
```

Файл `main.go` содержит простую функцию ""hello-world"", использующую стороннюю зависимость:

```package main

import (
    ""fmt""

    // Cowsay - это сторонняя зависимость приложения
    cowsay ""github.com/Code-Hex/Neo-cowsay""
)

func main() {
    fmt.Println(cowsay.Say(cowsay.Phrase(""Hello, World!"")))
}
```

Здесь `Neo-cowsay` — это зависимость приложения. Для инициализации проекта запускаются следующие команды:

```go mod init example.com/foo   # создает файлы go.mod и go.sum
go mod tidy                   # устанавливает зависимости приложения
```

Теперь предположим, что мы хотим добавить следующие зависимости разработки: `golangci-lint` для линтинга проекта в CI и `gofumpt` как более строгий `gofmt`. Поскольку эти инструменты не импортируются напрямую, они не отслеживаются инструментарием сборки.

Но можно воспользоваться следующим воркфлоу:

1. Разместить файл `tools.go` в корневой директории.
2. Импортировать зависимости разработки в этом файле.
3. Запустить `go mod tidy`, чтобы отслеживать как зависимости приложения, так и зависимости разработки через `go.mod` и `go.sum`.
4. Указать тег сборки в `tools.go`, чтобы исключить зависимости разработки из бинарного файла.

В этом случае файл `tools.go` выглядит следующим образом:

```// go:build tools

package tools

import (
    // Зависимости разработки
    _ ""github.com/golangci/golangci-lint/cmd/golangci-lint""
    _ ""mvdan.cc/gofumpt""
)
```

Теперь, если вы запустите `go mod tidy`, инструментарий Go будет отслеживать зависимости через файлы `go.mod` и `go.sum`. Вы можете проверить зависимости в `go.mod`.

Хотя зависимости разработки отслеживаются вместе с зависимостями приложения, тег сборки `// go:build tools` в начале файла `tools.go` скажет инструментарию сборки игнорировать их при создании бинарного файла.

Из корневой директории `foo` можно собрать проект, запустив:

```go build main.go
```

Это создаст бинарный файл `main` в корневой директории. Чтобы убедиться, что бинарный файл не содержит зависимости разработки, запустите:

```go tool nm main | grep -Ei 'golangci-lint|gofumpt'
```

Это не вернет ничего, если зависимости разработки не упакованы в бинарный файл.

Но если вы сделаете это для зависимости приложения, она выведет артефакты:

```go tool nm main | grep -Ei 'cowsay'
```

Команда выведет:

```1000b6d40 T github.com/Code-Hex/Neo-cowsay.(*Cow).Aurora
1000b6fb0 T github.com/Code-Hex/Neo-cowsay.(*Cow).Aurora.func1
1000b5610 T github.com/Code-Hex/Neo-cowsay.(*Cow).Balloon
1000b6020 T github.com/Code-Hex/Neo-cowsay.(*Cow).Balloon.func1
...
```

Если по какой-то причине вы хотите включить зависимости разработки в свой бинарный файл, вы можете передать тег `tools` при сборке бинарного файла:

```go build --tags tools main.go
```

#tip",6750,39,1,goproglib
4467,2024-01-28 06:21:54+00:00," **Использование RabbitMQ streams в Go**

[Ранее](https://programmingpercy.tech/blog/event-driven-architecture-using-rabbitmq/) Percy Bolmér исследовал возможности использования RabbitMQ в Go для построения Event Driven Architecture.

В [новом руководстве](https://programmingpercy.tech/blog/using-rabbitmq-streams-in-go/) он затрагивает тему Streams, которые привнесли в RabbitMQ множество функций и ранее были преимуществом Kafka. 

 Из руководства вы узнаете:

Что такое streams и как они работают
Как использовать streams в Go
Stream Core/Plugin и основные различия
Subentries и Compression
Deduplication",9511,21,0,goproglib
4466,2024-01-27 19:26:51+00:00," **Colly: полное руководство по высокопроизводительному веб-скрейпингу на Go**

Руководство основано на документации и дополнено наглядными примерами от автора. 

 [Читать](https://dev.to/poloxue/colly-a-comprehensive-guide-to-high-performance-web-crawling-in-go-3pg)",6873,20,0,goproglib
4465,2024-01-27 15:38:22+00:00," Как вам новый метод HTTP-роутинга`[METHOD ][HOST]/[PATH]`, который ждет нас в Go 1.22?

```mux := http.NewServeMux()

mux.HandleFunc(""GET 127.0.0.1/"", func(w http.ResponseWriter, r *http.Request) {
    fmt.Fprint(w, ""Hello"")
})

mux.HandleFunc(""GET localhost/"", func(w http.ResponseWriter, r *http.Request) {
    fmt.Fprint(w, ""Bonjour"")
})
```

 [Подробнее](https://www.talkativedev.com/go-blog/exploring-go-122-effective-http-routing-strategies)",6374,48,8,goproglib
4464,2024-01-26 19:28:30+00:00," Подборка** **докладов** **с конференций **Saint HighLoad++** и **HighLoad++** 2023:

 [Внутренняя платформа для разработки и разработчиков: за что платит бизнес?](https://youtu.be/2G9pkg9CT-E?si=ceBznt5zowXP7Idt) / Александр Чубинский
 [Авито Автозагрузка: как качать миллионы фотографий в сутки](https://youtu.be/oVgZUYN_7s0?si=deTBawB94gG20C5e) / Евгений Толмачев (Авито)
 [Ах, как хочется вернуться, ворваться в монолит!](https://youtu.be/yLrSp174yc0?si=y5K6gj6k-xwr9tc3) / Павел Лакосников (Авито)
 [YTsaurus SPYT: помогаем планировщику Apache Spark быть ещё эффективнее](https://youtu.be/Gk9K1NkYCww?si=tpL2KWuq5-4XeVaC) / Алексей Шишкин (Яндекс)
 [YTsaurus: опыт эксплуатации хранилища из 180К дисков](https://youtu.be/R-4veDB2-SA?si=juICLi5jdVbTPU2a) / Павел Сушин (Яндекс)
 [YTsaurus — это будущее DWH, и в Яндекс Маркете оно наступило](https://youtu.be/y1Jqm8ObcZ4?si=dcL6eMZOBuVVU6rT) / Филипп Козьмин (Яндекс Маркет)",7033,10,0,goproglib
4463,2024-01-26 17:05:03+00:00," **Goyek** — библиотека для автоматизации задач, в которой последние определяются в стиле [Cobra](https://github.com/spf13/cobra), а экшены напоминают юнит-тесты. 

В версии [2.1](https://github.com/goyek/goyek/releases/tag/v2.1.0) добавлена поддержка параллельного выполнения задач.

```package main

import (
    ""flag""

    ""github.com/goyek/goyek/v2""
    ""github.com/goyek/x/cmd""
)

var msg = flag.String(""msg"", ""greeting message"", ""Hello world!"")

var hello = flow.Define(goyek.Task{
    Name:  ""hello"",
    Usage: ""demonstration"",
    Action: func(a *goyek.A) {
        a.Log(*msg)
        cmd.Exec(a, ""go version"")
    },
})
```

 [Gi](https://github.com/goyek/goyek)[tHub](https://github.com/goyek/goyek)",6967,10,6,goproglib
4461,2024-01-26 12:48:09+00:00,"**️Самые полезные каналы по Go в одной папке
**
В ней:
канал для подготовки к собеседованиям
интересные задачи
основной канал (этот)
книги по Go
лучшие вакансии из сферы
и наш чат, в котором можно общаться и задавать вопросы

Добавляйте  [тык сюда](https://t.me/addlist/OzqF6Sp7Z5VmMDdi)",7303,17,0,goproglib
4460,2024-01-25 19:50:31+00:00,"**Оптимизация** **производительности в Go на практике**

Команда Sourcegraph делится опытом оптимизации некоторых базовых математических операций в Code AI и описывает различные этапы оптимизации, начиная с простой реализации на Go и постепенно углубляясь в оптимизацию: от loop unrolling до bounds check elimination. 

Но настоящий прорыв произошел при использовании SIMD (single instruction, multiple data) и quantization. Этот опыт показал, насколько мощным может быть низкоуровневое программирование даже в таком высокоуровневом языке, как Go

 [Читать](https://sourcegraph.com/blog/slow-to-simd)",7846,26,0,goproglib
4458,2024-01-25 11:51:42+00:00,"‍ **Психология и ИТ: 17 личностных качеств, необходимых для успешной карьеры**

В статье разберем, какие качества необходимы для успешного старта в IT-сфере.

[Читать статью](https://proglib.io/sh/uaESc74bmA)

#новость",6678,13,0,goproglib
4457,2024-01-24 19:32:23+00:00,"🫶 Представлен второй релиз-кандидат **Go 1.22**

Официальный релиз совсем близко, но вы уже сейчас можете протестировать новые фичи языка!

 [Анонс](https://groups.google.com/g/golang-announce/c/ktlSOU6z65Y)
 [Скачать](https://go.dev/dl/#go1.22rc2)

#новости",6923,21,0,goproglib
4456,2024-01-24 14:01:38+00:00," **Rust vs. Go в 2024 году**

 Ну что, давненько не было холиваров. Прошлогодняя статья-сравнение актуализирована в соответствии с реалиями 2024 года (хотя плюсы и минусы остаются весьма схожими).

 [Читайте подробнее,](https://bitfieldconsulting.com/golang/rust-vs-go) чтобы узнать о преимуществах/недостатках обоих языков и некоторых компромиссах.",17477,60,45,goproglib
4455,2024-01-24 12:10:21+00:00,"⬆️ **10 факторов, влияющих на зарплату программиста**

Узнайте 10 факторов, как превратиться из рядового программиста в высокооплачиваемого специалиста и научиться аргументированно запрашивать зарплату выше рынка.

[Читать статью](https://proglib.io/sh/z0pXjkFINP)

#новость",5961,10,4,goproglib
4452,2024-01-23 06:02:16+00:00,"⏳ **Сравнение времени и дат разными способами**: гайд для Go-разработчика

Во время разработки на Go вы можете сравнить два значения `time.Time` с помощью операторов сравнения, но компилятор не даст этого сделать.

Использование `==` и `!=` в свою очередь допустимо в Go, но надо быть осторожным, потому что этот функционал может делать не совсем то, что вы намеревались. Разбираемся, что находится под капотом у типа `time.Time` ⬇️

 [Читать](https://www.willem.dev/articles/how-to-compare-time-date/)",6605,17,0,goproglib
4451,2024-01-22 20:23:22+00:00," Когда тянешь в свой Go-проект кучу сторонних пакетов, хотя легко мог это реализовать с помощью стандартной библиотеки

#юмор",6524,46,2,goproglib
4449,2024-01-22 11:51:38+00:00," **avo** — пакет для генерации x86 assembly с помощью Go. Основная цель — облегчить процесс написания и поддержки assembly кода, который часто используется для оптимизации производительности в критических участках программ.

```//go:build ignore

package main

import . ""github.com/mmcloughlin/avo/build""

func main() {
 TEXT(""Add"", NOSPLIT, ""func(x, y uint64) uint64"")
 Doc(""Add adds x and y."")
 x := Load(Param(""x""), GP64())
 y := Load(Param(""y""), GP64())
 ADDQ(x, y)
 Store(y, ReturnIndex(0))
 RET()
 Generate()
}
```

```//go:generate go run asm.go -out add.s -stubs stub.go
```

 [GitHub с полным описанием и примерами](https://github.com/mmcloughlin/avo)",6657,18,1,goproglib
4448,2024-01-21 18:01:03+00:00,"**Предварительная компиляция стандартной библиотеки**

С версии Go 1.20 стандартная библиотека больше не компилируется заранее при установке Go. Вместо этого, когда проект компилируется, необходимые части стандартной библиотеки компилируются по мере необходимости и добавляются в локальный кэш.

Исходя из [исследования](https://source-fellows.com/golang-compiler-time/) (на немецком языке), это может оказать огромное влияние на время компиляции.

Теперь представьте систему сборки, которая начинает с нуля для каждой сборки, — например, потому что инструментарий Go находится в контейнере, который удаляется после каждой сборки.

Зависимости проекта от стандартной библиотеки таким образом компилируются снова и снова для каждой сборки.

 Решение простое:

```go install std
```
Эта команда компилирует стандартную библиотеку один раз. Зафиксируйте полученное состояние установки Go и наслаждайтесь более быстрым временем сборки.",7208,91,0,goproglib
4447,2024-01-21 10:32:59+00:00,"GoFunc — новая конференция по Go. Но сегодня не о ней, а о митапах для Go-разработчиков, которые уже можно посмотреть:

[gRPC-стримы на практике в Go](https://youtu.be/KQIi5yVrZ3I?si=77cfEpVRBDMB3LvD) / Сергей Антоничев
[Бардак в main, стандартизация и uber.fx. V2](https://youtu.be/vt0lcI6RCEk?si=TZZPsAFFl_282Jx4) / Данила Проценко
[Как мы разметку Goняли](https://youtu.be/bul_sFEgg28?si=azJtzPkhLbv3GUUd) / Хамбар Дусалиев
[Как мы в СберМаркете стандартизируем разработку сервисов](https://youtu.be/qMEayaSpVI8?si=BvgZ5C0_zFsdoYwv) / Эмиль Шарифуллин
[Профилирование Go-приложений в 2023](https://youtu.be/sNjvpHUHMh8?si=zunFY3KRP8kZ3R8R) / Алексей Акулович
[Что стоит за дженериками в Go ](https://youtu.be/GS91ZUJt6r8?si=d7Dywr58uFgXFjO_)/ Илья Горкун
[Использование ресурсов Kubernetes Go-приложениями](https://youtu.be/ZHg9e562Kjo?si=1eKXbJKki5wMj9Yo) / Антон Жуков
[Быстрый поиск пути без аллокаций](https://youtu.be/QQo6uXfrB-c?si=w1wLIeyAtxH8oSgK) / Искандер Шарипов
[Воркшоп «Создание Terminal UI приложений»](https://youtu.be/jN0hxy1DhIQ?si=MdFtdQu-6gkBqPwy) / Никита Русин
[Расширяем компилятор: кодогенерация на своем месте](https://youtu.be/ImJeE2kqAxg?si=BnzRe4v6S4ucqChU) / Даниил Подольский

#чтопроисходит",7691,36,0,goproglib
4446,2024-01-20 18:47:06+00:00,"```select * from cloud;
```
[**steampipe**](https://steampipe.io/) — инструмент для выполнения запросов к облачным сервисам с помощью SQL.

Используйте SQL для запроса и даже__ __объединения более чем [100 API](https://hub.steampipe.io/plugins) от таких провайдеров, как Airtable, AWS, Heroku, Slack и Stripe, а также соцсетей вроде Reddit и Hacker News.

 [GitHub](https://github.com/turbot/steampipe)",6565,13,0,goproglib
4444,2024-01-19 12:10:51+00:00,"**Sign in with Google**

Краткий обзор реализации популярного метода аутентификации на Go от Eli Bendersky.

 [Читать](https://eli.thegreenplace.net/2024/sign-in-with-google-in-go/)",7184,19,0,goproglib
4443,2024-01-19 08:01:06+00:00,"Дмитрий Королёв, бэкенд-разработчик в Авито, демонстрирует бенчмарки нескольких самых популярных форматов сериализации (Avro, Protobuf, Msgpack, XML, CBOR и несколько известных библиотек для работы с JSON) в Go и рассказывает про преимущества/недостатки каждого из них.

 [Читать](https://habr.com/ru/companies/avito/articles/786756/)",7219,0,0,goproglib
4437,2024-01-18 13:47:43+00:00,"**Команда Go **[**исследует**](https://go.dev/wiki/RangefuncExperiment)** возможность добавления range-over function iterators**

Go 1.22 содержит предварительную реализацию изменения, включаемую с помощью `GOEXPERIMENT=rangefun`.

 Простой пример работы функции range over:**
**
```package slices

func Backward[E any](s []E) func(func(int, E) bool) {
    return func(yield func(int, E) bool) {
        for i := len(s)-1; i >= 0; i-- {
            if !yield(i, s[i]) {
                return
            }
        }
    }
}
```
`
`Его можно вызвать так:

```s := []string{""hello"", ""world""}
for i, x := range slices.Backward(s) {
    fmt.Println(i, x)
}
```

Пример будет транслироваться внутри компилятора в код, похожий на:

```slices.Backward(s)(func(i int, x string) bool {
    fmt.Println(i, x)
    return true
})
````

` [Подробнее](https://go.dev/wiki/RangefuncExperiment)",6456,36,0,goproglib
4435,2024-01-17 19:17:46+00:00,"Хотите эффективно анализировать процесс трассировки Go? Тогда **Gotraceui** идет на помощь.

Это быстрая, доступная и мощная альтернатива `go tool trace`. Его UI специально настроен с учетом уникальных характеристик трассировок Go.

 [GitHub](https://github.com/dominikh/gotraceui)",6716,13,0,goproglib
4433,2024-01-17 06:43:06+00:00," **Итоги недели в мире ИИ и обзоры новых сервисов**

Мы написали [статью](https://vc.ru/dev/983596-itogi-nedeli-v-mire-ii-i-obzory-novyh-servisov-novye-modeli-dlya-generacii-vpechatlyayushchih-video) на VC, которая основана на очередном выпуске нашей рассылки про последние новости и тенденции в мире ИИ. [Залетайте и читайте](https://vc.ru/dev/983596-itogi-nedeli-v-mire-ii-i-obzory-novyh-servisov-novye-modeli-dlya-generacii-vpechatlyayushchih-video)!

Ниже — мини-подборка из статьи 

 **Новости**

▫️ OpenAI объявила о запуске долгожданного магазина[ кастомных чат-ботов](https://openai.com/blog/introducing-the-gpt-store).
▫️ В Пасадене (штат Калифорния) открывается первая закусочная[ CaliExpress by Flippy](https://misorobotics.com/caliexpress), полностью управляемая ИИ.
▫️ NVIDIA выпустила модель для распознавания речи[ Parakeet](https://huggingface.co/spaces/nvidia/parakeet-rnnt-1.1b), которая по всем показателям превосходит OpenAI Whisper.
▫️ Использование ИИ в совместном научном проекте Microsoft и Тихоокеанской северо-западной национальной лаборатории в течение недели помогло[ определить новый элемент](https://www.bbc.com/news/technology-67912033), который поможет снизить на 70% использование лития в батареях. Без ИИ такое исследование заняло бы по меньшей мере 20 лет.
▫️ Компания ByteDance [выпустила](https://magicvideov2.github.io/) новую модель MagicVideo-V2 для генерации видео. 

 **Инструменты**

◾️ [Auto Wiki](https://wiki.mutable.ai/) — генерирует вики-документацию для GitHub репозиториев.
◾️ [Code to Flow](https://codetoflow.com/) — визуализирует, анализирует и объясняет код, написанный на всех популярных языках и фреймворках.
◾️ [Concepto](https://www.conceptoai.app/) — платформа для создания прототипов веб-приложений.
◾️ [Afforai](https://afforai.com/) — выполняет суммаризацию, перевод и поиск по множеству документов.
◾️ [Corgea](https://corgea.com/) — исправляет уязвимые фрагменты кода.
◾️ [Jan](https://jan.ai/) — опенсорсный оффлайновый чат-бот.
◾️ [Plus AI](https://www.plusdocs.com/) — плагин для Google Slides: делает профессиональные презентации, персональные и командные дашборды, любые отчеты.

 **Сделай сам**

 [WikiChat](https://github.com/stanford-oval/wikichat) — опенсорсный инструмент для коррекции галлюцинаций с помощью информации из Википедии.
 [Подробная шпаргалка и советы](https://blog.llamaindex.ai/a-cheat-sheet-and-some-recipes-for-building-advanced-rag-803a9d94c41b) по созданию продвинутых RAG.
 [OpenVoice](https://github.com/myshell-ai/OpenVoice) — опенсорный инструмент для мгновенного клонирования голоса.

 **Туториалы**

 Туториал по работе с новым[ API Query Pipelines](https://blog.llamaindex.ai/introducing-query-pipelines-025dc2bb0537) показывает примеры создания простых линейных цепочек и сложных ациклических графов из модулей LlamaIndex.
 Туториал[ по объединению LLM](https://towardsdatascience.com/merge-large-language-models-with-mergekit-2118fb392b54) с помощью[ mergekit](https://github.com/cg123/mergekit) детально разбирает 4 основных метода объединения моделей.

#чтопроисходит",5711,12,0,goproglib
4432,2024-01-16 20:49:51+00:00," **Первоначальные мысли о Go 1.22**

Один из разработчиков Go базы данных DoltDB погружается в новые возможности языка, представленные в первом релиз-кандидате [go1.22rc1](https://go.dev/dl/#go1.22rc1).

 [Читать](https://www.dolthub.com/blog/2024-01-12-golang-1-22rc/)",6311,11,0,goproglib
4431,2024-01-16 18:13:15+00:00,"Представьте: вас берут на новый проект, а там сплошной легаси-код. Ваши действия

 — останусь, разберусь и постараюсь развить его
 — любым способом перейду в другой проект
 — а где эта грань между легаси и нормальным проектом?
️ — свой вариант (напишу в комментариях)

#холивар",6334,213,12,goproglib
4429,2024-01-16 06:01:05+00:00," Повсеместное использование указателей в качестве параметров приводит к выбору: необходимо либо проверять каждый параметр на равенство `nil`, либо допускать, что произойдёт паника при попытке разыменования указателя `nil`.

 Передача по значению может привести к случайному копированию и изменению значений полей у копии, а не у оригинального значения, но такие вещи легко обнаруживаются линтерами, на ревью и здравым смыслом. 

Так что использовать? [Опытом делится](https://habr.com/ru/companies/it-guide/articles/744046/) Go-тимлид Иван Коротков, сравнивая оба способа и убеждая передавать и возвращать значения в тех случаях, где это возможно.",6983,1,2,goproglib
4428,2024-01-15 20:36:07+00:00,"‍️Go — простой. Но с простотой приходит и риск наступить на грабли. Ловите небольшую, но ёмкую подборку антипаттернов Go, чтобы не допустить этого.
 
 [Читать](https://hackmysql.com/golang/go-antipatterns/)",7635,29,17,goproglib
4426,2024-01-15 11:02:10+00:00,"️ **Синдром упущенного отпуска: почему так опасно игнорировать заслуженный отдых**

Представьте: вы выиграли путевку на пляж с золотым песком и изумрудным океаном. Но радость быстро сменяется разочарованием — вместо коктейля в руках по-прежнему клавиатура и мышка. И вы понимаете — это всего лишь галлюцинации изможденного мозга, который умоляет вас остановиться и, наконец, сделать перерыв. Но мы ведь трудоголики, правда?

 [Читать статью](https://proglib.io/sh/0nHOgJha9r)
 [Зеркало](https://proglib.tech/p/sindrom-upushchennogo-otpuska-pochemu-tak-opasno-ignorirovat-zasluzhennyy-otdyh-2024-01-09)",6543,14,0,goproglib
4425,2024-01-15 06:02:20+00:00," Rust быстрее Go? Посмотрите на новый Go-пакет** **[**astjson**](https://wundergraph.com/blog/astjson_high_performance_json_transformations_in_golang) для преобразования и объединения объектов JSON.

 [Читать](https://wundergraph.com/blog/astjson_high_performance_json_transformations_in_golang)",6520,7,31,goproglib
4424,2024-01-14 18:01:06+00:00," Использует ли следующий [код](https://www.reddit.com/r/golang/s/ZLgI93JkUz) разделяемую память, обмениваясь данными, или обменивается данными, используя разделяемую память?

```func Map[T any, R any](collection []T,
iter func(item T, index int) R) []R {
    result := make([]R, len(collection))
    var wg sync.WaitGroup
    wg.Add(len(collection))
    for i, item := range collection {
        go func(item T, i int) {
            res := iter(item, i)
            result[i] = res
            wg.Done()
        }(item, i)
    }
    wg.Wait()
    return result
}
```

По сути, код перебирает срез элементов типа `T` и запускает горутину для каждого элемента. Все горутины записывают свой результат в один и тот же срез `result` одновременно, без использования мьютексов.

 Является ли срез `result` разделяемой памятью? В конце концов, это единая, непрерывная структура данных.

С другой стороны, каждая горутина пишет только в индекс, который ей был назначен, поэтому одновременная запись в одно и то же место не произойдет. И срез `result` не читается до тех пор, пока все пишущие горутины не закончат работу.

Таким образом, даже несмотря на то, что горутины пишут в один и тот же срез, они, кажется, придерживаются одного из постулатов: 

Don't communicate by sharing memory, share memory by communicating

 **Что думаете?**",6391,27,2,goproglib
4423,2024-01-14 11:53:11+00:00," `CompareAndSwap` в Go не всегда является **Compare and swap**

Стандартный пакет Go `sync/atomics` предоставляет функции для использования базовых атомарных операций на уровне ЦП, таких как сравнение с обменом (compare and swap, CAS), через `atomic.CompareAndSwapT` (где T— целочисленный тип).

Но! Не все архитектуры предлагают инструкции CAS, на которую можно было бы полагаться при реализации `atomic.CompareAndSwapT` в Go. Тем не менее, Go должен компилировать эту функцию в нечто семантически эквивалентное. Разбираемся, во что именно

 [Читать](https://lu.sagebl.eu/notes/go-cas/)",6208,11,0,goproglib
4422,2024-01-13 15:22:06+00:00,"**Шпаргалка по REST API для начинающих**

 Шесть фундаментальных принципов, которые служат строительными блоками архитектуры REST API:

1️⃣ Клиент-серверная архитектура
2️⃣ Взаимодействие без сохранения состояния
3️⃣ Возможность кэширования
4️⃣ Многоуровневая система
5️⃣ Поддержка кода по требованию
6️⃣ Унифицированный интерфейс

 Читайте [подробнее](https://blog.devgenius.io/the-art-of-rest-apis-a-beginners-journey-through-api-space-1975dc954e54) на Medium или в PDF (файл в комментариях)",5927,10,1,goproglib
4421,2024-01-13 11:47:18+00:00,"**Пишем бенчмарки и оптимизируем программы на Go**

Запись открытого занятия, цель которого — раскрыть подводные камни улучшения производительности проектов на Go, научиться писать бенчмарки и использовать их для оптимизации кода. 

[Смотреть](https://m.youtube.com/watch?v=1w4VOlv-9ws&t=581s)",6258,10,0,goproglib
4420,2024-01-13 06:01:43+00:00,"**Самые полезные каналы для программистов в одной подборке!**

Сохраняйте себе, чтобы не потерять 

Для всех

[Библиотека программиста](http://t.me/proglibrary) — новости, статьи, досуг, фундаментальные темы
[Книги для программистов](https://t.me/progbook)
[IT-мемы](http://t.me/itmemlib)
[Proglib Academy](https://t.me/proglib_academy) — тут мы рассказываем про обучение и курсы

#️⃣C#

[Библиотека шарписта](https://t.me/csharpproglib)
[Библиотека задач по C#](https://t.me/csharp_problems_lib) — код, квизы и тесты
[Библиотека собеса по C#](https://t.me/csharp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Вакансии по C#, .NET, Unity Вакансии по PHP, Symfony, Laravel](https://t.me/csharpdevjob)

️DevOps

[Библиотека devops’а](https://t.me/devopsslib)
[Вакансии по DevOps & SRE](https://t.me/devopssjob)
[Библиотека задач по DevOps ](https://t.me/devops_problems_lib)— код, квизы и тесты
[Библиотека собеса по DevOps ](https://t.me/devops_interview_lib)— тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования

PHP

[Библиотека пхпшника](https://t.me/phpproglib)
[Вакансии по PHP, Symfony, Laravel](https://t.me/phpdevjob)
[Библиотека PHP для собеса](https://t.me/php_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по PHP](https://t.me/php_problems_lib) — код, квизы и тесты

Python

[Библиотека питониста](https://t.me/pyproglib)
[Вакансии по питону, Django, Flask](https://t.me/pydevjob)
[Библиотека Python для собеса](https://t.me/py_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Python](https://t.me/py_problems_lib) — код, квизы и тесты

Java

[Библиотека джависта](http://t.me/javaproglib) — полезные статьи по Java, новости и обучающие материалы
[Библиотека Java для собеса](https://t.me/java_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Java](https://t.me/java_problems_lib) — код, квизы и тесты
[Вакансии для java-разработчиков](https://t.me/javadevjob)

Data Science

[Библиотека Data Science](http://t.me/dsproglib) — полезные статьи, новости и обучающие материалы
[Библиотека Data Science для собеса](https://t.me/ds_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Data Science](https://t.me/ds_problems_lib) — код, квизы и тесты
[Вакансии по Data Science, анализу данных, аналитике, искусственному интеллекту](https://t.me/datajob)

Go

[Библиотека Go разработчика ](https://t.me/goproglib)— полезные статьи, новости и обучающие материалы по Go
[Библиотека Go для собеса](https://t.me/go_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Go](https://t.me/go_problems_lib) — код, квизы и тесты
[Вакансии по Go](https://t.me/godevjob)

C++

[Библиотека C/C++ разработчика](https://t.me/cppproglib) — полезные статьи, новости и обучающие материалы по C++
[Библиотека C++ для собеса](https://t.me/cpp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по C++](https://t.me/cpp_problems_lib) — код, квизы и тесты
[Вакансии по C++](https://t.me/cppdevjob)

Другие профильные каналы

[Библиотека фронтендера](https://t.me/frontendproglib)
[Библиотека мобильного разработчика](https://t.me/mobileproglib)
[Библиотека хакера](https://t.me/hackproglib)
[Библиотека тестировщика](https://t.me/testerlib)

Каналы с вакансиями

[Вакансии по фронтенду, джаваскрипт, React, Angular, Vue ](https://t.me/jsdevjob)
[Вакансии для мобильных разработчиков ](https://t.me/mobiledevjob)
[Вакансии по QA тестированию ](https://t.me/testerrjob)
[InfoSec Jobs — вакансии по информационной безопасности](https://t.me/hackdevjob)

Чтобы добавить папку с нашими каналами, нажмите [сюда](https://t.me/addlist/17y04EbNMrlhNjZi)

Также у нас есть боты:
[Бот с IT-вакансиями](http://t.me/proglib_job_bot)
[Бот с мероприятиями в сфере IT](http://t.me/event_listener_bot)

Мы в других соцсетях:
[VK](https://vk.com/proglib)
[YouTube](https://www.youtube.com/c/%D0%91%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%B0)
[Дзен](https://zen.yandex.ru/proglib)
[Facebook *](https://www.facebook.com/proglib/?locale=ru_RU)
[Instagram *](https://www.instagram.com/proglibrary/)

__* Организация Meta запрещена на территории РФ__",6060,8,0,goproglib
4419,2024-01-12 19:17:42+00:00,"️ **Arkanoid на Go**: пример простой игры, разработанной с помощью Ebitengine и архитектурного паттерна Entity-Component-System.

 [GitHub](https://github.com/x-hgg-x/arkanoid-go)",6529,28,2,goproglib
4418,2024-01-12 06:00:52+00:00," «**Что мы сделали правильно, что мы сделали неправильно**» — текстовая версия [выступления](https://youtu.be/yE5Tpp2BSGw?si=SKqHLQl1tEU_7WrM) Роба Пайка на последней **GopherConAU**, где он рассказывает закулисные истории о создании Go, цели команды и многое другое. 

Одним словом, это было откровенное размышление о 14-летнем пути Go как проекта с открытым исходным кодом.

 [Читать](https://commandcenter.blogspot.com/2024/01/what-we-got-right-what-we-got-wrong.html)",6675,12,4,goproglib
4417,2024-01-11 20:39:06+00:00," **Самоучитель по Go для начинающих. Часть 5. Условные конструкции if-else и switch-case. Цикл for. Вложенные и бесконечные циклы**

В этой части самоучителя мы узнаем про составные части любой программы — условные конструкции и циклы, рассмотрим особенности их реализации в Go, а также решим несколько занимательных задач для закрепления теоретического материала.

 [Читать статью](https://proglib.io/sh/zw8tZReMi4)
 [Часть 1](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-1-osobennosti-i-sfera-primeneniya-go-ustanovka-nastroyka-2023-11-23)
 [Часть 2](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-2-resursy-dlya-izucheniya-go-s-nulya-2023-11-28)
 [Часть 3](https://proglib.io/sh/1nmDe029Jj)
 [Часть 4](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-4-peremennye-tipy-dannyh-i-ih-preobrazovaniya-osnovnye-operatory-2023-12-14)",22700,19,0,goproglib
4415,2024-01-11 09:43:44+00:00,"Разбор задачи с Go-собеса от старшего разработчика в Avito Tech Олега Козырева.

 [Смотреть](https://youtu.be/Qf24zMzMmgI?si=jiO-LF_lZsFqYlSf)",7180,43,3,goproglib
4414,2024-01-10 16:01:53+00:00,"Подводные камни цикла `range`, как с ними бороться и что ждёт в версии 1.22: гайд для Go-разработчика

️ Основы
️ Распространённые ошибки при использовании цикла range
️ Понимание и оптимизация
️ Изменения в Go 1.22
️ Адаптация к новым изменениям

 [Читать](https://habr.com/ru/companies/yandex_praktikum/articles/783504/)",7423,26,0,goproglib
4413,2024-01-10 06:01:00+00:00," Представлены релизы** Go 1.21.6 **и** 1.20.13**, включающие исправления для рантайма и пакета `crypto/tls`.

 [Анонс](https://groups.google.com/g/golang-announce/c/F12eMaUITDs)
⬇️ [Скачать](https://go.dev/dl/#go1.21.6)

#новости",6835,20,0,goproglib
4412,2024-01-09 20:10:08+00:00,"**Подборка лучших статей «Библиотеки программиста» за декабрь: сохраняй в заметки, чтобы не пропустить ****#самыйсок**

 Самоучитель по Go для начинающих:
 [Часть 3](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-3-organizaciya-koda-pakety-importy-moduli-vvod-vyvod-teksta-2023-12-07). Организация кода. Пакеты, импорты, модули. Ввод-вывод текста.
 [Часть 4](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-4-peremennye-tipy-dannyh-i-ih-preobrazovaniya-osnovnye-operatory-2023-12-14). Переменные. Типы данных и их преобразования. Основные операторы.
[Где программисту взять идеи для портфолио](https://proglib.io/p/gde-programmistu-vzyat-idei-dlya-portfolio-2023-12-05)
 [Обзор рынка труда в ИТ: III квартал 2023 года](https://proglib.io/p/obzor-rynka-truda-v-it-iii-kvartal-2023-goda-2023-12-08)
️ [Почему отсутствие технической документации убьёт ваш проект?](https://proglib.io/p/pochemu-otsutstvie-tehnicheskoy-dokumentacii-ubet-vash-proekt-2023-12-25)
 [10 абсурдных подарков программисту на Новый год](https://proglib.io/p/10-absurdnyh-podarkov-programmistu-na-novyy-god-2023-12-27)",7174,10,0,goproglib
4409,2024-01-09 06:04:06+00:00,"** На что способны ваши зависимости Go?**

govulncheck может обнаруживать известные уязвимости, но как можно принять обоснованные решения о поверхности атаки пакета, прежде чем проект будет от него зависеть?

Использовать подходы современной безопасной разработки: от DAST/SAST до анализа возможностей пакетов Go в вашем проекте. О последнем и идет речь в статье на примере использования CLI-инструмента [capslock.](https://github.com/google/capslock/)

 Читайте на [Medium](https://medium.com/eureka-engineering/what-are-your-go-dependencies-capable-of-an-introduction-to-capslock-b757833c9847) или в PDF",6837,18,0,goproglib
4408,2024-01-08 19:10:43+00:00,"‍ Команда Charmbracelet представила простую и мощную библиотеку для создания интерактивных форм и подсказок в терминале под названием `huh`. 

 Создавайте формы и собирайте данные с помощью всего нескольких строк на Go.

 [GitHub](https://github.com/charmbracelet/huh)",7066,55,0,goproglib
4407,2024-01-08 11:12:39+00:00," **Запуск HTTP-сервера Go на Teensy 4.1 с помощью Embedded Go**

[Embedded Go](https://embeddedgo.github.io/getting_started) является альтернативой TinyGo для запуска Go-кода на микроконтроллерах.

С момента своего первого выпуска Go был тесно связан с сетевым программированием. К сожалению, до сих пор Embedded Go не имел сетевых возможностей, в основном из-за сильной зависимости пакета [net](https://pkg.go.dev/net) от сетевых возможностей базовой операционной системы, но это изменилось

 [Читать](https://embeddedgo.github.io/2024/01/01/go_http_server_on_teensy4.html)",7109,33,0,goproglib
4406,2024-01-07 09:29:44+00:00," **Использование SQL в качестве API на Go**

«Раскрывать API, принимающий SQL, — это безумие» — скажете вы. Особенно, если API общедоступен. Это небезопасно и приведет к атакам и к привязке внутренней реализации к определенной технологии. Можно долго рассуждать, но так ли это на самом деле?

Что, если вам необходимо обрабатывать запросы, слишком сложные для простых CRUD API, но не настолько сложные, чтобы оправдать использование GraphQL?

Наткнувшись на пример с языком Scala, автор статьи решил переписать то же самое на Go. Несмотря на то, что Scala обладает расширенными языковыми возможностями, код на Go оказался так же прост в написании, как и Scala.

 [Читать](https://appliedgo.net/sqlasapi/)",6987,12,4,goproglib
4405,2024-01-06 20:57:45+00:00,"**Три простых проекта от freeCodeCamp**: [туториал](https://youtu.be/k_V5VvYSlS4?si=XrKTxbAlqrKj2qeP) для Go-разработчика

⏱ **Таймкоды:**

[01:02](https://www.youtube.com/watch?v=k_V5VvYSlS4&t=62s) Health Checker
[18:52](https://www.youtube.com/watch?v=k_V5VvYSlS4&t=1132s) Шифрование файла
[1:08:28](https://www.youtube.com/watch?v=k_V5VvYSlS4&t=4108s) Шифрование данных с Go",8430,12,1,goproglib
4403,2024-01-06 11:48:57+00:00," Не всегда на подобных конференциях встретишь выступления сразу и Роба Пайка, и Расса Кокса:

▶️ [What We Got Right, What We Got Wrong](https://youtu.be/yE5Tpp2BSGw?si=6sqnJJynl0NfXaex) / Rob [Pike
▶️](https://www.youtube.com/watch?v=1-o-iJlL4ak&list=PLN_36A3Rw5hFsJqqs7olOAxxU-WJGlXS0&index=1&pp=iAQB) [Go Testing By Example](https://youtu.be/1-o-iJlL4ak?si=fx5jqnSzePQYXGxi) / Russ [Cox
▶️](https://www.youtube.com/watch?v=kbzfL3vzlR0&list=PLN_36A3Rw5hFsJqqs7olOAxxU-WJGlXS0&index=2&pp=iAQB) [How Go Made a Better Engineer Out of an ex-Barista](https://youtu.be/kbzfL3vzlR0?si=7lISD6dpbPK16Ayg) / Aysa [Matueva
▶️](https://www.youtube.com/watch?v=0w4Px-yR8D8&list=PLN_36A3Rw5hFsJqqs7olOAxxU-WJGlXS0&index=3&pp=iAQB) [Constraining Complexity in the Generics Design](https://youtu.be/0w4Px-yR8D8?si=cNOMXYWVpnn-VbYM) / Axel [Wagner
▶️](https://www.youtube.com/watch?v=zPdpDy3gBfY&list=PLN_36A3Rw5hFsJqqs7olOAxxU-WJGlXS0&index=4&pp=iAQB) [WebAssembly with Go: Powering the Web with Speed and Efficiency](https://youtu.be/zPdpDy3gBfY?si=SzvzJEMsBNmMUNwa) / Jyotsna [Gupta
▶️](https://www.youtube.com/watch?v=nks_UMH8EgY&list=PLN_36A3Rw5hFsJqqs7olOAxxU-WJGlXS0&index=5&pp=iAQB) [Elements of Gonum for Scientific Computing](https://youtu.be/nks_UMH8EgY?si=rlRSKR9YcCKwhwpi) / Vladimir [Chalupecky
▶️](https://www.youtube.com/watch?v=PLlEym5JVvM&list=PLN_36A3Rw5hFsJqqs7olOAxxU-WJGlXS0&index=6&pp=iAQB) [The Go-to Language for AI: Opportunities and Challenges](https://youtu.be/PLlEym5JVvM?si=SZe0ea7vLmJx2wQ9) / Matteo [Grella
▶️](https://www.youtube.com/watch?v=SHAhYTMInqM&list=PLN_36A3Rw5hFsJqqs7olOAxxU-WJGlXS0&index=7&pp=iAQB) [The Hacker's Guide to JWT Security](https://youtu.be/SHAhYTMInqM?si=e-y9TohzKPwCHwSB) / Patrycja [Wegrzynowicz
▶️](https://www.youtube.com/watch?v=xIxzCXMDnfM&list=PLN_36A3Rw5hFsJqqs7olOAxxU-WJGlXS0&index=8&pp=iAQB) [Implementing Event-driven Systems with Go /](https://youtu.be/xIxzCXMDnfM?si=j45kbX8gwyipznR-) Victoria [Polishchuk
▶️](https://www.youtube.com/watch?v=XyTZ6Q-uOn4&list=PLN_36A3Rw5hFsJqqs7olOAxxU-WJGlXS0&index=9&pp=iAQB) [What's The Point? A Guide To Using Pointers Without Panicking](https://youtu.be/XyTZ6Q-uOn4?si=cRx8Xr6opdt-G0wi) / Mirjam [Uher
▶️](https://www.youtube.com/watch?v=hOGqz0g_2hw&list=PLN_36A3Rw5hFsJqqs7olOAxxU-WJGlXS0&index=10&pp=iAQB) [Building a Cutting Edge Search Engine in Go](https://youtu.be/hOGqz0g_2hw?si=Rr9Zn5ZKiScCtPt0) / Ben [Boyter
▶️](https://www.youtube.com/watch?v=QFpneG6SVxw&list=PLN_36A3Rw5hFsJqqs7olOAxxU-WJGlXS0&index=11&pp=iAQB) [Building a Beginner's Programming Language with Go](https://youtu.be/QFpneG6SVxw?si=tUwNmFW7zM7wY91Z) / Julia [Ogris
▶️](https://www.youtube.com/watch?v=Xz_VQs6XN4w&list=PLN_36A3Rw5hFsJqqs7olOAxxU-WJGlXS0&index=12&pp=iAQB) [Infinite Possibilities](https://youtu.be/Xz_VQs6XN4w?si=sdBOyVY0Ji0pI-sG) / Egon [Elbre
▶️](https://www.youtube.com/watch?v=sDTJMm__DXE&list=PLN_36A3Rw5hFsJqqs7olOAxxU-WJGlXS0&index=13&pp=iAQB) [Coroutines and Go](https://youtu.be/sDTJMm__DXE?si=7YpvN3BfGDkQ7KJB) / Raghav [Roy
▶️](https://www.youtube.com/watch?v=uv1Ov6mjhUo&list=PLN_36A3Rw5hFsJqqs7olOAxxU-WJGlXS0&index=14&pp=iAQB) [Code Reviews in Go: Top 5 Misses](https://youtu.be/uv1Ov6mjhUo?si=JR_zyd96lA_FL3cH) / Sadie Freeman & Quinn [Hou
▶️](https://www.youtube.com/watch?v=MG3wfxIGhBQ&list=PLN_36A3Rw5hFsJqqs7olOAxxU-WJGlXS0&index=15&pp=iAQB) [Dog Food Can Be Delicious](https://youtu.be/MG3wfxIGhBQ?si=MpmS2ruYylKW6S1i) / Jeff [Levin
▶️](https://www.youtube.com/watch?v=osTDF1ny1nQ&list=PLN_36A3Rw5hFsJqqs7olOAxxU-WJGlXS0&index=16&pp=iAQB) [Go Stack: Should It Be Moving Like That?](https://youtu.be/osTDF1ny1nQ?si=ejVE4W5PnJbFLCYd) / Yarden [Laifenfeld
▶️](https://www.youtube.com/watch?v=vI-ycJvFnZY&list=PLN_36A3Rw5hFsJqqs7olOAxxU-WJGlXS0&index=17&pp=iAQB) [Back to the Future: Modernizing CLIs Using Go](https://youtu.be/vI-ycJvFnZY?si=D_w6lSLocwx3r1Al) / Marian Montagnino
▶️ [Lightning Talks](https://youtu.be/YY90HRtuyM4?si=DIMrAmXKgfxBIyDk)

#чтопроисходит",7484,16,1,goproglib
4401,2024-01-05 11:48:41+00:00,"В современных программах память делится на стек и кучу, а компилятор Go решает, где разместить данные с использованием escape-анализа.

 Почему куча — это проблема?

Сборщик мусора Go периодически проверяет объекты в куче, что может замедлить работу приложения.

 Как решить эту проблему?

В [руководстве](https://landontclipp.github.io/blog/2023/07/15/analyzing-go-heap-escapes/) проделана большая работа с помощью [расширения VS Code для Go](https://code.visualstudio.com/docs/languages/go) и встроенных Go-инструментов, которая привела к любопытным выводам. Вот только некоторые из них:

️ Использование рефлексии включает в себя небезопасные указатели, что нарушает escape-анализ
️ Некоторые базовые пакеты (например, `fmt`) активно используют рефлексию (и, следовательно, `unsafe.Pointer`) для определения типов, передаваемых в функции вывода, и их преобразования в соответствии с форматом вывода
️ Рефлексия должна использоваться только в крайнем случае
️ Использование VSCode Codelens может помочь нам выявлять случаи утечек объектов в кучу и заставить нас критически подумать о том, действительно ли наши абстракции необходимы
️ И многое другое",7284,29,5,goproglib
4400,2024-01-04 16:08:11+00:00," **Особенности работы в ИТ: информация из первых рук**

‍ Недавно мы проводили среди вас опрос, а теперь [делимся](https://vc.ru/hr/968925-osobennosti-raboty-v-it-informaciya-iz-pervyh-ruk) интересными выводами обо всех аспектах работы в ИТ.

 [Выяснили](https://vc.ru/hr/968925-osobennosti-raboty-v-it-informaciya-iz-pervyh-ruk), с каким стеком можно получать 300к+, что айтишники думают о рекрутерах, насколько они довольны своей зарплатой и ради чего могут сменить работу.

 **Пишите в комментариях другие темы, о которых вам хотелось бы узнать**",6353,10,1,goproglib
4399,2024-01-03 09:13:19+00:00,"️**KOTELOV Podcast**: про переход с PHP на Go, лучший язык для кодинга и плюсы геймдева

В гостях — Николай Тузов.

 **Таймкоды:**

[00:00](https://m.youtube.com/watch?v=oQ9LkPuZK1Q&t=0s) Начало 
[00:29](https://m.youtube.com/watch?v=oQ9LkPuZK1Q&t=29s) Чем отличается разработка в геймдейве от остальной разработки? 
[07:55](https://m.youtube.com/watch?v=oQ9LkPuZK1Q&t=475s) Из науки в IT. Как залететь в айти с visual basic 
[14:30](https://m.youtube.com/watch?v=oQ9LkPuZK1Q&t=870s) Особые условия для PHP-шников в компаниях 
[15:44](https://m.youtube.com/watch?v=oQ9LkPuZK1Q&t=944s) А образование вообще надо? 
[19:06](https://m.youtube.com/watch?v=oQ9LkPuZK1Q&t=1146s) Какая польза может быть от джунов 
[25:10](https://m.youtube.com/watch?v=oQ9LkPuZK1Q&t=1510s) Путь внутри компании: когда пора развиваться
[29:05](https://m.youtube.com/watch?v=oQ9LkPuZK1Q&t=1745s) Почему айтишникам так много платят. ЗП для IT оправданы? 
[33:32](https://m.youtube.com/watch?v=oQ9LkPuZK1Q&t=2012s) Почему Go набирает популярность?
[37:42](https://m.youtube.com/watch?v=oQ9LkPuZK1Q&t=2262s) Нужны ли дженерики в Go?
[40:00](https://m.youtube.com/watch?v=oQ9LkPuZK1Q&t=2400s) Сравниваем языки программирования
[43:15](https://m.youtube.com/watch?v=oQ9LkPuZK1Q&t=2595s) Почему курсы Коли такие бесплатные? 
[49:25](https://m.youtube.com/watch?v=oQ9LkPuZK1Q&t=2965s) Создавать контент для нетворка 
[53:44](https://m.youtube.com/watch?v=oQ9LkPuZK1Q&t=3224s) Как стал одним из самых востребованных go-шников на ютубе 
[56:54](https://m.youtube.com/watch?v=oQ9LkPuZK1Q&t=3414s) Про критику и работу с аудиторией  
[01:00:00](https://m.youtube.com/watch?v=oQ9LkPuZK1Q&t=3600s) Мотивацию поднимаем 
[01:07:44](https://m.youtube.com/watch?v=oQ9LkPuZK1Q&t=4064s) Что мешает развиваться?

▶️ [YouTube](https://youtu.be/oQ9LkPuZK1Q?si=emJ7DrdGdeExPIPA) | [Apple Подкасты](https://podcasts.apple.com/us/podcast/%D0%BF%D0%BE%D1%87%D0%B5%D0%BC%D1%83-php-%D1%88%D0%BD%D0%B8%D0%BA%D0%B8-%D0%BF%D0%B5%D1%80%D0%B5%D1%85%D0%BE%D0%B4%D1%8F%D1%82-%D0%BD%D0%B0-go-%D0%B2-%D1%87%D0%B5%D0%BC-%D0%BF%D0%BB%D1%8E%D1%81%D1%8B-%D0%B3%D0%B5%D0%B9%D0%BC%D0%B4%D0%B5%D0%B2%D0%B0/id1591909301?i=1000638312665) | [Google Подкасты](https://podcasts.google.com/feed/aHR0cHM6Ly9hbmNob3IuZm0vcy82ZDQ1YzQ2MC9wb2RjYXN0L3Jzcw/episode/ODZiOGNmY2QtZDA5YS00ZjQ0LWJlYTEtMDFiNzU5NWE1NjU2?sa=X&ved=0CAUQkfYCahcKEwj4-9aE7cCDAxUAAAAAHQAAAAAQCg) | [Яндекс Музыка](https://music.yandex.ru/album/19421236/track/120093662) | [VK](https://vk.com/podcast-197473786_456239136)

#подкасты",7016,27,3,goproglib
4398,2024-01-03 05:01:09+00:00,"**-35% на курс по алгоритмам**

 Новый год начинается с подарков, а хороший подарок для себя — новые знания со скидкой 35%!

«[Алгоритмы и структуры данных](https://proglib.io/w/ff97c30a)» — 23 390 ₽ (вместо 35 990 ₽)

[Полугодовая программа](https://proglib.io/w/5485b37b) от преподавателей МФТИ и НИУ ВШЭ, которая включает в себя все необходимые знания по алгоритмам для работы.

Самое ценное — это развернутая обратная связь по всем вашим домашним заданиям, а также ссылки на полезные дополнительные материалы.

У вас не будет шансов не усвоить какие-то темы курса

 **Переходите и активируйте вводные занятия курса** — https://proglib.io/w/ff97c30a",6599,7,1,goproglib
4397,2024-01-02 07:01:43+00:00,"️ **Чек лист идеального отдыха: 5 психологических техник расслабления**

Измотаны бесконечной работой и не можете расслабиться? Попробуйте 5 психологических техник — от глубокого дыхания до визуализации пляжа — которые помогут насладиться заслуженным отдыхом.

 [Читать статью](https://proglib.io/sh/5CKYuTvSVw)
 [Зеркало](https://proglib.tech/p/chek-list-idealnogo-otdyha-5-psihologicheskih-tehnik-rasslableniya-2023-12-28)",6460,12,2,goproglib
4396,2024-01-01 11:14:21+00:00," [**goose**](https://github.com/pressly/goose)** в действии**: пошаговая миграция в YDB с помощью популярного инструмента миграции схемы

В гайде миграции рассматриваются как процесс управления версиями схемы данных в рамках одной базы данных.

 [Читать](https://habr.com/ru/companies/ydb/articles/783254/)",9029,13,0,goproglib
4395,2023-12-31 20:44:09+00:00," Команда «Библиотеки программиста» поздравляет айтишников, программистов, системных администраторов, специалистов техподдержки, руководителей проектов, проектировщиков, инженеров, менеджеров и всех-всех-всех остальных причастных к миру IT с наступающим 2024 годом! Мирного неба и чистого кода!",7109,77,0,goproglib
4394,2023-12-31 14:26:53+00:00,"️Подкаст **GoGetPodcast**: предновогодний стрим

Николай Тузов, Глеб Яльчик и Даниил Подольский общаются на разные темы и отвечают на вопросы. 

⏯️ [Смотреть](https://www.youtube.com/live/dTayYc2qapE?si=U4xT2E8nLG0SSXng)

#подкасты",7335,10,0,goproglib
4391,2023-12-30 09:46:40+00:00,"Кстати, в [GoLand 2023.3](https://www.jetbrains.com/go/whatsnew/) есть две полезных фичи, которые упрощают и ускоряют рефакторинг кода:

 **Создание функции в другом пакете (quick-fix)** — позволяет ввести имя несуществующей функции, а затем сгенерировать её реализацию в пакете на ваш выбор.
 **Extract Parameter** — позволяет выбрать неразрешенную ссылку и использовать опцию быстрого исправления для создания параметра. Также можно изменить его тип, если он недостаточно точен, предоставить значение по умолчанию и изменить вызовы с этим значением по умолчанию.",5411,31,2,goproglib
4390,2023-12-30 07:08:07+00:00," [**10 абсурдных подарков программисту на новый год**](https://proglib.io/sh/7dLZpMGPvw)

Мечтаете подарить что-то эдакое своему другу-айтишнику? Как насчет масла для клавиатуры, специальных AR-очков или симулятора случайных сбоев в сети?

 В комментарии пишите свои варианты абсурдных подарков",5381,0,0,goproglib
4385,2023-12-29 18:46:18+00:00," До Нового года остались считанные, поэтому пришло время подвести итоги. За год наше комьюнити значительно выросло. Всего мы опубликовали 1099 постов 

️ Особенно вам понравились вот эти посты:

 [Распространенные методы повторных запросов: интерактивный гайд](https://t.me/goproglib/4139)
 [Организация модуля: рекомендации от команды Go](https://t.me/goproglib/4033)
 [Теории кэширования по полочкам](https://t.me/goproglib/4239)
 [Подводные камни конкурентности](https://t.me/goproglib/4215)
 [Ants — библиотека, которая реализует высокопроизводительный пул горутин с фиксированной емкостью](https://t.me/goproglib/4254)
 [NilAway — инструмент статического анализа для обнаружения потенциальных nil-паник в коде на Go](https://t.me/goproglib/4222)
 [System Design 101](https://t.me/goproglib/4145)
 [cpuid — библиотека, которая предоставляет информацию о ЦП без использования CGO](https://t.me/goproglib/4232)
 [Concurrency в Go — барьеры памяти и как устроены атомики под капом](https://t.me/goproglib/4341)

 Также вы с интересом читали наши статьи:

 [ТОП-9 книг по языку программирования Go в 2023 году: от новичка до профессионала](https://t.me/goproglib/3974)
 [Лучшие практики Go: путь к чистому коду](https://t.me/goproglib/4103)
 [Эффективная работа с JSON в Go](https://t.me/goproglib/4149)
 [Самоучитель по Go для начинающих. Часть 2. Ресурсы для изучения Go с нуля](https://t.me/goproglib/4318)

 На канале было много интерактива, но лучшим оказался [опрос](https://t.me/goproglib/4350) про признаки, которые характеризуют «слабых» разработчиков.

 И последнее, но не менее важное: мы сделали скидку -35% на все [курсы нашей академии proglib.academy](https://t.me/dsproglib/4488).

С наступающим! ",6646,12,0,goproglib
4383,2023-12-29 08:30:04+00:00,"️ **Почему отсутствие технической документации убьёт ваш проект? **

Читатель «Библиотеки программиста» объясняет, почему техническая документация важна, а её наличие — обязательная составляющая успеха проекта. Не верите? 5 (почти) реальных историй, представленных в статье, вас убедят!

 [Читать статью](https://proglib.io/sh/rs106qwODx)
 [Зеркало](https://proglib.tech/p/pochemu-otsutstvie-tehnicheskoy-dokumentacii-ubet-vash-proekt-2023-12-25)",5790,12,3,goproglib
4382,2023-12-28 20:10:33+00:00," [**Go Wiki**](https://go.dev/wiki/) — теперь на общем портале go.dev

 Это тот самый путеводитель в мир Go, который включает следующие разделы:

 [Questions about Go](https://go.dev/wiki/#questions-about-go)
 [Contributing](https://go.dev/wiki/#contributing)
 [Getting started with Go](https://go.dev/wiki/#getting-started-with-go)
 [Working with Go](https://go.dev/wiki/#working-with-go)
 [Learning more about Go](https://go.dev/wiki/#learning-more-about-go)
 [The Go Community](https://go.dev/wiki/#the-go-community)
 [Using the Go Toolchain](https://go.dev/wiki/#using-the-go-toolchain)
 [Additional Go Programming Wikis](https://go.dev/wiki/#additional-go-programming-wikis)
 [Online Services that work with Go](https://go.dev/wiki/#online-services-that-work-with-go)
 [Troubleshooting Go Programs in Production](https://go.dev/wiki/#troubleshooting-go-programs-in-production)
 [Contributing to the Go Project](https://go.dev/wiki/#contributing-to-the-go-project)
 [Platform Specific Information](https://go.dev/wiki/#platform-specific-information)",6583,21,0,goproglib
4381,2023-12-28 18:07:08+00:00," **Что бы вы хотели получить в подарок на Новый год?** Поделитесь мыслями в комментариях

#интерактив",5814,3,16,goproglib
4380,2023-12-28 09:11:35+00:00," На самом деле доклады только начали появляться. Поэтому это будет пополняемый пост с докладами на GolangConf 2023 в рамках Highload++ 2023.

 [Выжимаем из Go максимум производительности](https://www.youtube.com/watch?v=mpdZLISz7Sc) / Никита Галушко (VK)

В качестве аргумента на вопрос о применении упомянутого в докладе подхода на практике, Никита привел свой небольшой [PR](https://github.com/dgryski/go-maglev/pull/5).

 [Менеджер транзакций в Go](https://youtu.be/fcdckM5sUxA?si=O7HnlRyvG8y3HVBi) / Илья Сергунин (Авито)

Илья рассказал, как обычно устроен менеджер транзакций и почему его нельзя скопировать «в лоб» в Go из других языков.

#чтопроисходит",6740,21,0,goproglib
4375,2023-12-27 12:00:56+00:00,"‍ Выход Go 1.22 запланирован на февраль 2024 года, но вы уже можете попробовать многие его фичи, не выходя из браузера. 

 Вас ждут много интерактивных примеров, основанных на__ __[примечаниях к выпуску новой версии.](https://tip.golang.org/doc/go1.22)

 [Ворваться](https://antonz.org/go-1-22/)",5817,26,1,goproglib
4374,2023-12-26 20:16:59+00:00,"**CI/CD Workflow**: упрощенный гайд от ByteByteGo ([Alex Xu](https://x.com/alexxubyte/status/1738237003341455533))

CI/CD — это методология, которая позволяет автоматизировать процесс разработки и доставки ПО в продакшн.

Будь вы разработчиком, специалистом по DevOps, тестировщиком или занимаетесь любой современной ролью в ИТ, CI/CD пайплайны стали неотъемлемой частью процесса разработки.

#инфографика",5669,25,3,goproglib
4373,2023-12-26 18:10:07+00:00,"** Чему бы вы хотели научиться? **Поделитесь мыслями в комментариях

#холивар",5921,6,31,goproglib
4372,2023-12-26 16:29:38+00:00,"Preslav Rachev в свойственной себе манере [критикует](https://preslav.me/2023/12/15/golang-interfaces-are-not-meant-for-that/) чрезмерное использование интерфейсов в Go, особенно в случаях, когда они преждевременно и излишне усложняют код. 

Мол, это связано с классическим подходом к разработке, где приложения разделяются на слои (HTTP-обработчики, бизнес-логика, слой сохранения данных).

 **А как правильно?**

Использовать маленькие, универсальные интерфейсы, как в стандартной библиотеке Go (`io.Reader`,` io.Writer `и т. д.), которые решают общие задачи и обеспечивают гибкость без излишней сложности. Другие интересные мысли и советы — под катом

 [Читать](https://preslav.me/2023/12/15/golang-interfaces-are-not-meant-for-that/)",6980,9,2,goproglib
4371,2023-12-25 18:38:34+00:00,"**Как устроена память** **в Go: от теории к практике
**
Гайд от Стаса Иванкевича, Go-разработчика в VK Cloud.

 [Читать](https://habr.com/ru/companies/vk/articles/776766/)",7962,23,19,goproglib
4368,2023-12-25 05:56:15+00:00," **Go-Architect** — новый инструмент анализа архитектуры для Go-проектов. Главная цель — облегчить принятие решений, связанных с рефакторингом вашего кода и исправлением проблем. Подробнее читайте в статье-анонсе

 [Читать](https://dev.to/fdaines/introducing-go-architect-7j7)",7884,15,1,goproglib
4367,2023-12-24 19:27:18+00:00,"**Как тривиально проверить значения интерфейса на nil?**

В Go новички часто сталкиваются с проблемой интерфейсных переменных, которым присваивае`тся` nil указатель. В таком случае, хотя значение в интерфейсе являе`тся` nil, сама переменная интерфейса не ра`вна` nil.

Пример: создаем перемен`н`ую x как указатель` на` int, который по умолча`нию` nil, и перемен`н`ую y как пустой интерфейс, который т`оже` nil по умолчанию. После присваива`н`ия x перемен`н`ой y, интерф`е`йс y уже не являе`тся` nil, х`о`тя x все `еще` nil.

```
var x *int
var y any
y = x
```

 Что верне`т y == n`il? 

Верне`т fal`se. Это потому, что интерфейс не просто представляет значение, которое ему присвоено, а действует как контейнер для этого значения.

Для проверки, является ли значение в интерфейс`е n`il, нужно использовать утверждение типа. Например, для проверк`и` y н`а n`il, используем:

```
y.(*int) == nil
```

Это показывает, что интерфейс `y` не `nil`, но содержащееся в нем значение — `nil`. Полный пример [здесь](https://go.dev/play/p/w_HstMzkGuO).

#tip",12771,52,0,goproglib
4366,2023-12-24 09:26:05+00:00,"Обзор нескольких юзкейсов переменных окружения в проекте на Go: os, godotenv и viper.

 Читайте на [Medium](https://towardsdatascience.com/use-environment-variable-in-your-next-golang-project-39e17c3aaa66) или в PDF",6437,5,1,goproglib
4365,2023-12-23 09:02:40+00:00,"‍ У [видеокурса по Go от FreeCodeCamp](https://t.me/goproglib/3639) есть текстовая версия, в которой вас ждет 16 разделов для новичков и не только: от переменных, функций и структур до каналов, мьютексов и дженериков.

[Читать](https://www.freecodecamp.org/news/learn-golang-handbook/)",8001,21,0,goproglib
4364,2023-12-22 19:09:59+00:00,"Реализация кэша в памяти на Go: подход Alex Edwards на основе дженериков

 [Читать заметку](https://www.alexedwards.net/blog/implementing-an-in-memory-cache-in-go)",7564,18,21,goproglib
4360,2023-12-22 11:48:56+00:00,"**Насколько легко «войти в айти»?**

Мы продолжаем собирать ваши истории о смене профессии и трудоустройстве в IT, чтобы написать большую аналитическую статью. 

Если вы еще не рассказывали о своем опыте, пройдите короткий опрос по [ссылке](https://forms.gle/8HvvKamYZjFGsqsm7).",6592,19,13,goproglib
4359,2023-12-22 09:01:40+00:00,"Попробуйте новую ИИ-модель Gemini от Google в своем проекте Go, используя:

[️](https://github.com/googleapis/google-cloud-go/tree/main/vertexai) [Generative AI Go SDK](https://github.com/google/generative-ai-go) & [Документация](https://pkg.go.dev/github.com/google/generative-ai-go)
[️ Vertex Go SDK](https://github.com/googleapis/google-cloud-go/tree/main/vertexai) & [Документация](https://pkg.go.dev/cloud.google.com/go/vertexai)",6249,10,0,goproglib
4358,2023-12-22 06:02:18+00:00," **Ответьте на 3 вопроса**, чтобы получить вводные занятия, познакомиться с преподавателями и форматом обучения, можно здесь – https://proglib.io/w/6ea6577e

В**ас ждут:**

1. Лекции «Производительность алгоритмов» от руководителя разработки Яндекс.Самокатов

2. Лекции «Итеративные сортировки и линейные сортировки» от аспирант департамента искусственного интеллекта ВШЭ

3. Практические задания после лекций

4. Ссылки на дополнительные материалы для самостоятельного изучения

️Переходите и начинайте учиться уже сегодня – https://proglib.io/w/6ea6577e",6079,6,1,goproglib
4355,2023-12-21 06:00:07+00:00," **Самоучитель по Go для начинающих. Часть 4. Переменные. Типы данных и их преобразования. Основные операторы.**

В этом уроке мы изучим фундаментальные понятия в программировании: переменные, типы данных и операторы, а также научимся преобразовывать один тип данных в другой.

 [Читать статью](https://proglib.io/sh/XoHU17cInt)
 [Часть 1](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-1-osobennosti-i-sfera-primeneniya-go-ustanovka-nastroyka-2023-11-23)
 [Часть 2](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-2-resursy-dlya-izucheniya-go-s-nulya-2023-11-28)
 [Часть 3](https://proglib.io/sh/1nmDe029Jj)",18334,16,0,goproglib
4352,2023-12-20 09:05:08+00:00,"**‍Мок-собеседование на позицию сеньор Go-разработчика**

Даниил Подольский и Владимир Балун проводят собес сеньор Go-разработчика Антона Зиновьева. Вас ждут две части: общие вопросы и лайв-кодинг.

 [Смотреть](https://youtu.be/GD0iHLucYdU?si=2CgKXUhXAP3WavQP)",8789,31,4,goproglib
4351,2023-12-20 06:01:31+00:00," Представлен первый релиз-кандидат Go 1.22

 [Анонс](https://groups.google.com/g/golang-announce/c/FIUY9kd7fc0)
⬇️ [Скачать](https://go.dev/dl/#go1.22rc1)",6104,22,1,goproglib
4349,2023-12-19 18:38:06+00:00," **Обзор рынка труда в ИТ: III квартал 2023 года**

В этой статье обсудим зарплату программистов в III квартале 2023 года, динамику вакансий, тенденции рынка труда в ИТ и многое другое. Присоединяйтесь!

[Читать статью](https://proglib.io/sh/khbTOeECsU)",6012,4,2,goproglib
4347,2023-12-19 05:57:38+00:00,"Команда Go представила инструмент для идентификации «мертвого кода» в вашем проекте:

```$ go install golang.org/x/tools/cmd/deadcode@latest
$ deadcode -help
The deadcode command reports unreachable functions in Go programs.

Usage: deadcode [flags] package...
```

Под катом — анонс инструмента и кейсы использования.

 [Читать](https://go.dev/blog/deadcode)",7106,27,13,goproglib
4346,2023-12-18 08:36:12+00:00,"Нина Пакшина, Go-разработчик из компании Лента Онлайн, делится опытом работы с миграциями в Go и проводит сравнительный анализ существующих инструментов. 

 Правила работы с миграциями, к которым в итоге пришла команда Нины:

️ Использовать библиотеку `pressly/goose`.
️ Использовать формат миграций `.sql`.
️ Для версионирования миграций нужно использовать временные метки.
️ Накат миграций должен быть частью процесса CI/CD. Миграции должны запускаться на шаге деплоя приложения.
️ Откат миграций является нежелательным: для того, чтобы этого не делать, приложение должно поддерживать обратную совместимость между версиями.

 [Читать](https://habr.com/ru/articles/780280/)",6569,14,20,goproglib
4345,2023-12-17 13:56:01+00:00," [**Pygolo 0.2.0**](https://gitlab.com/pygolo/py/-/releases/v0.2.0): встраивание или расширение Python с помощью Go и наоборот

Ваше Go-приложение может одновременно запускать свою собственную приватную среду выполнения Python в одном и том же процессе и получать к ней доступ по мере необходимости, [вот так](https://gitlab.com/pygolo/py/-/blob/main/docs/HOWTO-EMBED.md#what-does-embed-the-interpreter-mean): 

```package main

import ""gitlab.com/pygolo/py""

func main() {
 Py, err := py.GoEmbed()
 defer Py.Close()
 if err != nil {
  panic(err)
 }

 // do something useful
}
```

Альтернативно вы можете написать компоненты на Go, которые затем загружаются в Python. В любом случае: Python и Go прекрасно ладят.",6475,31,5,goproglib
4344,2023-12-16 18:01:11+00:00,"**Где программисту взять идеи для портфолио**

Портфолио — это классный способ впечатлить работодателей. Поэтому оно должно состоять не только из интересных проектов, но и отражать весь стек технологий, которым вы обладаете. 

Однако у большинства айтишников портфолио состоит из похожих проектов, которыми мало кого можно впечатлить. Под катом разбираемся, как собрать классное портфолио, а главное — где взять интересные идеи для пет-проектов.

 [Читать статью](https://proglib.io/sh/hEXSqUsZxz)
 [Зеркало](https://proglib.tech/p/gde-programmistu-vzyat-idei-dlya-portfolio-2023-12-05)",5885,12,0,goproglib
4343,2023-12-16 06:01:50+00:00,"‍ **'Sign in with GitHub' в Go**: гайд от  Eli Bendersky

Подробное и простое введение в три способа использования OAuth и поставщика OAuth GitHub из Go для получения Функции «Войти с помощью GitHub» в вашем приложении.

 [Читать](https://eli.thegreenplace.net/2023/sign-in-with-github-in-go/)",6522,10,2,goproglib
4342,2023-12-15 19:02:16+00:00," **Как сочетать Python и Go себе на пользу?**

Перевод [статьи-рассуждения](https://t.me/goproglib/4272) Preslav Rachev о простоте и лёгкости. «Подождите, это ведь одно и то же» — скажете вы. А вот и нет 

 [Читать](https://habr.com/ru/articles/779210/)",6561,13,1,goproglib
4341,2023-12-15 10:01:30+00:00," **Concurrency в Go **—** барьеры памяти** **и как устроены атомики под капом**: [**видеогайд**](https://youtu.be/YHIYT_jPR7Q?si=iaDJRJhZveUo-Get) **от Владимира Балуна**

 Что внутри:

[00:00](https://www.youtube.com/watch?v=YHIYT_jPR7Q&t=0s) — Введение
[00:12](https://www.youtube.com/watch?v=YHIYT_jPR7Q&t=12s) — Пример неправильного конкурентного кода
[02:16](https://www.youtube.com/watch?v=YHIYT_jPR7Q&t=136s) —  Переупорядочевание инструкций компилятором
[02:58](https://www.youtube.com/watch?v=YHIYT_jPR7Q&t=178s) — Переупорядочевание инструкций процессором
[03:40](https://www.youtube.com/watch?v=YHIYT_jPR7Q&t=220s) — Пример переупорядочевания инструкций
[04:32](https://www.youtube.com/watch?v=YHIYT_jPR7Q&t=272s) — Основные операции с памятью
[04:46](https://www.youtube.com/watch?v=YHIYT_jPR7Q&t=286s) — Логические барьеры памяти
[05:19](https://www.youtube.com/watch?v=YHIYT_jPR7Q&t=319s) — Полный барьер (full barrier)
[06:15](https://www.youtube.com/watch?v=YHIYT_jPR7Q&t=375s) — Барьер записи (write barrier)
[06:29](https://www.youtube.com/watch?v=YHIYT_jPR7Q&t=389s) — Барьер чтения (read barrier)
[07:15](https://www.youtube.com/watch?v=YHIYT_jPR7Q&t=435s) — Acquire barrier
[07:31](https://www.youtube.com/watch?v=YHIYT_jPR7Q&t=451s) — Release barrier
[07:42](https://www.youtube.com/watch?v=YHIYT_jPR7Q&t=462s) — Внутреннее устройство мьютексов
[08:18](https://www.youtube.com/watch?v=YHIYT_jPR7Q&t=498s) — Оптимизации
[08:53](https://www.youtube.com/watch?v=YHIYT_jPR7Q&t=533s) — Пример правильного конкурентного кода
[11:01](https://www.youtube.com/watch?v=YHIYT_jPR7Q&t=661s) — Заключение",7720,40,0,goproglib
4340,2023-12-14 20:00:59+00:00," **Своё кастомное межсервисное взаимодействие с блекджеком и gRPC**

Разраб из Ozon Tech делится опытом реализации кастомного межсервисного взаимодействия и рассказывает про современные алгоритмы балансировки, настройку канареечного деплоя и многое другое.

 [Читать](https://habr.com/ru/companies/ozontech/articles/779266/)",6783,20,0,goproglib
4339,2023-12-14 18:11:13+00:00,"‍️ __Никогда такого не было, и вот опять…__

Опрос Российской ассоциации электронных коммуникаций [говорит](https://www.kommersant.ru/doc/6397006) о снижении доходов IT-специалистов, тогда как те же аналитики hh.ru отмечают рост медианной зарплаты. 

 **А как поживают ваши доходы?**

 — упали, но незначительно
 — упали сильно
 — выросли",6282,183,0,goproglib
4336,2023-12-14 09:00:06+00:00," **Самоучитель по Go для начинающих. Часть 3. Организация кода. Пакеты, импорты, модули. Ввод-вывод текста**

В этом уроке мы создадим и запустим простую программу на Go и на её примере познакомимся с организацией кода и основными функциями.

 [Читать статью](https://proglib.io/sh/1nmDe029Jj)
 [Часть 1](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-1-osobennosti-i-sfera-primeneniya-go-ustanovka-nastroyka-2023-11-23)
 [Часть 2](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-2-resursy-dlya-izucheniya-go-s-nulya-2023-11-28)",5869,13,0,goproglib
4335,2023-12-14 06:02:07+00:00,"**Чему вы бы хотели научиться?**

Расскажите нам о ваших пожеланиях: какие навыки вы хотели бы прокачать в ближайшее время или какую профессию хотели бы приобрести?

__За прохождение опроса вы получите промокод на скидку 15% на все наши курсы до конца 2024 года.__

Опрос по [ссылке](https://docs.google.com/forms/d/e/1FAIpQLSe0BIC1Wg6ewsVDgDWFzL1euMAVukB9sC_z3x-Tp-3p8Sldvg/viewform)",6185,9,0,goproglib
4334,2023-12-13 19:14:41+00:00," Вы когда-нибудь путались в «первом» и «последнем» индексах при операциях вроде этой:

```s := a[3:7]
```

Она создает срез из массива `a`, начиная с третьего элемента (с нулевым индексом) и до, но не включая, элемента седьмого элемента.

Таким образом, «последний» индекс кажется указывающим за пределы `a`.

Вместо того, чтобы напрямую сопоставлять индекс с элементом...

```| G | o | p | h | e | r | s |   |
^   ^   ^   ^   ^   ^   ^   ^
0   1   2   3   4   5   6   7?
```
...представьте индексы, как будто они находятся между элементами.

```| G | o | p | h | e | r | s |
^   ^   ^   ^   ^   ^   ^   ^
0   1   2   3   4   5   6   7
```
Тогда срез `a[3:7]` вполне естественно относится к элементам между индексом №3 и индексом №7.

#tip",5688,57,4,goproglib
4326,2023-12-13 09:28:59+00:00," [**Опубликованы**](https://go.dev/blog/survey2023-h2-results)** результаты опроса Go-разработчиков за второе полугоде**

 Основные тезисы:

Linux и macOS являются наиболее часто используемыми ОС
Команда Go считает, что эксперимент с шаблонами проектов ([gonew](https://go.dev/blog/gonew)) решает критические проблемы для Go-разработчиков и снижает порог входа/внедрения
VS Code — самая популярная IDE. GoLand отстает от популярного редактора чуть больше, чем на 10%
Go-разработчиков больше интересуют инструменты AI/ML, которые улучшают качество и производительность кода, а не написание кода для самих инструментов
Трое из каждых четырех респондентов работают над Go-проектом, который использует облачные сервисы",4695,26,2,goproglib
4325,2023-12-13 06:00:11+00:00,"**Самые полезные каналы для программистов в одной подборке!**

Сохраняйте себе, чтобы не потерять 

Для всех

[Библиотека программиста](http://t.me/proglibrary) — новости, статьи, досуг, фундаментальные темы
[Книги для программистов](https://t.me/progbook)
[IT-мемы](http://t.me/itmemlib)
[Proglib Academy](https://t.me/proglib_academy) — тут мы рассказываем про обучение и курсы

#️⃣C#

[Библиотека шарписта](https://t.me/csharpproglib)
[Библиотека задач по C#](https://t.me/csharp_problems_lib) — код, квизы и тесты
[Библиотека собеса по C#](https://t.me/csharp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Вакансии по C#, .NET, Unity Вакансии по PHP, Symfony, Laravel](https://t.me/csharpdevjob)

️DevOps

[Библиотека devops’а](https://t.me/devopsslib)
[Вакансии по DevOps & SRE](https://t.me/devopssjob)
[Библиотека задач по DevOps ](https://t.me/devops_problems_lib)— код, квизы и тесты
[Библиотека собеса по DevOps ](https://t.me/devops_interview_lib)— тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования

PHP

[Библиотека пхпшника](https://t.me/phpproglib)
[Вакансии по PHP, Symfony, Laravel](https://t.me/phpdevjob)
[Библиотека PHP для собеса](https://t.me/php_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по PHP](https://t.me/php_problems_lib) — код, квизы и тесты

Python

[Библиотека питониста](https://t.me/pyproglib)
[Вакансии по питону, Django, Flask](https://t.me/pydevjob)
[Библиотека Python для собеса](https://t.me/py_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Python](https://t.me/py_problems_lib) — код, квизы и тесты

Java

[Библиотека джависта](http://t.me/javaproglib) — полезные статьи по Java, новости и обучающие материалы
[Библиотека Java для собеса](https://t.me/java_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Java](https://t.me/java_problems_lib) — код, квизы и тесты
[Вакансии для java-разработчиков](https://t.me/javadevjob)

Data Science

[Библиотека Data Science](http://t.me/dsproglib) — полезные статьи, новости и обучающие материалы
[Библиотека Data Science для собеса](https://t.me/ds_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Data Science](https://t.me/ds_problems_lib) — код, квизы и тесты
[Вакансии по Data Science, анализу данных, аналитике, искусственному интеллекту](https://t.me/datajob)

Go

[Библиотека Go разработчика ](https://t.me/goproglib)— полезные статьи, новости и обучающие материалы по Go
[Библиотека Go для собеса](https://t.me/go_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Go](https://t.me/go_problems_lib) — код, квизы и тесты
[Вакансии по Go](https://t.me/godevjob)

C++

[Библиотека C/C++ разработчика](https://t.me/cppproglib) — полезные статьи, новости и обучающие материалы по C++
[Библиотека C++ для собеса](https://t.me/cpp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по C++](https://t.me/cpp_problems_lib) — код, квизы и тесты
[Вакансии по C++](https://t.me/cppdevjob)

Другие профильные каналы

[Библиотека фронтендера](https://t.me/frontendproglib)
[Библиотека мобильного разработчика](https://t.me/mobileproglib)
[Библиотека хакера](https://t.me/hackproglib)
[Библиотека тестировщика](https://t.me/testerlib)

Каналы с вакансиями

[Вакансии по фронтенду, джаваскрипт, React, Angular, Vue ](https://t.me/jsdevjob)
[Вакансии для мобильных разработчиков ](https://t.me/mobiledevjob)
[Вакансии по QA тестированию ](https://t.me/testerrjob)
[InfoSec Jobs — вакансии по информационной безопасности](https://t.me/hackdevjob)

Чтобы добавить папку с нашими каналами, нажмите [сюда](https://t.me/addlist/17y04EbNMrlhNjZi)

Также у нас есть боты:
[Бот с IT-вакансиями](http://t.me/proglib_job_bot)
[Бот с мероприятиями в сфере IT](http://t.me/event_listener_bot)

Мы в других соцсетях:
[VK](https://vk.com/proglib)
[YouTube](https://www.youtube.com/c/%D0%91%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%B0)
[Дзен](https://zen.yandex.ru/proglib)
[Facebook *](https://www.facebook.com/proglib/?locale=ru_RU)
[Instagram *](https://www.instagram.com/proglibrary/)

__* Организация Meta запрещена на территории РФ__",5404,12,1,goproglib
4324,2023-12-12 19:21:27+00:00," **Топ-20 опенсорсных Go-проектов по количеству упоминаний в соцсетях**: коллекция от LibHunt

Многие не нуждаются в представлении, но есть и те, о которых вы могли не знать:

 [ollama](https://github.com/jmorganca/ollama) — инструмент для локального запуска больших языковых моделей.
 [tailscale](https://github.com/tailscale/tailscale) — самый простой и безопасный способ использования WireGuard и 2FA.
 [rclone](https://github.com/rclone/rclone) — rsync для облачного хранилища
 [cursusdb](https://github.com/cursusdb/cursusdb) — высокопроизводительная, распределенная документо-ориентированная in-memory БД
 [zen](https://github.com/anfragment/zen) — блокировщик рекламы и средство защиты конфиденциальности для Windows, macOS и Linux
 [LinGo](https://github.com/hsnborn22/LinGo) — TUI для изучения языков с помощью текста.
 [cli](https://github.com/cli/cli) — официальный CLI-клиент для GitHub
 [cerbos](https://github.com/cerbos/cerbos) — масштабируемое решение для авторизации
 [upm](https://github.com/replit/upm) — универсальный менеджер пакетов (Python, Node.js, Ruby, Emacs Lisp)
 [gron](https://github.com/tomnomnom/gron) — grep для JSON
 [frankenphp](https://github.com/dunglas/frankenphp) — cовременный сервер PHP-приложений",6008,31,0,goproglib
4321,2023-12-12 13:10:08+00:00," Запутались в кучах Go? Не волнуйтесь, вы не одиноки.**
**
Max Hoffman из DoltHub заглянул под капот `container/heap` и обсудил различные аспекты реализации куч в Go, включая использование указателей на срезы и неизменяемые указатели, а также юзкейсы дженериков для упрощения работы с кучами.

 [Читать статью](https://www.dolthub.com/blog/2023-12-01-why-are-go-heaps-confusing/)",5629,22,0,goproglib
4320,2023-12-11 08:14:08+00:00,"**20 советов по тестированию** из [доклада](https://youtu.be/X4rxi9jStLo?si=ghaEMCaCx2vTB0Gu) Расса Кокса на GopherCon Australia 2023

 Оставим их в оригинале:

1. Make it easy to add new test cases.
2. Use test coverage to find untested code.
3. Coverage is no substitute for thought.
4. Write exhaustive tests.
5. Separate test cases from test logic.
6. Look for special cases.
7. If you didn’t add a test, you didn’t fix the bug.
8. Not everything fits in a table.
9. Test cases can be in testdata files.
10. Compare against other implementations.
11. Make test failures readable.
12. If the answer can change, write code to update them.
13. Use [txtar](https://pkg.go.dev/golang.org/x/tools/txtar) for multi-file test cases.
14. Annotate existing formats to create testing mini-languages.
15. Write parsers and printers to simplify tests.
16. Code quality is limited by test quality.
17. Scripts make good tests.
18. Try [rsc.io/script](https://pkg.go.dev/rsc.io/script) for your own script-based test cases.
19. Improve your tests over time.
20. Aim for continuous deployment.

 [Источник](https://research.swtch.com/testing)",5926,18,0,goproglib
4319,2023-12-10 18:21:40+00:00," **Где искать библиотеки и инструменты для своих проектов? **

 Подборка для Go-разработчика:

 [pkg.go.dev](https://pkg.go.dev/)

Здесь вы можете найдете пакеты по различным критериям и получите информацию о версии, лицензии и многом другом.

 [GitHub](https://github.com/)

Вводите в поисковую строку `language:go` + свой запрос и анализируете результаты.

 [Awesome Go](https://awesome-go.com/)

Один из самых старых и самых поддерживаемых кураторских списков по Go. 

 [Libhunt.com](https://www.libhunt.com/l/go)

Коллекция Go-проектов, отфильтрованных по количеству упоминаний, звезд или другим критериям.

 [go-recipes](https://github.com/nikolaydubina/go-recipes)

Тщательно подобранный список полезных Go-инструментов, разделенных на категориям.

#tip",8575,15,0,goproglib
4318,2023-12-10 16:29:22+00:00," **Самоучитель по Go для начинающих. Часть 2. Ресурсы для изучения Go с нуля**

Расскажем про актуальные и полезные источники информации по языку Go, которые подойдут для самостоятельного изучения и помогут погрузиться в захватывающий мир программирования.

 [Читать статью](https://proglib.io/sh/Z1zO6Ia8wj)
 [Ссылка на первую часть](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-1-osobennosti-i-sfera-primeneniya-go-ustanovka-nastroyka-2023-11-23)",17314,0,0,goproglib
4312,2023-12-09 18:25:37+00:00," **GitHub Actions CI/CD pipeline для деплоя Go-приложения**: простой пример для Go-разработчика

Автор написал простейшее приложение и [описал шаги](https://rebin.dev/post/setup-github-actions-ci-cd-pipeline-to-deploy-go-application/) по созданию пайплайна для деплоя веб-приложения на Linux-сервер. Ниже — его полный пример:

```name: Golang-App-Workflow
'on':
  push:
    branches:
      - main
jobs:
  build-GoAppliation:
    runs-on: ubuntu-latest

    steps:
      
      - name: Checkout-Repository
        uses: actions/checkout@v4

      - name: Setup-Golang
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          check-latest: true
      - run: go version

      - name: Install-Golang-Dependencies
        run: go mod download

      - name: Build-Golang-App
        run: GOOS=linux go build -o build/MusicAlbumAPI -v

      - name: Display-Build-Golang-App
        run: ls -R build/

      - name: Create-Env-File
        run: 'echo ""APIKey=${{ secrets.APIKey }}"" > build/.env'

      - name: Display-Env-File
        run: cat build/.env

      - name: Run-Unit-Test-Golang-App
        run: go test

      - name: Copy-Build-Golang-App
        uses: appleboy/scp-action@master
        with:
          host: '${{ secrets.VM_HOST }}'
          username: '${{ secrets.VM_USERNAME }}'
          key: '${{ secrets.VM_SSH_KEY }}'
          port: '${{ secrets.VM_SSH_PORT }}'
          source: build/
          target: /var/www/GoApplications

      - name: Deploy-Build-Golang-App-To-Ubuntu-VM
        uses: appleboy/ssh-action@master
        with:
          host: '${{ secrets.VM_HOST }}'
          username: '${{ secrets.VM_USERNAME }}'
          key: '${{ secrets.VM_SSH_KEY }}'
          port: '${{ secrets.VM_SSH_PORT }}'
          script: |
            cd /var/www/GoApplications/build
            ls -l
            sudo systemctl reload nginx
            sudo systemctl status nginx```",6734,39,3,goproglib
4311,2023-12-09 14:59:24+00:00,"****** Ретроспектива Ebitengine в 2023 году**

Ebitengine (ранее Ebiten) — популярный движок 2D-игр для Go, который позволяет создавать игры на многочисленных платформах, включая мобильные устройства и Nintendo Switch. 

Разработчик движка Hajime Hoshi празднует десятилетие проекта и [рассказывает](https://ebitengine.org/en/blog/2023.html), что произошло с ним в этом году. Под катом много интересного, включая видео некоторых выпущенных игр на базе Ebitengine.",6448,30,0,goproglib
4310,2023-12-08 11:32:24+00:00,"️**Свершилось: канал с книгами только по Go
**
Мы создали для вас канал, куда будем публиковать самые полезные книги только для Go-разработчиков. Подписывайтесь! 

[Книги для Go разработчиков](https://t.me/goprogbook)",68819,22,6,goproglib
4309,2023-12-08 07:14:31+00:00,"** Визуализация картографических данных с помощью Go и Leaflet JS**

Miki Tebeka из Ardan Labs решил визуализировать свои прогулки и написал простой сервис на Go, который принимает файл GPX с необработанными данными и возвращает интерактивную карту с отмеченным маршрутом. Под катом — примеры и подробное объяснение.

 [Читать](https://www.ardanlabs.com/blog/2023/11/visualizing-map-data-go.html)",6623,0,0,goproglib
4307,2023-12-07 18:10:05+00:00,"Давайте пофантазируем! Если отмотать время назад и вернуться к моменту, когда вы только выбрали Go для дальнейшего изучения и построения карьеры, ваше итоговое решение могло измениться?

 Вы выбрали бы Go? Может быть Python? Или Rust/C#/C/C++/PHP...?

 — конечно Go
 — другой ЯП
 — я и так перешел на Go с другого языка
️ — ЯП не имеет значения — это всего лишь инструмент

#холивар",6058,428,611,goproglib
4306,2023-12-07 11:02:24+00:00,"** Азбука SQL в примерах. Часть 2. Ограничения, которые упрощают жизнь**

В [предыдущей части](https://t.me/proglibrary/8282) мы выяснили, что такое SQL, создали свою первую базу данных и добавили в неё первую таблицу. Пришло время узнать, как сделать добавление данных в неё более простым и надёжным.

 [Читать статью](https://proglib.io/sh/7e8vLUHWPY)
 [Зеркало](https://proglib.tech/p/azbuka-sql-v-primerah-chast-2-ogranicheniya-kotorye-uproshchayut-zhizn-2023-11-21)",5121,6,1,goproglib
4305,2023-12-07 06:08:06+00:00,"**Оптимизация строковых операций Go на примерах**

Настало время [Advent of Code](https://adventofcode.com/), поэтому обработка строк приобретает первостепенное значение. Автор взял простую задачу [со второго дня](https://adventofcode.com/2023/day/2) и ускорил ее почти в 5 раз с минимальными изменениями. 

 Читайте на [Medium](https://medium.com/@ozoniuss/optimizing-go-string-operations-with-practical-examples-83df39b776fb) или в PDF",6026,14,3,goproglib
4304,2023-12-06 18:45:34+00:00," **Context vs структура**: следует ли передавать информацию, специфичную для запроса, через `context.Context`?

HTTP-обработчики могут использовать контекст для управления тайм-аутами запросов или отменой в рамках запроса. Тип `Context` также позволяет передавать значения (например, идентификатор пользователя, связанный с запросом) другим функциям.

Следует ли использовать этот механизм для передачи информации по цепочке вызовов запроса? Или лучше использовать обычную структуру?

Вот две причины, по которым использование `Context` для передачи значений может быть плохой идеей:

Значения в `Context` представляют собой пары ключ/значение, где ключ и значение являются пустыми интерфейсами (т. е. `any`). Другими словами, значения в контексте — это как мешок со всем подряд. Компилятор не может помочь вам отловить ошибки типов или даже проверить, есть ли информация. Удачи в устранении неполадок 

Если вы видите функцию, принимающую параметр `Context`, вы не можете сказать, что внутри. Если вы видите функцию, которая принимает параметр структуры, вы можете ясно видеть, что данные передаются, и что это за данные.

Но разве `doSomething(ctx)` не выглядит намного чище, чем `doSomething(ctx, someStruct)`?

Чистый код сам по себе не является целью. Код не чист только потому, что он короткий. Код чистый, если читатель может ясно видеть, что он делает.

Так `context.WithValue()` следует избегать?

Значения в контексте могут быть полезны, если они не критичны для бизнес-логики приложения. Например, совершенно нормально передавать идентификаторы запросов для логирования или измерения метрик. Читатель все равно сможет понять логику кода, и если что-то пойдет не так с этим идентификатором, это повлияет только на логирование или метрики приложения, но не на результат запроса.

Если данные важны для вашей бизнес-логики, не помещайте их в `Context`.

#tip",8261,47,6,goproglib
4303,2023-12-06 17:30:58+00:00," **Представлены релизы Go 1.21.5 и 1.20.12**

 Новый выпуск включает исправления безопасности для net/http (CVE-2023-39326), cmd/go (CVE-2023-45285) и path/filepath (CVE-2023-45283 update).

 [Анонс](https://groups.google.com/g/golang-announce/c/iLGK3x6yuNo)

#новости",5089,13,0,goproglib
4302,2023-12-06 14:36:54+00:00,"**Внимание всем отважным героям и искателям приключений!
**
«Библиотеки Программиста» с гордостью представляет новую захватывающую игру — [«Битва с Драконом»](https://t.me/proglib_game_bot). Выберите своих персонажей и сразитесь с древним Крылатым Ужасом Бурлопиворогом в эпическом поединке!

Мы предлагаем вам взять под свой контроль хитроумного изобретателя или ловкого вора.

Победителей ждет почет, уважение и награда! Итак, кто осмелится бросить вызов Бурлопиворогу? [Начните свою «Битву с Драконом»!](https://t.me/proglib_game_bot)",4059,10,0,goproglib
4301,2023-12-06 11:31:33+00:00,"Александр Парфенов, бэкенд-разработчик в Тинькофф Инвестициях и автор InvestAPI SDK, рассказывает об автоматизации торговых стратегий при помощи Tinkoff INVEST API и Go.

 [Читать](https://habr.com/ru/companies/tinkoff/articles/778634/)",6092,22,0,goproglib
4300,2023-12-06 07:10:07+00:00," **Азбука SQL в примерах. Часть 1. Создаем базу данных и первую таблицу**

С помощью этого короткого руководства в трех частях вы создадите базу данных, добавите в неё записи, а затем выполните несколько запросов для их обработки. В первой части мы узнаем, что скрывается за тремя буквами SQL и начнем двигаться к поставленной цели.

 [Читать статью](https://proglib.io/sh/Ncuni9Sp4A)
 [Зеркало](https://proglib.tech/p/azbuka-sql-v-primerah-chast-1-sozdaem-bazu-dannyh-i-pervuyu-tablicu-2023-11-17)",5339,9,2,goproglib
4298,2023-12-05 07:08:09+00:00," **Самоучитель по Go для начинающих. Часть 1. Особенности и сфера применения Go, установка, настройка**

В этой статье разберем основные особенности Go, его преимущества и недостатки, а также настроим рабочее пространство для комфортной разработки.

 [Читать статью](https://proglib.io/sh/z4cabFES9o)
 [Зеркало](https://proglib.tech/p/samouchitel-po-go-dlya-nachinayushchih-chast-1-osobennosti-i-sfera-primeneniya-go-ustanovka-nastroyka-2023-11-23)",16629,13,3,goproglib
4297,2023-12-04 19:40:45+00:00," **Извлечение данных из OpenStreetMap на Go**: пример использования пакета [osmpbf](https://github.com/qedus/osmpbf)

**OpenStreetMap** — некоммерческий веб-картографический проект, который может использовать каждый для извлечения и анализа данных. Например, можно узнать, сколько ресторанов суши существует в Манхэттене. 

 Читайте на [Medium](https://medium.com/@jankammerath/extracting-openstreetmap-with-go-sushi-restaurants-in-manhattan-106dc34d42da) или в PDF",6127,27,0,goproglib
4296,2023-12-04 06:05:40+00:00,"**DDD в Go: превозмогая трудности**

DDD — сложный набор правил, который требует насмотренности. Автор [рассмотрел подход,](https://habr.com/ru/articles/778186/) который заставит думать в рамках терминов предметной области и событий, которые там происходят. Он легко ложится на приложения с CQRS и Event Sourcing.

 В комментариях пишут, мол, автор тащит подходы из Java в Go. А вы как думаете?",6868,27,2,goproglib
4295,2023-12-03 20:05:56+00:00,"**Перепроверьте ваши embedding структуры**

◆ Embedding (встраивание) структур позволяет одной структуре наследовать поля и методы другой, делая их частью себя. Это может использоваться для создания новых типов данных, которые включают в себя свойства и функциональность существующих структур.

 Предположим, у вас есть структура:

```type Person struct {
    Name    string
    Address string
    SSN     string
}
```

и вы хотите создать тип `customer`.

```type Customer struct {
    Person
    ID int
}
```

◆ `Person` является embedded структурой. Все ее поля и методы встраиваются во внешнюю структуру.

◆ Приложению, которому нужен тип `Customer`, не интересен номер социального страхования клиента и не должен быть, но SSN неизбежно встраивается в `Customer` вместе с полями `Name` и `Address`.

◆ Любой код, имеющий доступ к переменной `Customer`, таким образом, имеет доступ и к `SSN` клиента.

```func main() {
    p := Person{
        Name:    ""John Doe"",
        Address: ""Doe Blvd, Doe City""
        SSN:     ""123-45-6789"",
    }
    c := Customer{
        Person: p,
    }
    fmt.Println(c.SSN)
}
```

◆ Будьте осторожны с встраиванием структур. Это очень полезная техника, но вы можете случайно открыть доступ к полям или функциям, к которым клиентский код не должен иметь доступа.

#tip",6004,61,1,goproglib
4294,2023-12-03 08:50:17+00:00," **Как устроены мапы под капотом: гайд для Go-разработчика**

Павел Комаров из AvitoTech в подробностях рассмотрел процесс записи и чтения данных в мапы, важность передачи количества элементов при создании мапы, а также уделил внимание проблеме переполнения и эвакуации элементов, даже до уровня отдельных битов. 

 [Читать](https://habr.com/ru/companies/avito/articles/774618/)",6816,23,0,goproglib
4293,2023-12-02 12:01:04+00:00,"**Разработка простого DNS-сервера на Go, согласно RFC**

Лучший способ понять принцип работы какой-то системы/технологии — закодить её.

 [Читать](https://habr.com/ru/articles/777996/)",7019,38,0,goproglib
4292,2023-12-02 09:21:45+00:00," Вышла новая версия генератора случайных фейковых данных **GoFakeIt 6.25.0**, написанного на** **Go

 Под капотом 260 функций для генерации таких имен, электронных писем, местоположений, цветов, user-агентов, продуктов для завтрака и многого другого. 

️ В версии 6.25.0 появилась опция шаблонов, позволяющая генерировать более сложные кастомные данные. 

 [GitHub](https://github.com/brianvoe/gofakeit/releases/tag/v6.25.0)",6794,44,0,goproglib
4291,2023-12-02 08:54:23+00:00,Нас уже больше 15 000 ! Спасибо за интерес к «Библиотеке Go-разработчика».,5464,53,4,goproglib
4289,2023-12-01 19:00:08+00:00,"**Подборка лучших статей «Библиотеки программиста» за ноябрь**: сохраняй в заметки, чтобы не пропустить #самыйсок

️ [Дорожная карта Go-разработчика в 2023 году](https://proglib.io/p/dorozhnaya-karta-go-razrabotchika-v-2023-godu-2023-11-01)
‍ [7 типов «сложных» разработчиков](https://proglib.io/p/7-tipov-slozhnyh-razrabotchikov-2023-11-10)
 [Самые популярные языки программирования 2023](https://proglib.io/p/samye-populyarnye-yazyki-programmirovaniya-2023-2023-11-22)
 Самоучитель по Go для начинающих:
 [Часть 1](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-1-osobennosti-i-sfera-primeneniya-go-ustanovka-nastroyka-2023-11-23). Особенности и сфера применения Go, установка, настройка
 [Часть 2](https://proglib.io/p/samouchitel-po-go-dlya-nachinayushchih-chast-2-resursy-dlya-izucheniya-go-s-nulya-2023-11-28). Ресурсы для изучения Go с нуля",6709,7,0,goproglib
4285,2023-12-01 17:29:15+00:00,"Продолжаем наш опрос — последняя, третья часть",4977,6,0,goproglib
4284,2023-12-01 08:30:44+00:00,"Одна из самых интересных областей развития LLM в 2023 году — это доступность мощных моделей (в том числе опенсорсных), которые мы можем запускать локально.

 Существует несколько инструментов, которые позволяют относительно легко получать, запускать и управлять такими моделями локально.

 Например, [Ollama](https://ollama.ai/) (написана на Go) [LocalAI](https://localai.io/) (тоже в основном на Go). Eli Bendersky [делится опытом использования Ollama](https://eli.thegreenplace.net/2023/using-ollama-with-langchaingo/) для локального запуска модели, взаимодействия с ней с помощью API и интеграции ее в Go-проект с помощью LangChainGo.",6062,12,5,goproglib
4280,2023-11-30 13:24:27+00:00,Продолжаем наш опрос — вторая часть,4553,5,0,goproglib
4279,2023-11-30 12:56:34+00:00," **Самые популярные языки программирования 2023**

Популярность ЯП зависит от нескольких факторов. Мы разобрались с ними, составили сводный рейтинг и обсудили особенности, преимущества, недостатки и причины популярности каждого языка. Заходите и читайте

 [Читать статью](https://proglib.io/sh/gDM4AOrv1K)
 [Зеркало](https://proglib.tech/p/samye-populyarnye-yazyki-programmirovaniya-2023-2023-11-22)",4618,12,0,goproglib
4278,2023-11-29 18:01:02+00:00,"**Стек или куча**?

 Живет ли переменная на стеке вызовов, или она динамически выделена в куче?

В большинстве случаев вам не стоит беспокоиться об этом. Go собирает мусор и автоматически очищает неиспользуемые переменные. 

Однако сборка мусора имеет свою цену, поэтому чем меньше выделений делает ваш код, тем быстрее он может работать.

 Как узнать, выделяется ли переменная в куче?

Некоторые операции по умолчанию вызывают выделение памяти в куче и поэтому легко обнаруживаются и исправляются. Вот несколько примеров:

Строковые переменные неизменяемы. Конкатенация двух строк приводит к новой аллокации и сборке мусора. В качестве альтернативы можно использовать `strings.Builde`r.
Срезы, которые растут за пределы своей емкости, реаллоцируются. Решение: предварительно выделить срез с помощью `make(``)`.
Когда функция создает локальную переменную и возвращает указатель на эту переменную, переменная должна быть выделена в куче.

 Однако есть ситуации, когда выделения в куче неочевидны. Подумайте об указателях, скрытых внутри других типов данных, таких как срезы или мапы. Или рассмотрите массивы. Если массив слишком большой, чтобы жить на стеке, он выделяется в куче.

 Как найти эти случаи выделения в куче?

Запустите или скомпилируйте свой код с флагом сборки мусора ""`-`m"", и команда Go выведет заметку каждый раз, когда переменная перемещается или уходит со стека в кучу:

```go run -gcflags ""-m"" 
или 
go tools compile -m
```

#tip",9444,74,2,goproglib
4274,2023-11-29 15:18:05+00:00,"******Помогите «Библиотеке программиста» лучше узнать свою аудиторию
**
Друзья, мы хотим делать для вас самый лучший контент — и для этого нам нужно узнать вас получше. 

Пожалуйста, ответьте на несколько вопросов — это поможет нам делать более полезные и интересные посты!

Первая часть опроса ",4898,7,0,goproglib
4273,2023-11-29 10:01:03+00:00,"** Как (и почему!) разные типы параметров функций ведут себя по-разному**: демистификация параметров функций в Go от Alex Edwards 

Если вы новичок в Go, у вас могут возникать вопросы вроде этих: «Почему функции обычно изменяют мапы и срезы, но не другие типы данных?», «Почему мой срез не изменяется, когда я добавляю к нему элементы в функции?», «Почему присваивание нового значения параметру-указателю не оказывает никакого эффекта за пределами функции?».

Цель [руководства](https://www.alexedwards.net/blog/demystifying-function-parameters-in-go) — дать понятные ответы на эти и другие вопросы и на простых примерах объяснить не самые очевидные аспекты Go.",5934,16,0,goproglib
4272,2023-11-28 19:55:25+00:00," **Python — лёгкий. Go — простой. Простой != легкий** 

[Статья](https://preslav.me/2023/11/27/python-is-easy-golang-is-simple-simple-is-not-easy/), посвященная симбиозу, который Preslav Rachev и его команда нашли при использования Python и Go.

Не менее интересно читать обсуждение на Hacker News. [Присоединяйтесь](https://news.ycombinator.com/item?id=38433358)!",5769,13,1,goproglib
4271,2023-11-28 17:13:10+00:00,"**️Мы запускаем серию исследований — и вы можете нам в этом помочь!
**
«Библиотека программиста» выпустит несколько статей, в которых мы проведем полноценные исследования.

**Помогите нам выбрать интересные темы**: может быть, вы давно хотели узнать, как изменилась зарплата у тех, кто релоцировался? Или гадаете, сколько лет нужно, чтобы стать миддлом?

Присылайте интересующие вас темы в комментарии — интересные мы возьмем в работу и поделимся с вами результатами ",5413,5,2,goproglib
4270,2023-11-28 13:11:54+00:00,"**Добавление тестов в шаблоны проектов: гайд для Go-разработчика**

Недавно автор разбирался с [шаблонами проектов Go](https://trstringer.com/go-project-templates/) и тем, как вы можете использовать некоторые из них для быстрого начала работы с Go-проектом (пример [шаблона для простого CLI на Go).](https://github.com/trstringer/go-template-cli-simple) Данным шаблонам не хватало только тестов

 [Читать](https://trstringer.com/go-project-template-tests/)",5564,11,0,goproglib
4268,2023-11-27 19:10:39+00:00," **DI и IoC в Go: что это, как работают и почему полезны**

В качестве примера автор использует клиент REST API для инструмента мониторинга веб-приложений Monibot.

 [Читать](https://monibot.io/blog/dependency-injection-inversion-of-control-in-go)",5919,15,0,goproglib
4267,2023-11-27 08:25:31+00:00," [Разработка игр на Go для абсолютных новичков](https://threedots.tech/post/making-games-in-go/)

 Чем занимаются разрабы в свободное время, если их изматывают текущие задачи? Они ~~отдыхают~~ пишут ради удовольствия!

 Miłosz Smółka, кофаундер Three Dot Labs и создатель Watermill, [знакомит](https://threedots.tech/post/making-games-in-go/) с фундаментальной игровой механикой 2D-аркады — от простого цикла рисования рамок до управления игровыми объектами, игроками и таймингами. В конце туториала вы узнаете, как написать игру Asteroids с помощью Go, Ebitengine и Donburi.",6156,21,2,goproglib
4266,2023-11-26 19:59:39+00:00," **Как можно тривиально реализовать типы sum/option на чистом Go, без использования сторонних пакетов или других хаков?

**◆ Например, вы захотели, чтобы функция возвращала либо `data value`, либо `error`. Вот как это может выглядеть псевдокодом:

```func f() Option {
    result, err := DoSomething()
    if err != nil {
        return Error(""oops:"", err)
    }
    return Data(result)
}
```

◆ Тип `Option` объединяет два варианта: `Data` и `Error`. Если все идет хорошо, функция возвращает `Data`, в противном случае — `Error`.

 **Возможно ли это в Go?**

◆ Да, но для этого нужно немного изменить концепцию интерфейсов. Интерфейсы описывают общее поведение, перечисляя одну или несколько функций. Каждый тип, который реализует эти функции, является экземпляром этого интерфейса.

◆ Однако тип `sum` не обязательно имеет какие-либо функции для реализации. Ему нужно только представлять разные виды значений. Поэтому нам придется использовать пустой интерфейс. Но это тоже не сработает: любой тип удовлетворяет пустому интерфейсу. 

◆ Взгляните на этот интерфейс:

```type Option interface {
    isOption()
}
```

◆ Функция `isOption()` служит только для того, чтобы сделать этот интерфейс отличным от пустого интерфейса. Только типы, реализующие `isOption`, являются вариантами `Option`.

◆ И обратите внимание, что `isOption()` не экспортируется. Это предотвращает добавление вариантов к типу `Option` сторонним кодом. Другими словами, эта функция  «‎запечатывает» интерфейс `Option`.

◆ Два варианта, `Data` и `Error`, следовательно, реализуются следующим образом:

```type Data[T any] struct {
    Value T
}
func (Data[T]) isOption() {}

type Error struct {
    Err error
}
func (Error) isOption() {}
```

◆ Вот и все! Наш тип `Option` готов к использованию. Вот функция, которая возвращает тип `Option` вместо известной пары (`value`, `error`):

```func DoSomething(b bool) Option {
    if b {
        return Data[int]{Value: 42}
    }
    return Error{
        Err: fmt.Errorf(""oops""),
    }
}
```

◆ Опытные разработчики могут сказать, что возвращать интерфейс считается плохим стилем! И на это есть причина: если вызывающий получает обратно интерфейс, ему придется анализировать возвращаемое значение, чтобы определить конкретный тип за интерфейсом.

◆ Однако этот анализ возвращаемого значения является намеренной частью подхода типа `sum` в Go. Разные варианты типа `sum` требуют разных действий, поэтому естественной частью обработки типа `sum` является ветвление в обработке возвращаемого типа, специфичного для варианта.

◆ Не волнуйтесь, определение варианта и действия на его основе требуют только переключения по типу возвращаемого значения и отдельного `case` для каждого из возможных вариантов, вот так:

```func main() {
    opt := DoSomething(true)
    switch option := opt.(type) {
    case Data[int]:
        fmt.Println(option.Value)
    case Error:
        fmt.Println(option.Err)
    }
    default:
    }
}
```

◆ Но будьте осторожны: где бы вы ни писали такой переключатель типа `sum`, вы должны включить все варианты как `case`.

◆ К счастью, для этого есть линтер [go-check-sumtype](https://github.com/alecthomas/go-check-sumtype):

```//sumtype:decl
type Option interface {
    isOption()
}
```

#tip",5037,28,9,goproglib
4262,2023-11-26 14:23:51+00:00," [**River**](https://github.com/riverqueue/river) — надежная высокопроизводительная система обработки заданий для Go и Postgres, использующая преимущества дженериков. 

 River использует одну и ту же базы данных для данных приложения и очереди заданий. Помещая задания в очередь транзакций вместе с другими изменениями в базе данных, можно избежать целых классов проблем распределенных систем. Преимущества River отлично описаны в [статье](https://brandur.org/river).

 River Client предоставляет интерфейс для добавления заданий и управления сервисами обработки и обслуживания заданий. Клиент создается с пулом базы данных, драйвером и структурой конфигурации, содержащей пакет `Workers` и другие настройки:

```riverClient, err := river.NewClient(riverpgxv5.New(dbPool), &river.Config{
    Queues: map[string]river.QueueConfig{
        river.DefaultQueue: {MaxWorkers: 100},
    },
    Workers: workers,
})

if err != nil {
    panic(err)
}

// Run the client inline. All executed jobs will inherit from ctx:
if err := riverClient.Start(ctx); err != nil {
    panic(err)
}```",4925,12,0,goproglib
4261,2023-11-25 18:01:27+00:00," [**Go Logging Benchmarks**](https://betterstack-community.github.io/go-logging-benchmarks/)

Сравнение производительности популярных Go-библиотек логирования, включая пакет стандартной библиотеки `slog`.",5696,20,2,goproglib
4260,2023-11-25 11:30:56+00:00," **Дорожная карта по параллельному программированию: подробный план изучения от Владимира Балуна**

 Что внутри:

[00:34](https://www.youtube.com/watch?v=CCGhHqhQSpc&t=34s) — Основы исполнения кода
[01:09](https://www.youtube.com/watch?v=CCGhHqhQSpc&t=69s) — Основы операционных систем
[02:01](https://www.youtube.com/watch?v=CCGhHqhQSpc&t=121s) — Параллельное и конкурентное исполнение кода
[02:42](https://www.youtube.com/watch?v=CCGhHqhQSpc&t=162s) — Примитивы синхронизации
[03:45](https://www.youtube.com/watch?v=CCGhHqhQSpc&t=225s) — Основы архитектуры компьютера
[04:06](https://www.youtube.com/watch?v=CCGhHqhQSpc&t=246s) — Атомики
[04:51](https://www.youtube.com/watch?v=CCGhHqhQSpc&t=291s) — Проблемы параллельного программирования
[05:23](https://www.youtube.com/watch?v=CCGhHqhQSpc&t=323s) — Продвинутые примитивы синхронизации
[06:02](https://www.youtube.com/watch?v=CCGhHqhQSpc&t=362s) — Паттерны параллельного программирования
[06:46](https://www.youtube.com/watch?v=CCGhHqhQSpc&t=406s) — Ввод-вывод
[07:15](https://www.youtube.com/watch?v=CCGhHqhQSpc&t=435s) — Барьеры памяти
[08:03](https://www.youtube.com/watch?v=CCGhHqhQSpc&t=483s) — Продвинутая архитектура компьютера
[08:57](https://www.youtube.com/watch?v=CCGhHqhQSpc&t=537s) — Алгоритмы синхронизации
[09:56](https://www.youtube.com/watch?v=CCGhHqhQSpc&t=596s) — Lock-free структуры данных
[10:30](https://www.youtube.com/watch?v=CCGhHqhQSpc&t=630s) — Wait-free структуры данных
[10:45](https://www.youtube.com/watch?v=CCGhHqhQSpc&t=645s) — Как изучать параллельное программирование",7482,41,3,goproglib
4259,2023-11-25 09:03:15+00:00,"‍**Полезные каналы по Go**

Напоминаем, что «Библиотека программиста» запустила **два канала специально для Go-разработчиков и тех, кто хочет ими стать.**

Подписывайтесь:
[Библиотека собеса по Go](https://t.me/go_interview_lib) — тут мы готовимся к интервью 
[Библиотека задач по Go](https://t.me/go_problems_lib) — тут решаем задачи, проходим тесты и изучаем код",44266,3,0,goproglib
4258,2023-11-24 19:19:15+00:00," Кровать на заднем плане, человек, который ходит туда-обратно, и песня «Мой кот боится темноты». И всё это в первые две минуты. Как думаете, что это?

А это [запись четырехчасового стрима](https://www.youtube.com/live/7fPKVIqxoGc?feature=shared) для Go-разработчиков, на котором Vany Serezhkin пишет VPN на веб-сокетах ‍️ 

 А вы думали, чем же заняться вечером в пятницу.",6524,12,4,goproglib
4256,2023-11-24 07:11:04+00:00," Основная идея корутин — дать возможность выполнять что-то конкуретно, но не параллельно, а с блокированием и по запросу. 

Расс Кокс [писал](https://research.swtch.com/coro) о том, зачем нам нужен пакет coroutine для Go и как он будет выглядеть. А на Хабре недавно появился перевод его заметок

 [Читать](https://habr.com/ru/articles/775532/)",5963,10,1,goproglib
4255,2023-11-23 17:14:06+00:00,"Дженерики, добавленные в Go 1.18, стали самым большим нововведением с момента первого опенсорсного выпуска Go. На дворе почти 2024 год и Go 1.21.4.

 **Расскажите, вы используете дженерики в проде? Как впечатления?**

#холивар",5913,20,23,goproglib
4254,2023-11-23 07:37:06+00:00,"️ [**Ants**](https://github.com/panjf2000/ants) — библиотека, которая реализует высокопроизводительный пул горутин с фиксированной емкостью.

 **Под капотом:**

️ Автоматическое управление большим числом горутин
️ Периодическое удаление просроченных горутин
️ Расширенный API, включающий отправку задач, получение количества запущенных горутин, динамическую настройку емкости пула, освобождение и перезапуск пула
️ Обработка паник для предотвращения сбоев программ
️ Эффективное использование памяти
️ Неблокирующий механизм https://google.github.io/styleguide/go/index",6990,20,0,goproglib
4253,2023-11-22 19:38:33+00:00,"**Futures в Go** — абстракция, представляющая результат асинхронной операции, который станет доступным в будущем. 

В Go, для создания подобного поведения, обычно используются следующие компоненты: горутины и каналы.

1️⃣ Создаем канал, который будет содержать будущий результат:
```resultChan := make(chan int)
```
2️⃣ Запускаем горутину для асинхронного вычисления результата:
```go func() {
    resultChan <- doLongComputation()
}()
```
3️⃣ Читаем из канала позже для получения результата:
```result := <-resultChan```",6004,40,21,goproglib
4251,2023-11-22 07:10:28+00:00,"** 7 типов «сложных» разработчиков**

Как найти подход к таким «сложным» типам и сделать работу в команде более эффективной и приятной? Рассказываем в статье, как с ними работать, чтобы избежать конфликтов и достичь общих целей. 

[Читать статью](https://proglib.io/p/7-tipov-slozhnyh-razrabotchikov-2023-11-10)

#почитать",5250,4,0,goproglib
4248,2023-11-21 18:09:05+00:00,"__ Зачем писать свой велосипед? Возьми готовую либу и пользуйся! За тебя уже все написали__

Вы наверняка слышали эту фразу от других разработчиков. Наличие инструмента/проекта/библиотеки для любой задачи — это одновременно как достоинство, так и недостаток современной разработки.

С одной стороны, они облегчают жизнь разработчикам и целым командам, а с другой — могут стать источником больших проблем: размер и скорость работы приложения, поддерживаемость кода, время на изучение библиотеки, баги, уязвимости и многое другое.

 **А как в вашей команде обстоят дела со сторонними библиотеками? По каким критериям вы принимаете решение о внедрении их в проект?**

#холивар",6058,14,1,goproglib
4245,2023-11-21 07:21:06+00:00," **SCS** — Go-библиотека для управления HTTP-сессиями в веб-приложениях от Alex Edwards. Недавно была выпущена версия 2.7.0.

 **Основные возможности и преимущества**:

 Автоматическая загрузка и сохранение данных сессии через middleware: облегчает работу с сессиями, автоматизируя их управление.
 Выбор из 19 различных серверных хранилищ сессий, включая PostgreSQL, MySQL, MSSQL, SQLite, Redis и многие другие. Также поддерживаются кастомные хранилища сессий.
 Поддержка multiple sessions per request, 'flash' messages, session token regeneration, idle, absolute session timeouts и функционал «запомнить меня».
 Простота расширения и настройки: возможность обмена токенами сессии с клиентами через HTTP-заголовки или тело запросов/ответов.
 Эффективный дизайн: легковесная, быстрая и использует меньше памяти, чем [gorilla/sessions](https://github.com/gorilla/sessions).

 [GitHub](https://github.com/alexedwards/scs)

#инструменты",6051,11,0,goproglib
4244,2023-11-20 18:15:07+00:00,"**Интеграционное тестирование REST API на базе MongoDB с Go**

Простой гайд с примерами на Go, который включает проектирование простого API и модели базы данных, описание эндпоинтов, разработку интеграционных тестов, использование Testcontainers и реализацию тестов на Go с использованием apitest.

 [Читать](https://ocakhasan.github.io/golang-mongo-db-rest-api-integration-tests/)",6233,17,1,goproglib
4242,2023-11-20 15:00:09+00:00,"Вакансия: **Java Software Engineer**
Локация: удаленно

Bennudata — стартап, с инвестициями от университета Berkeley, мы строим новое решение для автоматизации процесса Disaster Recovery в public clouds (AWS, Azure, GCP). 

**Задачи:**
▪️Проектирование, разработка и тестирование микросервисов
▪️Проектирование и реализация контрактов API
▪️Глубокое погружение  в работу сервисов AWS

**Требования:**
▪️Практический опыт разработки на Java Core более 3-х лет 
▪️Опыт работы с Spring Boot
▪️Знание и опыт работы с базами данных MongoDB
▪️Опыт работы с распределенными системами на основе GraphQL и gRPC
▪️Знание и опыт работы с AWS сервисами - EC2, RDS, IAM, S3, VPC, EKS, EBS, Lambda, SNS, SQS.
▪️Знание и использование AWS API и AWS CLI для автоматизации развертывания и управления приложениями на AWS.
▪️Опыт работы с Kubernetes
▪️Понимание и опыт работы с архитектурой микросервисов
▪️Навыки юнит-тестирования - умение писать и запускать автоматические тесты для проверки функциональности кода
▪️English - чтение документации
▪️Русский - разговорный

**Желательно:**
▪️Знание и опыт использования Terraform

**Что мы предлагаем:**
▪️3500$+ 
▪️Remote, full-time
▪️Опционная программа
▪️Возможность релокации в US (виза H-1B)

Резюме на dg@bennudata.com или t.me/gorbunov_me",5331,19,0,goproglib
4241,2023-11-20 07:11:06+00:00," **bgammon** — нарды в вашем браузере без рекламы и СМС

Это не только онлайн-версия классической игры, но и игра с открытым исходным кодом, написанная на Go с использованием Ebitengine.

 Посмотреть код: [бэкэнд](https://code.rocket9labs.com/tslocum/bgammon) & [фронт](https://code.rocket9labs.com/tslocum/boxcars)",5757,34,0,goproglib
4240,2023-11-19 18:04:20+00:00,"**Аксиомы каналов Go**: по мотивам [статьи 2014 года от Dave Cheney](https://dave.cheney.net/2014/03/19/channel-axioms)

Каналы являются довольно простой концепцией, пока вы не столкнетесь с некоторыми менее интуитивно понятными поведениями каналов, особенно когда речь идет о закрытых или nil каналах.

1️⃣ Отправка в nil канал блокируется навсегда.
2️⃣ Чтение из nil канала блокируется навсегда.
3️⃣ Отправка в закрытый канал вызывает панику.
4️⃣ Чтение из закрытого канала возвращает нулевое значение.

#вопросы_с_собесов",6123,23,1,goproglib
4239,2023-11-19 11:49:51+00:00," **Теории кэширования по полочкам: запись урока от Владимира Балуна**

Что внутри:

[01:03](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=63s) — Что такое кэширование
[03:18](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=198s) — Основные термины кэширования
[04:55](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=295s) — Какие данные кэшировать
[06:02](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=362s) — Кэширование ошибок
[07:13](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=433s) — Как предотвратить cache miss attack
[10:34](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=634s) — Эффективность кэширования
[12:56](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=776s) — Внутреннее кэширование
[14:41](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=881s) — Внешнее кэширование
[19:23](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=1163s) — Cache Aside
[21:32](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=1292s) — Cache Through
[23:16](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=1396s) — Cache Ahead
[29:33](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=1773s) — Алгоритмы вытеснения данных из кэша
[30:01](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=1801s) — Random алгоритм
[30:23](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=1823s) — FIFO алгоритм
[30:49](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=1849s) — LIFO алгоритм
[31:16](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=1876s) — LRU алгоритм
[32:06](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=1926s) — MRU алгоритм
[32:29](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=1949s) — LFU алгоритм
[37:11](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=2231s) — Алгоритм Белади (OPT)
[38:13](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=2293s) — Second Chance алгоритм
[39:56](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=2396s) — Clock алгоритм
[40:40](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=2440s) — 2Q алгоритм
[41:42](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=2502s) — SLRU алгоритм
[42:49](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=2569s) — TLRU алгоритм
[43:17](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=2597s) — LRU-k алгоритм
[47:24](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=2844s) — Инвалидация данных в кэше
[47:41](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=2861s) — Инвалидация по TTL
[48:35](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=2915s) — Jitter
[49:40](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=2980s) — Thundering herd problem
[51:13](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=3073s) — Инвалидация по событию
[52:41](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=3161s) — Версионирование кэша
[56:11](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=3371s) — Тегирование кэша
[1:03:37](https://www.youtube.com/watch?v=iLMlYgQoTIE&t=3817s) — Многомерный кэш",10121,79,0,goproglib
4238,2023-11-18 12:39:39+00:00,"️Николай Тузов выпустил гайд [(видео](https://youtu.be/EURjTg5fw-E) 3,45 ч. + туториал на [Хабре)](https://habr.com/ru/articles/774796/) по **разработке полноценного gRPC-сервиса с современной архитектурой**.

Что внутри:

• Разработка простого, но полноценного gRPC-сервиса
• Разбор базовых принципов работы авторизации
• Настройка автоматического деплоя в прод 
• Интеграция с уже готовым сервисом [URL Shortener](https://github.com/GolangLessons/url-shortener) 
• Разработка полноценных функциональных тестов и многое другое",6832,70,19,goproglib
4237,2023-11-18 10:19:02+00:00,"**Три паттерна конкурентного кода: гайд для Go-разработчика**

Часто для погружения в ту или иную тему необходима мотивация — например, можно в проекте увидеть странное поведение кода, которое вызывает больше вопросов, чем ответов. 

Именно так получилось у автора статьи. Он встретил логику ограничения потоков выполнения, основанную на результате выполнения функции `GOMAXPROCS(0)`, которая по умолчанию будет равна `runtime.NumCPU`. 

Это подходит под паттерн с параллельными вычислениями на одном процессоре, но использовалось для ограничения количества одновременных запросов к удаленному серверу.

 [Читать](https://habr.com/ru/companies/timeweb/articles/770912/)",6513,21,0,goproglib
4236,2023-11-17 18:10:05+00:00,"**По мотивам поста в **[**сабреддите golang**](https://www.reddit.com/r/golang/comments/17qsct0/most_popular_go_open_source_projects_that_beat/)**:**

 [Kubernetes](https://github.com/kubernetes/kubernetes): автоматизация развертывания, масштабирования и управления контейнеризированными приложениями
 [Terraform](https://github.com/hashicorp/terraform): управление внешними ресурсами
[Hugo](https://github.com/gohugoio/hugo): генерация статических сайтов
 [Syncthing:](https://github.com/syncthing/syncthing) непрерывная синхронизация файлов
 [Prometheus](https://github.com/prometheus/prometheus): система мониторинга и оповещения о событиях, хранящая данные в виде временных рядов
 [RudderStack:](https://github.com/rudderlabs/rudder-server) сбор данных о клиентах из различных приложений, веб-сайтов и SaaS-платформ
 [frp](https://github.com/fatedier/frp): быстрый реверс-прокси
 [fzf](https://github.com/junegunn/fzf): нечеткий поиск в командной строке
 [act](https://github.com/nektos/act): локальный запуск GitHub Actions
 [Gogs](https://github.com/gogs/gogs): self-hosted сервис Git
 [gitea](https://github.com/go-gitea/gitea): легковесная DevOps-платформа
 [Minio](https://github.com/minio/minio): высокопроизводительное хранилище объектов для ИИ
 [tidb](https://github.com/pingcap/tidb): облачная распределенная БД, совместимая с MySQL
 [Photoprism](https://github.com/photoprism/photoprism): работа с изображениями на базе ИИ
 [Gitpod](https://github.com/gitpod-io/gitpod): быстрая и безопасная облачная разработка
 [faas](https://github.com/openfaas/faas): упрощение serverless функций
 [nsq](https://github.com/nsqio/nsq): платформа распределенного обмена сообщениями

**Есть чем дополнить? Пишите в комментарии**",6208,26,1,goproglib
4234,2023-11-17 07:01:06+00:00,"Многие распространенные приложения на основе LLM, такие как RAG (Retrival Augmented Generation), имеют некоторые проблемы с пайплайном данных, и Go действительно хорош в этом.

️Реализация RAG на Go очень проста — смотрите [пример в блоге Eli Bendersky](https://eli.thegreenplace.net/2023/retrieval-augmented-generation-in-go/) или на [GitHub.](https://github.com/eliben/code-for-blog/tree/master/2023/go-rag-openai)",5572,4,0,goproglib
4233,2023-11-16 19:51:08+00:00," Уровни в айти-индустрии обычно отличаются опытом, знаниями, навыками, ответственностью и зарплатой. Но в одной компании вас могут оценить как сильного мидла, а в другой — как среднего джуна.

 **Как вы считаете, какими навыками должны обладать джуны, мидлы и сеньоры?**

#холивар",6117,6,9,goproglib
4232,2023-11-16 17:06:42+00:00,"**cpuid** — библиотека, которая предоставляет информацию о ЦП без использования CGO: количество физических и логических ядер, семейство ЦП и другие сведения. 

️На данный момент поддерживает x86/x64 и Arm64. Не использует никакого CGO.

```package main

import (
 ""fmt""
 ""strings""

 . ""github.com/klauspost/cpuid/v2""
)

func main() {
 // Print basic CPU information:
 fmt.Println(""Name:"", CPU.BrandName)
 fmt.Println(""PhysicalCores:"", CPU.PhysicalCores)
 fmt.Println(""ThreadsPerCore:"", CPU.ThreadsPerCore)
 fmt.Println(""LogicalCores:"", CPU.LogicalCores)
 fmt.Println(""Family"", CPU.Family, ""Model:"", CPU.Model, ""Vendor ID:"", CPU.VendorID)
 fmt.Println(""Features:"", strings.Join(CPU.FeatureSet(), "",""))
 fmt.Println(""Cacheline bytes:"", CPU.CacheLine)
 fmt.Println(""L1 Data Cache:"", CPU.Cache.L1D, ""bytes"")
 fmt.Println(""L1 Instruction Cache:"", CPU.Cache.L1I, ""bytes"")
 fmt.Println(""L2 Cache:"", CPU.Cache.L2, ""bytes"")
 fmt.Println(""L3 Cache:"", CPU.Cache.L3, ""bytes"")
 fmt.Println(""Frequency"", CPU.Hz, ""hz"")

 // Test if we have these specific features:
 if CPU.Supports(SSE, SSE2) {
  fmt.Println(""We have Streaming SIMD 2 Extensions"")
 }
}
```

 [GitHub](https://github.com/klauspost/cpuid)",6572,25,6,goproglib
4231,2023-11-16 07:18:04+00:00,"Начиная с [Go 1.22,](https://github.com/golang/go/issues/63393) функции Delete/DeleteFunc/Compact/CompactFunc/Replace в пакете стандартной библиотеки **slices** [обнуляют освобожденные элементы,](https://go-review.googlesource.com/c/go/+/541477) чтобы избежать потенциальной утечки памяти.

 Речь про [этот proposal.](https://github.com/golang/go/issues/63393)

#новости",5898,29,4,goproglib
4230,2023-11-15 18:01:09+00:00,"**Различные способы использования go get**

Вы, конечно, знаете, как получить последнюю версию модуля:

Либо для конкретного модуля...

```$ go get golang.org/x/net
```

...либо для всех зависимостей главного модуля:

```$ go get -u ./...
```

Чтобы обновить все зависимости до последних патч-релизов текущей версии, используйте:

```$ go get -u=patch ./...
```

Но это еще не все. Например, вы можете обновить или понизить версию модуля до конкретной версии:

```$ go get golang.org/x/text@v0.3.2
```

Вы не ограничены использованием семантического номера версии. Вы можете использовать `@latest`, чтобы обновиться до последней версии, или `@patch`, чтобы обновиться до последнего патч-релиза. Или можете указать конкретную ветку VCS. 

Например, эта команда обновит модуль до последнего коммита в главной ветке модуля:

```$ go get golang.org/x/text@main
```

Вы даже можете удалить зависимость. Эта операция даже понижает версии модулей:

```$ go get golang.org/x/text@none
```

Команда `go get` может быть применена даже к инструментарию Go. Эта команда обновляет минимально требуемую версию Go для главного модуля (то есть обновляет директиву go в `go.mod`) и даже загружает последнюю или указанную версию инструментария, если это необходимо:

```$ go get go
$ go get go@v1.21.4
```

Начиная с Go 1.21, `go mod` также может предложить версию инструментария Go для компиляции модуля, используя директиву `toolchain` (в отличие от директивы `go`, которая устанавливает минимально требуемую версию Go для модуля). Директива `go` остается неизменной. Как и в случае с `go get`, вы можете использовать `@patch`, чтобы обновиться до последнего патч-релиза текущего инструментария Go.

```$ go get toolchain
$ go get toolchain@v1.21.4
$ go get toolchain@patch```",6298,41,9,goproglib
4229,2023-11-15 07:00:29+00:00,"**Следующее поколение CLI**

Charmbracelet, создатели CLI-пакетов для Go, задумали что-то грандиозное. Они собрали 6 миллионов долларов на создание CLI-инструментов «следующего поколения». 

Подробности о планах еще впереди, а сейчас можно ознакомиться с пакетами и инструментами, которые Charmbracelet выпустила на данный момент: от Glow, Glamour и LipGloss до SoftServe, Wish и VHS.

 [Читать](https://charm.sh/blog/the-next-generation/)",5989,46,2,goproglib
4228,2023-11-14 19:30:06+00:00," **Сложно ли поменять стек разработки? **

Выйти на тот же уровень производительности в другом стеке в том же направлении (бэкенд/фронтенд) может занять от нескольких месяцев до полугода. Конечно, у каждого это время различается, но в любом случае оно включает:

️Изучение нового языка
️Ознакомление с экосистемой языка
️Понимание инфраструктуры (сборка, доставка и т. д.)

 **А вы меняли стек? Сколько времени это заняло? **

#холивар",5791,15,18,goproglib
4227,2023-11-14 18:16:06+00:00,"Подборка для Go-разработчика:

 [Как делать микросервисы единообразными, когда их много, а разрабы все разные?](https://m.youtube.com/watch?v=gV1wBdNtTEE&t=248s) / Олег Козырев, Авито
 [Разработка, основанная на паранойе](https://m.youtube.com/watch?v=gV1wBdNtTEE&t=2482s) / Мясников Алексей, Яндекс
 [Микросервисы в небольшой команде разработки: зачем вам нужен PaaS?](https://m.youtube.com/watch?v=gV1wBdNtTEE&t=4866s) / Алексей Коротин, Sports.ru
 [Обработка ошибок в Go в 2023](https://m.youtube.com/watch?v=gV1wBdNtTEE&t=6766s) / Виталий Попов, InDrive

#чтопроисходит",6312,10,0,goproglib
4225,2023-11-14 11:31:14+00:00,"**️Как использовать ресурсы Kubernetes по максимуму для работы с Go-приложениями**

Антон Жуков, руководитель группы разработки в Сбермаркете, делится опытом работы с Kubernetes.

Вы узнаете о возможных проблемах и решениях, а также о том, как грамотно использовать ресурсы этой платформы, чтобы выжать максимум из Go-приложений. 

В конце описан кейс настройки GOMAXPROCS на примере реального приложения, которая привела к повышению производительности на 20-50%.

 [Читать](https://habr.com/ru/companies/sbermarket/articles/773648/)",6088,18,0,goproglib
4224,2023-11-13 19:13:56+00:00," **Егор Толстой и Анна Симонова опросили 500 Go-разработчиков и узнали много интересного**: для каких задач используют Go, насколько часто применяют дженерики, какие инструменты в арсенале. А кроме этого, собрали большой список самых полезных книг, курсов, подкастов и Telegram-каналов.

[**Основные тезисы**](https://devcrowd.ru/go-2023/)**:**

◆ Большинство участников опроса оценивают свой уровень как Middle и Senior.
◆ До Middle Go-разработчик обычно растет 1-2 года, а тимлидом может стать уже через 3.
◆ В основном Golang применяется в продуктовой разработке на проектах большого масштаба.
◆ Большинство пришло в Go из других ЯП. Среди неожиданных профессий: кладовщик, нефтяник, врач и музыкант. 17% Go‑разработчиков начали свою карьеру в IT сразу с Golang. **Чаще всего в Golang приходят из Python и PHP**.
◆ Для большинства опрошенных Go — основной язык программирования.
◆ Почти половина опрошенных в качестве второго регулярно используемого языка выбирают Python. А треть — JavaScript.
◆ Половина опрошенных переписывала сервисы на Go с других языков. В основном с PHP.
◆ Подавляющее большинство опрошенных используют Go для микросервисов.
◆ Основная IDE для работы — GoLand / IntelliJ IDEA.
◆ Больше половины Go-разработчиков работают с macOS.
◆ Абсолютное большинство готово использовать Go не только для работы, но и для написания пет‑проектов.
◆ Вне зависимости от грейда, Go‑разработчики заинтересованы в прокачке знаний по архитектуре и распределенным системам.
◆ Дженерики ждали все, а в итоге регулярно используют только 10% разработчиков.
◆ Каждый пятый Go-разработчик ждет того часа, когда в языке оптимизируют процесс обработки ошибок.
◆ Лишь треть опрошенных пользуется AI‑инструментами на регулярной основе. 
◆ Основные источники знаний для большинства Go-разработчиков — это чтение статей и просмотр YouTube.
◆ Каждый шестой Go-разработчик открывал в этом году книги Роберта Мартина.
◆ Треть разработчиков обучались Go не самостоятельно, а на профильных курсах.
◆ 30% Go-разработчиков живут не в России. Больше половины переехали в последние 1,5 года.
◆ Большинство Go-разработчиков не планируют менять место работы.
◆ Самый частый способ выхода из Go — переход в управление разработкой или смена ЯП.
◆ 40% тех, кто хочет сменить язык программирования, в первую очередь смотрят на Rust. 

 [Читать исследование](https://devcrowd.ru/go-2023/)

#аналитика",6234,28,2,goproglib
4223,2023-11-13 14:44:32+00:00,"**Разработка высокопроизводительного синтаксического анализатора JSON**: от** **теории к практике **

**Создать синтаксический анализатор JSON непросто, а создать быстрый — еще сложнее. В выступлении на GopherCon Signapore 2023 Дэйв Чейни демонстрирует, как написать высокопроизводительный синтаксический анализатор JSON. Ниже — сценарий выступления, превращенный в статью в блоге.

 [Читать](https://dave.cheney.net/paste/gophercon-sg-2023.html)",6084,5,0,goproglib
4222,2023-11-12 12:57:58+00:00,"[**NilAway**](https://github.com/uber-go/nilaway) — инструмент статического анализа для обнаружения потенциальных nil-паник в коде на Go, который позволяет ловить их во время компиляции, а не во время выполнения.

Команда Uber постаралась, сделав похожий на [nilness](https://pkg.go.dev/golang.org/x/tools/go/analysis/passes/nilness) инструмент с гораздо более сложными и мощными методами статического анализа для отслеживания потоков nil как внутри пакета, так и между пакетами.

```var p *P
if someCondition {
      p = &P{}
}
print(p.f) 
```

Результат

```go.uber.org/example.go:12:9: error: Potential nil panic detected. Observed nil flow from source to dereference point:
    -> go.uber.org/example.go:12:9: unassigned variable p accessed field f```",7440,48,9,goproglib
4221,2023-11-12 07:17:09+00:00,"Статические SQL-запросы часто оказываются недостаточными при необходимости создания условных запросов, а разработка динамических запросов в Go требует глубоких знаний SQL и тонкостей работы с языком. 

Проблемы включают предотвращение SQL-инъекций, использование параметризованных запросов, управление сложностью запросов, оптимизацию производительности и поддержание читаемости кода.

В [статье](https://blog.vaunt.dev/dynamic-sql-template-with-golang) рассмотрены стратегии и библиотеки, предназначенные для решения этих проблем, и представлена новая библиотека под названием **tqla**, которая использует пакет **text/template** для безопасной генерации динамических условных SQL-запросов. 

```t, err := tqla.New(tqla.WithPlaceHolder(tqla.Dollar), tqla.WithFuncMap(exampleFuncs))
if err != nil {
    return err
}

insertStmt, insertArgs, err:= t.Compile(`{{ $length := sub ( len . ) 1 }}
INSERT INTO 'todos' ('id', 'title', 'description', 'completed', 'created_at') 
VALUES {{ range $i, $v := . }}
( {{$v.Id}}, {{$v.Title}}, {{$v.Description}}, {{ $v.Complete }}, {{ $v.CreatedAt }} ){{if lt $i $length}},{{else}};{{end -}}
{{end}}`, todos)

if err != nil {
    return err
}

_, err := db.Exec(insertStmt, insertArgs...)
```

 [GitHub](https://github.com/vauntdev/tqla)",6103,12,2,goproglib
4220,2023-11-11 12:03:31+00:00,"**Гайд по разработке системы уведомлений в реальном времени с помощью Go + Kafka**:

**• **Что такое Kafka?
**• **Как настроить рабочее пространство проекта?
**• **Как создать модели пользователя и уведомлений?
**• **Как настроить Kafka producer?
**• **Как настроить Kafka consumer?
**• **Тестирование проекта

 [Читать](https://www.freecodecamp.org/news/build-a-real-time-notification-system-with-go-and-kafka/)",7509,19,14,goproglib
4219,2023-11-10 17:14:06+00:00,"**Сегодня четырнадцатый день рождения релиза Go с открытым исходным кодом**: за плечами у команды Go и сообщества два полнофункциональных релиза и другие важные фичи

️Выпуски Go 1.20 в феврале и Go 1.21 в августе
️Завезли profile-guided optimization и встроенное управление тулчейном
️Добавлена поддержка сбора профилей покрытия в бинарных сборках, созданных **go build**
️Совместимость еще больше улучшена за счет расширения соглашений об использовании **GODEBUG**
️Новый пакет структурированного логирования и многие другие изменения стандартной библиотеки

 Подробнее в [статье Расса Кокса](https://go.dev/blog/14years)",6412,32,1,goproglib
4218,2023-11-10 12:06:28+00:00,"‍️Коллекция тестовых заданий для самостоятельного выполнения от разных ИТ-компаний, собранная сообществом вместе с командой Хекслет: маст-хэв при подготовке к собесу.

 [GitHub](https://github.com/Hexlet/ru-test-assignments)",5874,15,3,goproglib
4217,2023-11-10 12:06:27+00:00,Хотите готовиться к собеседованию по Go и не только на реальных примерах? Тогда пост ниже для вас,5985,0,0,goproglib
4215,2023-11-09 20:24:56+00:00,"**Подводные камни конкурентности**: серия статей для Go-разработчика с простыми и наглядными примерами

[Горутины: основы](https://levelup.gitconnected.com/goroutines-think-you-know-go-basics-think-again-b585e1633588)
[Каналы: введение](https://levelup.gitconnected.com/go-channels-explained-more-than-just-a-beginners-guide-a67866d78f0f)
[Каналы: select & for range](https://levelup.gitconnected.com/select-for-range-channel-realizing-what-you-may-not-know-89db3b727c14)
[Планировщик горутин](https://levelup.gitconnected.com/goroutine-scheduler-revealed-youll-never-see-goroutines-the-same-way-again-3c159b01c25a)",9342,0,0,goproglib
4210,2023-11-09 16:46:05+00:00,"️С выпуском версии [9.3.0](https://github.com/redis/go-redis/releases/tag/v9.3.0) официальный клиент Redis делает большой шаг вперед благодаря прямой **поддержке JSON**

Простой пример того, как начать работу с JSON в Go-Redis:

```var ctx = context.Background()
client := redis.NewClient(&redis.Options{
 Addr: ""localhost:6379"",
})

type Bicycle struct {
 Brand       string
 Model       string
 Price       int
}

bicycle := Bicycle{
 Brand: ""Velorim"",
 Model: ""Jigger"",
 Price: 270,
}

_, err := client.JSONSet(ctx, ""bicycle:1"", ""$"", bicycle).Result()
if err != nil {
 panic(err)
}

res, err := client.JSONGet(ctx, ""bicycle:1"", "".Model"").Result()
if err != nil {
 panic(err)
}
fmt.Println(""bicycle:1 model is"", res)
```
#новости #инструменты",7214,67,0,goproglib
4209,2023-11-08 19:23:15+00:00," **Выпущены релизы Go 1.21.4 и 1.20.11 **

 Новый выпуск включает исправления безопасности `path/filepath` (CVE-2023-45283, CVE-2023-45284)

 [Анонс](https://groups.google.com/g/golang-announce/c/4tU8LZfBFkY)
 [Скачать](https://go.dev/dl/#go1.21.4)",5983,20,2,goproglib
4208,2023-11-08 07:19:08+00:00,"**Как генерировать уникальные идентификаторы в распределенных системах: 6 ключевых стратегий**

В распределенном окружении два узла могут одновременно назначать идентификаторы. Задача состоит в том, чтобы эти идентификаторы оставались уникальными, избегая дублирования и обеспечивая согласованность системы. Читайте подробнее на [Medium](https://levelup.gitconnected.com/how-to-generate-unique-ids-in-distributed-systems-6-key-strategies-37a8ab3b367d) или в PDF:

◆ UUID
◆ NanoID
◆ Sequence
◆ ObjectID
◆ Twitter Snowflake
◆ Sonyflake",6675,16,2,goproglib
4207,2023-11-07 20:02:12+00:00,"**Go Time**

 [Опыт, полученный на GopherCon 2023:](https://changelog.com/gotime/293) как организатора, ведущего воркшопов и докладчика
 [Семь смертных грехов Gо:](https://changelog.com/gotime/294) по мотивам доклада John Gregory на GopherCon ""**7 Deadly Gopher Sins**""
 [Что нового в криптографических библиотеках Go:](https://changelog.com/gotime/295) Filippo Valsorda и Roland Shoemaker из команды Go делятся новостями старой доброй криптографии

**Cup o' Go**
 [Gopls 0.14 с включенной телеметрией уже скоро](https://cupogo.dev/episodes/gopls-0-14-with-opt-in-telemetry-is-coming-and-eliav-lavi-talks-about-some-challenges-with-json) и многое другое
 [range over int & range over func](https://cupogo.dev/episodes/home-on-the-range-over-ints-and-funcs-go-security-with-juho-nurminen) в деталях и многое другое
 [Интервью с мейнтейнером testcontainers](https://cupogo.dev/episodes/be-unique-just-like-everyone-else-interview-with-testcontainers-maintainer-manuel-de-la-pena) и многое другое

#подкасты",5814,5,0,goproglib
4206,2023-11-07 18:36:05+00:00,"Динамика закрытия пулл-реквестов, прирост кодовой базы, активность разработчиков по часам и по дням недели и многое другое... Что только не придумают для оценки производительности разработчика.

**А в вашей команде есть метрики оценки личной производительности**? Если да, то какие и как они измеряются?

#холивар",5169,0,8,goproglib
4205,2023-11-07 06:59:05+00:00," **Результаты ежегодного опроса разработчиков StackOverflow: 20+ главных инсайтов 2023 года**

В данной статье мы собрали 20+ главных инсайтов, которые помогут лучше понять, что происходит в ИТ-сфере в мире.

 [Читать статью](https://proglib.io/sh/PWl3nH5vms)
 [Зеркало](https://proglib.tech/p/rezultaty-ezhegodnogo-oprosa-razrabotchikov-stackoverflow-20-glavnyh-insaytov-2023-goda-2023-10-26)",28746,6,0,goproglib
4204,2023-11-06 19:09:54+00:00,"**Обнаружение утечек памяти в Go-приложении**: лучшие практики и инструменты

Обзор инструментов, которые вы можете использовать для отслеживания утечек памяти, включая утечки в горутинах.

 [Читать](https://www.codemio.com/2023/05/detecting-memory-leaks-in-golang.html)",6504,19,13,goproglib
4203,2023-11-06 09:00:06+00:00,"Сборка мусора, модульное тестирование и горутины сделали Go лучшим выбором для **Krater**, кроссплатформенного приложения для локальной отладки приложений Laravel (да, тот самый PHP-фреймворк).

Несколько месяцев назад разработчики Krater решили мигрировать на Wails (Go), хотя изначально он был написан на Tauri (Rust). Под катом — опыт команды и предпосылки такого решения

 [Читать](https://blog.moonguard.dev/why-golang-instead-of-rust-to-develop-the-krater-desktop-app)",5656,16,0,goproglib
4202,2023-11-05 11:00:49+00:00,"[**Реализация обновляемой блокировки чтения и записи**](https://upstash.com/blog/upgradable-rwlock-for-go)[:](https://upstash.com/blog/upgradable-rwlock-for-go) гайд для Go-разработчика

Обычный RWMutex подходит в большинстве случаев. Но если задача требует долго удерживать блокировку записи, при этом большая часть времени уходит на подготовку к чтению, было бы здорово иметь блокировку чтения, которую можно «обновить» до блокировки записи. 

Команда Upstash столкнулась с этой проблемой и разработала [UpgradableRWMutex,](https://gist.github.com/sancar/d1663e90892cd12c839ae21841b79295) улучшенную версию стандартного sync.RWMutex.",5796,15,0,goproglib
4201,2023-11-05 07:26:34+00:00,"️ **Как научиться критически мыслить: 6 эффективных способов**

Критическое мышление позволяет принимать решения в условиях неопределённости, доносить свои идеи до команды, видеть ошибки в логике, замечать манипуляции. В статье [рассказываем](https://proglib.io/sh/HWnt5uifRd), откуда пошло это понятие и как можно развить критическое мышление.

**Считаете ли вы, что у вас развито критическое мышление?**

 — да, и это очень помогает мне в жизни и работе
 — да, но оно ничем не помогает
 — нет",5057,24,0,goproglib
4200,2023-11-04 19:32:24+00:00,"**Обзор архитектуры быстрого сборщика логов на Go**

[Доклад Владимира Витковского из Ozon на HighLoad++ 2022](https://youtu.be/0q9UyUlYPos?feature=shared) о лучших практиках, на которых основан быстрый сборщик логов, используемый в компании.

Владимир рассказывает, как c помощью этого инструмента удалось сократить издержки на сбор логов в 10 раз по CPU и добиться 100% доставляемости логов.

Вы узнаете:

️Как организована общая архитектура сборщика логов
️Как написать быстрый плагин для чтения логов из файлов
️Как оптимизировать внутреннюю обработку потока логов
️Как правильно распараллелить обработку
️Как гарантировать доставку",6388,19,0,goproglib
4199,2023-11-04 18:07:34+00:00,"**Type assertion на практике:** гайд для Go-разработчика

Type assertions (утверждения типа) представляют собой простой механизм, который обязательно должен быть в вашем наборе инструментов при работе с Go. Однако в нем есть некоторые важные особенности, о которых и пойдет речь в статье.

 Читайте на [Medium](https://medium.com/@jamal.kaksouri/mastering-type-assertion-in-go-a-comprehensive-guide-216864b4ea4d) или в PDF",6162,6,0,goproglib
4198,2023-11-03 19:37:05+00:00,"**Подборка лучших статей «Библиотеки программиста» за октябрь**: сохраняй в заметки, чтобы не пропустить #самыйсок

 [Эффективная работа с JSON в Go](https://proglib.io/p/effektivnaya-rabota-s-json-v-go-2023-10-16)
 [Лучшие практики Go: путь к чистому коду](https://proglib.io/p/luchshie-praktiki-go-put-k-chistomu-kodu-2023-10-09)
 [ТОП-8 книг по DevOps в 2023 году](https://proglib.io/p/top-8-knig-po-devops-2023-10-03)
 [6 сервисов для подготовки к техническим собеседованиям](https://proglib.io/p/6-servisov-dlya-podgotovki-k-tehnicheskim-sobesedovaniyam-2023-10-02)
️ [Карьерная карта: что это, как ее составить и почему она обязательно нужна разработчику](https://proglib.io/p/dorozhnaya-karta-chto-eto-kak-ee-sostavit-i-pochemu-ona-obyazatelno-nuzhna-razrabotchiku-2023-10-04)
️ [8 способов защиты от манипуляций на работе](https://proglib.io/p/8-sposobov-zashchity-ot-manipulyaciy-na-rabote-2023-10-06)
‍ [Женщины в ИТ: проблемы и преимущества сложной профессии](https://proglib.io/p/zhenshchiny-v-it-problemy-i-preimushchestva-slozhnoy-professii-2023-10-10)
 [8 лучших бесплатных курсов по ИИ и глубокому обучению](https://proglib.io/p/8-luchshih-besplatnyh-kursov-po-ii-i-glubokomu-obucheniyu-2023-10-12)
‍ [9 трендов в найме айтишников в 2023 году](https://proglib.io/p/9-trendov-v-nayme-aytishnikov-v-2023-godu-2023-10-13)
 [9 мифов об IT и найме айтишников](https://proglib.io/p/9-mifov-ob-it-i-nayme-aytishnikov-2023-10-17)
 [25 бесплатных AI-инструментов для разработчиков](https://proglib.io/p/25-besplatnyh-ai-instrumentov-dlya-razrabotchikov-2023-10-18)
️ [ТОП-10 бессерверных фреймворков](https://proglib.io/p/top-10-besservernyh-freymvorkov-2023-10-20)
 [Итог одной валютной удаленки: проработал месяц бесплатно и ушел с долгами](https://proglib.io/p/itog-odnoy-valyutnoy-udalenki-prorabotal-mesyac-besplatno-i-ushel-s-dolgami-2023-10-23)
 [20 лучших ноутбуков для программиста в 2023 году](https://proglib.io/p/20-luchshih-noutbukov-dlya-programmista-v-2023-godu-2023-10-25)
 [Как научиться критически мыслить: 6 эффективных способов](https://proglib.io/p/kak-nauchitsya-kriticheski-myslit-6-effektivnyh-sposobov-2023-10-27)",6573,5,2,goproglib
4196,2023-11-03 13:41:07+00:00,"️ **Дорожная карта Go-разработчика в 2023 году**

В статье рассмотрим версию дорожной карты по Go в 2023 году и подробно разберем основные темы для успешного старта в разработке.

 [Читать статью](https://proglib.io/sh/yjhLEpGuWd)
 [Зеркало](https://proglib.tech/p/dorozhnaya-karta-go-razrabotchika-v-2023-godu-2023-11-01)",6952,16,5,goproglib
4195,2023-11-02 18:21:08+00:00,"Apple [представила](https://www.apple.com/newsroom/2023/10/apple-unveils-new-macbook-pro-featuring-m3-chips/) новый MacBook Pro с процессорами семейства M3, которые делают один из лучших в мире профессиональных ноутбуков еще лучше. 14- и 16-дюймовые модели с M3 Pro и M3 Max доступны в новом цвете «черный космос». Хотите узнать подробнее? Смотрите [презентацию Apple Scary Fast на русском](https://youtu.be/Qr8ubRiC2oY?feature=shared) и всего за 6 минут.

А мы недавно [делали небольшую подборку](https://t.me/proglibrary/8110) ноутбуков для разрабов, где перечислили самые легкие, автономные и производительные. Скажем честно, не всем она понравилась. Так или иначе, поделитесь своим опытом 

Какие характеристики для вас наиболее важны? Накидайте свой топ ноутбуков в комментарии

#холивар",6522,27,5,goproglib
4193,2023-11-02 07:34:06+00:00,"Вы когда-нибудь задумывались, как старые программы Unix все еще могут работать на современных компьютерах? Посетите новый проект Расса Кокса rsc/unix на GitHub — там много интересного

◆ [pdp11](https://github.com/rsc/unix/blob/main/pdp11) — симулятор PDP-11
◆ [v6unix](https://github.com/rsc/unix/blob/main/v6unix) — симулятор Research Unix Sixth Edition (V6)
◆ [v6run](https://github.com/rsc/unix/blob/main/v6run) — CLI для v6unix
◆ [v6web](https://github.com/rsc/unix/blob/main/v6web) — веб-интерфейс для v6unix (копию можно посмотреть [здесь](https://research.swtch.com/v6/))",6006,4,1,goproglib
4192,2023-11-01 19:59:21+00:00,"**Запускаем Go-бинари прямо из репозитория
**
Про возможность установки бинаря из репозитория через `go install` знают все. Менее известным фактом является то, что мы можем запускать двоичные файлы прямо из репозитория, например, так:

$ `go run github.com/cosmtrek/air@latest

`Никакой установки, никакого клонирования, никакого Makefile, и ваш бинарь всегда в актуальном состоянии.

**В таком случае нужно всегда быть онлайн? **

️`go run` подключается к `go proxy` при каждом вызове для проверки на наличие более новой версии. 

️Но мы можем обойти это поведение, заменив `@latest` фиксированным номером версии (например, `@v1.45.0`). Тогда команда будет нормально работать в автономном режиме.

#tip",6547,37,0,goproglib
4190,2023-11-01 11:31:49+00:00,"**Подходы к дебаггингу concurrency**

Доклад Сергея Петрова из Selectel на конференции Подлодка Go Crew о том, что может пойти
не так при дебаге concurrency,
как понять, что возникли проблемы,
и где их искать в коде.

Что интересного узнаете из доклада:

️Где именно мы можем ошибиться
️Как работают горутины под капотом
️Инструменты для дебага из коробки
️Дебаггеры
️Полезные библиотеки

[Смотреть](https://youtu.be/4givzihQ9fg?si=bu5Cb2mphp0fek6K)",6182,12,0,goproglib
4189,2023-10-31 18:08:18+00:00,Собрали для вас несколько страшных историй по случаю Хэллоуина. Ждем ваши истории в комментариях,6303,0,0,goproglib
4184,2023-10-31 09:00:10+00:00,"**️ ТОП-10 бессерверных фреймворков**

Существует множество различных бессерверных фреймворков, каждый из которых предназначен для определенных задач. В этой статье рассмотрим 10 наиболее популярных из них.

[Читать статью](https://proglib.io/sh/NPVvgoq1Sk)",5342,14,3,goproglib
4182,2023-10-30 19:05:36+00:00,"Хоть лучший фреймворк Go — это отсутствие фреймворка, о производительности популярных решений стоит знать. Ловите мини-подборку на простых примерах:

[Go Gin vs Fiber: Hello World performance](https://medium.com/deno-the-complete-reference/go-gin-vs-fiber-hello-world-performance-6863e597b654)
[Go Gin vs Fiber: HTTPS Hello World performance](https://medium.com/deno-the-complete-reference/go-gin-vs-fiber-https-hello-world-performance-d26a53d62ada)
[Go: Gin vs Fiber vs Echo Hello World performance](https://medium.com/deno-the-complete-reference/go-gin-vs-fiber-vs-echo-hello-world-performance-a69a76a64d34)",6156,0,0,goproglib
4179,2023-10-30 07:01:37+00:00,"**Фаззинг-тестирование** — эффективный метод выявления граничных условий, которые классическое тестирование может не охватывать. 

 Автор статьи [выводит фаззинг-тестирование на новый уровень](https://mionskowski.pl/posts/unmasking-go-html-parser-bug/) с помощью **дифференциального фаззинга**, в результате использования которого находит XSS-уязвимость в пакете **html**. 

Кроме всего прочего исследование показывает отличный пример того, как знания разработчика можно применить в сфере информационной безопасности.",5750,7,0,goproglib
4177,2023-10-29 20:49:26+00:00,"`errors.Is` и `errors.As` на практике: совет по обработке ошибок от [Matt Boyle](https://x.com/MattJamesBoyle/status/1717789845601255553) для Go-разработчика.

#tip",5733,18,4,goproglib
4176,2023-10-29 10:00:41+00:00,"[▶️](https://antonz.org/ferretdb-tutorial/)[**Интерактивное руководство по работе с FerretDB**](https://antonz.org/ferretdb-tutorial/)[,](https://antonz.org/ferretdb-tutorial/) альтернативой MongoDB, написанной на Go

Это — интерактивная версия руководства [__How to Pass Basic MongoDB CRUD Operations With FerretDB__](https://blog.ferretdb.io/mongodb-crud-operations-with-ferretdb/)__ __из__ __официального блога FerretDB. 

Из примеров, которые можно модифицировать и запускать в духе обычного playground, вы научитесь выполнять операции CRUD с FerretDB.",5569,5,0,goproglib
4175,2023-10-28 18:01:29+00:00,"‍**Tebeka Shorts** — серия коротких видео о различных фичах Go от Miki Tebeka из Ardan Labs.

[Смотреть плейлист](https://youtube.com/playlist?list=PLADD_vxzPcZCbjdiSiyLcnEeb2I1ELM7i&si=H3v1POukf7yRyh9N)",5532,4,0,goproglib
4174,2023-10-28 07:32:44+00:00,"**Полный гайд по работе с пакетом context в Go: эффективное управление конкурентностью**

Что такое контекст?
Создание контекста
Распространение контекста
Получение значений из контекста
Отмена контекста
Timeouts и deadlines
Контекст в HTTP-запросах
Контекст в операциях с базой данных
Лучшие практики использования контекста
Распространенные ошибки, которых следует избегать
Утечки контекста и горутины
Использование контекста со сторонними библиотеками
Контекст (новые функции, добавленные в Go 1.21)

 [Читать](https://medium.com/@jamal.kaksouri/the-complete-guide-to-context-in-golang-efficient-concurrency-management-43d722f6eaea)",7238,40,0,goproglib
4173,2023-10-27 19:21:13+00:00,"**Новости и обновления популярных инструментов: подборка для Go-разработчика**

Хоть в опросе [**The State of WebAssembly 2023**](https://blog.scottlogic.com/2023/10/18/the-state-of-webassembly-2023.html) было не так много участников, Go занял четвертое место по популярности среди языков для проектов WASM
 Команда Go продолжает вести [коллекцию тематических исследований Go](https://go.dev/solutions/case-studies), охватывающих такие компании, как American Express, Dropbox, Cloudflare и Uber

[Go OpenAI 1.16.0](https://github.com/sashabaranov/go-openai/releases/tag/v1.16.0) — Go-клиент для доступа к OpenAI API с поддержкой ChatGPT, GPT-3, GPT-4, DALL·E 2, Whisper
[slog-otel 1.2.1](https://github.com/remychantenay/slog-otel/releases/tag/v1.2.1) — реализация Go-обработчика slog для обеспечения корреляции записей логов с Open-Telemetry spans
[trufflehog 3.60.4](https://github.com/trufflesecurity/trufflehog/releases/tag/v3.60.4) — инструмент для поиска и верификации API-ключей и других секретов
[Algernon 1.15.4](https://github.com/xyproto/algernon/releases/tag/v1.15.4) — небольшой автономный веб-сервер на чистом Go с поддержкой Lua, Teal, Markdown, HTTP/2, QUIC, Redis и PostgreSQL
[Air 1.49](https://github.com/cosmtrek/air/releases/tag/v1.49.0) — live reload для Go-приложений
[pgroll 0.3](https://github.com/xataio/pgroll/releases/tag/v0.3.0) — CLI-инструмент для безопасной и обратимой миграции схемы PostgreSQL
[GoCV 0.35](https://github.com/hybridgroup/gocv/releases/tag/v0.35.0) — привязки для библиотеки изображений OpenCV 4
[Fiber 2.50.0](https://github.com/gofiber/fiber/releases/tag/v2.50.0) — веб-фреймворк для Go на основе Express.js
[Mockery 2.36](https://github.com/vektra/mockery/releases/tag/v2.36.0) — автогенератор кода моков для Go
[elem-go 0.7](https://github.com/chasefleming/elem-go/releases/tag/v0.7.0) — типобезопасная библиотека для создания HTML-элементов и управления ими (с помощью htmx-хэлперов)
[go-echarts 2.3.2](https://github.com/go-echarts/go-echarts) — простая, но мощная библиотека для визуализации данных
[go-quartz 0.8](https://github.com/reugn/go-quartz/releases/tag/v0.8.0) — zero-dependency библиотека для выполнения отложенных задач
[bloom 3.6](https://github.com/bits-and-blooms/bloom/releases/tag/v3.6.0) — реализация фильтра Блума
[oasdiff
1.8.1](https://github.com/Tufin/oasdiff/releases/tag/v1.8.1) — инструмент для сравнения и обнаружения критических изменений в спецификациях OpenAPI
[SCS 2.6](https://github.com/alexedwards/scs/releases/tag/v2.6.0) — инструмент для управления HTTP-сессиями в веб-приложениях
[fsnotify 1.7](https://github.com/fsnotify/fsnotify/releases/tag/v1.7.0) — библиотека для предоставления уведомлений файловой системы
[LakeFS 1.0](https://github.com/treeverse/lakeFS/releases/tag/v1.0.0) — Git для ваших данных
[golangci-lint 1.55.1](https://github.com/golangci/golangci-lint/releases/tag/v1.55.1) — более быстрый способ запуска линтеров Go

#новости #чтопроисходит",5832,13,0,goproglib
4172,2023-10-27 12:01:57+00:00,"** 20 лучших ноутбуков для программиста в 2023 году**

Выбираем самые легкие, автономные и производительные ноутбуки для кодинга.

На карточках перечислили самые производительные. Но для кодинга есть и другие важные параметры — остальные подборки смотрите в нашей [статье](https://proglib.io/sh/Ljyl7s04to).",5231,0,0,goproglib
4165,2023-10-27 09:23:49+00:00,"‍‍ Кажется, **Goland** значительно обходит **VS Code**, если судить по ответам Go-разработчиков [на Reddit](https://www.reddit.com/r/golang/comments/17dvp7c/what_is_the_best_ide_for_golang/) (хотя опрос Go-разработчиков [говорит обратное](https://t.me/goproglib/3635)).

Там, конечно, и Notepad++/Vim с другими инструментами тоже упоминают, но первые два инструмента все равно доминируют.

**А какую(-ой) IDE/редактор кода используете вы?**

 — Goland
 — VS Code
 — другой инструмент (напишу в комментарии)",5679,524,29,goproglib
4164,2023-10-26 18:05:10+00:00,"Представьте, что у вас есть комфортная зарплата с одним условием — вы создаёте проект, который всегда хотели создать.

Какой это будет проект? Он не обязательно должен быть связан с программированием

#холивар",5617,6,21,goproglib
4162,2023-10-26 12:00:40+00:00,"Радио в терминале, и все это на Go? Встречайте: [RadioGoGo](https://github.com/Zi0P4tch0/RadioGoGo).

️Инструмент сочетает в себе элегантность TUI BubbleTea с широкими возможностями API RadioBrowser. Основные особенности:

Изящный и интуитивно понятный TUI
Возможность поиска, просмотра и прослушивания радиостанции из обширной глобальной базы данных
Интегрированное воспроизведение с использованием ffplay и многое другое",5691,34,0,goproglib
4161,2023-10-26 09:55:21+00:00,"Критика по поводу обработки ошибок в Go распространена, но какие есть решения? Их гораздо меньше. 

Автор [предлагает](https://flak.tedunangst.com/post/bango) синтаксис (на скрине), который можно расширить до типичного подхода `if err != nil` с помощью (весьма экспериментального) инструмента [Bango](https://humungus.tedunangst.com/r/fungo/v/tip/f/bango/main.go).

Ожидаемо, что на Hacker News эта статья [привела к холивару](https://news.ycombinator.com/item?id=37947763), в котором мнения варьировались от «Мне нравится, как Go это делает» до «Вместо этого используйте Rust».",5270,29,9,goproglib
4160,2023-10-25 20:30:03+00:00,"**Для чего в Go используются** **синтаксическая конструкция** **‘…’?**

Синтаксическая конструкция ‘…’ в Go используется в нескольких контекстах, в частности для:

1️⃣Определения функции с переменным количеством аргументов (вариативная функция). Она позволяет функции принимать неопределенное количество аргументов одного типа. Например:

`func sum(nums ...int) int {
   total := 0
   for _, num := range nums {
      total += num
   }
   return total
}`

2️⃣Передачи элементов среза как отдельных аргументов функции:
`
nums := []int{1, 2, 3, 4}
sum(nums...)

`
3️⃣Определения** **массивов неизвестной заранее длины: 

`x := [...]int{1, 2, 3}` // Здесь Go определит длину массива на основе количества элементов",5199,59,2,goproglib
4159,2023-10-25 12:31:28+00:00," **Carbon** — простой семантический пакет Go с большим количеством функций, упрощающих и ускоряющих создание, анализ и сравнение даты и времени.

 [GitHub](https://github.com/golang-module/carbon)",5279,20,2,goproglib
4158,2023-10-25 09:18:08+00:00,"**Подводные камни, с которыми сталкиваются новички в Go**: серия статей от одного из разработчиков [go-mysql-server](https://github.com/dolthub/go-mysql-server) (Dolt)

[Часть 1](https://www.dolthub.com/blog/2023-08-16-go-pitfalls/). Как избежать ловушек в Go: простые примеры
[Часть 2](https://www.dolthub.com/blog/2023-09-08-much-ado-about-nil-things/). Размышления о nil в Go
[Часть 3](https://www.dolthub.com/blog/2023-10-20-golang-pitfalls-3/). Размышления о срезах в Go",5570,14,0,goproglib
4156,2023-10-24 15:06:00+00:00,"**Разработка движка регулярных выражений с нуля: пошаговый гайд для Go-разработчика**

Хотя вам, вероятно, не нужна еще одна библиотека регулярных выражений, здесь автор проводит по каждому этапу разработки и объясняет с помощью простых иллюстраций.

• Parsing
• Building the state machine
• Matching

 [Читать](https://rhaeguard.github.io/posts/regex/)",5337,7,0,goproglib
4155,2023-10-24 09:43:16+00:00," **GoCity** — инструмент для визуализации исходного кода Go в виде зданий города. 

Он может дать лучшее представление о том, как вы структурировали код, либо вы можете просто использовать его по фану. Здесь можно увидеть примеры для:

sirupsen/logrus
gin-gonic/gin
spf13/cobra
gohugoio/hugo

 [GitHub](https://github.com/rodrigo-brito/gocity)",5681,35,6,goproglib
4154,2023-10-23 20:37:25+00:00,"**Zero-Configuration Environment Variables**: как настроить переменные окружения по умолчанию с помощью стандартной библиотеки.

 [Читать](https://www.talkativedev.com/go-blog/zero-configuration-environment-variables)",5563,14,0,goproglib
4152,2023-10-23 12:12:05+00:00," Команда Git [представила](https://github.blog/2023-10-16-measuring-git-performance-with-opentelemetry/) Go-проект [trace2receiver](https://github.com/git-ecosystem/trace2receiver), который представляет собой компонент [trace receiver](https://opentelemetry.io/docs/collector/trace-receiver/) для демона [Custom Collector OpenTelemetry](https://opentelemetry.io/docs/collector/). Он получает телеметрию Git Trace2 от локальных команд Git, преобразует ее в формат OpenTelemetry и пересылает другим компонентам OpenTelemetry.

Этот компонент полезен, если вы хотите собрать данные о производительности команд Git, агрегировать данные от нескольких пользователей для создания панелей мониторинга производительности, построить распределенные трассировки вложенных команд Git или понять, как размер и форма ваших репозиториев Git влияют на производительность команд.

 [GitHub](https://github.com/git-ecosystem/trace2receiver)",5454,5,0,goproglib
4151,2023-10-23 09:00:06+00:00,"️ [**Постоянное обновление, или Как сохранить авторизацию API-клиента**](https://appliedgo.net/refresh/)

Конкурентный доступ к переменной? Вам нужен `mutex`! Или оператор `sync/atomic`, если он подходит для вашего юзкейса. Хотя и он на самом деле не нужен. Оператор `select` — это элегантная альтернатива.

Christoph Berger [раскрывает](https://appliedgo.net/refresh/) проблему поддержания актуальности токена доступа в веб-приложениях, когда множество клиентских сессий требует непрерывного потока данных от API. 

Основное внимание уделяется методу **dynamic futures** в Go, который позволяет инициализировать и обновлять токен доступа из централизованного места, делая его доступным для многочисленных клиентских сессий.",5407,12,0,goproglib
4150,2023-10-22 19:38:44+00:00,"При развертывании приложений в продакшене сборка двоичных файлов с информацией о версии и другими метаданными помогает улучшить процессы мониторинга, регистрации данных и отладки за счет добавления идентификационной информации для отслеживания версий сборок.

Поскольку эти значения постоянно меняются, внесение этих данных в исходный код и их изменение при каждой сборке становится непростой задачей, где могут возникнуть ошибки. 

В Go эту проблему можно решить с помощью опции `-ldflags` команды `go build`. Флаг `-ldflags` в Go используется для передачи определенных инструкций компоновщику (linker) во время сборки программы. 

Этот флаг предоставляет возможность изменять поведение компоновщика и управлять различными аспектами процесса сборки. Вот некоторые примеры того, как может быть использован флаг `-ldflags`:

1️⃣**Установка значений переменных во время компиляции:** можно использовать флаг для установки значений переменных во время компиляции, что может быть полезно для внедрения информации о версии, времени сборки или других метаданных в исполняемый файл.

$ `go build -ldflags ""-X main.version=1.0.0""`

2️⃣**Оптимизация размера бинарного файла:** флаг может быть использован для удаления информации об отладке и символов таблицы, что может значительно уменьшить размер исполняемого файла.

$ `go build -ldflags ""-s -w""`

3️⃣**Изменение поведения компоновщика:** можно также изменять другие параметры компоновщика, например, задавать кастомный файл запуска или изменять поведение компоновщика по умолчанию.

$ `go build -ldflags ""-extldflags '-static'""`

4️⃣**Изменение имени выходного файла:** флаг может быть использован для задания кастомного имени выходного файла во время компиляции.

$ `go build -ldflags ""-o custom_name""`

 [Подробнее](https://www.digitalocean.com/community/tutorials/using-ldflags-to-set-version-information-for-go-applications-ru)

#tip",5549,31,0,goproglib
4149,2023-10-22 15:06:06+00:00," **Эффективная работа с JSON в Go**

В статье рассматриваются основные подходы для работы с JSON в языке Go. Большое внимание уделено определениям из документации, а также конкретным примерам.

 [Читать статью](https://proglib.io/sh/5xyMjHQwKm)
 [Зеркало](https://proglib.tech/p/effektivnaya-rabota-s-json-v-go-2023-10-16)",45095,9,1,goproglib
4148,2023-10-22 07:43:01+00:00,"[️](https://github.com/a-h/templ)[**Templ**](https://github.com/a-h/templ) — язык HTML-шаблонов для Go с отличными инструментами для разработчиков.

Инструмент позволяет создавать компоненты, которые отображают фрагменты HTML и компонуют их для создания экранов, страниц, документов и приложений.

[Под капотом:](https://templ.guide/)

• Рендеринг на стороне сервера: можно развернуть как бессерверную функцию, Docker-контейнер или стандартную программу Go.
• Статический рендеринг: создавайте статические HTML-файлы для деплоя по вашему выбору.
• Скомпилированный код: компоненты компилируются в код Go.
• Использование Go: вызовите любой код Go и используйте стандартные операторы `if`, `switch` и `for`.
• Не требует использования клиентского или серверного JavaScript.
• Поставляется с автодополнением IDE.
`
templ Hello(name string) {
    <div>Hello, { name }</div>
}

templ Greeting(person Person) {
    <div class=""greeting"">
      @Hello(person.Name)
    </div>
}

`Кстати, инструмент среди прочих недавно обсудили в [подкасте «РАДИО-Т»](https://radio-t.com/p/2023/10/21/podcast-880/) (00:26:52-00:50:36).",5976,30,0,goproglib
4146,2023-10-21 19:30:53+00:00,"‍ [**Lip Gloss**](https://github.com/charmbracelet/lipgloss) — Go-проект от авторов популярных CLI-инструментов (bubbletea, gum, mods, charm и др.), который представляет из себя что-то вроде CSS для стилизации макетов терминала. 

Недавно, кстати, была выпущена версия 0.9.0, которая добавляет возможность рендеринга таблиц. Анонс нового выпуска и примеры использования нового функционала ищите на [GitHub-странице проекта.](https://github.com/charmbracelet/lipgloss/releases/tag/v0.9.0)",6095,30,0,goproglib
4145,2023-10-21 18:07:03+00:00,"**System Design 101**

Готовитесь к собеседованию по проектированию систем или просто хотите понять принцип работы сложных систем? Тогда репозиторий ByteByteGo точно для вас.

 [GitHub](https://github.com/ByteByteGoHq/system-design-101#table-of-contents)",11348,28,0,goproglib
4143,2023-10-21 09:02:36+00:00,"Популярный Go-ютубер Anthony GG делится своим подходом к структурированию проектов на Go.

 [Смотреть](https://youtu.be/dJIUxvfSg6A?feature=shared)",5372,45,3,goproglib
4142,2023-10-21 06:00:08+00:00,"Интенсив «Архитектуры и шаблоны проектирования» для middle и senior-разработчиков

Проверьте свои знания, ответив на 8 вопросов – https://proglib.io/w/68a66cf6

** Кому подойдет?**

Разработчикам, которые знают любой объектно-ориентированный язык программирования.

** Как проходит обучение?**

В течение всего интенсива вы будете создавать игру «Звездные войны». У вас будет собственный корабль, который научится летать по полю битвы, стрелять основным оружием и применять секретное оружие.

[ Подробная программа обучения](https://proglib.io/w/cc9737cd)

[ Купить со скидкой 30%](https://proglib.io/w/49d8ab15)

__Промокод__ **MIDDLE** __действует__ до 25 октября",5343,3,3,goproglib
4141,2023-10-20 18:03:36+00:00," Только топовые и интересные доклады в нашей подборке:

 [NATS.io: Beyond hello world](https://youtu.be/0ZQsjVKvtTU?feature=shared) / David Gee
 [An Intro to Pocketbase](https://youtu.be/y5E1dox9ZEA?feature=shared) / Haseeb Majid
 [How to Rewrite a Service](https://youtu.be/LP0sTNruvaM?feature=shared) / Michal Bock
 [OpenTelemetry with AWS](https://youtu.be/wQ-T1VfzWQs?feature=shared) / Luke Stoward
 [A Purist's Guide to Type-Driven Design in Go](https://youtu.be/wrt4YvplECk?feature=shared) / Angus Morrison
 [Go and Rust: Together at Last](https://youtu.be/KMij50gbwk8?feature=shared) / Barnaby Keene
 [Go + CUE - A Match Made In Heaven!](https://youtu.be/X1qpZBuNlgU?feature=shared) / Paul Jolly
 [Bundling Tasks with Taskfile](https://youtu.be/J6U9M1alnsE?feature=shared) / Talha Altinel
 [Featherweight Go](https://youtu.be/Sw53HGyCGcU?feature=shared) / Raymond Hu, Julien Lange, Bernardo Toninho",5319,10,0,goproglib
4139,2023-10-20 09:34:04+00:00,"Хотите увидеть, как серверы падают из-за неправильной обработки повторных запросов?

Sam Rose для блога Encore создал** **[интерактивный гайд,](https://encore.dev/blog/retries) в котором исследует различные методы повтора запросов к серверу и показывает, почему одни методы лучше других. В качестве бонуса — небольшая реализация идеальной стратегии на Go.",18249,25,0,goproglib
4138,2023-10-20 06:00:07+00:00,"Курсы для тех, кто хочет получить новые скиллы или перейти в другую компанию на грейд выше

**Начните с демо-доступа или бесплатных вебинаров с преподавателем**

[ Математика для Data Science](https://proglib.io/w/021f1bf6)

Самый хардкорный курс по вышмату! Идеален для тех, кто переходит в DS.

[ Алгоритмы и структуры данных](https://proglib.io/w/f6170987)

Курс, который на практике познакомит со сложными алгоритмами и научит писать более короткий и эффективный код.

[ Базовые модели ML и приложения](https://proglib.io/w/42b538c8)

Познакомит с основными моделями машинного обучения, заложите основу для дальнейшего изучения более сложных нейронных сетей

[Архитектуры и шаблоны](https://proglib.io/w/49d8ab15)
[проектирования](https://proglib.io/w/49d8ab15)

Освойте основные паттерны проектирования и прокачайте навыки построения архитектуры программного обеспечения

Приятного обучения и ваш промокод на скидку 30% до 25 октября – **MIDDLE**",5010,3,0,goproglib
4137,2023-10-19 19:36:29+00:00," Если бы у вас была возможность выбрать новую фичу, которая появится в следующей версии Go, что бы это было? 

Поделитесь в комментариях

#холивар",4796,4,43,goproglib
4136,2023-10-19 18:55:52+00:00,"Многие языки предлагают возможность писать код и выполнять его непосредственно в командной строке, а в Go нет такой возможности. 

 [gosh](https://github.com/nickwells/utilities/blob/master/gosh/_gosh.DOC.md) восполняет этот пробел. Автор Nick Wells [представил](https://youtu.be/Lv41EtkdZdU?feature=shared) его на недавней встрече сообщества London Gophers.

$ `gosh -pln '""Hello, World!""'`
$ `gosh -n -b 'count := 0' -e 'count++' -a-pln 'count'`
$ `gosh -i -w-pln 'strings.ReplaceAll(string(_l.Text()), ""mod/pkg"", ""mod/v2/pkg"")' -- abc.go xyz.go `
$ `gosh -http-handler 'http.FileServer(http.Dir(""/tmp/xxx""))'`",5177,30,0,goproglib
4134,2023-10-19 11:03:02+00:00,"[**Почему gokrazy действительно крут?**](https://xeiaso.net/blog/gokrazy/)

Знаете ли вы, что существует минимальная Go-ориентированная реализация Linux для систем вроде Raspberry Pi [и не только.](https://gokrazy.org/platforms/) 

Gokrazy позволяет деплоить Go-программы как [appliances](https://en.wikipedia.org/wiki/Computer_appliance) на таких устройствах (представьте себе что-нибудь минимальное, например Alpine Linux, но только для Go).

[Читайте подробнее](https://xeiaso.net/blog/gokrazy/) о том, что это за проект и почему именно Go использовался для реализации. Также автор довольно глубоко рассматривает различные понятия, связанные с GNU/Linux.

 [Сайт проекта](https://gokrazy.org/) & [GitHub](https://github.com/gokrazy)",5143,19,1,goproglib
4132,2023-10-18 19:25:39+00:00," Добавляем иконку для исполняемого файла Windows, созданного на Go:

1️⃣Готовим иконку

$ `magick convert icon.png -define icon:auto-resize=256,128,64,48,32,16 icon.ico`

$ `convert icon_16.png icon_32.png icon_48.png icon_256.png -colors 256 icon.ico`

2️⃣Создаем файлы .syso

$ `go install github.com/akavel/rsrc@latest`

$ `rsrc -arch 386 -ico icon.ico`
$ `rsrc -arch amd64 -ico icon.ico`

3️⃣Go автоматически выберет любой соответствующий файл .syso в каталоге пакета main и включит его в исполняемый файл, созданный для Windows

 [Подробнее](https://hjr265.me/blog/adding-icons-for-go-built-windows-executable/)

#go #tip",5289,23,0,goproglib
4130,2023-10-18 13:01:24+00:00,"[**Улучшение HTTP server routing в Go 1.22**](https://habr.com/ru/articles/768034/)

Скудные возможности [http.ServeMux](https://pkg.go.dev/net/http#ServeMux) привели к появлению целой индустрии сторонних библиотек. [Новый мультиплексор](https://github.com/golang/go/issues/61410) значительно сократит разрыв с существующими сторонними пакетами и упростит жизнь Go-разработчикам. 

[Eli Bendersky](https://eli.thegreenplace.net/2023/better-http-server-routing-in-go-122/) делится мыслями о новом мультиплексоре (mux) и сравнивает новый подход с примерами из блога:

[REST Servers in Go: Part 1 - standard library](https://eli.thegreenplace.net/2021/rest-servers-in-go-part-1-standard-library/)
[REST Servers in Go: Part 2 - using a router package](https://eli.thegreenplace.net/2021/rest-servers-in-go-part-2-using-a-router-package/)

 [Читать перевод](https://habr.com/ru/articles/768034/)",5486,20,3,goproglib
4127,2023-10-17 07:01:23+00:00,"**Pixel 2** — новая, быстрая библиотека 2D игр на Go. Это обновленный форк оригинальной библиотеки [Pixel](https://github.com/faiface/pixel) от [faiface](https://github.com/faiface)[,](https://github.com/faiface) задуманный как инициатива сообщества по продолжению разработки библиотеки.

 [GitHub](https://github.com/gopxl/pixel) & [Wiki](https://github.com/gopxl/pixel/wiki)",5461,15,0,goproglib
4126,2023-10-16 18:11:55+00:00,"**Profile-guided optimization в Go 1.21

**Процесс оптимизации компилятора с использованием информации о поведении приложений называется **Profile-Guided Optimization (PGO)** (также известный как **Feedback-Directed Optimization (FDO)**).

Это [перевод](https://habr.com/ru/articles/766460/) того самого гайда от Michael Pratt в официальном блоге Go. И да, в комментариях делятся, что в некоторых кейсах использование PGO дало прирост производительности 5-7%. 

 [Читать](https://habr.com/ru/articles/766460/)",5776,10,0,goproglib
4125,2023-10-16 11:00:31+00:00," **Взгляд на чистую архитектуру в Go в соответствии с подходом Go-Kit**

[**Go Kit**](https://github.com/go-kit) — это набор инструментов для разработки микросервисов на Go. Он делит приложение на три уровня:

Transport
Endpoint
Service

[Читать](https://orenrose.medium.com/clean-architecture-in-golang-with-go-kit-e5b716a3b881)",6213,21,5,goproglib
4124,2023-10-16 07:00:59+00:00,"** ТОП-10 книг по Linux в 2023 году**

Популярные книги по изучению Linux на русском языке, опубликованные за последние несколько лет.

[Читать статью](https://proglib.io/sh/sdnlOtqNvL)",5184,0,0,goproglib
4112,2023-10-15 19:51:04+00:00," Одной из идиоматических практик Go является концепция 

return early, return often

 Вместо глубоко вложенного кода, Go призывает разработчиков обрабатывать условия (особенно ошибки) и возвращать управление как можно скорее. 

 Это делает код более читабельным и простым в сопровождении.

#go #tip by [Matt Boyle](https://x.com/MattJamesBoyle/status/1712733080492835218)",6721,56,0,goproglib
4111,2023-10-15 07:41:32+00:00,"Если вам нужно обеспечить доступ к SQLite, но при этом не нужен cgo, решением может стать [Sqinn-Go.](https://github.com/cvilsmeier/sqinn-go)

Sqinn-Go под капотом использует инструмент [Sqinn,](https://github.com/cvilsmeier/sqinn) который запускает Sqinn как дочерний процесс (os/exec) и взаимодействует с ним через stdin/stdout/stderr. Затем дочерний процесс Sqinn выполняет работу SQLite.

 [GitHub](https://github.com/cvilsmeier/sqinn-go)",5220,15,1,goproglib
4110,2023-10-14 07:01:31+00:00,"**Самый быстрый поиск пути на Go без аллокаций и СМС**

Любите оптимизации, специализированные структуры данных и трюки с битами? Тогда читайте новый материал Искандера, где он ограничивает область задачи поиска пути в игре [Roboden,](https://github.com/quasilyte/roboden-game) чтобы создавать лучшие решения конкретно под неё.

[Читать](https://habr.com/ru/articles/766882/)",5090,13,0,goproglib
4109,2023-10-13 18:57:15+00:00," Ловите самые топовые доклады с конференции **GopherCon UK 2023**, которая прошла в августе этого года:

 [Memory Management in Go: The good, the bad and the ugly](https://youtu.be/SKenR18NM04?feature=shared) / Liam Hampton
 [Monolith, Microservices or Both: Modern application development using Service Weaver](https://youtu.be/tb4NfUaU7yE?feature=shared) / Robert Grandl
 [Structured Logging for the Standard Library](https://youtu.be/8rnI2xLrdeM?feature=shared) / Jonathan Amsterdam
 [Fun with Algorithms and Data Structures](https://youtu.be/9NqW4tbjdG4?feature=shared) / Beth Anderson
 [Level-Up Real-time Go Applications with Ringbuffers](https://youtu.be/8uD0Wjb_yu8?feature=shared) / Fawaz Ghali
 [Logic Programming in Go](https://youtu.be/qDjia_U1Kfg?feature=shared) / Walter Schulze
 [The 7 Deadly Sins for Gophers](https://youtu.be/R3y2Lw2jczQ?feature=shared) / John Gregory
 [The context package internals](https://youtu.be/mfgBhGu5pco?feature=shared) / Damiano Petrungaro
 [Efficient Debugging and Logging with OpenTelemetry in Go](https://youtu.be/5rjTdA6BM1E?feature=shared) / Konstantin Ostrovsky
[Learn how debuggers work by building your own one](https://youtu.be/8Uk9ROLGHVE?si=lkF-eLTcI4m7xmjY) / Sayani Bhattacharjee
 [Understanding the Go Compiler](https://youtu.be/qnmoAA0WRgE?feature=shared) / Jesús Espino",7447,24,0,goproglib
4108,2023-10-13 11:21:42+00:00,"‍ **Женщины в ИТ: проблемы и преимущества сложной профессии**

Айтишницы поделились профессиональным опытом и рассказали о стереотипах и сложностях, с которыми им пришлось столкнуться на карьерном пути.

 [Читать статью](https://proglib.io/sh/YmPlZU1uh5)
 [Зеркало](https://proglib.tech/p/zhenshchiny-v-it-problemy-i-preimushchestva-slozhnoy-professii-2023-10-10)",4434,17,10,goproglib
4107,2023-10-13 06:00:10+00:00,"**Самые полезные каналы для программистов в одной подборке!**

Сохраняйте себе, чтобы не потерять 

Для всех

[Библиотека программиста](http://t.me/proglibrary) — новости, статьи, досуг, фундаментальные темы
[Книги для программистов](https://t.me/progbook)
[IT-мемы](http://t.me/itmemlib)
[Proglib Academy](https://t.me/proglib_academy) — тут мы рассказываем про обучение и курсы

PHP

[Библиотека пхпшника](https://t.me/phpproglib)
[Вакансии по PHP, Symfony, Laravel](https://t.me/phpdevjob)
[Библиотека PHP для собеса](https://t.me/php_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по PHP](https://t.me/php_problems_lib) — код, квизы и тесты

Python

[Библиотека питониста](https://t.me/pyproglib)
[Вакансии по питону, Django, Flask](https://t.me/pydevjob)
[Библиотека Python для собеса](https://t.me/py_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Python](https://t.me/py_problems_lib) — код, квизы и тесты

Java

[Библиотека джависта](http://t.me/javaproglib) — полезные статьи по Java, новости и обучающие материалы
[Библиотека Java для собеса](https://t.me/java_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Java](https://t.me/java_problems_lib) — код, квизы и тесты
[Вакансии для java-разработчиков](https://t.me/javadevjob)

Data Science

[Библиотека Data Science](http://t.me/dsproglib) — полезные статьи, новости и обучающие материалы
[Библиотека Data Science для собеса](https://t.me/ds_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Data Science](https://t.me/ds_problems_lib) — код, квизы и тесты
[Вакансии по Data Science, анализу данных, аналитике, искусственному интеллекту](https://t.me/datajob)

Go

[Библиотека Go разработчика ](https://t.me/goproglib)— полезные статьи, новости и обучающие материалы по Go
[Библиотека Go для собеса](https://t.me/go_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Go](https://t.me/go_problems_lib) — код, квизы и тесты
[Вакансии по Go](https://t.me/godevjob)

C++

[Библиотека C/C++ разработчика](https://t.me/cppproglib) — полезные статьи, новости и обучающие материалы по C++
[Библиотека C++ для собеса](https://t.me/cpp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по C++](https://t.me/cpp_problems_lib) — код, квизы и тесты
[Вакансии по C++](https://t.me/cppdevjob)

Другие профильные каналы

[Библиотека фронтендера](https://t.me/frontendproglib)
[Библиотека шарписта](https://t.me/csharpproglib)
[Библиотека мобильного разработчика](https://t.me/mobileproglib)
[Библиотека хакера](https://t.me/hackproglib)
[Библиотека devops’a](https://t.me/devopsslib)
[Библиотека тестировщика](https://t.me/testerlib)

Каналы с вакансиями

[Вакансии по фронтенду, джаваскрипт, React, Angular, Vue ](https://t.me/jsdevjob)
[Вакансии по C#, .NET, Unity ](https://t.me/csharpdevjob)[Вакансии по PHP, Symfony, Laravel ](https://t.me/phpdevjob)
[Вакансии по DevOps & SRE ](https://t.me/devopssjob)
[Вакансии для мобильных разработчиков ](https://t.me/mobiledevjob)
[Вакансии по QA тестированию ](https://t.me/testerrjob)
[InfoSec Jobs — вакансии по информационной безопасности](https://t.me/hackdevjob)

Чтобы добавить папку с нашими каналами, нажмите [сюда](https://t.me/addlist/17y04EbNMrlhNjZi)

Также у нас есть боты:
[Бот с IT-вакансиями](http://t.me/proglib_job_bot)
[Бот с мероприятиями в сфере IT](http://t.me/event_listener_bot)

Мы в других соцсетях:
[VK](https://vk.com/proglib)
[YouTube](https://www.youtube.com/c/%D0%91%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%81%D1%82%D0%B0)
[Дзен](https://zen.yandex.ru/proglib)
[Facebook](https://www.facebook.com/proglib/?locale=ru_RU)
[Instagram](https://www.instagram.com/proglibrary/)",4780,8,0,goproglib
4105,2023-10-12 18:00:36+00:00,"‍ **Все, что вы всегда хотели знать о выводе типа** (и немного больше)

Вывод типа позволяет компилятору Go определять типы__ __без явных аннотаций. В этом материале, основанном на выступлении Robert Griesemer из команды Go__ __на GopherCon 2023, рассказывается обо всем, что вам нужно знать по часто неправильно понимаемой теме.

 [Читать](https://go.dev/blog/type-inference)",5332,5,0,goproglib
4103,2023-10-12 07:07:07+00:00," **Лучшие практики Go: путь к чистому коду**

В статье познакомимся с рекомендациями по написанию чистого кода на Go. Разберемся на примерах с особенностями языка и применим на практике основные синтаксические конструкции.

 [Читать статью](https://proglib.io/sh/GYTIXZMdvp)
 [Зеркало](https://proglib.tech/p/luchshie-praktiki-go-put-k-chistomu-kodu-2023-10-09)",48208,13,4,goproglib
4099,2023-10-11 19:10:36+00:00,"**gRPC и Go на практике**

Вы, вероятно, слышали о gRPC, если еще не использовали её. Она особенно популярна для межсервисной связи благодаря своей эффективности, языковой независимости и встроенной поддержке таких вещей, как MTLS.

️Выше представлен простой пример начала работы с gRPC от [Matt Boyle](https://x.com/MattJamesBoyle/status/1712033805643534349).

#go #tip",5461,18,0,goproglib
4097,2023-10-11 11:37:50+00:00,"**Потоки vs горутины**: любопытный взгляд на конкурентность в Go с точки зрения потоков в Rust и Linux.

 [Читать](https://shane.ai/posts/threads-and-goroutines/)",5435,2,4,goproglib
4095,2023-10-10 19:50:50+00:00,"Вслед за недавними обновлениями [прилетели](https://groups.google.com/g/golang-announce/c/iNNxDTCjZvo) новые релизы **Go 1.21.3 и 1.20.10**, которые исправляют баги в net/http (CVE-2023-39325).

Обновления популярных Go-инструментов: 

**•** [Mods](https://github.com/charmbracelet/mods/releases/tag/v1.0.0) 1.0.0 — CLI ИИ-инструмент от создателей Charm
**• **[Viper 1.17](https://github.com/spf13/viper/releases/tag/v1.17.0) — мощное и гибкое решение для конфигурации Go-приложений**
• **[requests 0.23.5](https://github.com/carlmjohnson/requests/releases/tag/v0.23.5) —** **удобная библиотека HTTP-запросов для Go**
• **[task 3.31.0](https://github.com/go-task/task/releases/tag/v3.31.0) — простой в использовании инструмент для запуска/сборки задач**
• **[Roaring 1.6](https://github.com/RoaringBitmap/roaring/releases/tag/v1.6.0) — реализация растровой структуры данных Roaring**
• **[Betteralign 0.3.1](https://github.com/dkorunic/betteralign/releases/tag/v0.3.1) — инструмент для обнаружения структур, элементы которых можно лучше выровнять**
• **[Ginkgo 2.13](https://github.com/onsi/ginkgo/releases/tag/v2.13.0) – современный фреймворк для тестирования

#чтопроисходит",5299,9,0,goproglib
4093,2023-10-10 09:51:09+00:00,"** Написание сервиса рекомендаций к фильмам Netflix/Disney+ на Go**

Под катом — [пошаговый гайд](https://medium.com/@movieofthenight/writing-a-netflix-disney-movie-recommender-with-go-c46c2f2c25d4) по разработке простого веб-сервиса REST API на Go, который принимает от пользователя некоторую информацию (страна, подписки, жанр, ключевое слово и тип фильма) и предлагает рекомендации с соответствующими ссылками. Код — на [GitHub,](https://github.com/movieofthenight/streaming-availability-api/tree/main/tutorials/go-movie-recommender) а готовый продукт — на [reccio.com.](https://www.reccio.com/)",6323,15,2,goproglib
4092,2023-10-09 18:55:40+00:00,"Обречен ли пакет `encoding/json`? 

На GitHub началось [обсуждение,](https://github.com/golang/go/discussions/63397) цель которого — создание официального предложения по улучшению или, возможно, замене пакета `json` для устранения недостающей функциональности, недостатков API, ограничений производительности и поведенческих изъянов. 

Список недостатков достаточно длинный, впрочем как и список предлагаемых улучшений. А вы что думаете?",5495,42,6,goproglib
4091,2023-10-09 07:00:34+00:00,"️ **Антон Околелов, Go-тимлид в команде Karuna, делится опытом поиска «мёртвого**»** кода в проекте и оценки покрытия тестами «живого**»** кода**

В Go 1.20 завезли возможность сбилдить приложение с флагом `cover`: `go build -cover`. После запуска приложения будет собираться статистика, показывающая, какие части кода были выполнены, а какие — нет.

Это, конечно, было сделано для интеграционных тестов, когда приложение запускается целиком в каких-то сценариях (а не через `go test`), но, вероятно, можно попробовать использовать этот кейс и по-другому: **запустить прямо в проде**, подождать и посмотреть, какие участки кода в реальности никогда не запускаются.

 [Подробнее](https://habr.com/ru/companies/karuna/articles/764326/)",5850,25,2,goproglib
4090,2023-10-08 19:56:53+00:00,"Мнение Владимира Балуна о том, что должен знать начинающий Go-разработчик.

 [Смотреть](https://youtu.be/sr8u1V_nno4)

#карьера",5547,42,25,goproglib
4089,2023-10-08 07:29:05+00:00,"Как-то мы упустили из виду, что ребята из Evrone пообщались с Робом Пайком о карьере, охватывающей четыре десятка лет, об эволюции языка Go за последние 10 лет и перспективах на будущее.

 [Читать интервью](https://evrone.ru/blog/interviews/rob-pike-interview)",5795,35,1,goproglib
4088,2023-10-07 18:20:55+00:00,"**Boxes and Glue** — Go-библиотека для рендеринга PDF с использованием алгоритмов TeX. Основные фичи: 

 Высокая скорость
 Высокое качество вывода
 Расширяемость
 Возможности OpenType и формирование шрифта с помощью harfbuzz

[Пример кода](https://github.com/speedata/boxesandglue#sample-code) поможет понять используемую концепцию более подробно.

[GitHub](https://github.com/speedata/boxesandglue)",5685,16,0,goproglib
4087,2023-10-07 09:58:20+00:00,"Мини-обзор стека Go-разработчика с акцентом на практику и достоинства/недостатки каждой библиотеки: 

• kong, 
• req, 
• echo, 
• worker, 
• sqlite3 driver, 
• ginkgo, 
• golangci-lint, 
• lo,
• log/slog. 

 [Читать](https://jtarchie.com/posts/2023-09-30-my-preferred-go-stack)",6079,9,4,goproglib
4086,2023-10-06 19:34:25+00:00,"**В Go есть такое понятие, как «затенение» (англ. shadowing) переменной. Что оно из себя представляет?**

В Go происходит «затенение», когда переменная, объявленная во внутренней области видимости, имеет то же имя, что и переменная во внешней области видимости. 

В результате внутренняя переменная «затеняет» внешнюю, делая её недоступной в своей области видимости.

Пример:

`package main

import (`
`    ""fmt""
)

func main() {
    x := 10
    `
`    if true {`
`        x := 5` // здесь происходит затенение внешней переменной x
`        fmt.Println(x)` // выводит 5, т. к. используется внутренняя переменная x
`    }`

`    fmt.Println(x)` // выводит 10, т. к. используется внешняя переменная x
`}`

«Затенение» может быть особенно запутывающим, когда оно происходит с результатами функций, такими как **err**. Например, часто в Go вы можете видеть следующий код:

`value, err := someFunction()
if err != nil {`
`    `// обработка ошибки
`}`

`// ...`

`value2, err := anotherFunction()` // здесь может произойти «затенение», если использовать := вместо =
`if err != nil {`
`    `// обработка ошибки
`}`

Если вы случайно используете **:=** вместо **=**, когда присваиваете результат **anotherFunction()**, вы создадите новую переменную **err**, которая «затенит» внешнюю переменную **err**. Это может привести к тому, что ошибки будут проигнорированы или обработаны неправильно.

Как обнаружить shadowing в коде? Есть не сколько способов: использовать встроенные инструменты Go или линтеры.

1. `go vet -shadow ./...`
2. `golangci-lint run --enable shadow`
3. 
$ `go get -u golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow`
$ `go vet -vettool=$(which shadow)`",5511,39,24,goproglib
4084,2023-10-06 12:01:20+00:00," Олег Козырев: [«Архитектура проекта на Golang»
](https://youtu.be/e-D28OoWsOg?si=21EDl6PujDPNdf_k) Тигран Ханагян: [«Архитектура Go проекта на практике»](https://youtu.be/hDwqFRUuykQ?si=Gg7KLLOCV4fQ8UeW)

Anthony De Meulemeester:
 [How I Structure New Projects In Golang](https://youtu.be/dJIUxvfSg6A?si=jBlrVWXZ2RBt1ZpD)
 [How To Structure Your Golang (API) Projects!?](https://youtu.be/EqniGcAijDI?si=7aCkCv0xa5JZ6DF5)

#матчасть",6613,22,0,goproglib
4083,2023-10-06 07:47:32+00:00," **Вышли версии Go 1.21.2 и 1.20.9**

Выпуск включают исправления безопасности для cmd/go и директивы ""//line"" (CVE-2023-39323).

[Подробнее](https://groups.google.com/g/golang-announce/c/XBa1oHDevAo)",5373,11,0,goproglib
4081,2023-10-05 11:05:30+00:00,"‍ **6 сервисов для подготовки к техническим собеседованиям**

Мы не понаслышке знаем, какие глупые вопросы иногда задают на собеседованиях — этими историями с нами поделились вы. А теперь рассказываем, где готовиться к нормальным техническим собеседованиям, на которых вас не попросят заполнить бегемотами комнату. Подборка сервисов ждет вас в нашей статье

[Читать статью](https://proglib.io/p/6-servisov-dlya-podgotovki-k-tehnicheskim-sobesedovaniyam-2023-10-02)
[Зеркало](https://proglib.tech/p/6-servisov-dlya-podgotovki-k-tehnicheskim-sobesedovaniyam-2023-10-02)",5050,0,0,goproglib
4076,2023-10-05 07:18:05+00:00,"** Константин Соколов и Сергей Мачульскис, бэкенд-разработки в Positive Technologies, делятся опытом работы с пакетом context в Go**

На их взгляд, он идеально выражает философию Go: образцовый интерфейс, постоянное развитие пакета и использование самых распространенных приемов Go.

 [Читать](https://habr.com/ru/companies/pt/articles/764850/)",6011,21,0,goproglib
4075,2023-10-04 20:02:38+00:00,"**Go — язык программирования, который отлично подходит для разработки облачных приложений. Что облачные технологии и облачные приложения из себя представляют теоретически?**

Так звучат определения по мнению Cloud Native Computing Foundation:

**•** __Облачные технологии позволяют создавать и запускать масштабируемые приложения в современных динамических окружениях — общедоступных, частных и гибридных облаках__.

**•** __Облачные технологии делают слабосвязанные системы устойчивыми, управляемыми и наблюдаемыми. В сочетании с надежной автоматизацией они позволяют __разработчикам__ часто и предсказуемо вносить важные изменения с минимальными усилиями__.

Исходя из этого, **облачные приложения** — больше, чем просто приложения, которые работают в облаке. Они также должны отвечать некоторым требованиям/атрибутам:

**Масштабируемость** — способность показывать ожидаемое поведение в условиях значительных колебаний спроса вверх и вниз. 
**Слабая связанность** — свойство системы и стратегия проектирования, согласно которой компоненты системы знают лишь самый минимум о любых других компонентах. 
**Устойчивость** — способность системы восстанавливаться после ошибок и сбоев.
**Управляемость** — простота (или ее отсутствие), с которой можно изменить поведение системы для обеспечения безопасности, бесперебойной работы и соответствия меняющимся требованиям. 
**Наблюдаемость** — способность определения внутреннего состояния системы по наблюдаемым результатам.",4914,11,2,goproglib
4074,2023-10-04 13:56:04+00:00,"️На популярном ресурсе **Learn Go with Tests** [появился](https://github.com/quii/learn-go-with-tests/releases/tag/15.1.0) новый раздел, посвященный работе без моков

Новая глава погрузит вас в fakes и contracts, которые могут принести много пользы вашей стратегии тестирования.

 [Подробнее](https://quii.gitbook.io/learn-go-with-tests/testing-fundamentals/working-without-mocks)",5464,0,0,goproglib
4072,2023-10-04 06:00:08+00:00,"**️Помогите **[**«Библиотеке программиста»**](https://t.me/proglibrary) **начать публиковать сторис**

Каналы могут публиковать сторис в телеграм — правда, для этого им нужно набрать достаточно голосов пользователей. А голосовать могут только те, у кого есть премиум.

**Что мы будем публиковать в сторис?**
Логические задачки — чтобы тренировать мозги
Только важные новости — оперативно
‍Истории компаний, инструментов и софта по особым поводам (например, историю Linux в честь его дня создания)
Анонсы наших вебинаров и самых интересных статей

Если вы хотите увидеть наши сторисы в [«Библиотеке программиста»](https://t.me/proglibrary), вот что нужно сделать:
1️⃣ обновить телеграм на телефоне
2️⃣ перейти по ссылке ️ https://t.me/proglibrary?boost
3️⃣ нажать кнопку «голосовать»",5045,28,0,goproglib
4071,2023-10-03 19:51:14+00:00," С вами было такое, что в выходные не успевали переделать и половины из того, что планировали? И даже физические и электронные ToDo-списки не выручат?

‍️Может стоит попробовать использовать простой календарь?

 **Calendar Blocking** — метод планирования дел для повышения продуктивности, который позволяет контролировать время работы и отдыха с использованием календаря. 

Валерий Жила в недавнем треде подробно написал про него. Говорит, что это очень простой и действенный метод повышения продуктивности и контроля своего ментального здоровья.

**Что нужно делать?**

 Берём свой календарь, заполняем какими-то рамками — например, время отхода ко сну и подъема. Стараемся планировать крупные дела наперёд, а по ходу дня всякую мелочь. Не слишком подробно (блоки от 30 минут с буферами), честно и быстро.

**Что это даёт?**

 Помогает концентрироваться на одном деле за раз. Помогает принимать оперативные решения и улучшать work-life balance. Помогает снизить тревожность и разгрузить память — великолепный «второй мозг» для планирования.

️**Важно**

Calendar Blocking подойдёт далеко не всем. Если вы творец, живущий спонтанной ловлей момента на кончиках пальцев, или вы просто любите спонтанные встречи с друзьями скорее всего, метод не зайдёт. 

О том, как это работает на практике, как и с помощью каких инструментов всё это сделать, читайте в его треде: в [соцсети](https://x.com/ValeriiZhyla/status/1544208146738159618) [X](https://x.com/ValeriiZhyla/status/1544208146738159618) или в приложении [Threadreader](https://threadreaderapp.com/thread/1544208146738159618.html), если бывший Твиттер у вас не открывается.

 **Используете что-то подобное для планирования своего дня?** Поделитесь в комментариях

#холивар",4604,9,4,goproglib
4070,2023-10-03 11:07:09+00:00,"**JSON Benchmarks** — репозиторий, в котором представлены бенчмарки различных реализаций Go JSON (в скобках — количество импортов).

• JSONv1 — encoding/json (1.3M)
• JSONv2 — github.com/go-json-experiment/json (47)
• JSONIterator — github.com/json-iterator/go (17k)
• SegmentJSON — github.com/segmentio/encoding/json (347)
• GoJSON — github.com/goccy/go-json (2k)
• SonicJSON — github.com/bytedance/sonic (517)

 [GitHub](https://github.com/go-json-experiment/jsonbench)",4967,0,0,goproglib
4067,2023-10-03 07:34:03+00:00,"**Подборка лучших статей «Библиотеки программиста» за сентябрь**: сохраняй в заметки, чтобы не пропустить #самыйсок

 [ТОП-9 книг по языку программирования Go в 2023 году: от новичка до профессионала](https://proglib.io/p/top-8-knig-po-yazyku-programmirovaniya-go-v-2023-godu-ot-novichka-do-professionala-2023-09-05)
 [ТОП-9 не самых очевидных компаний для стажировки в ИТ](https://proglib.io/p/top-9-ne-samyh-ochevidnyh-kompaniy-dlya-stazhirovki-v-it-2023-09-11)
 [9 способов настройки градиента цели для поддержания мотивации](https://proglib.io/p/9-sposobov-nastroyki-gradienta-celi-dlya-podderzhaniya-motivacii-2023-09-15)
️ [ТОП-27 плагинов для Visual Studio Code в 2023](https://proglib.io/p/top-27-rasshireniy-dlya-visual-studio-code-v-2023-2023-09-18)
️ [Как программисту искать (и найти) работу за границей в 2023 году](https://proglib.io/p/kak-programmistu-iskat-i-nayti-rabotu-za-granicey-v-2023-godu-2023-09-19)
 [Приоритизация задач по методу MoSCoW: как за 5 минут научиться грамотно расставлять приоритеты](https://proglib.io/p/prioritizaciya-zadach-po-metodu-moscow-kak-za-5-minut-nauchitsya-gramotno-rasstavlyat-prioritety-2023-09-20)
 [Как я входил в IT? Результаты опроса «Библиотеки программиста»](https://proglib.io/p/kak-ya-vhodil-v-it-rezultaty-oprosa-biblioteki-programmista-2023-09-25)",4959,6,0,goproglib
4066,2023-10-02 18:00:59+00:00,"Очередной гайд про использование интерфейсов в Go? А вот и нет!

️Цель этого руководства — углубиться в практику и объяснить все доступным языком. Автор создает простой интерфейс для взаимодействия с базой данных и пишет несколько тестов.

 [Читать](https://dumpster.hashnode.dev/using-interfaces-in-go)",6399,12,0,goproglib
4065,2023-10-02 10:00:07+00:00," **grpcurl** — CLI-инструмент, который позволяет взаимодействовать с gRPC-серверами. Своего рода curl для gRPC-серверов, разработанный на Go.

Несколько простых примеров использования:
$ `grpcurl grpc.server.com:443 my.custom.server.Service/`Method
$ `grpcurl -d '{""id"": 1234, ""tags"": [""foo"",""bar""]}' grpc.server.com:443 my.custom.server.Service/Method`
$ `grpcurl localhost:8787 list`

 [GitHub](https://github.com/fullstorydev/grpcurl)",5470,30,0,goproglib
4063,2023-10-01 18:00:45+00:00,"Переменная **GOMAXPROCS** ограничивает количество потоков операционной системы, которые могут одновременно выполнять код Go.

В Docker-контейнере, развернутом в Kubernetes, Go захватит столько потоков, сколько доступно в системе, даже если контейнер ограничен.

Это означает, что ваше приложение может работать медленнее. К счастью, есть очень простое решение!

Просто добавьте в `main.go`: `import _ ""go.uber.org/automaxprocs"",

`где «_» вызовет функцию init() пакета.

Как вы уже поняли, [automaxprocs](https://github.com/uber-go/automaxprocs) от команды Uber автоматически устанавливает **GOMAXPROCS** в соответствии с квотой процессора Linux-контейнера. Может это и не «лучшая практика», но свою задачу выполняет. 

#tip by [Matt Boyle](https://x.com/mattjamesboyle/status/1439932425342173189)",5569,40,4,goproglib
4062,2023-10-01 13:58:52+00:00,Нас уже больше 14 000 ! Спасибо за интерес к «Библиотеке Go-разработчика».,4752,44,0,goproglib
4060,2023-10-01 08:10:21+00:00,"Go отлично подходит для специалистов по кибербезопасности. Это подтверждает огромное количество инструментов, которых с каждым днем появляется всё больше.  

Jozef Reisinger, старший инженер по безопасности в Empatica, приводит и другие аргументы в пользу использования Go в этой области и представляет практическое применение, написав  простой Go-инструмент для определения версии TLS сервера.

[Часть 1: введение](https://jreisinger.blogspot.com/2023/09/go-for-cybersecurity-learning.html) 
[Часть 2: продолжение](https://jreisinger.blogspot.com/2023/09/go-for-cybersecurity-tools.html)",5751,10,4,goproglib
4059,2023-09-30 18:38:03+00:00,"Владимир Балун делится опытом прохождения собеса в Яндекс и [рассказывает про его различные секции.](https://youtu.be/LgdJkfugtwc?si=OuMLJ-ap_tJ5SNG8)

⏱️Таймкоды:

[00:00](https://m.youtube.com/watch?v=LgdJkfugtwc&t=0s) — Введение
[00:08](https://m.youtube.com/watch?v=LgdJkfugtwc&t=8s) — Разговор с HR по телефону
[00:25](https://m.youtube.com/watch?v=LgdJkfugtwc&t=25s) — Алгоритмические секции
[02:15](https://m.youtube.com/watch?v=LgdJkfugtwc&t=135s) — Секция по System Design
[03:22](https://m.youtube.com/watch?v=LgdJkfugtwc&t=202s) — Финальные секции
[04:59](https://m.youtube.com/watch?v=LgdJkfugtwc&t=299s) — Заключение",5438,33,3,goproglib
4058,2023-09-30 11:38:03+00:00,"Видишь такое и думаешь: «Зачем тогда использовать Go, если у него нет будущего?». Согласны?

На Хабре, кстати, недавно появился любопытный [перевод,](https://habr.com/ru/articles/763990/) который не похож на пресловутые «Rust vs Go». Автор использует одну и ту же задачу и популярные библиотеки для обоих языков, поэтому в нем могут быть некоторые детали, на которых не акцентировали внимание в других сравнениях.",4836,4,22,goproglib
4057,2023-09-30 08:28:48+00:00,"**Game Bytes** — ежемесячная серия, посвященная миру разработки игр на GitHub, в которой представлены обновления игровых движков, игры с открытым исходным кодом, моды, карты и многое другое.

[Knight Dreams](https://js13kgames.com/entries/knight-dreams) — бесконечная аркада на JavaScript и, абсолютно заслуженно, игра месяца.

**Обновления игр и игровых движков**:

[Roboden](https://store.steampowered.com/app/2416030/Roboden/) — изобретательная стратегия в реальном времени. В [последнем выпуске](https://store.steampowered.com/news/app/2416030/view/3683435976305654298?l=english) представлена ​​новая среда Inferno с новыми угрозами.
[Aaaaxy](https://divverent.itch.io/aaaaxy) — 2D-платформер-головоломка, который чертовски сложно объяснить, но команда GitHub сделала это.
[Crazee Rider](https://github.com/KevEdwards/CrazeeRiderElectron) — гонки на мотоциклах, подобные игре 80-х годов. Почему бы не окунуться немного в прошлое?
[️Обновлен мод Scavengers в Beyond All Reason.](https://www.reddit.com/r/beyondallreason/comments/169r6et/warning_updated_scavengers_are_active_in_this/) Из анонса вы узнаете не только о новом игровом процессе, но и о тяжелой работе, проделанной при разработке мода.
[️Unreal Engine 5.3](https://docs.unrealengine.com/5.3/en-US/unreal-engine-5.3-release-notes/) (хотя исходный код не открыт, подписчики имеют доступ к нему через GitHub).

Игровые новости, свежие карты, моды, инструменты и многое другое читайте в [статье.](https://github.blog/2023-09-29-game-bytes/)

#разработкаигр",4387,7,0,goproglib
4056,2023-09-30 08:28:48+00:00,"В новом выпуске **Game Bytes** от GitHub упомянуты несколько игр и инструментов для разработки игр, которые написаны на языке Go. И это не может не радовать. 

Вот несколько упомянутых в статье инструментов, которые использовались в разработке: 

[Ebitengine —](https://github.com/hajimehoshi/ebiten) игровой движок 2D, написанный на Go.
[Oto](https://github.com/hajimehoshi/oto) — низкоуровневая Go-библиотека для воспроизведения звука на нескольких платформах.
[Tmx](https://github.com/fardog/tmx) — парсер TMX, написанный на Go.

Подробнее",4750,6,1,goproglib
4055,2023-09-29 18:02:04+00:00,"Вас ждут темы, касающиеся паттернов микросервисной архитектуры и DI. Ну и не обошлось без Go-собесов.

[Микросервисная архитектура для собеседования: Transactional outbox](https://youtu.be/yD49j29EKB0?si=ATfKkd8hr_x1wfdh)
[Dependency Injection на примере Uber fx](https://youtu.be/KRdrH9a98HQ?si=zQ3I2MeU0aXKsOg4)
[Микросервисная архитектура: Circuit Breaker](https://youtu.be/DTwudxT8uMo?si=RNMGTAROme83Z666)
[Открытое собеседование на Go-разаботчика, часть 1](https://youtu.be/Yu5mkS9axKA?si=MVbqGfgnYgCRL_jR)
[Собеседование на Go-разаботчика, System Design](https://youtu.be/cTHGqKgKBUA?si=MwCuFTbgnpc8rKYE)",5534,10,3,goproglib
4053,2023-09-29 14:02:06+00:00,"️ ‍ **FrankenPHP 1.0 Beta** — еще один сервер приложений для PHP, написанный на Go и построенный на основе [Caddy](https://caddyserver.com/), который упрощает деплой PHP-приложений и привносит в PHP новые функции.

Если эта идея звучит знакомо, возможно, вы уже столкнулись с RoadRunner, еще одним сервером PHP-приложений на базе Go, который использует совершенно другой подход.

 [Подробнее](https://dunglas.dev/2023/09/the-php-revolution-is-underway-frankenphp-1-0-beta/)",5076,7,11,goproglib
4052,2023-09-29 11:14:56+00:00," **Повышаем качество код-ревью: 7 полезных советов**

В данной статье мы рассмотрим 7 практических советов, следуя которым можно значительно повысить качество проверки кода.

[Читать статью](https://proglib.io/sh/EAe16YWga0)
[Зеркало](https://proglib.tech/p/povyshaem-kachestvo-kod-revyu-7-poleznyh-sovetov-2023-09-26)",4722,0,0,goproglib
4041,2023-09-28 18:21:58+00:00,"️ Go продолжает развиваться, а вместе с ним развивается и вся экосистема. В частности, появляются новые и обновляются существующие фреймворки. 

Если бы вы начали разработку крупномасштабного веб-приложения на Go с нуля со всеми новомодными фичами, какой фреймворк вы бы использовали?

#холивар",5135,3,14,goproglib
4039,2023-09-28 11:08:07+00:00," **Cross-origin resource sharing** (CORS) — механизм современных браузеров, который позволяет предоставить веб-страницам доступ к ресурсам другого домена.

Eli Bendersky разбирается с CORS и показывает, что нужно знать Go-разработчику про этот механизм при разработке веб-приложений.

 [Читать](https://eli.thegreenplace.net/2023/introduction-to-cors-for-go-programmers/)",5798,12,1,goproglib
4038,2023-09-28 07:36:06+00:00,"️**Failsafe-go** — новая библиотека для создания отказоустойчивых Go-приложений. Она позволяет обернуть код различными [«политиками»,](https://failsafe-go.dev/policies) которые можно комбинировать и составлять по мере необходимости. Политики включают: Retry, Circuit Breaker, Rate Limiter, Timeout, Bulkhead, and Fallback.

 [Подробнее](https://failsafe-go.dev/)",6791,20,10,goproglib
4037,2023-09-27 20:02:00+00:00,"Вам нужно быстро удалить модуль? Используйте none:

$ `go get modernc.org/sqlite@none`

Эта команда удалит модуль из go.mod.

#tip",5586,77,0,goproglib
4036,2023-09-27 19:01:08+00:00,️ Рай для Go-разраба выглядит примерно так,5565,105,16,goproglib
4033,2023-09-27 07:23:05+00:00,"️**Команда Go наконец-то представила **[**свою позицию относительно организации модуля Go**](https://go.dev/doc/modules/layout)

Распространенный вопрос, который возникает у начинающих Go-разработчиков: «Как организовать проект?» с точки зрения расположения файлов и каталогов. 

Цель [документа](https://go.dev/doc/modules/layout) — предоставить некоторые рекомендации, которые помогут ответить на этот вопрос. Чтобы максимально эффективно его использовать, убедитесь, что вы знакомы с основами модулей Go.",10067,57,5,goproglib
4032,2023-09-26 19:21:14+00:00,"[Интересные докладчики и не менее интересные темы.](https://www.youtube.com/live/7A7Cq9w0G9Y?si=XpffDHtGGv6-30Ew) Погнали:

Дмитрий Логовский, руководитель группы разработки «Оформление заказа».  

Доклад «Как заставить вашу базу-данных держать 20K RPS, варианты масштабирования и их минусы» о том, как правильно скейлить вашу БД от 1 RPS до 20К RPS, какие подходы к масштабированию существуют и какие неочевидные минусы есть в этих подходах.

Антон Коновалов, руководитель отдела разработки продукта «Сегменты и триггерные коммуникации».

Доклад «RoaringBitmap: что это такое и как мы это используем» о том, что такое битмапы и как устроены RoaringBitmap, как с ними работать в Go и как это используется в Ozon при работе с сегментами.

Владислав Сидоров, руководитель группы разработки «Инструменты поисковой оптимизации».
 
Доклад «Protocol Buffers: про то что все знают или не знают» про protobuf: типы данных, сообщения, нумерация полей, перечисления, коллекции, возможности безопасного обновления контракта и многое другое.

⏱️Таймкоды:

[5:15](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=315s) Приветствие

[7:13](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=433s) «Как заставить вашу БД держать 20к RPS: варианты масштабирования и их минусы» - Дмитрий Логовский
[8:22](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=502s) 1. Репликация
[19:09](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=1149s) 2. Партиционирование
[25:19](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=1519s) 3. Шардирование
[31:09](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=1869s) Вопросы

[44:21](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=2661s) «RoaringBitmap: что это и как мы это используем» — Антон Коновалов
[45:55](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=2755s) 1. Что такое битмапы
[51:01](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=3061s) 2. При решении каких задач мы используем bitmap в отделе «Сегменты и триггерные коммуникации»
[58:52](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=3532s) Как написать свой маленький bitset на Go
[1:08:12](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=4092s) 3. RoaringBitmap
[1:19:20](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=4760s) Вопросы

[1:32:46](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=5566s) «Protocol Buffers: про то, что все знают или не знают» — Владислав Сидоров
[1:33:09](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=5589s) Введение
[1:35:55](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=5755s) Style guide
[1:37:36](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=5856s) Скалярные типы
[1:39:00](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=5940s) Enum'ы
[1:40:05](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=6005s) Коллекции
[1:42:32](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=6152s) Демонстрация
[1:48:17](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=6497s) Базовые правила
[2:02:05](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=7325s) OneOf
[2:05:30](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=7530s) Вопросы

[2:17:20](https://m.youtube.com/watch?v=7A7Cq9w0G9Y&t=8240s) QR с фидбеком

#чтопроисходит",5431,14,2,goproglib
4031,2023-09-26 17:01:04+00:00,"Есть ли у вас собственный проект на Go с открытым исходным кодом? Неважно, где и как вы его используете: для рабочих проектов или в личных целях. Это в любом случае интересно. Если их несколько, расскажите об одном, который больше всего достоин внимания.

🫶Ждем ваши проекты в комментариях

#инструменты",4680,14,15,goproglib
4030,2023-09-26 08:29:06+00:00,"**Практический взгляд на пакет slogtest**

В пакете slog есть обработчик, который определяет формат вывода логов по умолчанию: один выводит JSON, а другой key=value. В дополнение к ним slog позволяет относительно легко создать кастомные обработчики. Если хотите погрузиться в тему подробнее, есть целое [руководство по написанию последних](https://github.com/golang/example/blob/master/slog-handler-guide/README.md).

Но как протестировать этот самый кастомный обработчик? На помощь приходит пакет [testing/slogtest](https://pkg.go.dev/testing/slogtest). Он очень прост в использование и помогает среди прочего убедиться, что ваш обработчик соблюдает все необходимые правила. Под катом — практический взгляд на достоинства и недостатки тестирования обработчика с помощью slogtest

 [Читать](https://telemachus.me/slogtest)",5361,11,1,goproglib
4029,2023-09-25 19:24:15+00:00,"**fx** долгое время был полезным инструментом для просмотра JSON-файлов, но за дело взялся SRE из Google [Антон Медведев](https://github.com/antonmedv).

‍Антон переписал **fx** с нуля, добавив новый тематический вид TUI, поиск по регулярным выражениям, нечеткий поиск и поддержку «даже самых массивных JSON-файлов». 

Поистине крутой инструмент и отличный пример использования преимуществ Go.

[fx 30.0.0](https://github.com/antonmedv/fx/releases/tag/30.0.0)",6909,29,1,goproglib
4027,2023-09-25 13:15:20+00:00," **9 способов настройки градиента цели для поддержания мотивации**

Разбираемся, как настроить себя идти до конца, преодолевая препятствия и лень.

[Читать статью](https://proglib.io/sh/5wglDFOsVP)

#саморазвитие",4677,2,1,goproglib
4026,2023-09-25 07:13:07+00:00,"[**Битва за производительность: SparseMap vs GenerationsMap**](https://habr.com/ru/articles/762984/)

Пока Искандер Шарипов занимался своими геймдев-задачами, натолкнулся на то, что get и set у sparse map из [статьи Расса Кокса](https://research.swtch.com/sparse) довольно медленные. Из-за чего преимущество быстрого reset иногда перекрывались.

То есть: что банальный слайс, что sparse map, давали +/- одинаковое время исполнения. В одном случае reset занимал больше времени, а в другом — время исполнения росло из-за более дорогих get+set.

А вот [штука, описанная в статье](https://quasilyte.dev/blog/post/gen-map/), умеет и в мгновенный reset, и в более эффективные get+set.

 [Читать](https://habr.com/ru/articles/762984/)",5606,13,0,goproglib
4025,2023-09-24 22:40:55+00:00," **100 ошибок в Go и как их избежать**

Скорее всего, вы слышали о книге Teiva Harsanyi **100 Go Mistakes and How to Avoid Them**. Возможно, вы не знаете, что в общем доступе есть [сокращенная версия книги](https://100go.co/). В ней собраны все ошибки из книги.

[GitHub](https://github.com/teivah/100-go-mistakes)",7467,17,1,goproglib
4024,2023-09-24 10:02:26+00:00,"**Категоризация интерфейсов Go из стандартной библиотеки v1.21** — документ, который является частью большой работы (видимо, книги) и представляет собой отличный способ разобраться с работой интерфейсов под капотом.

Внутри следующие категории:

• Algorithms
• Data
• Drivers
• File systems
• Getting and/or Setting
• Implementation
• Membership
• Parsing
• Process control
• Protocols
• Reading and/or Writing
• Representation
• Subtypes

 [Читать](https://gist.github.com/mikeschinkel/94aed98b655313b67cc3dc92ab677992)",5834,18,0,goproglib
4023,2023-09-24 07:23:01+00:00," **Приоритизация задач по методу MoSCoW: как за 5 минут научиться грамотно расставлять приоритеты**

[Читать статью](https://proglib.io/sh/fwsUGg05nt)

#туториал",5037,7,1,goproglib
4022,2023-09-23 20:34:22+00:00," [**static-server**](https://github.com/eliben/static-server) — как `python -m SimpleHTTPServer <port>`, только на Go.

Развернуть статический файловый сервер на Go всегда было просто:

`package main

import ""net/http""

func main() {
    port := "":8080""
    handler := http.FileServer(http.Dir("".""))
    http.ListenAndServe(port, handler)
}`

Но у [Eli Bendersky](https://eli.thegreenplace.net/2023/static-server-an-http-server-in-go-for-static-content/) есть другой способ. Стоит попробовать:

$ `go run github.com/eliben/static-server@latest`",5590,19,1,goproglib
4021,2023-09-23 06:56:22+00:00,"Это не реклама, а [обзор](https://habr.com/ru/companies/piter/articles/761096/) книги «**Golang для профи: Создаем профессиональные утилиты, параллельные серверы и сервисы, 3-е изд.**»

Третье издание «Golang для профи» исследует практические возможности Go и описывает такие продвинутые темы, как конкурентность и работа сборщика мусора Go, использование Go с Docker, разработка мощных утилит командной строки, обработка данных в формате JSON и взаимодействие с базами данных. 

Кроме того, книга дает дополнительные сведения о работе внутренних механизмов Go, знание которых позволит оптимизировать код на Go и использовать типы и структуры данных новыми и необычными способами.

[Читать](https://habr.com/ru/companies/piter/articles/761096/)",5969,27,7,goproglib
4020,2023-09-22 19:18:11+00:00,"Ловите [плейлист](https://youtube.com/playlist?list=PLfmfIfqdN5vq_6KEpZWhyarlaH-1eb07q&si=3j3cFvt2gpln8Tuh) с мини-лекциями от Go-разработчика Ильдара Карымова или смотрите интересующую тему отдельно:

[Тесты: что нужно знать разработчику](https://youtu.be/sVevmvyFmCA?si=ouQs010lPZB02rsS)
[Всё про конкурентность в Go](https://youtu.be/mvUiw9ilqn8?si=MPj1t_V7mP3RhMfq)
[Туториал по дженериками Go](https://youtu.be/TUSGcQKqCkI?si=TJARlGOEIcQas7VY)
[Golangci-lint: повышаем качество кода на Go](https://youtu.be/Q9ymKAVgQ_8?si=in2QuYWx1jDAXXvw)
[Туториал по интерфейсам в Go](https://youtu.be/7Cmp8ySxauc?si=qYwmCCIlPswhvQpj)
[Завершаем программы изящно: graceful shutdown в Go](https://youtu.be/JKZuKkquoqk?si=67xcBE_B_lwOtsgD)
[Туториал по работе с пакетом Context в Go](https://youtu.be/Fjkckov4F38?si=hIgUQcftRjlbAbEY)",6372,25,0,goproglib
4017,2023-09-22 08:24:54+00:00,"** Конкурентность — это не параллелизм**

Перед вами полное изложение доклада Роба Пайка **Concurrency is Not Parallelism**. Иллюстрации и диаграммы воссозданы, исходный код взят дословно со слайдов, за исключением комментариев, которые в некоторых местах были расширены.

 [Читать](https://habr.com/ru/articles/761754/)",7377,19,0,goproglib
4016,2023-09-21 20:46:21+00:00,"**Правильное профилирование приложений с примерами: гайд для Go-разработчика**

Профилирование — важный метод анализа приложений и выявления узких мест, снижающих производительность приложения. 

Узнайте, как определить, какие части кода выполняются слишком долго или потребляют слишком много ресурсов.

 [Читать](https://blog.stackademic.com/profiling-go-applications-in-the-right-way-with-examples-e784526e9481)",7115,21,0,goproglib
4015,2023-09-21 18:07:06+00:00,"**Таненбаум vs Торвальдс (микроядро vs монолит)**

Старый добрый профессиональный спор, который перерос в холивар. Первыми его начали известные разработчики Эндрю Таненбаум и Линус Торвальдс в начале 90-х в одной из новостных групп «Юзнета».

Таненбаум и Торвальдс холиварили из-за архитектуры ядра ОС. Первый утверждал, что лучше использовать микроядра, второй — монолитное ядро. И сколько раз они не возвращались к публичному обсуждению архитектуры ядра, каждый оставался при своём мнении.

А что сейчас? Да ничего не изменилось. Холивар разгорается при обсуждении абсолютно любой темы.

Любите холиварить? 
 — конечно — в споре рождается истина
 — ненавижу — только мешает работать
 — смотря где и при каких обстоятельствах 

#холивар",5466,135,13,goproglib
4014,2023-09-21 09:26:45+00:00,"**Telegram-бот для новостей на Go, PostgreSQL и OpenAI API**

Go-разработчик Ильдар Карымов делится опытом разработки Telegram-бота, который автоматически достаёт свежие новости и статьи про Go из разных источников, генерирует для них саммари с помощью ChatGPT, после чего публикует их в Telegram-канал. 

[Смотреть](https://youtu.be/tqQr2tNpJrA?si=Tb2tg_gIK40ov72_)",5930,17,2,goproglib
4011,2023-09-20 18:33:19+00:00,"Go 1.21 включает предварительную версию изменения области видимости цикла for, которое команда Go [планирует добавить в Go 1.22](https://go.dev/blog/loopvar-preview), устраняя одну из наиболее распространенных ошибок Go.

 В чем сыр-бор?

**•** На первом скрине код должен вывести ""a,b,c"", верно?

**•** На самом деле мы получаем ""c,c,c"". Причины такого поведения описаны [здесь](https://go.dev/doc/faq#closures_and_goroutines).

**•** Эту проблему также можно воспроизвести без конкурентности (второй пример).

**•** Ошибка такого рода вызвала проблемы в проде у многих компаний, включая [публично задокументированную проблему в Lets Encrypt](https://go.googlesource.com/proposal/+/master/design/60078-loopvar.md).

В Go 1.22 команда Go планирует измененить циклы for, чтобы они имели область видимости для каждой итерации, а не для каждого цикла.

**•** Чтобы обеспечить обратную совместимость с существующим кодом, новая семантика будет применяться только в пакетах, содержащихся в модулях, которые объявляют go >= 1.22 в файлах go.mod.

**•** Go 1.21 включает предварительный просмотр изменения области видимости. Если вы скомпилируете свой код с переменной окружения GOEXPERIMENT=loopvarset, новая семантика будет применена ко всем циклам.",6059,39,11,goproglib
4009,2023-09-20 06:01:18+00:00,"**Решаем задачи по Go и практикуемся на квизах**

Напоминаем, что у нас появился новый канал с задачами по Go, квизами и кодом. Подписывайтесь, чтобы практиковаться вместе с нами.

[Перейти в канал](https://t.me/go_problems_lib)",5439,4,0,goproglib
4007,2023-09-19 18:05:21+00:00," **От проблем до идеи и реализации:** **VSCode LSP для Lama2 на Go**

Погрузитесь в путешествие команды Hexmos, в котором она объединила возможности текстового REST API клиента [Lama2](https://github.com/HexmosTech/Lama2) с VSCode с помощью Language Server Protocol.

 [Читать](https://journal.hexmos.com/lama2-lsp-journey/)",5103,0,0,goproglib
4006,2023-09-18 20:21:39+00:00,"**Что из себя представляет паттерн «Функциональные опции» в Go и как его реализовать?**

▪️Паттерн «Функциональные опции» в Go предлагает гибкий способ настройки структур без раскрытия внутренних полей.

▪️Он особенно полезен, если вы хотите предоставить дополнительную конфигурацию, или в будущем могут появиться дополнительные параметры конфигурации. Он также отлично подходит для библиотек. 

Базовый пример без функциональных опций:

`type Server struct {
    host string 
    port int
    protocol string
}

func NewServer(host string, port int) *Server {
    return &Server{
        host: host, 
        port: port, 
        protocol: ""http"",
    }
}`

▪️Со временем наши требования меняются, и нам может понадобиться поддерживать больше вариантов конфигурации. Вместо изменения сигнатуры функции `NewServer`, что может быть проблематично и несовместимо с предыдущими версиями, мы можем использовать функциональные опции.

 Сначала мы определяем функциональную опцию:

`type ServerOption func(*Server)`

 и функцию, удовлетворяющую типу:

`func WithPort (port int) ServerOption {
    return func(s *Server) {
        s.port = port
}`

 изменяем нашу функцию NewServer:

`func NewServer(host string, opts ...ServerOption) *Server {
    server : = &Server{
        host: host,
        port: 443,
        protocol: ""https""
    }

    for _, opt : = range opts {
        opt (server)
    }
 
    return server

}`

 и теперь мы можем делать вот так:

`server1 := NewServer(""localhost"")     
server2 := NewServer(""localhost"", WithPort(8080))`

Этот паттерн позволяет нам гибко настраивать параметры, сохраняя при этом читабельность и не раскрывая внутренние поля.",5325,72,32,goproglib
4005,2023-09-18 11:39:03+00:00,"**Cокращатель ссылок на Go: с нуля до деплоя**

Go-разработчик Ильдар Карымов делится опытом разработки просто проекта на Go. Вы узнаете, как на практике использовать Echo и MongoDB, прикрутить GitHub-аутентификацию и задеплоить на Digital Ocean.

[Смотреть](https://youtu.be/v6rMPOlPzpk?si=crmdU2Ath4G6xfTP)",5727,15,1,goproglib
4004,2023-09-17 11:02:41+00:00,"️**Gophercon India 2023: краткие заметки с конференции** 

Кажется, этот формат значительно удобнее, чем смотреть весь плейлист в поисках чего-то полезного. Вас ждет [краткое описание](https://aditechsavvyblogs.hashnode.dev/gophercon-india-2023) докладов на следующие темы:

1⃣Rubiks-Kube
2⃣Is unit testing an afterthought or a necessity?
3⃣Generics in Go
4⃣Metaprogramming in Go
5⃣Fuzz testing
6⃣Cache design patterns
7⃣Checkpoint Restoration Using CRIU
8⃣Dive into debugging distributed systems using Delve
9⃣Hardening Go Concurrency: using Formal methods to verify correctness",5959,10,0,goproglib
4003,2023-09-16 15:51:29+00:00,"**Реализация плагина ClickHouse для Telegraf на Go**

Telegraf — серверный агент для сбора и отправки всех показателей и событий из баз данных, систем и сенсоров IoT. А как на счет поддержи ClickHouse? Она есть, но имеет несколько недостатков. 

Автор статьи решил это исправить и, надо сказать, получилось быстро и эффективно. Вывод один: не бойтесь писать интеграции самостоятельно — оно того стоит.

[Читать](https://1823.pl/articles/implementing-a-clickhouse-output-plugin-for-telegraf)",5935,5,1,goproglib
4002,2023-09-15 19:02:03+00:00,"Найти подходящую для себя книгу по Go, которая принесет максимальную пользу, — не самая простая задача. Но решение есть: **Awesome Go Books**. Репозиторий поддерживается и обновляется новыми книгами. Пользуйтесь 

[GitHub](https://github.com/dariubs/GoBooks)

#перечитываястарое",6633,22,3,goproglib
4001,2023-09-14 20:53:48+00:00,"Вы ведь там не спите?! И правильно — ведь у нас для вас есть предложение отправиться в путешествие по **техническому стеку Uber** (аналогичный недавний пост про [Netflix](https://t.me/proglibrary/7882))

Иллюстрация основана на исследованиях из технических блогов Uber и проектов с открытым исходным кодом:

Фронтенд
• Веб: Fusion.js (React-фреймворк для создания надежных веб-приложений) + Visualization.js для сценариев геопространственной визуализации.
• Mobile: кроссплатформенная система RIB с архитектурой VIPER вместо MVC.

Бэкенд:
• Uber Gateway как динамическая конфигурация поверх Nginx. Сервис использует gRPC и QUIC для взаимодействия клиент-сервер, а также Apache Thrift для описания интерфейсов.
• Единое хранилище конфигураций под названием Flipr (позже измененное на UCDP), H3 в качестве библиотеки хранилища location-index, Spring Boot для сервисов на основе Java, uAct для архитектуры, управляемой событиями, и Cadence для оркестрации.

Базы данных: для OLTP используется DocStore, под капотом у которой MySQL + PostgreSQL + движок RocksDB.

Big data: управление осуществляется с помощью семейства Hadoop. В качестве форматов файлов используются Hudi и Parquet, а Alluxio — для кэширования. Данные временных рядов хранятся в Pinot и AresDB.

Обработка данных: Hive, Spark и фреймворк с открытым исходным кодом Marmaray + Apache Kafka и Apache Flink.

DevOps: Uber использует Monorepo с упрощенным окружением под названием devpod. CD управляется через Netflix Spinnaker, метрики передаются в uMetric, уведомления в uMonitor и базу данных observability M3.

[Подробнее](https://x.com/alexxubyte/status/1701978500658589907)

#инфографика #проектирование_систем",5710,12,0,goproglib
4000,2023-09-14 20:53:48+00:00," Команда Uber очень любит и развивает проекты с открытым исходным кодом, в том числе и на Go. В их техническом стеке Go тоже присутствует: [cadence](https://github.com/uber/cadvisor) и [H3-Go](https://github.com/uber/h3-go) ",5122,4,0,goproglib
3999,2023-09-14 18:34:04+00:00,"Хоть сейчас и мало кого заинтересуешь «печеньками» и «кикером в офисе», эйчары до сих пор в описаниях вакансий делают упор на удобном расположении офиса, бесплатном кофе и классных тимбилдингах.

‍️Но это, скорее, верхушка айсберга и приятное дополнение к тому, что должно помогать сотруднику сохранять страсть к своей работе и не выгореть на первом же году работы. А «под водой» — интересные и разноплановые задачи, которые бросают вызов нашим скиллам и заставляют получать новые знания, и благодаря которым каждый день мы приходим на работу с удовольствием.

А что «зажигает» именно вас? Ради чего вы каждый день приходите на работу или садитесь за рабочий компьютер в случае удаленки? Как думаете, зависит ли счастье сотрудников от интересных задач?",5530,10,27,goproglib
3998,2023-09-14 07:38:06+00:00,"**Подробное руководство по операциям с файлами в Go: на заметку начинающему разработчику**

Погрузитесь в мир файловых операций в Go и изучите расширенные концепции, включая манипулирование файлами, чтение, запись, обработка ошибок и многое другое.

 [Читать](https://www.honeybadger.io/blog/comprehensive-guide-to-file-operations-in-go/)",6183,12,0,goproglib
3997,2023-09-13 19:22:52+00:00," Вышла четвертая часть в серии руководств по работе с новым пакетом **slices** от Ardan Labs

William Kennedy на практике разбирается с принципом работы функций Contains, Delete и Equal.

 [Перейти к серии](https://t.me/goproglib/3958)",6027,4,0,goproglib
3995,2023-09-12 20:39:20+00:00,"️ Если вы давно искали крутой бесплатный гофер-пак, у нас для вас есть [кое-что](https://github.com/MariaLetta/free-gophers-pack). 

 Теперь ваши презентации, публикации в блогах или социальных сетях, курсы, видео и многое другое будут еще красивее.",7476,15,2,goproglib
3993,2023-09-12 11:30:03+00:00,"**️** **Логирование в Go:** **сравнение 8 лучших библиотек
**
С появлением в версии Go 1.21 нового базового стандартного пакета логирования (`log/slog`) другие библиотеки с открытым исходным кодом можно считать устаревшими? А вот и нет.

Надо смотреть в контексте достоинств/недостатков, производительности, гибкости, функциональных возможностей, простоты использования и поддержки сообщества. Об этом и пойдет речь в статье

[Читать](https://betterstack.com/community/guides/logging/best-golang-logging-libraries/)",5634,7,0,goproglib
3991,2023-09-11 19:23:38+00:00," **Создание масштабируемых приложений с использованием Redis в качестве брокера сообщений**

Под катом ― основные структуры данных Redis, которые можно использовать для создания решений для обмена сообщениями, каждая из которых проиллюстрирована примером приложения на Go.

Вы узнаете о Redis List, Redis Pub/Sub и Redis Streams, их ключевых различиях и кейсах использования. 

[Читать](https://semaphoreci.com/blog/redis-message-broker)",6024,9,4,goproglib
3990,2023-09-11 09:00:44+00:00,"️Подкаст **GoGetPodcast**: «Кто такой системный архитектор?»

Николай Тузов вместе с системным архитектором из LaTech Алексеем Скоробогатым обсуждают, кто такой системный архитектор, чем он занимается, зачем он нужен, как дорасти до этой позиции, и стоит ли. Вы узнаете про путь Алексея до архитектора, чем он занимается на работе и многие другие темы.

⏯️ [YouTube](https://youtu.be/pFdFdv5YaTU?feature=shared) | [Apple Подкасты](https://podcasts.apple.com/us/podcast/ep-11-%D0%BA%D1%82%D0%BE-%D1%82%D0%B0%D0%BA%D0%BE%D0%B9-%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%BD%D1%8B%D0%B9-%D0%B0%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D0%BE%D1%80/id1610745137?i=1000627240629) | [Google Подкасты](https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5mZWVkYnVybmVyLmNvbS9Hb0dldFBvZGNhc3Q/episode/ODY3NzM5N2MtMGRjZi00MDQ1LWFkYzQtZGE1NzdmOWY4ODNj?sa=X&ved=0CAUQkfYCahcKEwjIlr_R95yBAxUAAAAAHQAAAAAQAQ) | [Яндекс Музыка](https://music.yandex.com/album/21540938/track/117226244?activeTab=track-list&dir=desc)

#подкасты",5585,10,3,goproglib
3988,2023-09-10 20:10:10+00:00,"**Почему Context, вероятно, должен быть первым аргументом в большинстве ваших функций Go**

В Go пакет __context__ играет важную роль в управлении жизненным циклом вашего кода, особенно когда речь идет об обработке таймаутов, сигналов отмены и передаче значений, ограниченных запросом. Если вы разрабатываете API, принято передавать __context.Context__ в качестве первого аргумента. 

Вот почему:

1⃣**Согласованность в экосистеме Go.** Одной из основных философий Go является простота и предсказуемость. Когда разные библиотеки и приложения следуют одному и тому же соглашению, это снижает когнитивную нагрузку на разработчиков. Всегда передавая context в качестве первого аргумента, мы гарантируем, что Go-разработчики узнают этот шаблон, делая код более читаемым и поддерживаемым.

2⃣**Передача значений.** Пакет __context__ не только предоставляет сигналы отмены, но и способ безопасного хранения и извлечения значений. Постоянно передавая его в качестве первого аргумента, вы гарантируете, что любые вложенные функции или методы, вызываемые внутри, имеют доступ к этим значениям, обеспечивая бесшовное распространение таких данных, как ID запроса и другие важные метаданные. Это становится действительно важным для реализации таких вещей, как трассировка.

3⃣**Предотвращение длительных задержек и сбоев.** Используя механизмы __context__ для управления временем выполнения запросов, вы можете избежать длительных задержек и предотвратить переход от небольшой проблемы к крупному сбою.

[Источник](https://twitter.com/MattJamesBoyle/status/1699669726639669279)

#tip",5315,28,0,goproglib
3987,2023-09-10 08:21:09+00:00,"Если вы хотите вдохновиться идеей разработки интересного пет-проекта на Go, обратите внимание на сферу этичного хакинга в целом, и в частности на поиск уязвимостей в веб-приложениях. Она в себя включает очень много интересных тем. 

За примером далеко ходить не надо — команда **ProjectDiscovery** написала уже более десятка CLI-инструментов/библиотек на Go, которыми пользуются специалисты по кибербезопасности со всего мира. Вот самые интересные:

[subfinder](https://github.com/projectdiscovery/subfinder) — поиск поддоменов
[nuclei](https://github.com/projectdiscovery/nuclei) — сканирование уязвимостей
[aix](https://github.com/projectdiscovery/aix) — взаимодействие с API больших языковых моделей
[alterx](https://github.com/projectdiscovery/alterx) — генерация словарей
[asnmap](https://github.com/projectdiscovery/asnmap) — сопоставление диапазонов сетей организации с использованием ASN 
[cdncheck](https://github.com/projectdiscovery/cdncheck) — обнаружение технологий по заданному IP-адресу
[chaos-client](https://github.com/projectdiscovery/chaos-client) — взаимодействие с API Chaos DB
[cloudlist](https://github.com/projectdiscovery/cloudlist) — получение активов от облачных провайдеров
[dnsx](https://github.com/projectdiscovery/dnsx) — dig/host/nslookup на стероидах
[httpx](https://github.com/projectdiscovery/httpx) — многоцелевой набор HTTP-инструментов
[katana](https://github.com/projectdiscovery/katana) — сканирование веб-приложений и поиск информации — как паук в Burp Suite, только из командной строки
[mapcidr](https://github.com/projectdiscovery/mapcidr) — получение информации для заданной подсети/диапазона CIDR
[naabu](https://github.com/projectdiscovery/naabu) — сканер портов",5991,22,0,goproglib
3986,2023-09-09 19:51:44+00:00,"[**Производительность Cgo в Go 1.21**](https://shane.ai/posts/cgo-performance-in-go1.21/)

[Cgo](https://go.dev/blog/cgo) позволяет пакетам Go вызывать код C и обычно используется для предоставления Go-приложениям доступа к более широкому миру библиотек на основе C. 

Последний раз производительность **Cgo** основательно [измерялась командой Cockroach labs](https://www.cockroachlabs.com/blog/the-cost-and-complexity-of-cgo/). С тех пор Go сильно изменился ― пришло время актуализировать информацию и понять, как обстоят дела. 

Автор статьи Shane Hansen не хочет спорить о плюсах и минусах Cgo, но утверждает, что его производительность отличная, а накладные расходы в большинстве случаев незначительны.

 [Читать](https://shane.ai/posts/cgo-performance-in-go1.21/)",5153,11,0,goproglib
3985,2023-09-09 13:39:40+00:00,"**Profile-guided optimization (PGO) в Go 1.21**

Команда Go [продолжает](https://go.dev/blog/pgo) активность в официальном блоге — и это не может не радовать.

Что еще за PGO?

 Понимая, как код используется в продакшене, компилятор Go может оптимизировать наиболее часто используемые функции и сделать лучший выбор для распространенных случаев. Этот подход известен как profile-guided optimization.
 PGO использует данные профилирования для принятия обоснованных решений в процессе компиляции.
 Оценка, представленная в блоге, показывает, что включение PGO в Go 1.21 привело к улучшению использования ЦП примерно на 3,8% по сравнению со сборкой без PGO.
 PGO может обеспечить улучшение использования ЦП на 2-7% при типичных рабочих нагрузках, и ожидается, что будущие выпуски Go еще больше повысят производительность за счет PGO.

 Звучит интересно, правда? А какие подводные камни?

Это может увеличить время сборки.
Вам необходимо начать собирать профилирующую информацию и управлять ею, если вы еще этого не сделали.
PGO может без проблем обрабатывать незначительные изменения в исходном коде, что делает его пригодным для постоянной разработки. Однако важно периодически обновлять профиль, чтобы он соответствовал изменениям в кодовой базе.",5306,8,0,goproglib
3984,2023-09-08 20:32:48+00:00,"**Подборка для Go-разработчика**

Jonathan Hall
[Building a Go linter from scratch](https://youtu.be/ycU-GXL_ix4?si=FyWsBrAlqxWWMpEa)
[Learning to Fuzz](https://youtu.be/CI7FstMGClo?si=i2YLXJhRljVflW5Y)
[Book Review: 100 Go Mistakes](https://youtu.be/tcRYU9g5wtw?si=j07TllfQvqU330Y1)

 Anthony De Meulemeester
[From A Blank Page To Steam With SDL2 And Odin - EP 1](https://youtu.be/QrAZ_WlU93M?si=tbpn5KK-p7T-lS98)
[The Power Of Struct Embedding And Interfaces In Golang](https://youtu.be/fXZJu_JuH0A?si=ssNdVjXzTu7rOtM8)
[Beginners Should Think Differently When Writing Golang](https://youtu.be/PyDMqgOkiR8?si=c0Ztc_QqcUDSudMy)",5705,10,0,goproglib
3974,2023-09-08 08:20:14+00:00," **ТОП-9 книг по языку программирования Go в 2023 году: от новичка до профессионала**

Книги по языку Go, расставленные в порядке возрастания сложности, с отзывами читателей.

[Читать статью](https://proglib.io/sh/NsFG0fvozB)
[Зеркало](https://proglib.tech/p/top-8-knig-po-yazyku-programmirovaniya-go-v-2023-godu-ot-novichka-do-professionala-2023-09-05)",51951,19,15,goproglib
3973,2023-09-07 19:47:37+00:00,"#холивар 

Когда говорят о Go 1.18, обычно вспоминают про дженерики и незаслуженно забывают об остальных изменениях. Например, о fuzzing-тестировании, которое раньше можно было запустить только с помощью открытых библиотек. 

Этот механизм полезен, если нужно проверить граничные условия или корректность обработки потока ввода — то есть тогда, когда нужно найти значения, при которых «падает» программа.

А вы пользуетесь встроенным fuzzing-тестированием или используете сторонние библиотеки? Если второй вариант, то какие?",5344,2,0,goproglib
3972,2023-09-07 12:15:26+00:00,"#инструменты 

️**CLI Mate** — инструмент, который позволяет упростить создание CLI-инструментов на Go. Он поддерживает вложенные подкоманды, глобальные/локальные флаги, генерацию справки из godocs, предложения по опечаткам и многое другое. Вдохновлен [Python-fire](https://github.com/google/python-fire) и разработан на базе Cobra.

 [GitHub](https://github.com/avamsi/climate)",5004,14,0,goproglib
3971,2023-09-07 06:00:08+00:00,"**️ Библиотека программиста» находится в поиске авторов оригинальных статей**

Языки
● C#, Go, SQL.

Тематика
● Data Science (Python), базовые и продвинутые концепции языков C#, Go, SQL.

Объем
● от 7 до 15 тыс. знаков.
● 3-4 статьи в месяц.

Оплата
● 4к руб. за статью.
● Работаем с самозанятыми, ИП.

Статья публикуется на сайте proglib.io, в группе [ВК](https://vk.com/proglib) (424к подписчиков), на канале [«Библиотека программиста»](https://t.me/proglibrary) (77к подписчиков) и в одном из профильных тг-каналов: Библиотека Шарписта, Data scientist’а, Go-разработчика.

️ [Заполнить анкету](https://docs.google.com/forms/d/e/1FAIpQLSdZRp4TjqpvNptKlIhHWa7go-I4-9u8Ft8cda8woK6URep_Zw/viewform?usp=sf_link) ⬅️

**Я хорошо программирую, но пишу «так себе». Что делать?**
Если вы хорошо программируете, но навыки письма немного отстают, пройдите наш бесплатный курс на Степике [«Статьи для IT: как объяснять и распространять значимые идеи»](https://stepik.org/course/101672/promo).",5656,12,0,goproglib
3970,2023-09-06 18:02:15+00:00," **Представлены выпуски Go 1.21.1 и 1.20.8 
**
 Новые релизы включают исправления безопасности для cmd/go (CVE-2023-39320), html/template (CVE-2023-39318, CVE-2023-39319) и crypto/tls.

 [Подробнее](https://groups.google.com/g/golang-announce/c/Fm51GRLNRvM)",4840,13,2,goproglib
3969,2023-09-06 11:05:04+00:00," **10 признаков того, что пора увольняться**

«Быть или не быть?», «Уйти или остаться?»: делаем вдох-выдох и принимаем важное решение.

 [Читать статью](https://proglib.io/sh/e8wWzUoycH)
 [Зеркало](https://proglib.tech/p/10-priznakov-togo-chto-pora-uvolnyatsya-2023-08-30)",4683,2,0,goproglib
3968,2023-09-06 07:00:25+00:00,"#инструменты 

️ **Базы данных для Go-разработчика: **[**рейтинг за последние 28 дней**](https://ossinsight.io/collections/go-database)

 Топ-10:

1⃣ [milvus-io/milvus](https://github.com/milvus-io/milvus)
2⃣ [prometheus/prometheus](https://github.com/prometheus/prometheus)
3⃣ [etcd-io/etcd](https://ossinsight.io/analyze/etcd-io/etcd)
4⃣ [pingcap/tidb](https://github.com/pingcap/tidb)
5⃣ [cockroachdb/cockroach](https://github.com/cockroachdb/cockroach)
6⃣ [influxdata/influxdb](https://github.com/influxdata/influxdb)
7⃣ [dgraph-io/badger](https://github.com/dgraph-io/badger)
8⃣ [hashicorp/consul](https://github.com/hashicorp/consul)
9⃣ [flower-corp/lotusdb](https://github.com/flower-corp/lotusdb)
1⃣0⃣ [FerretDB/FerretDB](https://github.com/FerretDB/FerretDB)",5003,13,4,goproglib
3967,2023-09-05 18:07:03+00:00,"#холивар

Привет, подписчики! Вспомните свой профессиональный путь и ответьте на пару вопросов:

На какой стадии вашей жизни вы приобрели самые ценные знания и навыки, которые стали ключевыми для карьеры в IT?
Было ли это ещё в школьные годы, во времена колледжа/университета/института, в процессе самообразования или уже прямо на рабочем месте?

И самое главное — какие это были знания и навыки?

Делитесь опытом в комментариях",4960,4,11,goproglib
3966,2023-09-05 12:43:44+00:00,"**Тестирование Go-приложений с использованием Dolt**: пошаговый гайд** **по работе с [Dolt Go Driver.](https://github.com/dolthub/driver)

 [Читать](https://www.dolthub.com/blog/2023-08-23-go-testing-using-dolt/)",5175,5,0,goproglib
3965,2023-09-04 18:57:20+00:00,"Владимир Балун, старший разработчик в Яндекс,  разбирает по полочкам задачу с Go-собеседования. Точнее, которую могут спросить на собеседовании.

 [Смотреть](https://youtu.be/rDZB4ueHxOY?feature=shared)",5877,33,4,goproglib
3964,2023-09-04 07:18:08+00:00,"**Мини-гайд об организации кода gRPC и protobuf в проекте на Go**

Автор кратко рассматривает, как использовать protoc и плагины с правильным импортом и структурой проекта.

 [Читать](https://rkiselenko.dev/blog/grpc-in-golang/)",7135,16,1,goproglib
3963,2023-09-03 19:34:45+00:00,"#tip

Когда вам нужно инициализировать большие структуры, легко случайно пропустить необходимое поле. Компилятор не выдаст ошибку! 

Вместо этого он устанавливает всем неинициализированным полям их значения по умолчанию. Хотя такая особенность часто очень удобна, иногда может понадобиться, чтобы компилятор указывал на поля структуры, которые не были явно инициализированы.

Линтеры идут на помощь! Линтер [exhauststruct](https://github.com/GaijinEntertainment/go-exhaustruct) проверяет, что структура была полностью инициализирована. Мета-линтер [golangci-lint](https://golangci-lint.run/) включает в себя этот линтер, поэтому если вы уже используете golangci-lint, вы легко можете включить exhauststruct.

Теперь структура может содержать поля, которые предполагается использовать как необязательные. Тогда линтер может выдавать ненужные предупреждения. 

Если определение структуры находится под вашим контролем, вы можете избежать ложных срабатываний линтера, добавив тег поля структуры exhaustruct:""optional"" к необязательному полю.

`type Shape struct {
    Length int
    Width  int
    volume    int
    Perimeter int `exhaustruct:""optional""`
}`

Следующая инициализация будет помечена как некорректная, потому что отсутствует **volume**:

`var b Shape = Shape{
    Length: 5,
    Width:  3,
}`",5116,35,0,goproglib
3962,2023-09-03 06:55:06+00:00," [**semgrep-go**](https://github.com/dgryski/semgrep-go) — набор правил для статического анализа кода Go, которые выявляют распространенные или потенциальные ошибки. В настоящее время поддерживаются [semgrep](https://semgrep.dev/) и [ruleguard](https://github.com/quasilyte/go-ruleguard).

$ semgrep -f path/to/semgrep-go/rule.yml . 
$ semgrep -f path/to/semgrep-go/ .
$ ruleguard -c=0 -rules path/to/semgrep-go/ruleguard.rules.go ./",5873,11,0,goproglib
3961,2023-09-02 20:00:03+00:00,"**Самые полезные каналы для программистов в одной подборке!**

Сохраняйте себе, чтобы не потерять 

**Для всех**

[Библиотека программиста](http://t.me/proglibrary) — новости, статьи, досуг, фундаментальные темы
[Книги для программистов](https://t.me/progbook)
[IT-мемы](http://t.me/itmemlib)

**Java**

[Библиотека джависта](http://t.me/javaproglib) — полезные статьи по Java, новости и обучающие материалы
[Библиотека Java для собеса](https://t.me/java_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Java](https://t.me/java_problems_lib) — код, квизы и тесты
[Вакансии для java-разработчиков](https://t.me/javadevjob)

**Data Science**

[Библиотека Data Science](http://t.me/dsproglib) — полезные статьи, новости и обучающие материалы
[Библиотека Data Science для собеса](https://t.me/ds_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Data Science](https://t.me/ds_problems_lib) — код, квизы и тесты
[Вакансии по Data Science, анализу данных, аналитике, искусственному интеллекту](https://t.me/datajob)

**Go**

[Библиотека Go разработчика ](https://t.me/goproglib)— полезные статьи, новости и обучающие материалы по Go
[Библиотека Go для собеса](https://t.me/go_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Go](https://t.me/go_problems_lib) — код, квизы и тесты
[Вакансии по Go](https://t.me/godevjob)

**C++**

[Библиотека C/C++ разработчика](https://t.me/cppproglib) — полезные статьи, новости и обучающие материалы по C++
[Библиотека C++ для собеса](https://t.me/cpp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по C++](https://t.me/cpp_problems_lib) — код, квизы и тесты
[Вакансии по C++](https://t.me/cppdevjob)

**Другие профильные каналы**

[Библиотека фронтендера](https://t.me/frontendproglib)
[Библиотека шарписта](https://t.me/csharpproglib)
[Библиотека мобильного разработчика](https://t.me/mobileproglib)
[Библиотека хакера](https://t.me/hackproglib)
[Библиотека питониста](https://t.me/pyproglib)
[Библиотека devops’a](https://t.me/devopsslib)
[Библиотека тестировщика](https://t.me/testerlib)
[Библиотека пхпшника](https://t.me/phpproglib)

**Каналы с вакансиями**

[Вакансии по питону, Django, Flask](https://t.me/pydevjob)
[Вакансии по фронтенду, джаваскрипт, React, Angular, Vue ](https://t.me/jsdevjob)
[Вакансии по C#, .NET, Unity ](https://t.me/csharpdevjob)
[Вакансии по PHP, Symfony, Laravel ](https://t.me/phpdevjob)
[Вакансии по DevOps & SRE ](https://t.me/devopssjob)
[Вакансии для мобильных разработчиков ](https://t.me/mobiledevjob)
[Вакансии по QA тестированию ](https://t.me/testerrjob)
[InfoSec Jobs — вакансии по информационной безопасности](https://t.me/hackdevjob)

Чтобы добавить папку с нашими каналами, нажмите [**сюда**](https://t.me/addlist/17y04EbNMrlhNjZi)",4667,8,1,goproglib
3960,2023-09-02 09:32:17+00:00,"#новости #чтопроисходит

**Новости и обновления популярных инструментов: подборка для Go-разработчика**

[Perfectly Reproducible, Verified Go Toolchains](https://go.dev/blog/rebuild): новая статья в блоге Go от Russ Cox
[Soft Serve](https://charm.sh/blog/soft-serve-git-lfs-support/) (автономный Git-сервер на базе Go от разработчиков Charm) теперь поддерживает Git LFS
‍[VK Education](https://habr.com/ru/companies/vk/news/754534/) открывает набор на бесплатные курсы по Go, Python и технической поддержке

 proposal: [slices: function for count specific value on slice](https://github.com/golang/go/issues/62301)
 proposal: [syscall/js: Add SetSymbol method on js.Value](https://github.com/golang/go/issues/62339)
 proposal: [net/http/pprof: respect timeouts set using http.ResponseController](https://github.com/golang/go/issues/62358)
 proposal: [os: add application data directory functions (i.e. os.UserDataDir and os.DataDir)](https://github.com/golang/go/issues/62382)
 proposal: [encoding: add AppendText and AppendBinary](https://github.com/golang/go/issues/62384)

**•** [TinyGo 0.29.0](https://github.com/tinygo-org/tinygo/releases/tag/v0.29.0) — Go-компилятор на базе LLVM для микроконтроллеров, WASM/WASI и CLI-инструментов. В новой версии среди прочего добавлена поддержка Go 1.21 и новой опции GOOS=wasip1.
**•** [Excelize 2.8](https://github.com/qax-os/excelize/releases/tag/v2.8.0) — библиотека для чтения/записи файлов электронных таблиц Excel
**•** [Wazero 1.5](https://github.com/tetratelabs/wazero/releases/tag/v1.5.0) — zero dependency WASM runtime для Go-разработчиков
**•** [Toxiproxy 2.6](https://github.com/Shopify/toxiproxy/releases/tag/v2.6.0) — TCP-прокси для имитации хаотичных сетевых условий
**•** [FerretDB 1.9](https://github.com/FerretDB/FerretDB/releases/tag/v1.9.0) — совместимая с MongoDB база данных на базе Postgres
**•** [GoCV 0.34](https://github.com/hybridgroup/gocv/releases/tag/v0.34.0) — пакет для компьютерного зрения с использованием OpenCV 4+
**•** [Roaring 1.5](https://github.com/RoaringBitmap/roaring/releases/tag/v1.5.0) — Go-версия структуры данных «Roaring bitmap»
**•** [Fiber 2.49](https://github.com/gofiber/fiber/releases/tag/v2.49.0) — веб-фреймворк, вдохновленный Express
**•** [pdfcpu 0.5](https://github.com/pdfcpu/pdfcpu/releases/tag/v0.5.0) — библиотека обработки PDF-файлов, написанная на Go и поддерживающая шифрование",4835,21,1,goproglib
3958,2023-09-01 07:19:04+00:00,"Серия руководств по работе с новым пакетом **slices** от Ardan Labs:

[1️⃣](https://www.ardanlabs.com/blog/2023/08/golang-slices-binary-search.html)[Binary Search](https://www.ardanlabs.com/blog/2023/08/golang-slices-binary-search.html)
[2️⃣](https://www.ardanlabs.com/blog/2023/08/golang-slices-clip-clone-compact.html)[Clip, Clone и Compact](https://www.ardanlabs.com/blog/2023/08/golang-slices-clip-clone-compact.html)
[3️⃣](https://www.ardanlabs.com/blog/2023/08/golang-slices-compare.html)[Compare](https://www.ardanlabs.com/blog/2023/08/golang-slices-compare.html)
[4️⃣](https://www.ardanlabs.com/blog/2023/09/golang-slices-contains-delete-equal.html)[Contains,](https://www.ardanlabs.com/blog/2023/09/golang-slices-contains-delete-equal.html) [Delete](https://www.ardanlabs.com/blog/2023/09/golang-slices-contains-delete-equal.html) [и](https://www.ardanlabs.com/blog/2023/09/golang-slices-contains-delete-equal.html) [Equal](https://www.ardanlabs.com/blog/2023/09/golang-slices-contains-delete-equal.html)",5573,21,0,goproglib
3957,2023-08-31 18:06:07+00:00,"#холивар

Первый проект в карьере разработчика — самый волнительный и запоминающийся.

А вы помните свои впечатления от первого проекта и стек, на котором он был написан? Как бы вы подошли к своему первому проекту с нынешним опытом?",5238,6,6,goproglib
3954,2023-08-31 11:01:33+00:00,"С недавних пор Go Tour имеет темный режим. Это, конечно, дело вкуса, но все-таки

Вы какой предпочитаете? 

 — темный
 — светлый",5381,295,5,goproglib
3953,2023-08-31 09:00:08+00:00,"Залог успешного CLI-инструмента на Go — это удобство для пользователя, гибкость и постоянные улучшения. Именно таких принципов придерживается автор сегодняшнего руководства и нескольких CLI-проектов с открытым исходным кодом.

[Автор делится советами](https://actuated.dev/blog/develop-a-great-go-cli), полученными при написании CLI-проектов OpenFaaS, actuated, action-usage, arkade и k3sup, начиная с 2016 года. 

Основные моменты:

▫️Начинайте с простой команды и постепенно расширяйте возможности CLI
▫️Используйте инструмент Cobra
▫️Постоянно улучшайте пользовательский опыт, минимизируя необходимость ввода лишних данных
▫️Управляйте токенами авторизации удобным способом, вдохновляясь другими инструментами
▫️Используйте различные форматы вывода для гибкости
▫️SSH может быть альтернативой HTTP для автоматизации
▫️Тщательно документируйте все команды

[Читать](https://actuated.dev/blog/develop-a-great-go-cli)",5454,12,0,goproglib
3951,2023-08-30 18:02:14+00:00,"#tip 

**Колхозный, но для кого-то может и интересный совет: пишем shell-скрипты на Go**

Сверхбыстрый компилятор Go заставляет Go чувствовать себя почти как скриптовый язык (на этапе компиляции, конечно; во время выполнения Go легко опережает любой интерпретируемый язык). 

А как на счет того, чтобы запускать файл .go как shell-скрипт? Без использования `go run` и без необходимости помнить расположение .go файла?

Когда скрипт с шебангом (#!) выполняется как программа в Unix-подобных ОС, загрузчик программ рассматривает остаток строки после шебанга как имя файла программы-интерпретатора, например:

`#!/usr/bin/env awk -f
BEGIN { print ""Don't Panic!"" }
`
После сохранения этого фрагмента в файл scriptname и изменения прав, вы можете вызвать его как ./scriptname или переместить в директорию в вашем $PATH и вызвать, как бинарный файл.

К сожалению, шебанг не работает для исходных файлов Go. Для большинства скриптовых языков символ ""#"" используется в качестве комментария. В Go это недопустимый синтаксис.

`#!/usr/bin/env go run ""$0"" ""$@""
package main
`
`import ""fmt""
func main() {
    fmt.Println(""My first Go script"")
}`

Но решение есть. Этот хитрый способ превращает .go файл в shell-скрипт в большинстве Unix-подобных ОС:

`///usr/bin/env go run ""$0"" ""$@""; exit
package main

import ""fmt""
func main() {
    fmt.Println(""My first Go script"")
}
`
Если вы сохраните этот фрагмент в файл filename.go и сделаете исполняемым, вы сможете вызвать скрипт как ./filename.go.

Как это работает?

Команда env ищет go по пути и выполняет его, устраняя необходимость использования жестко закодированный путь к бинарю.

Путь к env начинается с трех косых черт. Таким образом, вся строка выглядит как комментарий. В то же время путь является допустимым синтаксисом оболочки.

Технически, двух косых черт может быть достаточно, но три косые черты более соответствуют стандартам — они всегда интерпретируются как одна косая черта.

Если env находит go по пути, он вызывает `go run $0 $@`.

Первая переменная $0 относится к самому файлу скрипта, а $@ представляет дополнительные параметры, переданные скрипту в командной строке. Внутри Go-скрипта эти параметры доступны через os.Args[].

Happy ~~coding~~ scripting!",5117,52,5,goproglib
3949,2023-08-30 12:04:03+00:00,"[**Go 1.21: все, что вам нужно знать**](https://miro.com/app/board/uXjVMBkmPPQ=/)

Визуальный путеводитель в виде доски Miro по наиболее важным аспектам Go 1.21. Существуют также для предыдущих версий Go [1.20](https://miro.com/app/board/uXjVPyMixKs=/) и [1.18](https://miro.com/app/board/uXjVOaLW7dY=/).",5161,15,0,goproglib
3948,2023-08-29 18:07:03+00:00,"#холивар

Не так давно мы [спрашивали вас](https://t.me/goproglib/3760) про пет-проекты, из чего получился неплохой холивар. 

Главный вопрос с нашей стороны остался в стороне: «Возможно ли завершить такой проект? Если да, то как вы это сделали?».

Ведь постоянно (особенно перед сном) приходят мысли что-то доработать, добавить новый функционал.",5015,7,7,goproglib
3946,2023-08-29 07:33:06+00:00,"**Особенности и полезные приемы Go**

Вы можете быть продуктивным Go-разработчиком, не зная и не используя большинство из этих приемов, но некоторые из них могут быть полезны:

▪️[Declaration, control flow, typesystem](https://eblog.fly.dev/quirks.html)
▪️[Concurrency, unsafe, reflect](https://eblog.fly.dev/quirks2.html)
▪️[Arrays, validation, build constraints](https://eblog.fly.dev/quirks3.html)",5269,11,0,goproglib
3945,2023-08-28 20:31:18+00:00,"**6 советов, которые помогут диагностировать и устранять проблемы с производительностью**: быстрое введение для Go-разработчика

1⃣ Бенчмаркинг
2⃣ Профилирование
3⃣ Оптимизация компилятора
4⃣ Inlining
5⃣ Escape Analysis
6⃣ Конкурентность

 [Читать](https://medium.com/@lordmoma/6-tips-on-high-performance-go-advanced-go-topics-37b601fa329d) (pdf-файл для тех, у кого не открывается Medium)",6810,7,4,goproglib
3942,2023-08-28 18:00:05+00:00,"Надеемся, материалы про пакет **slog** в Go вам еще не надоели. Потому что самое время закрепить представленную ранее теорию интересной практикой на примере создания красивого логгера. 

Если кто-то из вас уже знаком с пакетом [zap](https://github.com/uber-go/zap) от Uber, вы быстро найдете общий язык с **slog**

Создаем [красивый обработчик логов для](https://dusted.codes/creating-a-pretty-console-logger-using-gos-slog-package) [CLI](https://dusted.codes/creating-a-pretty-console-logger-using-gos-slog-package), который делает логи намного читабельнее, используя только стандартную библиотеку. С цветами, отступами и всем, что нужно для удобства.

️Есть еще кое-что. В официальном репозитории Go есть [руководство по написанию обработчиков slog](https://github.com/golang/example/tree/master/slog-handler-guide) — сохраняйте себе в заметки.",4948,26,1,goproglib
3941,2023-08-27 19:36:14+00:00,"#tip #go #security  

**Два способа проверить свой код на наличие уязвимостей**

Инструмент [**govulncheck**](https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck), безусловно, является универсальным для сканирования репозиториев на наличие известных уязвимостей. 

Инструмент использует официальную базу данных уязвимостей Go [vuln.go.dev](https://vuln.go.dev/), всеобъемлющий источник известных уязвимостей в общедоступных модулях Go.

Govulncheck можно использовать в командной строке или как часть рабочего процесса CI.

Еще одним инструментом, заслуживающим внимания, является [**gosec**](https://github.com/securego/gosec)[: Golang Security Checker](https://github.com/securego/gosec).

gosec — CLI-инструмент, который может быть интегрирован в пайплайн CI. В дополнение к этому, gosec [входит](https://golangci-lint.run/usage/linters/#gosec) в состав golangci-lint. 

По умолчанию он отключен, и вы можете включить либо все проверки на уязвимости, либо только определенные из них. Таким образом, ваш код проверяется на наличие уязвимостей каждый раз, когда ваша IDE запускает линтер.

В отличие от govulncheck, gosec не проверяет наличие известных уязвимостей в общедоступном коде Go. Скорее, он проверяет код на соответствие списку уязвимых шаблонов программирования, включая: жестко закодированные учетные данные, непроверенные ошибки, построение SQL-инструкций с использованием **fmt** и т.д.",6283,7,1,goproglib
3940,2023-08-27 08:12:06+00:00," [**fp-go**](https://github.com/IBM/fp-go) — библиотека функционального программирования для Go, идея для разработки которой взята из проекта [fp-ts](https://github.com/gcanti/fp-ts). Цель библиотеки — предоставить набор типов данных и функций, которые позволяют легко и увлекательно писать поддерживаемый и тестируемый код на Go. 

На скриншоте — [статистика проекта за последние 28 дней](https://ossinsight.io/analyze/IBM/fp-go). Выводы сделаете сами.

 [GitHub](https://github.com/IBM/fp-go)",5084,19,6,goproglib
3939,2023-08-26 17:59:14+00:00,"Обзор альтернатив стандартной библиотеке для регулярных выражений в Go с бенчмарками по скорости и потребляемой памяти. 

 [Читать](https://habr.com/ru/articles/756222/)",4806,21,0,goproglib
3938,2023-08-26 09:17:08+00:00,"[**Как визуализировать модели GORM с помощью Atlas**](https://atlasgo.io/blog/2023/08/08/gorm-visualizations)

Вдогонку к очень холиварному предыдущему посту ловите [мини-гайд](https://atlasgo.io/blog/2023/08/08/gorm-visualizations) о том, как использовать [новую фичу](https://atlasgo.io/blog/2023/08/06/atlas-v-0-13#built-in-schema-visualization) Atlas, которая позволяет разработчикам быстро создавать визуализации диаграммы «сущность-связь» (или ERD) схем баз данных. 

В гайде показано, как эту функцию можно использовать в тандеме с одной из основных возможностей Atlas — «Загрузчиками схем» — для создания визуализаций моделей GORM.

Atlas — это независимый от языка инструмент для управления и миграции схем баз данных с использованием современных принципов DevOps.",5173,19,0,goproglib
3936,2023-08-25 20:56:24+00:00,[Рейтинг Go ORM за последние 28 дней](https://ossinsight.io/collections/golang-orm): на заметку Go-разработчику,5246,40,59,goproglib
3932,2023-08-25 11:43:03+00:00,"**gRPC в Go**: практическое введение от Олега Козырева, Senior Software Engineer в Avito Tech.

[Смотреть](https://youtu.be/osIX2lO1rzM?si=eIP05fKBsMWKVmx0)",6013,20,11,goproglib
3931,2023-08-24 19:09:05+00:00,"#холивар

Что самое трудное в работе программиста? Правильно, выдумывать имена для переменных.

Как вы считаете, насколько важен хороший нейминг для сущностей (функций, переменных и т.д.) в вашем коде? И есть ли у вас или в вашей команде общепринятые правила или лучшие практики, которым вы следуете при нейминге?

Если да, поделитесь опытом",5008,0,11,goproglib
3930,2023-08-24 18:08:03+00:00,"** **[**Структурированное логирование с slog: взгляд команды Go**](https://go.dev/blog/slog)

Экскурсия по slog
Производительность
Проектирование пакета slog (одно из самых крупных дополнений к стандартной библиотеке с момента выпуска Go 1)

 [Читать](https://go.dev/blog/slog)",5007,6,0,goproglib
3929,2023-08-24 11:00:07+00:00,"#tip #go 

Типичная ситуация: пакет `document` не должен зависеть от пакета `storage`, но типу `document.Doc` нужен способ загрузки и сохранения содержимого.

В Go для создания и DI требуется три шага без каких-либо фреймворков. Примеры псевдокодом

1️⃣ Пакет `document`

Определите интерфейс в пакете `document`.

`type Storage interface {
    Load(int) Content  <i>// some content type</i>
    Save(Content) int
}

`Сделайте интерфейсную часть типа Doc, чтобы позже подключить фактическое хранилище.

`type Doc struct {
    Cont Content
    Store *Storage
}

`Используйте этот интерфейс в функциях или методах, которые загружают или сохраняют содержимое документа.

`func (d *Doc) LoadById(id int, s Storage) {
    d.Cont = d.Store.Load(id)
}
<i>// same for Save...</i>
`
2️⃣ Пакет `storage`

Определите тип, который реализует интерфейс.

`type DBStore struct {
    db *database.DB
}
func (d *DBStore) Load(id int) Content {
<i>// ... load content by id</i>
}
<i>// same for Save...</i>

`3️⃣ Пакет `main`

Подключите хранилище при создании документа. Предположим, что у нас есть объект приложения в `main`.

`App.Doc.Store = storage.NewDBStore(...)`",4777,30,12,goproglib
3927,2023-08-23 20:00:06+00:00,"**Ищем копирайтера**

**Нам нужен человек, который:**
— Любит IT и русский язык.
— Понимает разницу между бэкендом и фронтендом, OWASP и MISRA, функциональным программированием и ООП, микроконтроллером и миникомпьютером, UX и UI.
— Имеет опыт работы от 1 года.
— Будет плюсом, если вы программируете на каком-нибудь языке на уровне стажера/джуна.

**Что нужно делать:**
— Готовить подборки, ТОПы книг, ютуб- и телеграм-каналов по языкам программирования.
— Делать расшифровки топовых Ютуб-роликов по теме программирования и оформлять их в виде статей.
— Готовить новостные заметки.
— Актуализировать старые статьи.
— Брать интервью у экспертов. Мы поможем с поиском экспертов.
— Иногда писать небольшие рекламные посты в телеграм.
— Писать статьи с кодом, переводить статьи (по желанию, оплачивается отдельно).

**Можно использовать нейронки?**
— Да, главное, чтобы материал получился интересный.

**Условия:**
— Белая зарплата: 50 000 руб.
— Возможность работать удаленно.

Присылайте свои резюме: hello@proglib.io",4481,11,4,goproglib
3925,2023-08-23 09:06:00+00:00,"[**Проектирование отказоустойчивых микросервисов в Go**](https://rkiselenko.dev/blog/resilient-microservice/)

Если ваша команда, как и команда автора статьи, реализует микросервисную архитектуру, она устроена так, что один микросервис вызывает другой. В случае сбоя в одном сервисе все вышестоящие сервисы получают одну и ту же ошибку. Как не допустить, чтобы проблемы в одном сервисе затрагивали другие?

Можно применять определенные шаблоны, которые помогут спроектировать и реализовать отказоустойчивые микросервисы и ограничить влияние сбоев и задержек. О них и пойдет речь в [статье](https://rkiselenko.dev/blog/resilient-microservice/). И помните

«__Всегда проектируйте вещи, рассматривая их в следующем более широком контексте: стул в комнате, комната в доме, дом в окружении, среда в плане города__» (Элиэль Сааринен)",4862,12,0,goproglib
3921,2023-08-22 13:30:07+00:00," Собрали для вас небольшую подборку открытых собесов на различные позиции Go-разработчика: 

 [Старшего Go-разработчика из Тинькофф от Владимира Балуна](https://youtu.be/3n2bMYEX3aY)
 [Go-разработчика из Ozon от Владимира Балуна](https://youtu.be/c8Y5PN8_Vcw)
 [На позицию middle Go-разработчика от Сергея Парамошкина](https://youtu.be/sZSNf5eVnRA)
 [На позицию middle Go-разработчика от Александра Сахарова](https://youtu.be/RopNTbuDpfI)",5260,17,3,goproglib
3920,2023-08-22 12:02:05+00:00,"**Насколько легко «войти в айти»?**

IT — перспективная отрасль с высокими зарплатами и огромной конкуренцией. Собираем ваши истории: расскажите, как вам удалось сменить профессию (или сразу найти себя), какие шаги вы для этого предприняли и с какими сложностями пришлось столкнуться.

Пройдите наш 10-минутный опрос по [ссылке](https://forms.gle/8HvvKamYZjFGsqsm7).",4342,8,0,goproglib
3919,2023-08-22 09:06:42+00:00,"**Подробный гайд по разработке масштабируемых микросервисов с использованием Go и RabbitMQ**

Автор начинает с фундаментльных основ, затем углубляется в особенности использования Go в сочетании с RabbitMQ.

Понимая основные принципы масштабируемых систем, разработчики и архитекторы могут эффективнее использовать эти инструменты и получить от них максимальную пользу.

 [Читать](https://voskan.host/2023/08/14/building-microservices-with-golang-and-rabbitmq/)",5317,27,0,goproglib
3917,2023-08-21 19:04:56+00:00,"#linux #tips 

Вместо того, чтобы использовать команду **cat** для просмотра файлов с исходным кодом, просто используйте ~~Vim~~ команду [**batcat**](https://github.com/sharkdp/bat) [(bat).](https://github.com/sharkdp/bat) Это современная версия cat, которая включает в себя подсветку синтаксиса для многих языков программирования и поддержку Git из коробки.

> `alias cat='batcat --style plain'`
> `alias less='batcat --paging=always --style plain'`",4403,38,36,goproglib
3916,2023-08-21 18:12:03+00:00,"Несколько недель назад команда Dolt [объявила](https://www.dolthub.com/blog/2023-07-26-announcing-fulltext-indexes/) о первой реализации полнотекстовых индексов. Dolt использует специальный SQL-движок, который позволяет [управлять версиями базы данных](https://www.dolthub.com/blog/2022-08-04-database-versioning/) и при этом должен быть [высокопроизводительным](https://www.dolthub.com/blog/2023-06-23-faster-than-mysql/).

Это также означает, что для полной замены MySQL 8.0 команда Dolt должна реализовать все функции MySQL в движке Dolt. Ну что ж, глобальная цель поставлена, перейдем к реализации полнотекстовых индексов в SQL-движке

 [Читать](https://www.dolthub.com/blog/2023-08-14-implementing-fulltext-indexes/)",4421,12,0,goproglib
3914,2023-08-21 11:01:20+00:00,"**Обзор изменений и нововведений в Go 1.21: взгляд команды МТС**

«Зачем читать подобные обзоры» — спросите вы. В первую очередь за тем, что каждый разработчик видит ту или иную фичу языка по-своему, под своим углом. Кто знает, может именно этот обзор покажется вам наиболее интересным. Поэтому [читаем и закрепляем](https://habr.com/ru/companies/ru_mts/articles/755580/) знания о новой версии языка.",4644,14,6,goproglib
3913,2023-08-21 06:02:03+00:00,"**Новые каналы по Go**

Готовимся к собеседованиям по Go и проверяем себя на практических задачках: «Библиотека программиста» запустила **два канала специально для Go-разработчиков и тех, кто хочет ими стать**‍

Подписывайтесь:
[Библиотека собеса по Go](https://t.me/go_interview_lib) — тут мы готовимся к интервью 
[Библиотека задач по Go](https://t.me/go_problems_lib) — тут решаем задачи, проходим тесты и изучаем код",4679,14,0,goproglib
3911,2023-08-20 19:45:02+00:00,"#tip #go #beginner

**Использование ссылки на переменную итератора цикла**

В Go переменная итератора цикла — это единственная переменная, которая принимает разные значения на каждой итерации цикла. Это очень эффективно, но может привести к непреднамеренному поведению при неправильном использовании. Смотрите пример слева, который выдаст неожиданные результаты:

`Values: 3 3 3
Addresses: 0x40e020 0x40e020 0x40e020`

На каждой итерации мы добавляем адрес `i` к срезу `out`, но поскольку это одна и та же переменная, мы добавляем тот же адрес, который в итоге содержит последнее значение, присвоенное `i`. Одно из решений — скопировать переменную цикла в новую переменную:

`for i := 0; i < 3; i++ {
    i := i 
    out = append(out, &i)
 }`

Новый вывод программы — это то, что ожидалось:

`Values: 0 1 2
Addresses: 0x40e024 0x40e028 0x40e032`

Строка `i := i` копирует переменную цикла i в новую переменную, ограниченную блоком тела цикла for, также называемым `i`. Адрес новой переменной — это тот, который добавляется к массиву. В каждой итерации цикла создается новая переменная.

Хотя этот пример может показаться несколько очевидным, такое же неожиданное поведение может быть более скрытым в некоторых других случаях. Например, переменная цикла может быть массивом, а ссылка может быть срезом (пример справа). В результате получаем:

`Values: [[3] [3] [3]]`",4407,22,13,goproglib
3910,2023-08-20 11:17:06+00:00,"Как реализовать автозаполнение аргументов в CLI-проекте на Go с использованием Cobra: пошаговый гайд на примере простого проекта.

 [Читать](https://www.raftt.io/post/auto-completing-cli-arguments-in-golang-with-cobra)",6057,14,0,goproglib
3909,2023-08-19 19:19:04+00:00,"В Go 1.21 пакет [slog](https://pkg.go.dev/log/slog) был добавлен в стандартную библиотеку. Он выводит логирование на новый уровень, включая такие функции, как структурированное логирование, кастомизация вывода и многое другое! Самое время разобраться подробнее

 [Читать](https://www.gopherguides.com/articles/golang-slog-package)",5071,28,16,goproglib
3908,2023-08-19 16:19:54+00:00,#юмор,4487,73,0,goproglib
3907,2023-08-19 07:43:06+00:00,"[**Глубокое техническое погружение во все аспекты Redis**](https://architecturenotes.co/redis/): от различных топологий Redis до data persistence и разветвления процессов.

Если любите подобные визуальные руководства, обратите внимание на другие разделы [architecture notes](https://architecturenotes.co/).",6041,18,0,goproglib
3906,2023-08-18 19:29:57+00:00,"GoLab — первая итальянская международная конференция по языку программирования Go, организованная компанией Develer. 

Ловите подборку докладов:

 [Uncover Unknown Bugs With Fuzzing in Go](https://youtu.be/oIlB0vl12CA) | Sagar Sonwane
 [Modernizing Falco with Go: a Story of Love and Betrayal](https://youtu.be/fsonx0bAY8A) | Jason Dellaluce & Leonardo Grasso
 [Built-In Testing in Go is More Than Just Passable](https://youtu.be/PVQdJg7K_L8) | Scott McAllister
 [Defensive programming techniques in Go](https://youtu.be/0bDeoa8287I) | Daniel Martí
 [Recipes for reducing cognitive load – yet another idiomatic Go talk](https://youtu.be/zdKHq9Xo4OY) | Federico Paolinelli
 [High-assurance Go cryptography](https://youtu.be/xl8W0rAycGM) | Filippo Valsorda
 [The Go WebAssembly ABI at a Low Level](https://youtu.be/V4H5QnkaqaE) | Xe Iaso
 [Generating Generators](https://youtu.be/6QC9wKKdM10) | Tamir Bahar
 [Call me maybe – communication between microservices](https://youtu.be/cfrxxo5zc4w) | Adelina Simion & Artur Kondas
 [Beyond database/sql: The Driver Pattern](https://youtu.be/cf3b7QXMMJU) | Boston Cartwright
 [Zig Makes CGo Cross-compilation Just Work](https://youtu.be/nBLFMwoDDaY) | Loris Cro
 [Keynote | Things you didn’t know about Go and how to become an expert](https://youtu.be/GtsSzbs-xb8) | Roberto Clapis",5275,15,0,goproglib
3905,2023-08-18 07:06:34+00:00,"Артём Чаадаев, Go-разработчик из команды ассортимента размещения в Туту, [погружается в различные аспекты конкурентной разработки](https://habr.com/ru/companies/tuturu/articles/755072/):

Как деактивировать большое количество пользователей в стороннем API (обычно это бывает после применения бизнес-логики) Как использовать два паттерна конкурентной разработки на Go: семафор (Semaphore) и пул обработчиков (Worker pool)
Какие плюсы/минусы обоих подходов",5294,17,0,goproglib
3904,2023-08-17 19:00:01+00:00,"#холивар 

Вы посоветовали бы данную дорожную карту для начинающих разработчиков или тех, кто переходит с другого языка на Go? Если да, есть ли какие-то важные аспекты, которых в ней не хватает? Может быть в ней есть то, что вообще неуместно?",5082,8,9,goproglib
3903,2023-08-17 18:05:03+00:00,"**Повышение производительности: подробное руководство по кэшированию в Go с Redis**

В [предыдущем материале](https://t.me/goproglib/3890) рассматривались самые базовые аспекты работы с Redis в Go. В этой статье речь идет о кэшировании в контексте Go и Redis

 [Читать](https://voskan.host/2023/08/14/golang-redis-caching/)",5085,9,0,goproglib
3902,2023-08-17 11:42:07+00:00,"#юмор 

Когда случайно cat’нул бинарный файл ️ ctrl+c ctrl+c ctrl…",4602,44,5,goproglib
3901,2023-08-17 07:23:05+00:00,"Дмитрий Королёв, бэкенд-разработчик в Авито, рассказывает об устройстве сборщика мусора в Go и деталях его работы, чтобы вы могли писать более производительные приложения и лучше понимать внутреннее устройство языка.

 [Читать](https://habr.com/ru/companies/avito/articles/753244/)",6535,21,0,goproglib
3900,2023-08-16 18:12:32+00:00,"#вопросы_с_собесов

[В чем разница между очередями, потоками и шаблонами обмена сообщениями pub/sub?](https://serverlessland.com/event-driven-architecture/visuals/queues-vs-streams-vs-pubsub)

1️⃣Очередь — хранилище, которое обеспечивает размещение и чтение данных в определённом порядке.

2️⃣Потоки и их характерные признаки:

▪️Обработка данных происходит в реальном времени, непрерывно.
▪️Неограниченные события.
▪️Могут быть упорядочены по разделу/теме.

️Очереди предназначены для хранения и передачи сообщений между распределенными компонентами, гарантируя, что данные не будут потеряны в процессе, в то время как потоковая передача фокусируется на обработке и аналитике данных в реальном времени.
️Очереди подходят для сценариев, в которых основной задачей является надежность, поскольку они обеспечивают гарантированную доставку, сохранение сообщений и подтверждения потребителя.
️Потоковая передача хороша в ситуациях, когда критически важны анализ и обработка данных в реальном времени, поскольку она обеспечивает передачу данных с малой задержкой и позволяет анализировать данные в нескольких временных окнах.

3️⃣Шаблоны обмена сообщениями pub/sub

Модель «издатель-подписчик» состоит из 4-х ключевых компонентов:
▪️Сообщение — коммуникационные данные, передаваемые от отправителя к получателю
▪️Тема. Каждое сообщение имеет тему, связанную с ним.
▪️Абонент — получатель сообщения. Подписчики должны подписаться на интересующие их темы.
▪️Издатель — компонент, который отправляет сообщения.

️В современной облачной архитектуре приложения разделяют на небольшие независимые стандартные блоки-сервисы. Обмен сообщениями по модели pub/sub обеспечивает мгновенные уведомления о событиях для этих распределенных систем. Она поддерживает масштабируемую и надежную связь между независимыми программными модулями.",5347,29,1,goproglib
3898,2023-08-16 09:01:10+00:00,"️Реальные кадры из жизни команды Go, устраняющей все потребности в Go 2.0, добавляя базовую поддержку обратной и прямой совместимости с использованием переменных окружения и тегов сборки.

 [Обратная совместимость, Go 1.21 и Go 2](https://go.dev/blog/compat)
 [Прямая совместимость и управление туллчейном в Go 1.21](https://go.dev/blog/toolchain)",4665,21,0,goproglib
3897,2023-08-16 06:02:06+00:00,"**«Библиотека программиста» ищет девушек, работающих в IT — разработке, тестировании, информационной безопасности и других направлениях**

Мы проводим новое исследование, посвященное специфике работы женщин в IT — от сложностей и недостатков в работе до гендерных стереотипов.

Пройдите короткий опрос — он анонимный и займет не более 10 минут вашего времени.

Ссылка [тут](https://docs.google.com/forms/d/e/1FAIpQLSd_MefmB2CT4N5GF2disqNQAXt-l8sahI5wGzW0_-fO5qlJTQ/viewform).",4602,11,0,goproglib
3896,2023-08-15 20:00:20+00:00,"Перед вами [работа](https://cpu.land/) 17-летней [Лекси Маттик](https://github.com/kognise), суть которой — понять, что именно происходит, когда вы запускаете программу на своем компьютере.

С помощью простых иллюстраций вы узнаете, как работает многопроцессорность, что такое системные вызовы, как компьютеры управляют памятью с помощью аппаратных прерываний и как Linux загружает исполняемые файлы.

 **В книге объясняется:**

Как процессоры выполняют инструкции вашего приложения
Как ОС использует прерывания для переключения ЦП между задачами
Способ, которым виртуальная память распределяет физическую память между процессами
Процессы компиляции и компоновки приложений",4298,37,7,goproglib
3895,2023-08-15 18:11:04+00:00,"#холивар

 Какие Go-проекты с открытым исходным кодом вы могли бы поставить в пример хорошо/правильно (по вашему мнению) структурированного проекта? Присылайте ссылки в комментарии

 — пофиг на структуру проекта, главное, чтобы все работало",4516,42,5,goproglib
3894,2023-08-15 15:01:12+00:00," **Подборка записей свежих стримов от Anthony De Meulemeester**: про Go, его инструменты и различные аспекты применения в реальных проектах.

[Golang Fiber Auth Middleware Setup For My New Side Hustle](https://youtu.be/b3t8848Tqvg)
[How I Refactor Code In My Full Stack Golang Project](https://youtu.be/7E45u7JTb4I)
[I Found The Secret Stack For Building Rapid And Robust Apps](https://youtu.be/hSo6s_6CHrg)
[I Nailed Every Coding Interview With This Secret Trick](https://youtu.be/bTx3JEThpaE)
[A Real Use Case of Goroutines With Package Context In Golang](https://youtu.be/5QyxqhLnKmM)
[HTMX Is Amazing And This Is Why](https://youtu.be/3anm3-_NFI4)
[Why Map Pointer Values In Golang Will Shoot You In The Foot](https://youtu.be/FNnckb4rg5o)
[How To Start Trading The Crypto Markets Like A PRO](https://youtu.be/b-k9kzOaKik)
[A Real World Project Use Case Of Golang's Sync.WaitGroup](https://youtu.be/96scGqEV0pc)",4940,18,0,goproglib
3893,2023-08-15 09:18:04+00:00,"Событийно-ориентированная архитектура (Event-Driven Architecture, EDA): что это и зачем нужна для Go-разработчика.

1️⃣ [What is an EDA and Why do I need One?](https://encore.dev/blog/event-driven-architecture)
2️⃣ [Making a Business Case for an EDA](https://encore.dev/blog/eda-business-case)
3️⃣ [Building for Failure](https://encore.dev/blog/building-for-failure)
4️⃣ [Long Term Ownership and Maintenance of an Event-Driven System](https://encore.dev/blog/long-term-ownership)",5402,10,0,goproglib
3892,2023-08-14 18:11:03+00:00,"#подкасты

Вдогонку к предыдущему посту ловите ссылки на свежий выпуск **GoGetPodcast**, в котором Николай Тузов, Глеб Яльчик (техдир в Gaijin) и Дмитрий Матрёничев (разработчик Talos OS) обсуждают новый релиз: что добавилось, зачем это нужно и как с этим работать.

️ [YouTube](https://youtube.com/watch?v=hp0lOyGxpO0) | [Apple Подкасты](https://podcasts.apple.com/ru/podcast/go-v1-21-%D0%BE%D0%B1%D1%81%D1%83%D0%B6%D0%B4%D0%B0%D0%B5%D0%BC-%D0%B2%D0%B0%D0%B6%D0%BD%D1%8B%D0%B5-%D0%B8%D0%B7%D0%BC%D0%B5%D0%BD%D0%B5%D0%BD%D0%B8%D1%8F-%D0%B2-%D0%BD%D0%BE%D0%B2%D0%BE%D0%BC-%D1%80%D0%B5%D0%BB%D0%B8%D0%B7%D0%B5/id1610745137?i=1000624410397) | [Google Подкасты](https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5mZWVkYnVybmVyLmNvbS9Hb0dldFBvZGNhc3Q/episode/NzVmZTgxNjUtZTYzNS00OTQyLWI3YzgtZDlmZjk2NWJhNTA5?sa=X&ved=0CAUQkfYCahcKEwjoq-a1x9yAAxUAAAAAHQAAAAAQAQ) | [Яндекс Музыка](https://music.yandex.ru/album/21540938/track/116435832?utm_medium=copy_link)",4878,26,0,goproglib
3891,2023-08-14 14:38:00+00:00,"️ Собрали для вас **серию заметок о Go 1.21** от различных авторов на случай, если вам не хватает официальной документации:

[▫️Things I'm excited for in Go 1.21](https://www.sethvargo.com/things-im-excited-for-in-go-1-21/)
[▫️What’s New in Go 1.21 a Comprehensive Notes](https://medium.com/lyonas/whats-new-in-go-1-21-a-comprehensive-notes-96017750b390)
[▫️Coming Soon: Golang 1.21 ](https://www.dolthub.com/blog/2023-07-07-golang-1.21-release/)
[▫️About Structured Logging in Go 1.21](https://lukas.zapletalovi.com/posts/2023/about-structured-logging-in-go121/)
[▫️Built-in functions in Go 1.21](https://antonz.org/go-1-21-builtins/)
[▫️Go 1.21: Now with More Gopher Power and Less 'Go-tchas'!](https://double-trouble.dev/post/go-1-21/)",4962,7,1,goproglib
3890,2023-08-13 20:46:05+00:00,"**Начало работы с Redis в Go**: пошаговое руководство по установке, командам и настройке.

 [Читать](https://voskan.host/2023/08/10/redis-and-golang-complete-guide/)",6687,13,3,goproglib
3889,2023-08-13 07:07:53+00:00,"**Lazygit исполняется 5 лет: размышления о Git, TUI и открытом исходном коде**

Автор Lazygit Jesse Duffield [рассуждает](https://jesseduffield.com/Lazygit-5-Years-On/#lessons-learnt) о пяти годах разработки проекта:

▪️Где сейчас находится проект?
▪️Извлеченные уроки
▪️Что будет дальше?
▪️Так ли хорош Git?
▪️CLI vs UI",4893,17,0,goproglib
3888,2023-08-13 06:00:07+00:00,"**️«Библиотека программиста» собирает кейсы использования нейросетей**

Какие самые необычные задачи вы выполняли с помощью нейросетей? Может быть, вы просили ИИ пройти тестирование по правилам безопасности или писали с его помощью заявление на увольнение?

Заполняйте форму — лучшие истории появятся в нашей подборке по теме.

[Ссылка тут](https://docs.google.com/forms/d/e/1FAIpQLSeaKhutqIAuITGEmMyoRWU-r_WOkKdgZAvfzflkkRjS3HOQsA/viewform)",4668,1,2,goproglib
3887,2023-08-12 20:00:04+00:00,"**Самые полезные каналы для программистов в одной подборке!**

Сохраняйте себе, чтобы не потерять 

**Для всех**

[Библиотека программиста](http://t.me/proglibrary) — новости, статьи, досуг, фундаментальные темы
[Книги для программистов](https://t.me/progbook)
[IT-мемы](http://t.me/itmemlib)

️**Java**

[Библиотека джависта](http://t.me/javaproglib) — полезные статьи по Java, новости и обучающие материалы
[Библиотека Java для собеса](https://t.me/java_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Java](https://t.me/java_problems_lib) — код, квизы и тесты
[Вакансии для java-разработчиков](https://t.me/javadevjob)

**Data Science**

[Библиотека Data Science](http://t.me/dsproglib) — полезные статьи, новости и обучающие материалы
[Библиотека Data Science для собеса](https://t.me/ds_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по Data Science](https://t.me/ds_problems_lib) — код, квизы и тесты
[Вакансии по Data Science, анализу данных, аналитике, искусственному интеллекту ](https://t.me/datajob)

**C++**

[Библиотека C/C++ разработчика](https://t.me/cppproglib) — полезные статьи, новости и обучающие материалы по C++
[Библиотека C++ для собеса](https://t.me/cpp_interview_lib) — тренируемся отвечать на каверзные вопросы во время интервью и технического собеседования
[Библиотека задач по C++](https://t.me/cpp_problems_lib) — код, квизы и тесты
[Вакансии по C++](https://t.me/cppdevjob)

**Другие профильные каналы**

[Библиотека фронтендера](https://t.me/frontendproglib)
[Библиотека шарписта](https://t.me/csharpproglib)
[Библиотека Go разработчика](https://t.me/goproglib)
[Библиотека мобильного разработчика](https://t.me/mobileproglib)
[Библиотека хакера](https://t.me/hackproglib)
[Библиотека питониста](https://t.me/pyproglib)
[Библиотека devops’a](https://t.me/devopsslib)
[Библиотека тестировщика](https://t.me/testerlib)
[Библиотека пхпшника](https://t.me/phpproglib)

**Каналы с вакансиями**

[Вакансии по питону, Django, Flask](https://t.me/pydevjob)
[Вакансии по фронтенду, джаваскрипт, React, Angular, Vue ](https://t.me/jsdevjob)
[Вакансии по C#, .NET, Unity ](https://t.me/csharpdevjob)
[Вакансии по Go ](https://t.me/godevjob)
[Вакансии по PHP, Symfony, Laravel ](https://t.me/phpdevjob)
[Вакансии по DevOps & SRE ](https://t.me/devopssjob)
[Вакансии для мобильных разработчиков ](https://t.me/mobiledevjob)
[Вакансии по QA тестированию ](https://t.me/testerrjob)
[InfoSec Jobs — вакансии по информационной безопасности](https://t.me/hackdevjob)",4599,1,1,goproglib
3886,2023-08-12 18:14:04+00:00,"**Итераторы в Go: по мотивам **[**range over func**](https://github.com/golang/go/issues/61405)**, предлагаемого расширения языка Go**

Практический взгляд на потенциал этой функции в реальных ситуациях, прежде чем сделать вывод: «В общем, итераторы довольно удобны».

 [Читать](https://bitfieldconsulting.com/golang/iterators)",4472,10,1,goproglib
3885,2023-08-12 09:19:04+00:00,"️ **Ensure** — фреймворк для тестирования Go-проектов на основе сценариев. Это новый проект, предоставляющий еще один способ структурирования тестов. 

Как говорит автор: «Мне нравятся текстовые описания моего теста, поэтому я написал ensure, немного основываясь на своем опыте работы с XBehave в .NET».

 [GitHub](https://github.com/iamkoch/ensure)",4788,16,1,goproglib
3884,2023-08-11 18:01:41+00:00,"#чтопроисходит 

 **Подборка для Go-разработчика:**

️ Через шесть месяцев после выпуска версии Go 1.20 [выходит версия 1.21.](https://go.dev/blog/go1.21)
 proposal: [spec: allow append(nil, arg).](https://github.com/golang/go/issues/61944)
 proposal: [x/sync: add multimap.](https://github.com/golang/go/issues/61939)
 proposal: [log/slog: add iterator form of Record.Attrs.](https://github.com/golang/go/issues/61934)
 proposal: [Go 2: left side syntax for new variable.](https://github.com/golang/go/issues/61933)
 [Oto 3](https://github.com/ebitengine/oto/releases/tag/v3.0.0) — низкоуровневая кроссплатформенная библиотека, используемая игровым движком Ebitengine 2D для воспроизведения звука на значительном количестве платформ: от Windows, macOS и Linux до более интригующих вариантов, таких как Nintendo Switch и iOS.
 [BadgerDB 4.2](https://github.com/dgraph-io/badger/releases/tag/v4.2.0) — встраиваемая и быстрая база данных key-value, написанная на чистом Go. 
 [Validator 10.15.0](https://github.com/go-playground/validator/releases/tag/v10.15.0) — проверка значений для структур и полей.
 [Pop 0.2](https://github.com/charmbracelet/pop/releases/tag/v0.2.0) — CLI-инструмент для отправки электронных писем из вашего терминала. Новая версия добавляет поддержку SMTP.
 [OpenFGA 1.3](https://github.com/openfga/openfga/releases/tag/v1.3.0) — механизм авторизации/разрешения, вдохновленный Google Zanzibar.
 [retry-go 4.5](https://github.com/avast/retry-go/releases/tag/v4.5.0) — простая библиотека для реализации механизма повторных попыток.
 [Kratos 2.7](https://github.com/go-kratos/kratos/releases/tag/v2.7.0) — фреймворк для разработки cloud-native микросервисов.",4880,16,1,goproglib
3883,2023-08-11 13:14:03+00:00,"**Socket представляет поддержку Go**

Проект Socket, основанный известным JavaScript-разработчиком Feross Aboukhadijeh, был запущен в 2022 году с акцентом на предоставление инструментов для улучшения ситуации с цепочкой поставок **npm**. Теперь разработчики проекта делают шаги в сторону анализа безопасности зависимостей Go.

[Подробнее](https://socket.dev/blog/go-support?a=1)",4815,18,18,goproglib
3882,2023-08-10 19:00:04+00:00,"#холивар

К сертификации в айти-сфере работодатели относятся по-разному. Кто-то уверен, что это лучший способ доказать свою профпригодность, а другие не видят в них никакой практической ценности.

‍️ Некоторые работодатели приветствуют желание разработчиков развиваться и оплачивают сертификаты.

 А у вас такое практикуется? Если бы у вас была возможность получить любой сертификат, какой выберете?",4989,5,11,goproglib
3881,2023-08-10 17:54:05+00:00,"** Глубокое погружение в интеграцию Go с Kafka**: подробный гайд по использование Go для обмена сообщениями в реальном времени.

[Читать](https://voskan.host/2023/08/05/golang-apache-kafka/)",6487,31,0,goproglib
3880,2023-08-10 16:01:06+00:00,"**️Команда werf выпустила бесплатный самоучитель по CI/CD и Kubernetes для Go-разработчиков **

Что внутри:
Подготовка окружения и сборка образа
Основы Kubernetes
Создание приложения на Go, работа с файлами и БД
Лучшие практики деплоя
Построение CI/CD-пайплайна
GitLab CI/CD, GitHub Actions, ArgoCD

 [Читать гайд](https://ru.werf.io/guides/golang/100_basic.html)",6749,39,0,goproglib
3878,2023-08-09 18:12:02+00:00,#вопросы_для_самопроверки,6659,24,5,goproglib
3877,2023-08-09 11:43:13+00:00," **Подборка всех частей бесплатного мини-курса от Ardan Labs:**

 [How to Install a Package Locally](https://youtu.be/W75NByuiyMI)
 [What is a Module Mirror?](https://youtu.be/j1uHllwhGuc)
 [The Deploy First Mentality](https://youtu.be/EZHpwf2Nqf4)
 [Package Anti-Patterns](https://youtu.be/V1tC2yHAe6E)
 [How Does a Cluster Work?](https://youtu.be/oQYZl-XW8q0)
 [A Mental Model For Configuration](https://youtu.be/vYANg8uYRJE)
 [Concurrent Logging](https://youtu.be/3l5hYWHJems)
 [Deploy A pprof Debug Service](https://youtu.be/3U5gGpV-S9g)
 [Defining the Function Signature of a Web Handler](https://youtu.be/KZdKr54npyc)
 [A Prelude to Middleware](https://youtu.be/EF8d4-HTahU)
 [How Middleware Works](https://youtu.be/T7kpnfN0Ao8)
 [Ephemeral Request Storage API](https://youtu.be/o7EGfsqW-pE)",5840,18,2,goproglib
3876,2023-08-08 17:50:06+00:00,"️  Все гоферы здесь? Есть новость для вас: Go 1.21.0 релизнулся!

️ [Примечания к выпуску](https://go.dev/doc/go1.21)
⬇️ [Скачать](https://go.dev/dl/#go1.21.0)

Ждали новый выпуск?
  — конечно
  — нет, уже сбился со счета",5390,119,8,goproglib
3875,2023-08-08 07:00:04+00:00,"С Go 1.20 компилятор Go начал поддерживать механизм Profile Guided Optimization (PGO) для оптимизации сборок. 

О том, что из себя представляет PGO и как его использовать в своих проектах, читайте в статье

[Читать](https://medium.com/@esdonmez/profile-guided-optimization-pgo-in-go-fdb8c62a2460) (pdf-файл для тех, у кого не открывается Medium)",5702,12,4,goproglib
3874,2023-08-07 18:12:06+00:00,"[**Разработка базовой поисковой системы на Go: пошаговое руководство**](https://voskan.host/2023/08/04/building-search-engine-in-golang/)[ ](https://voskan.host/2023/08/04/building-search-engine-in-golang/)

Настройка необходимых инструментов/библиотек и создание структуры проекта с модулями Go
Создание поискового робота и индексатора
Реализация перечисленных компонентов и алгоритма поиска с подробным объяснением основных концепций: настройки HTTP-клиента, сканирования и индексирования веб-страницы, обработки URL-адреса и извлечения данных
Модульное и сквозное тестирование проекта + базовые вопросы теплая",5590,15,0,goproglib
3873,2023-08-07 07:06:46+00:00,"#tip #go #beginner

**О случайном порядке итерации типа map**
 
Встроенные мапы Go не поддерживают порядок входных значений. Поэтому при использовании цикла __for-range__ для итерации записей мапы порядок записей рандомизируется. Запустив код из примера, вы увидите, что результаты могут отличаться.

Но обратите внимание, что функции вывода на экран в стандартном пакете fmt сортируют записи (по ключам) мапы. То же самое происходит с выводами вызовов функции **json.Marshal**.",5301,25,6,goproglib
3872,2023-08-06 20:58:49+00:00,"Использование Hashicorp Vault для хранения секретов: гайд, построеный на основе Go-проекта.

[Читать](https://habr.com/ru/articles/653927/)",5651,13,0,goproglib
3871,2023-08-06 09:17:07+00:00,"**Встраиваем Hello World на Go в ядро Linux**

Автор материала представил малоизвестную функцию ядра Linux. Вместо запуска программы из файловой системы, независимо от того, виртуальная она или нет, также можно встроить программу user-space непосредственно в сам образ ядра и запускать оттуда

[Читать](https://blog.sigma-star.at/post/2023/07/embedded-go-prog/)",5375,21,0,goproglib
3870,2023-08-05 18:01:32+00:00,"[**Эксперименты с шаблонами проектов с помощью gonew**](https://go.dev/blog/gonew)

Команда Go представила новый экспериментальный инструмент для создания новых проектов Go из предопределенных шаблонов. Любой может написать эти шаблоны, которые затем упаковываются и распространяются в виде модулей, используя Go module proxy и checksum database для повышения безопасности и доступности.

 Устанавливаем:
> `go install golang.org/x/tools/cmd/gonew@latest`

 Используем:
> `gonew golang.org/x/example/helloserver example.com/myserver`
> `cd ./myserver`",5250,25,10,goproglib
3869,2023-08-05 14:03:05+00:00," **Вот как выглядит список активных предложений и дискуссий команды Go, актуальный на момент второго августа**

 **Обсуждения** (еще не предложения)

◾gonew: templates for new modules [#61669](https://go.dev/issue/61669)
◾metrics for the standard library [#61638](https://go.dev/issue/61638)
◾codereview: should the Go project stop importing GitHub PRs? [#61182](https://go.dev/issue/61182)
◾net/http: move HTTP/2 into the standard library [#60746](https://go.dev/issue/60746)

️ **Принятые**
◾crypto/tls: QUIC 0-RTT APIs [#60107](https://go.dev/issue/60107)
◾sync/atomic: add OR/AND operators for unsigned types [#61395](https://go.dev/issue/61395)
◾text/template, html/template: add ExecuteFuncs [#54450](https://go.dev/issue/54450)
◾x/crypto/cryptobyte: expose uint48 methods [#61275](https://go.dev/issue/61275)

 **Отклоненные**
◾`go test ./.../...` for submodule/multimodule projects [#59480](https://go.dev/issue/59480)
◾add package 'operators' [#58559](https://go.dev/issue/58559)
◾all: port to linux/mips_siflower [#61254](https://go.dev/issue/61254)
◾maps: remove package for Go 1.21 [#61613](https://go.dev/issue/61613)

 **Вероятнее всего будут приняты**
◾go/types, types2: fix SizesFor(""gc"", ...) to match actual gc behavior [#61035](https://go.dev/issue/61035)
◾internal/cpu: detect OS support for AVX-512 and CPU support for VAES and VPCLMULQDQ instructions for performance optimization of crypto ciphers [#43925](https://go.dev/issue/43925)
◾spec: add untyped builtin zero [#61372](https://go.dev/issue/61372)
◾x/crypto: add AES-GCM-SIV [#54364](https://go.dev/issue/54364)

⌛️ **Активные**
◾cmd/compile: add new range behind GOEXPERIMENT=range [#61717](https://go.dev/issue/61717)
◾cmd/go: track tool dependencies in go.mod [#48429](https://go.dev/issue/48429)
◾cmd/test2json: Allow Go Tests to Pass Metadata [#43936](https://go.dev/issue/43936)
◾cmp: add CompareBool [#61643](https://go.dev/issue/61643)
◾crypto/x509: introduce new robust OID type & use it for certificate policies [#60665](https://go.dev/issue/60665)
◾fmt: don't recover panics except for dereferencing nil fmt.Stringer receivers [#28150](https://go.dev/issue/28150)
◾go/doc: reconsider comment rewrites of `''` to `”` [#54312](https://go.dev/issue/54312)
◾io/fs, net/http: define interface for automatic ETag serving [#60940](https://go.dev/issue/60940)
◾io/fs: add writable interfaces [#45757](https://go.dev/issue/45757)
◾math/rand/v2: revised API for math/rand [#61716](https://go.dev/issue/61716)
◾net/http: enhanced ServeMux routing [#61410](https://go.dev/issue/61410)
◾net/netip: add Prefix.Less and Prefix.Compare [#61642](https://go.dev/issue/61642)
◾spec: add range over int, range over func [#61405](https://go.dev/issue/61405)
◾syscall: undeprecate [#60797](https://go.dev/issue/60797)
◾testing: Add T.Output() etc [#59928](https://go.dev/issue/59928)
◾testing: add identity function that forces evaluation for benchmarks [#61179](https://go.dev/issue/61179)
◾testing: add testing.B.Loop for iteration [#61515](https://go.dev/issue/61515)
◾testing: shuffle seed should be different when -shuffle=on and -count flag is set [#61256](https://go.dev/issue/61256)
◾time: stop requiring Timer/Ticker.Stop for prompt GC [#61542](https://go.dev/issue/61542)
◾x/crypto/ssh: add a specific error for algorithm negotiation issues/errors [#61536](https://go.dev/issue/61536)
◾x/crypto/ssh: export supported algorithms [#61537](https://go.dev/issue/61537)
◾x/crypto/ssh: expose negotiated algorithms [#58523](https://go.dev/issue/58523)
◾x/crypto/ssh: server side multi-step authentication [#61447](https://go.dev/issue/61447)
◾x/oauth2: Unmarshal expires_in outside of oauth2/internal [#61417](https://go.dev/issue/61417)
◾x/oauth2: support PKCE [#59835](https://go.dev/issue/59835)",4567,18,2,goproglib
3868,2023-08-05 10:42:15+00:00,Нас уже больше 13 000 ! Спасибо за интерес к «Библиотеке Go-разработчика».,4285,43,1,goproglib
3866,2023-08-04 18:07:52+00:00," **Полноценный цикл видео о том, как создать PaaS:**

 [Библиотеки и инструменты для создания сервиса](https://youtu.be/ouXMnSnacTQ) | История создания шаблона проекта и библиотек для разработчика микросервиса на Go | Александр Ермолаев, руководитель группы стандартизации шаблонов, инструментов и мониторинга в СберМаркете.
 [Инструменты для observability в PaaS](https://youtu.be/SupqOQhzU7Y) | Про дашборды, каким образом обеспечивается добавление новых компонентов в библиотеку go-libs и многое другое.
 [Как запустить сервис локально одной командой](https://youtu.be/b9LI1VPGgys) | Как делали выбор между minikube и docker compose, как настраивали роутинг внутри и снаружи, и многое другое | Дмитрий Лукиянчук, руководитель отдела разработки платформенных решений в СберМаркете.
 [Канареечный деплой](https://youtu.be/oL2TDfIvv4s) | Что нужно, чтобы задеплоить сервис в PaaS и как это устроено | Антон Малафеев, руководитель группы инженеров ИТ-инфраструктуры в СберМаркете.
 [Трудности перевода: взаимодействие сервисов](https://youtu.be/cINDcwl5xmI) | Как организовать общение между сервисами и устроить эволюцию, а не революцию.
 | Александр Сусиков, руководитель отдела разработки Ruby-платформы в СберМаркете.
 [Как тестировать группу сервисов и экономить время](https://youtu.be/4kKZsrLshDs) | Про проблемы тестирования, какие есть подходы к тестированию в СберМаркете, как развернуть связку сервисов для системного тестирования и как этим управлять | Роман Шпак, руководитель группы повышения производительности в СберМаркете.",4897,25,0,goproglib
3865,2023-08-04 14:48:58+00:00,"[**Написание парсеров yacc с помощью goyacc: советы и рекомендации**](https://www.dolthub.com/blog/2023-07-28-goyacc-parser-tips-tricks/)

У разработчиков Dolt, базы данных SQL с контролем версий, возникла необходимость преобразовать строки SQL-запроса в структурированную форму, которую может выполнить база данных. 

Решение очевидное — использовать **yacc** — разновидность компилятора, превращающего простую грамматику в синтаксический анализатор.

У Go есть собственная версия этого инструмента: **goyacc**. Под катом — несколько советов и приемов, которые помогут наладить работу yacc с Go, а также проблемы и решения, которые могут возникнуть на практике.",4561,10,0,goproglib
3864,2023-08-04 06:00:11+00:00,"**«Библиотека программиста» в поиске контент-менеджера для ведения телеграм-каналов**

Ищем человека, который грамотно пишет, разбирается в контенте и в одной из этих трех тем:
Data Science
Frontend
мобильная разработка

Мы предлагаем частичную занятость и полностью удаленный формат работы — можно совмещать с основной и находиться в любом месте

Подробнее о вакансии и форма для отклика — по [ссылке](https://forms.gle/xk3yicFL8zqeiD1r7).

Ждем вас в команде!",4535,6,0,goproglib
3863,2023-08-03 18:44:04+00:00,"#холивар

Какая информация в описании вакансии может вас оттолкнуть? И на что вы больше всего обращаете внимание:

 Условия работы
 Описание вакансии
 Бренд работодателя

 — главное, чтобы хорошо платили
 — для меня важны все перечисленные пункты",4476,58,9,goproglib
3862,2023-08-03 12:46:50+00:00," **Cитуация на рынке труда в IT: зарплаты и куда все катится в 2023 году**

Спойлер: все неоднозначно, сложно и, местами, — плачевно. По крайней мере, об этом говорит статистика за первое полугодие 2023 года.

 [Основной сайт](https://proglib.io/sh/S6xgJmIuzk)
 [Зеркало](https://proglib.tech/p/cituaciya-na-rynke-truda-v-it-zarplaty-i-kuda-vse-katitsya-v-2023-godu-2023-07-25)",4529,12,5,goproglib
3861,2023-08-03 07:08:04+00:00,"**Рефакторинг кода Go для тестопригодности: возможности интерфейсов**

Исследование возможностей юнит-тестов для раннего обнаружения багов и важности проектирования модулей на основе абстракций — интерфейсов Go.

[Читать перевод](https://nuancesprog.ru/p/18145/)",6214,6,1,goproglib
3859,2023-08-02 20:26:49+00:00,"#tip #go #beginner

 **Указатели на массивы могут использоваться как массивы в нескольких ситуациях**

 Пример слева компилируется и работает нормально, тогда как в примере справа третий `for` вызывает панику.",4739,16,8,goproglib
3858,2023-08-02 16:05:03+00:00,"#новости

 Команда Go представила 4-й релиз-кандидат [Go 1.21](https://groups.google.com/g/golang-announce/c/TQs0egfRmQA) и исправления безопасности для crypto/tls (CVE-2023-29409) в рамках версий Go [1.20.7/1.19.12](https://groups.google.com/g/golang-announce/c/X0b6CsSAaYI).",4584,12,1,goproglib
3857,2023-08-02 12:04:05+00:00,"[**От C до Go: как Go объединил лучшие черты своих предшественников**](https://habr.com/ru/companies/serverspace/articles/751766/)

Разработчики из **Serverspace** активно использует Go для работы, например с Terraform-провайдером, поэтому решили разобрать его особенности подробнее:

— историю языка, 
— почему он стал таким востребованным среди разработчиков, 
— какие черты заимствованы от C и других языков.

В конце вас ждет небольшая подборка материалов для самостоятельного изучения.",4801,13,0,goproglib
3856,2023-08-01 19:00:07+00:00,"#news #чтопроисходит

 [Опрос разработчиков Go возвращается: поделитесь своим отзывом](https://go.dev/blog/survey2023-h2).
 Proposal:[ database/sql: add methods to scan an entire row into one value](https://github.com/golang/go/issues/61637).
️ Целых две реализации [llama2.c](https://github.com/karpathy/llama2.c) на чистом Go: [go-llama2](https://github.com/tmc/go-llama2) и [llama2.go](https://github.com/nikolaydubina/llama2.go).
 Релиз [GoLand 2023.2 IDE](https://blog.jetbrains.com/go/2023/07/27/goland-2023-2/). Под капотом: интеграция с модулями Go, рефакторинг migrating function parameters  method receivers, поддержка errors.Is и errors.As, новые плагины AI Assistant (ограниченный доступ) и Kafka, интеграция с GitLab.
 [ntp 1.3](https://github.com/beevik/ntp/releases/tag/v1.3.0): имплементация клиента Simple NTP на Go.
 [go-elasticsearch 8.9](https://github.com/elastic/go-elasticsearch/releases/tag/v8.9.0): официальный Go-клиент для Elasticsearch.
 [sqlc 1.20](https://sqlc.dev/posts/2023/07/31/sqlc-one-point-twenty-released/): библиотека для генерации полностью типобезопасного идиоматического кода из SQL.
 [QCOW2](https://github.com/gpu-ninja/qcow2): библиотека для чтения и записи образов дисков QCOW2 —(QCOW2 — формат хранения, используемый эмулятором QEMU).",4708,15,0,goproglib
3855,2023-08-01 17:00:04+00:00,"#холивар

 Представьте, что за час вы можете научиться чему угодно. Что вы выберете?",4406,0,16,goproglib
3854,2023-08-01 14:06:04+00:00,"🪤Обзор распространенных ловушек, с которыми могут столкнуться Go-разработчики при бенчмаркинге.

[Читать](https://eli.thegreenplace.net/2023/common-pitfalls-in-go-benchmarking/)",4607,6,1,goproglib
3853,2023-07-31 18:00:05+00:00,"**Подборка лучших статей «Библиотеки программиста» за июль**: сохраняй в заметки, чтобы не пропустить #самыйсок

‍ [18 лучших IT-факультетов в России](https://proglib.io/p/18-luchshih-it-fakultetov-v-rossii-2023-06-30)
 [5 soft skills, которые помогут тебе дорасти до Senior-разработчика](https://proglib.io/p/5-soft-skills-kotorye-pomogut-tebe-dorasti-do-senior-razrabotchika-2023-06-30)
 [В CompTIA предсказали будущее айтишников и рассказали, к чему готовиться в ближайшие годы](https://proglib.io/p/v-comptia-predskazali-budushchee-aytishnikov-i-rasskazali-k-chemu-gotovitsya-v-blizhayshie-gody-2023-07-11)
 [5 красных флагов: как из текста вакансии понять, что компания — не очень](https://proglib.io/p/5-krasnyh-flagov-kak-iz-teksta-vakansii-ponyat-chto-kompaniya-ne-ochen-2023-07-17)
️ [3 совета по использованию Git для начинающих](https://proglib.io/p/3-soveta-po-ispolzovaniyu-git-dlya-nachinayushchih-2023-07-18)
 [ТОП-12 джоб-сайтов: где программисту разместить резюме и найти работу](https://proglib.io/p/top-12-dzhob-saytov-gde-programmistu-razmestit-rezyume-i-nayti-rabotu-2023-07-19)
 [4 сферы применения ChatGPT, Bing, Bard и Claude 2](https://proglib.io/p/4-sfery-primeneniya-chatgpt-bing-bard-i-claude-2-2023-07-20)
 [Cитуация на рынке труда в IT: зарплаты и куда все катится в 2023 году](https://proglib.io/p/cituaciya-na-rynke-truda-v-it-zarplaty-i-kuda-vse-katitsya-v-2023-godu-2023-07-25)",4822,8,0,goproglib
3852,2023-07-31 11:33:03+00:00,"[Мини-обзор новых фич Go 1.21](https://habr.com/ru/companies/karuna/articles/747726/) от Go-тимлида в Karuna Антона Околелова:

Работа со слайсами (пакет slices)
Работа с map (пакет maps)
Новый логгер (пакет log/slog)",5025,27,1,goproglib
3850,2023-07-30 19:01:05+00:00,"Мы можем использовать цикл __for-range__ для моделирования циклов __for i in 0..N__ в некоторых других языках, как показано на примере выше.

Шаги первых двух циклов должны быть известны во время компиляции, тогда как у последнего нет этого требования. Но последний выделяет чуть больше памяти (в стеке, под заголовок слайса).

#tip #go #beginner",4767,29,5,goproglib
3849,2023-07-30 17:00:05+00:00," **Быстрое введение в указатели** от автора книги **Let's Go** Алекса Эдвардса: на заметку Go-разработчику.

[Читать](https://www.alexedwards.net/blog/a-gentle-introduction-to-pointers)",4954,5,1,goproglib
3839,2023-07-30 14:36:57+00:00," **ТОП-10 книг, без которых не обойтись ни одному программисту**

Мы подготовили для вас подборку из 10 книг, без которых не обойтись ни одному профессионалу в IT. Эти книги станут для вас настольными на долгие годы.

 [Основной сайт](https://proglib.io/sh/gXNtiIL9wK)
 [Зеркало](https://proglib.tech/p/top-10-knig-bez-kotoryh-ne-oboytis-ni-odnomu-programmistu-2023-07-27)",3936,32,1,goproglib
3838,2023-07-29 14:00:05+00:00,"[**Обзор**](https://habr.com/ru/articles/751174/) [**архитектурного линтера go-arch-lint для Go-разработчика**](https://habr.com/ru/articles/751174/)

 **Go-arch-lint** состоит из 3 частей:

1️⃣ **Component** — абстракция над package (пакетом). Один компонент включает в себя один или более пакетов.
2️⃣ **Dependency** — зависимость. Они бывают двух видов: явные и неявные.

Явные зависимости — это import в файле с описанием конкретной зависимости от другого пакета.
Неявные — это передача методов или структур с методами через интерфейсы, каналы и прочие способы

3️⃣ **Dependency tree** — граф отношений между компонентами (кому и от кого можно зависеть).

 Принцип работы линтера:

размечает весь код на компоненты;
находит все зависимости между компонентами;
строит граф зависимостей;
сравнивает актуальный и желаемый граф зависимостей;
если мы получили непустой DIFF — значит, есть проблемы.",4970,22,0,goproglib
3837,2023-07-29 11:00:35+00:00,"Кто еще не подписан на наш главный канал — очень рекомендуем!

В [«Библиотеке программиста»](https://t.me/proglibrary) вас ждут фундаментальные IT-темы, Git, рынок труда, главные новости и, конечно же, мемы

**Вот вам топ недавних постов:**
[про коммиты в ветках Git](https://t.me/proglibrary/7625)
[новость о создании сверхразумного ИИ](https://t.me/proglibrary/7588)
[подборка инфографик на фундаментальные темы](https://t.me/proglibrary/7538)
[дайджест нейросетей для разработки](https://t.me/proglibrary/7602)

[Подписаться](https://t.me/proglibrary)",4244,4,0,goproglib
3836,2023-07-29 07:06:06+00:00,"Егор Гартман, бэкенд-инженер в Авито, тестирует несколько библиотек Deep Copy, а потом делает свою, более быструю и эффективную.

 [github.com/mohae/deepcopy](http://github.com/mohae/deepcopy),
 [github.com/barkimedes/go-deepcopy](http://github.com/barkimedes/go-deepcopy),
 [github.com/jinzhu/copier](http://github.com/jinzhu/copier),
 json marshal > unmarshal,
 msgpack marshal -> unmarshal.

[Читать](https://habr.com/ru/companies/avito/articles/743332/)",4379,16,4,goproglib
3835,2023-07-28 20:24:12+00:00," **Ловите подборку подкастов на русском и английском**

Есть что добавить? Ждем в комментариях

 [Радио-Т](https://radio-t.com/): разговоры на темы хайтек, высоких компьютерных технологий, гаджетов, облаков, программирования и прочего интересного из мира ИТ. Часто обсуждают и Go и его инструменты.
 [Go Get Podcast](https://gogetpodcast.ru/) от Николая Тузова и интересных гостей: про Go и всё, что с ним связано.
 [Подлодка](https://podlodka.io/): аудио-шоу про IT и всё, что с ним связано. [Выпуск про Go](https://podlodka.io/240).
** **[Go`ne Gamedev](https://gg.mave.digital/ep-1): подкаст о разработке игр на Go. Пока все остановилось на одном выпуске.

 [Go Time](https://changelog.com/gotime): ваш источник разнообразных дискуссий в сообществе Go. Один из лучших подкастов по Go.
 [go podcast()](https://go.transistor.fm/): 15-минутные выпуски новостей, советов и рекомендаций по Go.
 [Backend Banter](https://www.backendbanter.fm/): интервью с инженерами, в которых делается упор на Go, Python и SQL
 [Cup o' Go](https://cupogo.dev/): будьте в курсе событий сообщества Go всего за 15 минут в неделю.
 [Ardan Labs Podcast](https://www.youtube.com/watch?v=mQidWZbc8JM&list=PLADD_vxzPcZD836qm_nj9SyeRUbPrPmMv&pp=iAQB): увлекательные интервью с топовыми инженерами.
 [Friday Afternoon Deploy: A Developer Podcast](https://friday.hirelofty.com/): бескомпромиссное шоу о культуре и хаосе разработки программного обеспечения от создателей и разработчиков цифровых продуктов в Lofty Labs.

#podcast",5023,19,1,goproglib
3834,2023-07-28 07:27:04+00:00,"** Знакомство с кэшем ЦП**: свежий гайд по Go от команды Ardan Labs

Понимание того, как сделать ваш код дружественным к кэшу, может привести к значительному повышению производительности, но убедитесь, что вы понимаете связанные с этим риски и компромиссы.

[Читать](https://www.ardanlabs.com/blog/2023/07/getting-friendly-with-cpu-caches.html)",6404,21,9,goproglib
3833,2023-07-27 19:45:03+00:00," В комментариях новички часто спрашивают про ресурсы/книги для начинающего Go-разработчика. Давайте саккумулируем в комментариях свой опыт и поделимся источниками, с которых эффективнее всего начать изучение

__Или нет ничего лучше __[__go.dev__](https://go.dev/doc/) __и __[__Go tour__](https://go.dev/tour/welcome/1)__?__

#холивар",4690,8,14,goproglib
3832,2023-07-27 17:38:05+00:00," [**Proposal: spec: add range over int, range over func**](https://github.com/golang/go/issues/61405)

На прошлой неделе было опубликовано крупное предложение по изменению языка Go и есть большая вероятность, что это изменение войдет в будущий выпуск Go. Eli Bendersky рассказывает о мотивах предложения, о том, как оно будет работать, и приводит несколько примеров того, как будет выглядеть код Go, использующий его

[Читать](https://eli.thegreenplace.net/2023/preview-ranging-over-functions-in-go/)

#news",4663,16,3,goproglib
3831,2023-07-27 07:11:05+00:00,"**Пошаговый гайд по созданию CLI-инструмента на Go с использованием Cobra**

Вы напишете простой CLI-инструмент, который шифрует/дешифрует сообщения с использованием шифров Цезаря и Бэкона. Не обошлось и без мини-рекламы: для отправки SMS в CLI-инструменте используется Twilio SMS API.

[Читать](https://www.twilio.com/blog/use-cobra-build-go-powered-clis)",5786,14,0,goproglib
3830,2023-07-26 20:00:04+00:00,"[**Пересмотр встраивания для Go 1.22**](https://docs.google.com/document/d/1a6p7-nbk5PVyM1S2tmccFrrIuGzCyzclstBtaciHxVw/edit#heading=h.o82v9r2rjlej)

Встраивание (inlining) — концепция замены вызова функции в программе содержимым самой функции, что позволяет устранить дополнительные накладные расходы. Встраивание в Go улучшилось с годами, но политика в отношении того, когда и что встраивать, немного устарела.

Идея представленного документа состоит в том, чтобы реализовать различные настройки, которые, по словам автора, могут привести к «значительному повышению производительности приложений Go».",4707,10,1,goproglib
3829,2023-07-26 18:34:30+00:00,"Размер типа структуры без полей ненулевого размера равен нулю. Размер типа массива, длина которого равна нулю или размер элемента которого равен нулю, также равен нулю. Это можно доказать с помощью примера выше. 

В Go размеры часто обозначаются как значения __int__. Это означает, что максимально возможная длина массива равна MaxInt, значение которой равно 2^63-1 в 64-битных ОС. Однако длина массивов с ненулевыми размерами элементов жестко ограничена стандартным компилятором Go и рантаймом.

 Например

`var x [1<<63-1]struct{} // okay
var y [2000000000+1]byte // compilation error
var z = make([]byte, 1<<49) // panic: runtime error: makeslice: len out of range`

#tip #go #beginner",4643,13,2,goproglib
3828,2023-07-26 13:41:04+00:00,"Старый пример, не дающий интернету покоя. Проверим, как у вас с математикой?",4508,6,29,goproglib
3827,2023-07-25 20:28:04+00:00," Подборка для Go-разработчика:

 Proposal: [Let's Make Go's HTTP Request Multiplexer Better](https://github.com/golang/go/issues/61410).
 Релиз [ff 3.4](https://github.com/peterbourgon/ff/releases/tag/v3.4.0): пакет «flags-first» для конфигурации.
 Релиз [go-sse 0.6](https://github.com/tmaxmax/go-sse/releases/tag/v0.6.0): облегченная, полностью соответствующая спецификациям HTML5 библиотека server-sent events.
 Релиз [pdfcpu 0.4.2](https://github.com/pdfcpu/pdfcpu/releases/tag/v0.4.2): библиотека для обработки PDF, написанная на Go и поддерживающая шифрование.
 Релиз [go-git 5.8](https://github.com/go-git/go-git/releases/tag/v5.8.0): расширяемая реализация Git на чистом Go.
 Релиз [GoToSocial 0.10.0](https://github.com/superseriousbusiness/gotosocial/releases/tag/v0.10.0): сервер социальной сети ActivityPub, написанный на Go.
 Релиз [Fiber 2.48.0](https://github.com/gofiber/fiber/releases/tag/v2.48.0): веб-фреймворк, вдохновленный Express и построенный на основе Fasthttp.
 Релиз [Micro 4.3.0](https://github.com/micro/micro/releases/tag/v4.3.0): платформа для облачной разработки.
 Релиз [Dive 0.11](https://github.com/wagoodman/dive/releases/tag/v0.11.0): инструмент для изучения Docker-образа, содержимого слоев и поиска способов уменьшения размер образа Docker/OCI.

#news",5036,10,0,goproglib
3824,2023-07-25 11:52:05+00:00,"**Эксперимент ccgo/v4: пробуем runtime.Pinner**

В Go 1.21 пакет **runtime** включает новый тип **Pinner**, который можно использовать для освобождения объектов Go сборщиком мусора. Автор **ccgo** уже интегрировал Pinner в инструмент, а в статье он оценивает возможное влияние новой фичи на производительность

[Читать](https://modern-c.blogspot.com/2023/07/ccgov4-experiment-trying-new.html?m=1)",4717,12,0,goproglib
3823,2023-07-24 19:17:05+00:00,"Вышла третья часть в серии статей «[Безопасность цепочки поставок](https://t.me/goproglib/3560)» о конкретных методах, с помощью которых Go помогает вам доверять целостности используемых пакетов.

Вы узнаете о двух функциях, представляющих особый интерес для безопасности цепочки поставок: расширение Go для Visual Studio Code и встроенное фаззинг-тестирование.

#security",4946,9,0,goproglib
3822,2023-07-24 07:10:08+00:00,"Серия практических статей о том, как слайс работает под капотом, — что-то вроде материала Роба Пайка [о слайсах в блоге Go](https://go.dev/blog/slices).

1️⃣ [Build your own slice: Arrays and slices](https://www.willem.dev/articles/build-your-own-slice-start-here/)
2️⃣ [Build your own slice: Append and Copy](https://www.willem.dev/articles/build-your-own-slice-append-copy/)",5167,8,0,goproglib
3821,2023-07-23 20:42:03+00:00,"Десять лет назад Carl M. Johnson написал статью под названием “Go: The Good, the Bad, and the Meh”. Пришло время пересмотреть эту статью и разобраться, что по-прежнему остается верным, что изменилось, чего не хватало и что было (или превратилось в ошибку) неправильным.

[Читать](https://blog.carlmjohnson.net/post/2023/ten-years-of-go-good-bad-meh/)",5075,7,3,goproglib
3820,2023-07-23 15:35:05+00:00,"Особенности написания конкурентных программ: советы от Go-разработчика для Go-разработчика.

[Читать](https://habr.com/ru/articles/744038/)",5476,14,0,goproglib
3819,2023-07-22 11:02:04+00:00,"  **pop** — CLI-инструмент для отправки электронных писем из вашего терминала. Команда Charm имеют заслуженную репутацию разработчиков полезных инструментов и библиотек на базе Go, и pop, похоже, не является исключением.

[Репозиторий](https://github.com/charmbracelet/pop)",5054,12,0,goproglib
3818,2023-07-22 07:08:44+00:00,"**Как написать модель базы данных: разбор пяти различных подходов для Go-разработчика**

️Стандартную библиотеку
️Struct mapper
️SQL builder на примере **squirrel**
️sqlc
️ORM

[Читать](https://pboyd.io/posts/5-ways-to-write-a-go-database-model/)",5350,23,0,goproglib
3817,2023-07-21 19:49:04+00:00," **Подборка для Go-разработчика:**

 proposal: [spec: add untyped builtin zero](https://github.com/golang/go/issues/61372)
 [Обоснование использования корутин в Go](https://research.swtch.com/coro)
 [Go 1.21 Release Candidate 3](https://groups.google.com/g/golang-announce/c/5golCy-_yK0)
 [Пробуждение](https://gorilla.github.io/blog/2023-07-17-project-status-update/) проекта Gorilla
 Релиз [Govulncheck 1.0.0](https://go.dev/blog/govulncheck)
 Релиз [ntp 1.2](https://github.com/beevik/ntp/releases/tag/v1.2.0) — простой клиентский ntp-пакет для Go
 Релиз [Sarama 1.40](https://github.com/IBM/sarama/releases/tag/v1.40.0) — библиотека Go для Apache Kafka, которая переходит в бразды правления IBM
 Релиз [Go Rate Limiter 0.3](https://github.com/uber-go/ratelimit/releases/tag/v0.3.0) — возвращение в разработку после паузы в пару лет с более эффективной внутренней реализацией и без каких-либо внешних изменений

#news",4840,20,1,goproglib
3815,2023-07-21 07:13:02+00:00,"**Как построить систему, способную выдерживать нагрузку в 5 млн rps**

Владимир Олохтонов, руководитель команды разработки в отделе Message Bus (часть платформы Ozon), делится опытом построения линейно масштабируемой gRPC-прокси перед Kafka. Она способна обслуживать миллионы запросов в секунду и написана на Go.

[Читать](https://habr.com/ru/companies/ozontech/articles/749328/)",5543,18,1,goproglib
3814,2023-07-20 20:12:03+00:00,"Проект **Gorilla** официально выведен из статуса «в архиве» и будет поддерживаться разработчиками из Red Hat. Естественно, основные мейнтейнеры ждут участия других разработчиков.

[Подробнее](https://gorilla.github.io/blog/2023-07-17-project-status-update/)",5682,103,0,goproglib
3813,2023-07-20 18:44:07+00:00," Как в вашей компании/команде организовано тестирование проектов? Есть ли отдельная команда QA, или все ложится на плечи разрабов? Применяете ли вы подход «Разработка через тестирование» (test-driven development, TDD)?

#холивар",4978,6,5,goproglib
3812,2023-07-20 11:48:03+00:00,"**Анализ времени сборки Go**

Компилятор Go довольно быстр, но автору статьи было любопытно, какие факторы влияют на время компиляции. 

В статье он использовал 350 000 строк проекта **Istio**, чтобы протестировать Go, опробовать некоторые идеи и, в конце концов, дал несколько советов.

[Читать](https://blog.howardjohn.info/posts/go-build-times/)",5237,14,0,goproglib
3811,2023-07-19 20:10:28+00:00,"В отличие от большинства языков, в Go нет синтаксиса для обработки ошибок try/catch/finally. А как тогда обрабатывать ошибки?


В Go реализован минималистичный подход, подразумевающий проверку ошибок в местах их появления и исключающий их возникновение в других функциях на протяжении цепочки вызовов.

Для этого в Go используется встроенный тип ошибок, который определяется через объявление interface 

type error interface {
    Error() string
}

 Это означает, что вы можете использовать в качестве error любой тип данных, который реализует метод Error(), возвращающий значение string.


#вопросы_для_самопроверки",5024,37,15,goproglib
3809,2023-07-19 07:17:03+00:00,"** Корутины для Go**

Рассуждения Расса Кокса о том, зачем нам нужен пакет корутин для Go и как он будет выглядеть. Но сначала разберемся, что вообще такое корутины на практике

[Читать](https://research.swtch.com/coro)",5097,24,0,goproglib
3808,2023-07-18 18:40:03+00:00," Недавно мы [спрашивали](https://t.me/goproglib/3783) вас о том, какие самые глупые вопросы вам задавали на собеседованиях? ‍️

Вдогонку к теме собесов: поделитесь топом самых крутых вопросов с собеседований, которые вам запомнились

#холивар",4832,4,6,goproglib
3805,2023-07-18 12:00:06+00:00," **Подборка докладов на тему Go с недавних митапов:**

 **Evrone Golang митап**
[Тестовое окружение на фикстурах](https://youtube.com/watch?v=6eQfHORrhJg) (библиотека для Go), Тимофей Кулин / Яндекс (YDB)
[Архитектура Go проекта на практике](https://youtube.com/watch?v=hDwqFRUuykQ), Тигран Ханагян / HungerStation Delivery Hero
[Эффективно используем Go в команде](https://youtube.com/watch?v=5DkcKhLf6nA), Геннадий Ковалев / YADRO
[Ruby on Rails vs GoLang](https://youtube.com/watch?v=-30qrb1Hi_E), Александр Елистратов / BGaming

** YADRO Go To митап**
[Переходим на Go с других языков: парадигмы, удобство и неудобства технологии](https://youtube.com/watch?v=a5_6EulXwPE), Евгений Соколов / YADRO
[Какие инструменты Go помогают писать хороший (сопровождаемый) код](https://youtube.com/watch?v=bJs4ecp5Kyg), Геннадий Ковалёв / YADRO
[Лайфхаки для кода без побочных эффектов: пишем на Go и красиво, и правильно](https://youtube.com/watch?v=G-lhh_1XNcI), Влад Белогрудов / YADRO",5135,21,0,goproglib
3803,2023-07-18 07:07:06+00:00," [Pygolo](https://gitlab.com/pygolo/py) — инструмент для расширения Python с помощью Go и наоборот. Он представляет собой новый способ встраивания или расширения интерпретатора Python с помощью Go.

Pygolo делает большую часть тяжелой работы, заботясь о типах, модулях, исключениях и многом другом. Начните работу с инструментом [с руководства.](https://gitlab.com/pygolo/py/-/blob/main/docs/HOWTO-EMBED.md)",4729,14,0,goproglib
3802,2023-07-17 20:12:03+00:00,Гайд по разработке **REST API сервиса на Go** от Николая Тузова доступен в текстовом формате. Врываемся  https://t.me/goproglib/3769,4980,24,0,goproglib
3800,2023-07-17 12:32:05+00:00,"Несколько дней назад был представлен [Go 1.21 Release Candidate 3.](https://groups.google.com/g/golang-announce/c/5golCy-_yK0) Все уже ждут официального выпуска, а пока ловите [разбор наиболее важных изменений](https://www.dolthub.com/blog/2023-07-07-golang-1.21-release/) от Jason Fulghum из DoltHub.

#news",5719,17,2,goproglib
3799,2023-07-16 07:16:04+00:00,"**Микросервисы в банке: на чем их лучше писать? Java/Kotlin, а может Go?**

Текстовая расшифровка доклада Ивана Кочергина, руководителя центра собственной разработки РСХБ-Интех, в котором он сравнил Kotlin и Go в роли языков для написания микросервисов в банке.

[Читать ](https://habr.com/ru/companies/rshb/articles/747898/)& [Смотреть запись митапа](https://rutube.ru/video/e3118fad77a101791f2c1a7ba2130be0/?r=wd)",5481,9,10,goproglib
3798,2023-07-15 07:42:03+00:00,"**Отладка CLI-проектов на Go с помощью VS Code: **как добавить параметр Launch file в VS Code для отладки Go-кода без необходимости создавать модуль или перемещать файлы в пакет.

 [Смотреть](https://youtu.be/vInn3KNF1x4)",5205,12,0,goproglib
3797,2023-07-14 20:40:04+00:00," Новости и обновления популярных инструментов: ночная подборка для Go-разработчика

◾️ Анонс [Go 1.20.6 и 1.19.11](https://groups.google.com/g/golang-announce/c/2q13H6LEEx0)
◾️ [GoLand 2023.2 ](https://blog.jetbrains.com/go/2023/07/13/goland-2023-2-beta/)выходит на бета-версию
◾️ Анонс [Govulncheck 1.0.0](https://go.dev/blog/govulncheck?linkId=8881038)
◾️ Анонс [Centrifugo 5](https://centrifugal.dev/blog/2023/06/29/centrifugo-v5-released)
◾️ Анонс [TiDB 7.2](https://docs.pingcap.com/tidb/v7.2/release-7.2.0)
◾️ [fq 0.7](https://github.com/wader/fq/releases/tag/v0.7.0)
◾️ [Wazero 1.3.0](https://github.com/tetratelabs/wazero/releases/tag/v1.3.0)
◾️ [ghw 0.12.0](https://github.com/jaypipes/ghw/releases/tag/v0.12.0)
◾️ [ebpf-go 0.11](https://github.com/cilium/ebpf/releases/tag/v0.11.0)
◾️ [MacDriver 0.4](https://github.com/progrium/macdriver/releases/tag/v0.4.0)
◾️ [faasd 0.17](https://github.com/openfaas/faasd/releases/tag/0.17.0)
◾️ [Go OpenAI 1.14](https://github.com/sashabaranov/go-openai/releases/tag/v1.14.0)
◾️ [Gobot 2.1.1](https://github.com/hybridgroup/gobot/releases/tag/v2.1.1)
◾️ [FerretDB 1.5](https://github.com/FerretDB/FerretDB/releases/tag/v1.5.0)
◾️ [env 9.0](https://github.com/caarlos0/env/releases/tag/v9.0.0)
◾️ [Goxygen 0.6.1](https://github.com/Shpota/goxygen/releases/tag/v0.6.1)
◾️ [Column 0.4](https://github.com/kelindar/column/releases/tag/v0.4.0)
◾️ [Kubo 0.21](https://github.com/ipfs/kubo/releases/tag/v0.21.0)

#news",5141,16,0,goproglib
3795,2023-07-14 07:21:05+00:00,"Опубликована последняя статья из серии о [фаззинг-тестировании в Go](https://t.me/goproglib/3616), которая завершает практический пример поиска и исправления ошибки в коде.

В конце также есть ответы на некоторые непонятные вопросы, которые могли возникнуть в ходе чтения предыдущих материалов.",5232,11,0,goproglib
3794,2023-07-13 19:31:05+00:00,"Команда безопасности Go представила Govulncheck v1.0.0 и API v1.0.0 для интеграции сканирования в другие инструменты.

 [Подробнее](https://go.dev/blog/govulncheck?linkId=8881038)

#news",5118,19,0,goproglib
3790,2023-07-13 11:06:05+00:00,"Собрали для вас нейросети для разработки (помимо Chat GPT) — сохраняйте и тестируйте⬇️

[Code Mentor](https://code-mentor.ai/) оптимизирует и рефакторит код
[Copilot by GitHub](https://github.com/features/copilot/) помогает писать код и дополняет его своими предложениями
[ExplainDev](http://explain.dev/) обучает в процессе и помогает разобраться в коде
[GPT Engineer](https://github.com/AntonOsika/gpt-engineer) может всю работу сделать за вас — нужно только сказать, что хотите написать
[CodeT5](https://github.com/salesforce/CodeT5) преобразовывает запрос в код и дописывает начатые функции
[Polycoder](https://github.com/VHellendoorn/Code-LMs) бесплатный помощник, который способен генерировать код на 12 языках программирования
[Tabnine](https://www.tabnine.com/) дописывает код за вами — даже полноценные строчки (но только в платной версии)
[Mintlify](https://mintlify.com/) пишет документацию и комментарии
[Cogram](https://www.cogram.com/) переводит запрос на язык баз данных и интегрируется со средой разработки Jupyter

__Бонус: __
[‍Agent GPT](https://agentgpt.reworkd.ai/ru) устанавливает в вашем браузере ИИ-агента, который помогает в выполнении поставленной задачи (можно использовать не только при разработке, но и при планировании путешествия и для других личных задач)

#дайджест",5478,9,5,goproglib
3787,2023-07-13 05:12:03+00:00,"«Можно ли реализовать анонимную сеть настолько маленькой, чтобы ее код смог понять даже начинающий программист за короткое время?», — на такой вопрос постарался ответить автор статьи. Как итог — всего в 200 строк кода на Go.

[Читать](https://habr.com/ru/articles/745256/)",5568,19,0,goproglib
3785,2023-07-12 09:04:20+00:00," **Представлены Go 1.20.6 и 1.19.11**

С новыми выпусками прилетели фиксы безопасности для CVE-2023-29406 и [Go issue ](https://github.com/golang/go/issues/60374)(net/http: insufficient sanitization of Host header).

[Подробнее](https://groups.google.com/g/golang-announce/c/2q13H6LEEx0)

#news",5966,20,1,goproglib
3784,2023-07-12 06:00:05+00:00,"**Важно: правила площадки️
**
1️⃣ За спам, рекламу, ботоводство, скам — бан и удаление всех комментариев

2️⃣ За оскорбления группы/канала/админа/других участников, политические дебаты — первый раз удаление, второй раз — профилактический бан на неделю, третий раз — бан

3️⃣ За ссылки на нелегальные ресурсы — первый раз удаление, второй раз — бан

Напоминаем, что написать нам можно сюда: @proglibrary_feedback_bot

Пожалуйста, соблюдайте правила — мы со своей стороны тоже будем стараться максимально оперативно модерировать комментарии.",6740,16,0,goproglib
3783,2023-07-11 19:42:05+00:00,"Какие, по вашему мнению, самые глупые вопросы по Go или другим темам вам задавали на собеседованиях? Поделитесь своим личным топом

#холивар",6306,7,30,goproglib
3781,2023-07-11 13:36:04+00:00,"Вышла вторая часть в серии статей «[Безопасность цепочки поставок](https://t.me/goproglib/3560)» о конкретных методах, с помощью которых Go помогает вам доверять целостности используемых пакетов. 

Go имеет встроенную защиту от трех основных способов компрометации пакетов: 
️Опубликована новая вредоносная версия вашей зависимости
️Пакет изъят из экосистемы
️Вредоносный файл заменяет текущую версию вашей зависимости

В статье рассмотрены сценарии каждой ситуации и показано, как Go помогает защитить от подобных атак.

#security",6066,12,0,goproglib
3780,2023-07-10 19:56:04+00:00,"[5 книг по Go для начинающих разработчиков](https://habr.com/ru/companies/ru_mts/articles/747040/): подборка от компании MTS.

Head First. Изучаем Go (Джей Макгаврен)
Язык программирования Go (Алан А. А. Донован, Брайан У. Керниган)
Введение в программирование на Go (Калеб Докси₽
Программирование на Go. Разработка приложений XXI века (Марк Саммерфильд)
Go на практике (Мэтт Батчер, Мэтт Фарина)

Есть что добавить?",6934,17,6,goproglib
3779,2023-07-09 20:37:04+00:00,"Какие ключевые функции делают Go отличным инструментом для обработки данных? Конечно, простая в использовании конкурентность и высокопроизводительный рантайм. Разбираемся на практике, что к чему

 [Смотреть](https://youtu.be/OqDucku2V-I)",5940,11,1,goproglib
3778,2023-07-08 12:56:05+00:00," [**Watermill**](https://github.com/ThreeDotsLabs/watermill) — библиотека для создания событийно-ориентированных приложений на Go и реализации эффективной работы со стримингом сообщений.

Можно использовать обычные реализации pub/sub (Kafka или RabbitMQ), а также HTTP или MySQL binlog.

С момента нашего последнего упоминания количество звезд проекта увеличилось в два раза. В феврале был представлен крупный [выпуск 1.2,](https://threedots.tech/post/watermill-1-2/) а сейчас доступна [версия 1.3.1.](https://github.com/ThreeDotsLabs/watermill/releases/tag/v1.3.1)

#перечитываястарое",6362,30,4,goproglib
3777,2023-07-07 20:52:19+00:00,"Лайк, если узнали себя

#юмор #жиза",5537,57,6,goproglib
3776,2023-07-06 18:06:04+00:00,"Над каким Go-проектом вы сейчас работаете? Какой стек используете? Поделитесь в комментариях

#холивар",6008,6,27,goproglib
3775,2023-07-06 12:11:04+00:00,"Обзор основных способов обработки ошибок в Go и новых возможностей для работы с ошибками, которые появились в версии 1.20.

 [Смотреть](https://youtube.com/watch?v=9a86RFSkBYQ)",6464,13,4,goproglib
3774,2023-07-06 06:36:03+00:00,"После двух месяцев работы и почти 200 коммитов основной мейнтейнер представляет **GoReleaser v1.19**. Внутри фиксы безопасности и многое другое.

[Читать](https://carlosbecker.com/posts/goreleaser-v1.19)",5498,4,9,goproglib
3772,2023-07-05 10:19:03+00:00,"Нина Пакшина, Go-разработчик в Лента Онлайн, рассказывает об оптимизации памяти и управлении сборщиком мусора в Go: как управлять сборщиком мусора, как оптимизировать потребление памяти приложением и защититься от ошибки out-of-memory.

[Читать](https://habr.com/ru/articles/742402/)",5994,24,3,goproglib
3771,2023-07-04 18:06:03+00:00,"**Управление сложной инфраструктурой с помощью AWS Cloud Development Kit и Go**

Автор описывает опыт и проблемы портирования проекта для управление инфраструктурой и приложениями K8s на AWS с Python на Go.

[Читать](https://blog.techinthe.cloud/managing-complex-infrastructure-using-aws-cdk-and-go)",5508,9,0,goproglib
3770,2023-07-04 14:18:05+00:00," **5 soft skills, которые помогут тебе дорасти до Senior-разработчика**

Как думаешь, что нужно уметь, чтобы стать крутым Senior-разработчиком или даже создать свой успешный стартап? Спойлер: нет, не только хорошо кодить.

 [Основной сайт](https://proglib.io/sh/8lAXUxHo1B)
 [Зеркало](https://proglib.io/p/5-soft-skills-kotorye-pomogut-tebe-dorasti-do-senior-razrabotchika-2023-06-30)",5539,6,3,goproglib
3769,2023-07-03 07:34:06+00:00,"️ **Гайд по разработке REST API сервиса на Go от Николая Тузова **

В качестве примера взят сокращатель URL-адресов. Что внутри:

️HTTP-роутер: go-chi/chi
️Логи: slog
️Юнит-тесты, тесты хэндлеров и функциональные
️Автоматический деплой через GitHub Actions с соответствующим workflow

 [Смотреть](https://youtu.be/rCJvW2xgnk0) & [Читать](https://habr.com/ru/companies/selectel/articles/747738/)",8068,71,4,goproglib
3768,2023-07-02 18:56:04+00:00,"**О структурированном логировании в Go 1.21**

Slog предоставляет чистый и согласованный API для структурированного логирования. Библиотека использует структуры ключ-значение для хранения логов, которые можно более эффективно анализировать и фильтровать, в отличие от традиционного логирования. Детали работы с библиотекой — под катом 

[Читать](https://lukas.zapletalovi.com/posts/2023/about-structured-logging-in-go121/)",5817,14,4,goproglib
3766,2023-07-02 07:12:06+00:00,"**Пополняемая серия статей о разработке ОС на Go** 

Казалось бы, Go не предназначен для таких задач. Но у автора другое мнение на этот счет. Для него Go — единственный логичный выбор для разработки ОС. Заинтригованы? Тогда скорее под кат.

Следите за обновлениями

▪️ [The Bootloader](https://totallygamerjet.hashnode.dev/writing-an-os-in-go-the-bootloader)
▪️ [Why write an OS in Go](https://totallygamerjet.hashnode.dev/why-write-an-os-in-go)?",5076,18,3,goproglib
3765,2023-07-01 20:31:04+00:00,"Атомики в Go: обзор некоторых особенностей их внутренней реализации и отличий от мьютексов.

[Читать](https://habr.com/ru/articles/744822/)",5731,18,0,goproglib
3764,2023-07-01 19:23:06+00:00,"** Dendy** — эмулятор NES/Famicom с сетевым многопользовательским режимом, написанный на Go. 

[Репозиторий](https://github.com/maxpoletaev/dendy)",5101,50,0,goproglib
3763,2023-06-30 20:43:03+00:00," **Новости и обновления популярных инструментов: подборка для Go-разработчика**

◾️ Состоялась конференция [GopherCon Europe 2023](https://gophercon.eu/)
◾️ [Go 1.21 Release Candidate](https://go.dev/blog/go1.21rc)
◾️ [Изменение работы с модулями в Go 1.21](https://utcc.utoronto.ca/~cks/space/blog/programming/Go121ToolchainDownloads)
◾️ [net/http: move HTTP/2 into the standard library](https://github.com/golang/go/discussions/60746)
◾️ [GoLand 2023.2 EAP #7](https://blog.jetbrains.com/go/2023/06/30/goland-2023-2-eap-7/): LSP API Support, and HTTP Client Improvements
◾️ [gomock](https://github.com/golang/mock) теперь не поддерживается. Поддерживаемый форк [здесь](https://github.com/uber/mock)
◾️ [Create Go App CLI 4.0.1](https://github.com/create-go-app/cli/releases/tag/v4.0.1)
◾️ [lingua-go 1.3.4](https://github.com/pemistahl/lingua-go/releases/tag/v1.3.4)
◾️ [ImmuDB 1.5](https://golangweekly.com/link/141589/web)
◾️ [ObjectBox Go Database 1.7](https://golangweekly.com/link/141590/web)
◾️ [OpenGist 1.4](https://golangweekly.com/link/141591/web)
◾️ [MongoDB Go Driver 1.12](https://golangweekly.com/link/141592/web)
◾️ [QUIC Go 0.36](https://golangweekly.com/link/141593/web)
◾️ [Pie 2.7](https://github.com/elliotchance/pie/releases/tag/v2.7.0)
◾️ [Mergo 1.0 ](https://github.com/imdario/mergo/releases/tag/v1.0.0)
◾️ [FerretDB 1.4](https://github.com/FerretDB/FerretDB/releases/tag/v1.4.0) 
◾️ [Goxygen 0.6](https://github.com/Shpota/goxygen/releases/tag/v0.6.0)
◾️ [sh 3.7](https://github.com/mvdan/sh/releases/tag/v3.7.0) 
◾️ [RoseDB 2.2.0](https://github.com/rosedblabs/rosedb/releases/tag/v2.2.0) 
◾️ [Dolt 1.7.1](https://github.com/dolthub/dolt/releases/tag/v1.7.1)
◾️ [Hertz 0.6.5 ](https://github.com/cloudwego/hertz/releases/tag/v0.6.5)
◾️ [Ginkgo 2.11](https://github.com/onsi/ginkgo/releases/tag/v2.11.0)

#news",5270,17,4,goproglib
3762,2023-06-30 18:08:04+00:00,"**Перевод действительно **[**интересной статьи**](https://t.me/goproglib/3374)**, которая познакомит вас с возможностями Go для выполнения манипуляций с битами**

Автор разбирает установку, очистку, инвертирование, сдвиг битов, использование техники SWAR, эффективную обработку Юникода и прочие приёмы, позволяющие повысить продуктивность программирования.

[Читать](https://habr.com/ru/companies/ruvds/articles/744230/)",5226,11,0,goproglib
3760,2023-06-29 20:16:05+00:00,"Каждый разработчик пишет или планирует писать пет-проект, ведь в нем можно реализовать все свои задумки. В пет-проекте нет дедлайнов, продактов, тимлидов. Одним словом, рай для разработчика. 

 Вы пишите пет-проекты? Используете для них Go или другой язык?

#холивар",5050,27,39,goproglib
3759,2023-06-29 07:07:03+00:00,"**Подробный обзор возможностей io.SectionReader**

В обширной коллекции встроенных пакетов Go пакет **io** занимает особое место благодаря своей широкой функциональности. Если вам нужен инструмент для чтения определенных разделов файла или потока данных, на помощь приходит **io.SectionReader**. 

[Читать](https://mustafanafizdurukan.github.io/posts/taking-closer-look-at-io-sectionreader/)",5386,10,0,goproglib
3758,2023-06-28 18:33:04+00:00,"**GoNB** — экспериментальное ядро Go Notebook, которое позволяет легко запускать код Go в Jupyter Notebook и его вариациях. 

Уже интересно? Начните знакомство с [туториала](https://github.com/janpfeifer/gonb/blob/main/examples/tutorial.ipynb).

[Репозиторий](https://github.com/janpfeifer/gonb)",5356,21,1,goproglib
3756,2023-06-28 11:19:05+00:00,"**Видеогайд по использованию htmx + Go для разработки фуллстек-приложения**

В React, Angular или аналогичных фронтенд-фреймворках (библиотеках) довольно высокий порог входа, чего не скажешь об htmx. Этот инструмент предлагает интересную облегченную альтернативу, более современную и, к счастью, пользующуюся большим авторитетом, чем jQuery.

[Смотреть](https://youtu.be/F9H6vYelYyU)",5294,8,4,goproglib
3755,2023-06-28 06:02:59+00:00,"**️ «Библиотека программиста» находится в поиске переводчика технических статей**

**Обязанности**
• Перевод технических статей, документации и руководств с английского на русский язык.
• Редактирование и корректура переведенных текстов для обеспечения высокого качества и своевременной доставки переводов.

**Что значит редактирование? Просто так взять DeepL и слово в слово перевести статью не получится?**
• Не получится. Как правило, 10–40% текста — «вода». Переводчик должен убрать все лишнее и оставить главное, чтобы читатель не тратил время на чтение «забавной истории из жизни моего питомца, который внес неоценимый вклад в написание данного материала».

**Мы предлагаем**
• Удаленку.
• Официальное трудоустройство.
• Своевременную оплату за выполненную работу.

️ [Заполнить анкету](https://docs.google.com/forms/d/e/1FAIpQLSdZRp4TjqpvNptKlIhHWa7go-I4-9u8Ft8cda8woK6URep_Zw/viewform?usp=sf_link) ⬅️

**Я хорошо программирую, но пишу «так себе». Что делать?**
Если вы хорошо программируете, но навыки письма немного отстают, пройдите наш бесплатный курс на Степике [«Статьи для IT: как объяснять и распространять значимые идеи»](https://stepik.org/course/101672/promo).",4637,8,0,goproglib
3754,2023-06-27 20:32:03+00:00,"Как вы стали Go-разработчиком? 

Некоторые переходят из PHP, кто-то начинает с нуля. Каким был ваш путь?

#холивар",4622,0,39,goproglib
3753,2023-06-27 19:05:04+00:00,"Практический взгляд на встроенные функции __min__, __max__ и __clear__, которые появились в Go 1.21.

[Читать](https://antonz.org/go-1-21-builtins/)",6196,19,0,goproglib
3751,2023-06-27 12:00:04+00:00,"**️Анонс поддержки Go для Wasm Workers Server**

WWS — фреймворк WebAssembly для разработки бессерверных приложений и их запуска в любом месте. 

[Читать](https://wasmlabs.dev/articles/go-support-on-wasm-workers-server/)

#news",5027,18,0,goproglib
3749,2023-06-26 20:11:03+00:00,"Джонатан Холл объясняет загадочные свойства констант: на заметку Go-разработчику.

[Смотреть](https://youtu.be/pypIL6t21cg)",5332,6,0,goproglib
3748,2023-06-26 07:00:05+00:00," **Руки прочь от кода: почему технический менеджер не должен ревьюить код**

В этой статье мы подробно рассмотрим отличие технического менеджера от техлида. Также узнаем, почему при размере команды больше четырех технический менеджер должен сосредоточиться на своей основной роли — управлении коммуникациями внутри и вне команды.

 [Основной сайт](https://proglib.io/sh/hRoSF0GMlJ)
 [Зеркало](https://proglib.tech/p/ruki-proch-ot-koda-pochemu-tehnicheskiy-menedzher-ne-dolzhen-revyuit-kod-2023-06-23)",4948,10,0,goproglib
3747,2023-06-25 20:15:38+00:00,"Каждый, кто работает с Linux, наверняка сталкивался с командой `tail -[n]` `-f /path/to/filename`. 

Почему бы не сделать что-то подобное на Go для передачи логов в режиме реального времени на сторону фронта с помощью веб-сокетов?

[Читать](https://betterprogramming.pub/streaming-log-files-in-real-time-with-golang-and-websockets-a-tail-f-simulation-89e080bebfe) (pdf-файл для тех, у кого не открывается Medium)",5546,16,1,goproglib
3746,2023-06-25 11:00:05+00:00,"️ **Ненужная сложность: почему мы неправильно проектируем программное обеспечение**

В этой статье расскажем про причины неправильного проектирования ПО и предложим средства для устранения анти-шаблона ненужной сложности.

 [Основной сайт](https://proglib.io/sh/zr5DHcCwlx)
 [Зеркало](https://proglib.tech/p/nenuzhnaya-slozhnost-pochemu-my-nepravilno-proektiruem-programmnoe-obespechenie-2023-06-20)",4969,18,0,goproglib
3745,2023-06-25 07:12:03+00:00,"[**Опубликованы материалы митапа, организованного компанией YADRO**](https://habr.com/ru/companies/yadro/articles/743378/)

Если вы только думаете или недавно начали писать на Go в коммерческих проектах, эти доклады могут быть вам интересны:

 [Переходим на Go с других языков: парадигмы, удобство и неудобства технологии](https://youtu.be/a5_6EulXwPE)
 [Лайфхаки для кода без побочных эффектов: пишем на Go и красиво, и правильно](https://youtu.be/G-lhh_1XNcI)
 [Какие инструменты Go помогают писать хороший (сопровождаемый) код](https://youtu.be/bJs4ecp5Kyg)",5670,15,2,goproglib
3744,2023-06-24 16:08:29+00:00,"**Разработка data-driven приложения с использованием Go и Kafka**

Разбираемся, как написать простую копию Twitter, где у каждого пользователя есть временная шкала и лента рекомендаций.

[Читать](https://medium.com/@mhrlife/building-a-data-driven-application-with-golang-and-kafka-personalization-b189bf179bca) (pdf-файл для тех, у кого не открывается Medium)",6245,22,2,goproglib
3743,2023-06-23 20:02:04+00:00," **pie **— вспомогательная библиотека для работы со slice и map, ориентированная на безопасность типов и производительность.

[Репозиторий](https://github.com/elliotchance/pie)",5871,24,5,goproglib
3742,2023-06-23 19:12:03+00:00,"По мере увеличения количества репозиториев в проекте увеличивается и сложность зависимостей. Со временем может возникнуть необходимость делиться кодом между репозиториями — вот где будет полезна система модулей Go.

Создать новые частные модули легко, но возникают проблемы, когда вы хотите их использовать в своих проектах. [В статье кратко разобрано](https://aran.dev/posts/github-actions-go-private-modules/), как настроить локальное окружение и GitHub Actions для использования частных модулей Go.",5617,10,0,goproglib
3740,2023-06-22 19:36:03+00:00,"**Указатели в Go: когда и как использовать**

В новом обучающем видео Anthony De Meulemeester делится опытом эффективного использования указателей в Go.

[Смотреть](https://youtu.be/3WsEDZRif6U)",6974,22,0,goproglib
3739,2023-06-22 17:51:03+00:00,"**Ерванд Агаджанян, бэкенд-разработчик в EMCD Tech, рассказывает о планировщике Go**

Основываясь на материалах из книги Уильяма Кеннеди **Ultimate Go**, автор сначала кратко уделяет внимание планировщику ОС, после чего уже переходит к планировщику Go.

[Читать](https://habr.com/ru/articles/743266/)",5692,17,0,goproglib
3738,2023-06-21 20:59:03+00:00," **Не можете уснуть? Это потому, что новые фичи Go не попробовали **

Команда Go представила[ релиз-кандидат Go 1.21](https://groups.google.com/g/golang-announce/c/REcCdQj1taA) (go1.21rc2). [Читайте краткий обзор ](https://go.dev/blog/go1.21rc)заметных изменений и функций новой версии.

#news",5196,48,9,goproglib
3737,2023-06-21 19:32:03+00:00,"**math/rand/v2: новый API для math/rand?**

[Расс Кокс](https://github.com/golang/go/discussions/60751) предлагает использовать стандартную библиотеку math/rand в качестве отправной точки и расширить ее до версии 2 с множеством обратно несовместимых изменений, таких как удаление устаревших функций и изменение нескольких реализаций генератора псевдослучайных чисел.",4911,5,0,goproglib
3735,2023-06-20 20:01:05+00:00," Какие по вашему мнению **самые полезные функции Go**, которые были добавлены в нескольких последних версиях языка (Go 1.18/1.19/1.20)? 

Поделитесь опытом, используете ли вы их в рабочих/пет проектах ",4751,0,17,goproglib
3734,2023-06-20 19:21:05+00:00,"**Инициализация больших статических данных типа map в Go**

Вы наверняка помните про Dolt. Это база данных SQL с функциями контроля версий, подобными Git. В новом техническом материале команда Dolt исследует различные аспекты реализации инициализации статического типа map в цепочке инструментов Go, каковы накладные расходы во время выполнения и некоторые альтернативные подходы к решению этой проблемы.

[Читать](https://www.dolthub.com/blog/2023-06-16-static-map-initialization-in-go/)",5010,6,0,goproglib
3732,2023-06-19 20:53:04+00:00,"Команда Stack Overflow [опубликовала](https://survey.stackoverflow.co/2023/) результаты опроса разработчиков за 2023 год. Давайте обсудим то, что касается Go-разработчика:

Go на 13 месте в категории «Языки программирования, сценариев и разметки»
Go на 10 месте в категории «Самые высокооплачиваемые технологии»
Goland на 23 месте в категории IDE, а самым популярным редактором кода стал VS Code
Самые популярные базы данных: PostgreSQL и MySQL
Самый популярный инструмент: Docker",4955,11,0,goproglib
3731,2023-06-19 18:58:05+00:00,"**️ LangChain Go** — порт Python-фреймворка **LangChain** на Go, который значительно упрощает и ускоряет процесс разработки приложений на основе больших языковых моделей.

[Репозиторий](https://github.com/tmc/langchaingo)",5056,2,0,goproglib
3730,2023-06-18 21:00:05+00:00,"Пошаговый гайд по разработке сервиса real-time уведомлений на Go.

[Читать](https://medium.com/@mhrlife/building-a-real-time-notification-service-with-golang-golang-basics-92e0dcb48d4d) (используйте Tor/VPN, если блог не открывается)",6128,11,2,goproglib
3729,2023-06-18 18:45:05+00:00,"Новая неделя — новые советы по работе с Go от Preslav Rachev. В этом материале он предлагает способ полудекларативного перечисления шагов, которые вы хотите выполнить, под названием «пошаговая функция».

[Читать](https://preslav.me/2023/06/14/golang-focus-on-the-happy-path-with-step-functions/)",5030,6,3,goproglib
3728,2023-06-18 09:39:03+00:00," [**gotestsum**](https://github.com/gotestyourself/gotestsum) — простой инструмент, который запускает ‘go test’ и выводит удобочитаемые результаты прогона тестов. Подойдет как для локальной разработки, так и для использования в CI.

В апреле был выпущен крупный релиз [v1.10.0](https://github.com/gotestyourself/gotestsum/releases/tag/v1.10.0).",5183,18,0,goproglib
3727,2023-06-17 21:06:04+00:00,"Менторская программы «Навыки»: **подборка полезных видео для Go-разработчика**.

▫️ [Самое полное интервью Go Middle](https://youtu.be/ryJOS-8hmQo)
▫️ Тестирование в Go: [часть 1](https://youtu.be/iJK99AQqKZY) & [часть 2](https://youtu.be/G43JMzdRv00)
▫️ [Безопасность в Go](https://youtu.be/UfeZ-bPFs10)
▫️ [Что нужно знать о слайсах в Go?](https://youtu.be/1vAIvqDo5LE)
▫️ Задачи по concurrency в Go: [часть 1](https://youtu.be/aJ74a1gydbQ) & [часть 2](https://youtu.be/U3fEaBDZvyE)",6012,23,0,goproglib
3726,2023-06-17 11:17:02+00:00," [**TinyGo**](https://github.com/tinygo-org/tinygo) — развивающийся Go-компилятор для микроконтроллеров и компактных однопроцессорных систем. Компиляция для различных целевых платформ реализована при помощи LLVM.

На прошлой неделе были представлены версии [0.28.0 и 0.28.1](https://github.com/tinygo-org/tinygo/releases). 

#перечитываястарое",5040,33,0,goproglib
3725,2023-06-16 18:10:05+00:00,"**11 заповедей Junior-разработчика**

В этой статье дадим несколько дельных советов, которые помогут вам избежать распространенных ошибок на старте карьеры.

 [Основной сайт](https://proglib.io/sh/no0pcQwLhF)
 [Зеркало](https://proglib.tech/p/11-zapovedey-junior-razrabotchika-2023-06-16)",5068,10,1,goproglib
3723,2023-06-15 20:52:04+00:00, Какие библиотеки и инструменты вы чаще всего используете при разработке проектов на Go? Поделитесь опытом.,4866,0,10,goproglib
3722,2023-06-15 19:53:05+00:00," [**golang interview prep**](https://github.com/MatthewJamesBoyle/golang-interview-prep) — репозиторий для подготовки к собесу от Мэтта Бойла из Cloudflare, который содержит рабочее CRUD-приложение, но с кучей багов. 

Оно не соответствует передовым практикам, содержит ошибки и проблемы с безопасностью.

__ Сможете найти все баги?__",6943,15,0,goproglib
3721,2023-06-15 07:09:06+00:00," **6 типичных ошибок, которые допускают программисты при составлении резюме**

Рассказываем, что не так с резюме большинства программистов и как сделать так, чтобы работодатель обратил на вас внимание.
 
 [Основной сайт](https://proglib.io/sh/dnP1QqNUeG)
 [Зеркало](https://proglib.tech/p/6-tipichnyh-oshibok-kotorye-dopuskayut-programmisty-pri-sostavlenii-rezyume-2023-06-14)",4555,7,0,goproglib
3720,2023-06-14 19:59:05+00:00,"**Обработка огромных лог-файлов с помощью Go и Python**

В поисках быстрого решения для обработки большого объема логов автор таки выбирает Go + BigCsvReader вместо Python.

[Читать](https://www.madhur.co.in/blog/2023/06/10/processing-huge-log-files.html)",6322,4,0,goproglib
3719,2023-06-14 18:28:03+00:00,"** Кэширование Go-тестов в CI**: как команде Airplane удалось на порядок сократить время прогона всех юнит-тестов через CI за счет кэширования.

[Читать](https://www.airplane.dev/blog/caching-golang-tests-in-ci)",5332,6,0,goproglib
3718,2023-06-13 20:55:04+00:00,"**Кодим сфетофор на Go для Raspberry Pi**

Это больше касается настройки и кросс-компиляции, но работать с Raspberry Pi всегда интересно, и Go здесь подходит как нельзя лучше.

[Читать](https://simonprickett.dev/raspberry-pi-coding-in-go-traffic-lights/)",5285,11,3,goproglib
3717,2023-06-13 20:00:03+00:00,"️ **4 основных алгоритма сравнения Git Diff: когда и какой алгоритм использовать**

Обзор четырех алгоритмов git diff: Майерса, минимальный, «терпения» и гистограммный. Также приводятся наглядные примеры, чтобы можно было сравнить результат применения каждого алгоритма самостоятельно.

 [Основной сайт](https://proglib.io/sh/f5JdLihGEm)
 [Зеркало](https://proglib.tech/p/4-osnovnyh-algoritma-sravneniya-git-diff-kogda-i-kakoy-algoritm-ispolzovat-2023-06-13)",4599,9,0,goproglib
3716,2023-06-13 19:03:02+00:00,"**Серия руководств о фаззинг-тестировании** в Go [продолжается](https://t.me/goproglib/3616). Из [второй части](https://bitfieldconsulting.com/golang/fuzz-tests) вы узнаете, как встроенное в Go средство фаззинг-тестирования помогает автоматизировать поиск простой ошибки.

В [третьей части](https://bitfieldconsulting.com/golang/fuzz-target) автор берет более сложную и реалистичную функцию и пробует использовать фаззер для выявления конкретного типа ошибок, который распространен в Go.",5094,2,0,goproglib
3715,2023-06-12 19:31:05+00:00,"**Обработка ошибок в Go**: полезные советы и приемы для начинающих.

[Читать](https://dev.to/dsysd_dev/demystifying-error-handling-in-go-best-practices-and-beyond-272f)",5397,16,3,goproglib
3714,2023-06-12 18:10:06+00:00," **Нейронки кодят за вас: 28 AI-сервисов в помощь разработчику**

Расскажем о самых полезных новинках, которые помогут написать, отладить и протестировать код, а также ускорят процесс изучения нового стека и подготовку к собеседованию.

 [Основной сайт](https://proglib.io/sh/nzTXp9FR8j)
 [Зеркало](https://proglib.tech/p/neyronki-kodyat-za-vas-28-ai-servisov-v-pomoshch-razrabotchiku-2023-06-09)",5023,16,0,goproglib
3713,2023-06-12 14:13:03+00:00,"**Dependency Injection в Go**: свежее видео от Anthony De Meulemeester о том, как использовать внедрение зависимостей в ваших Go-проектах для написания более модульного, поддерживаемого и тестируемого кода.

 [Смотреть](https://youtu.be/UX4XjxWcDB4)",5101,5,2,goproglib
3712,2023-06-12 09:43:03+00:00,"**Серия заметок о дженериках** от Jon Calhoun:

▫️[Ускоренный курс по дженерикам](https://www.calhoun.io/crash-course-on-go-generics/): что это, некоторые варианты использования и распространенные заблуждения об их использовании
▫️[Что означает символ «~»](https://www.calhoun.io/what-does-the-tilde-mean-in-go-generics/) в дженериках",5096,12,0,goproglib
3711,2023-06-11 21:26:04+00:00,"** Batch Image Generator** — инструмент для создания динамического содержимого изображений на основе шаблона и CSV-файла. И самое интересное здесь не в самом инструменте, а в том, что это пример десктопного приложения на основе [Wails](https://wails.io/) (Svelte + Go).

 [Репозиторий](https://github.com/codenoid/batch-image-generator)",4848,14,0,goproglib
3710,2023-06-11 20:31:03+00:00,"**Быстрое введение в Go**: пополняемая серия видеоуроков для изучения ключевых аспектов языка.

 [Смотреть](https://youtu.be/5og8btQcdlw)",4924,10,2,goproglib
3709,2023-06-11 15:55:05+00:00," [**Pnutmux**](https://gitlab.com/fruitygo/pnutmux) — инструмент для маршрутизации веб-запросов с помощью регулярных выражений и создания веб-API быстрым и интуитивно понятным способом. 

Он также обеспечивает обработку CORS, структурированное логирование, извлечение URL-параметров, поддержку middleware и многое другое.",4823,9,0,goproglib
3708,2023-06-10 21:35:04+00:00,"Server-sent events в Go: руководство по отправке уведомлений в режиме реального времени.

[Читать](https://dev.to/hadius/go-server-sent-events-2ng)",5384,15,7,goproglib
3707,2023-06-10 18:09:05+00:00,"Сила «Декоратора» в Go от веселого Anthony De Meulemeester: как использовать популярный паттерн проектирования для повышения гибкости и расширяемости кода.

[Смотреть](https://youtu.be/GipAZwKFgoA)",5522,20,0,goproglib
3700,2023-06-09 07:49:42+00:00,"🪜 **Как программисту попросить о повышении зарплаты и что говорить**

Иногда бывает так: работаешь за всех, а зарплату не повышают. Тогда нужно брать инициативу в свои руки и поговорить с руководством тет-а-тет. Но как правильно это сделать и выйти победителем? Постараемся разобраться.

 [Основной сайт](https://proglib.io/sh/aKhfpUlorg)
 [Зеркало](https://proglib.tech/p/kak-programmistu-poprosit-o-povyshenii-zarplaty-i-chto-govorit-2023-06-08)",4200,10,1,goproglib
3699,2023-06-08 20:39:04+00:00,"**Реализация GraphQL-сервера** с использованием [**gqlgen**](https://github.com/99designs/gqlgen): быстрый пошаговый гайд для Go-разработчика.

[Читать](https://tech.trivago.com/post/2023-05-17-building-our-first-graphql-server-with-go-an-implementation-guide)",5147,15,0,goproglib
3698,2023-06-08 16:16:05+00:00,"Кажется, иногда стоит напоминать об интересных инструментах, которые не так часто, но все равно обновляются. Назовем это рубрику #перечитываястарое. 

**Goxygen** — инструмент для быстрой генерации веб-проектов на Go + Angular/React/Vue. [В новой версии](https://github.com/Shpota/goxygen/releases/tag/v0.4.0) добавлена поддержка Vue v3.3 и Vite-based Vue шаблонов.",5082,17,1,goproglib
3697,2023-06-07 20:51:04+00:00,"**ChatGPT, Wardley Maps и Go**

Здесь много намешано, но от того еще интереснее: как создать плагин ChatGPT, работать с API в Go, [картами Wardley](https://en.m.wikipedia.org/wiki/Wardley_map) ​​и SVG-изображениями.

[Читать](https://blog.owulveryck.info/2023/05/30/chatgpt-wardley-and-go.html)",5022,14,0,goproglib
3695,2023-06-07 07:20:35+00:00," **Представлены Go 1.20.5 и 1.19.10**

 С новыми выпусками прилетели фиксы безопасности для SUID бинарей (CVE-2023-29403) и cgo (CVE-2023-29402, CVE-2023-29404, CVE-2023-29405).

[Подробнее](https://groups.google.com/g/golang-announce/c/q5135a9d924)",4843,11,0,goproglib
3694,2023-06-06 20:50:03+00:00,"Если у вас с английским все в порядке, обязательно послушайте выпуск **Go Time** про структурирование Go-проекта.

Вернувшиеся гости Бен Джонсон и Крис Джеймс вместе с Мэтом и Крисом рассказывают о файлах и папках ваших Go-проектов. Существует ли идеальная структура или мы обречены разбираться в этом всю оставшуюся жизнь?

 [Слушать](https://changelog.com/gotime/278)",5549,17,0,goproglib
3693,2023-06-06 19:26:04+00:00,"**Веб-разработка с Go**: серия видеоуроков от **Jon Calhoun**, автора таких образовательных ресурсов, как [usegolang.com](https://www.usegolang.com/), [gophercises.com](https://gophercises.com/) и [algorithmswithgo.com](https://algorithmswithgo.com/).

[Смотреть](https://www.youtube.com/watch?v=xIN9HLThMq0&list=PLVEltXlEeWgkKucovAMCih4T0hQITxRX3&pp=iAQB)",5265,13,1,goproglib
3691,2023-06-05 21:00:05+00:00,"**Написание и отладка интеграционных тестов нескольких процессов с помощью Go**

Команда DoltHub столкнулась с проблемой тестирования и отладки репликации кластера. Не найдя подходящего кейса, они создали собственный фреймворк end-to-end тестирования.

[Подробнее](https://www.dolthub.com/blog/2023-05-25-debugging-multiple-golang-processes/)",5021,15,0,goproglib
3690,2023-06-05 07:42:14+00:00,"**Улучшаем наблюдаемость Go-сервисов**

Никакой теории, сразу хардкор: асинхронное структурированное ведение логов, метрики с образцами, трассировка с помощью TraceQL, агрегирование pprof и непрерывное профилирование, микробенчмарки и базовая статистика с помощью Benchstat, тесты производительности черного ящика и базовые PID-контроллеры для определения производительности системы.

[Читать](https://flow.com/engineering-blogs/golang-services-improving-observability)",5514,9,1,goproglib
3689,2023-06-04 21:56:03+00:00,"Вдохновленный книгой Боба Нистрома «Какого цвета ваша функция?», Преслав Рачев более подробно рассмотрел различные типы семантики значений и указателей.

[Читать](https://preslav.me/2023/05/30/golang-what-color-is-your-type/)",5103,9,0,goproglib
3688,2023-06-04 16:55:03+00:00,"**Репликация и балансировка нагрузки Go-приложений в Docker-контейнерах с помощью Consul и Fabio: подробный гайд для Go-разработчика**

Тот случай, когда нет опыта работы с k8s, и начинаешь изобретать свой велосипед.

[Читать](https://betterprogramming.pub/replicating-and-load-balancing-go-applications-in-docker-containers-with-consul-and-fabio-3ec5eed15154)",6577,8,9,goproglib
3687,2023-06-04 07:07:38+00:00,"**UNGOML: Automated Classification of unsafe Usages in Go**

Авторы: [Anna-Katharina Wickert,](https://figshare.com/authors/Anna-Katharina_Wickert/9318671) [Clemens Damke,](https://figshare.com/authors/Clemens_Damke/14780068) Lars Baumgärtner, Eyke Hüllermeier, Mira Mezini

В статье исследуются возможности машинного обучения для поиска проблем с безопасностью кода на Go. **UNGOML** — инструмент, который автоматизирует поиск.

https://github.com/stg-tud/ungoml",5212,7,0,goproglib
3685,2023-06-02 20:30:05+00:00,"Anthony De Meulemeester выпустил Sendit, проект на Go для безопасной передачи файлов прямо из терминала. А как насчет того, чтобы разобраться с его работой под капотом и подходами к структурированию проекта?

[Смотреть](https://youtu.be/a6Q5KseZ47s)",5652,14,3,goproglib
3682,2023-06-01 20:26:04+00:00,"Кто-то пробовал библиотеку **requests** для [создания, отправки и обработки HTTP-запросов](https://blog.carlmjohnson.net/post/2021/requests-golang-http-client/)? Если нет, сейчас самое время, ведь недавно вышла новая версия с некоторыми крутыми фичами.

 [Репозиторий](https://github.com/carlmjohnson/requests/releases/tag/v0.23.4)",5207,10,7,goproglib
3680,2023-06-01 06:14:14+00:00," **Что такое комбинаторика и как она используется в программировании**

Расскажем, какие задачи помогает решать комбинаторика и зачем программистам нужно ее знать.

 [Основной сайт](https://proglib.io/sh/bfaA8oWcmH)
 [Зеркало](https://proglib.tech/p/chto-takoe-kombinatorika-i-kak-ona-ispolzuetsya-v-programmirovanii-2023-05-31)",4516,7,0,goproglib
3679,2023-05-31 19:36:02+00:00,"**Реализация распределенного хранилища key-value на Go**

[Phil Eaton](https://notes.eatonphil.com/2023-05-25-raft.html) потратил много месяцев на то, чтобы освоить алгоритм консенсуса Raft, и серьезно углубился в его использование вместе с Go в качестве основы для распределенного хранилища key-value. Одним словом, есть чему поучиться.

[Читать](https://notes.eatonphil.com/2023-05-25-raft.html)",5390,5,1,goproglib
3677,2023-05-30 19:07:04+00:00,"**Поиск лучшей структуры Go-проекта**: история о пути, который прошла команда HUMAN Security для поиска лучшей структуры проекта на Go, о решениях, которые она приняла на основе исследований, и о выводах, которые сделала.

 [Часть 1](https://avivcarmi.com/finding-the-best-go-project-structure-part-1/)",5784,22,1,goproglib
3675,2023-05-29 20:58:02+00:00,"** Gain** — высокопроизводительный сетевой фреймворк, полностью написанный на Go. Под капотом **io_uring** — новый асинхронный I/O API для Linux. Собственно, в настоящее время поддерживается только Linux.

[Репозиторий](https://github.com/pawelgaczynski/gain)",5593,13,5,goproglib
3674,2023-05-29 20:07:04+00:00,"** Go`ne Gamedev**: новый подкаст от Искандера Шарипова о разработке игр на Go

В первом выпуске в гостях Андрей Апанасик. Темы, которые обсудили:

◾ 00:00 - Интро, представляем ведущих
◾ 10:10 - Как Андрей вкатился в геймдев
◾ 11:50 - Стартап Андрея (balancy.co)
◾ 17:50 - Маппинг схемы между админкой balancy и игрой
◾ 19:60 - Визуальная админка в balancy для удобства геймдизайнеров
◾ 21:50 - Какие движки поддерживает balancy
◾ 22:20 - Любимые инструменты разработки игр Андрея
◾ 29:10 - О JSON в Unity
◾ 30:50 - Стратегия развития Unity
◾ 35:10 - Сколько монобехов - слишком много?
◾ 40:10 - CGo в игрушках на Go
◾ 45:20 - Некоторые плюсы и минусы особенностей Go в геймдеве
◾ 48:20 - ECS в Go и Unity (и немного про Factorio)
◾ 1:09:50 - Особенности рендеринга в Ebitengine и многопоточка в играх на Go
◾ 1:19:50 - Говорим о Nakama (open source game server, написанный на Go)
◾ 1:26:35 - Сетевой код для игр на Go, headless сборки на Ebitengine и Unity
◾ 1:32:30 - Платформы, под которые можно собирать игры на Ebitengine
◾ 1:37:40 - В какие игрушки играет Апанасик

[Google Подкасты](https://podcasts.google.com/feed/aHR0cHM6Ly9jbG91ZC5tYXZlLmRpZ2l0YWwvNDY4NjU=) | [Mave](https://gg.mave.digital/ep-1)

#подкасты",5421,20,5,goproglib
3672,2023-05-29 10:56:58+00:00,"️Все каналы медиа «Библиотека программиста» теперь у вас под рукой. Вы знаете, что делать 

[️ Добавить папку](https://t.me/addlist/17y04EbNMrlhNjZi)",4568,3,0,goproglib
3671,2023-05-28 22:24:03+00:00,"**Мысли JavaScript-разработика о Go**: когда Go сначала затянул, а потом спустил на землю.

[Читать](https://ytsruh.hashnode.dev/from-javascript-to-go)",5143,18,6,goproglib
3668,2023-05-27 19:22:05+00:00,"Сетевое программирование на Go: пишем простой TCP-сервер с логированием.

[Читать](https://itnext.io/network-programming-in-go-389cd89ab874)",5537,16,1,goproglib
3667,2023-05-27 16:50:05+00:00,"️ **Snips.sh** — свежий взгляд на концепцию «pastebin», но с добавлением удобного TUI- и веб-клиента. Разработано, естественно, на Go.

https://snips.sh https://snips.sh/",5183,15,0,goproglib
3666,2023-05-26 22:07:03+00:00,"** mods** — новый Go-проект от авторов популярных CLI-инструментов (bubbletea, gum и др.), который упрощает использование ИИ в командной строке и в ваших пайплайнах.

https://github.com/charmbracelet/mods",5238,10,0,goproglib
3665,2023-05-26 19:40:02+00:00,"Пишем **Змейку с помощью Ebitengine**: подробный гайд для начинающих Go-разработчиков.

[Читать](https://kusingh.hashnode.dev/building-snake-game-in-golang-complete-guide)",5221,13,0,goproglib
3664,2023-05-26 18:42:02+00:00,"Разбор резюме двух бэкенд-разработчиков со стороны HR-специалистов: что именно может оттолкнуть, а что — привлечь.

[Читать](https://habr.com/ru/companies/getmatch/articles/737810/)",5278,12,0,goproglib
3662,2023-05-25 21:32:03+00:00,"️Кстати, в Go 1.20.4 исправлен [баг](https://github.com/golang/go/issues/59572), который появился в Go 1.16.",5282,47,2,goproglib
3661,2023-05-25 19:31:04+00:00,"**Использование пакета Go в Python с помощью gopy**

Gopy компилирует любой пакет Go в shared object, который можно напрямую импортировать в приложение Python. Краткий разбор практических аспектов в статье.

[Читать](https://last9.io/blog/using-golang-package-in-python-using-gopy/)",6502,15,8,goproglib
3659,2023-05-25 07:21:05+00:00,"Детали внутренней реализации **типа данных maps**: на заметку Go-разработчику.

[Смотреть](https://youtu.be/ACQs6mdylxo)",5814,10,0,goproglib
3658,2023-05-24 18:29:03+00:00,"Zap для Go-разработчика: подробное введение в популярный пакет логирования и обзор его наиболее полезных функций.

[Читать](https://betterstack.com/community/guides/logging/go/zap/)",5666,12,0,goproglib
3657,2023-05-23 18:39:03+00:00,"**Как начать проект на Go в 2023 году **

Этот материал — обновленное руководство ([версия от 2018 года](https://boyter.org/posts/how-to-start-go-project-2018/)) для новичков, которое поможет начать работу с Go и, в идеале, начать ее продуктивно.

[Читать](https://boyter.org/posts/how-to-start-go-project-2023/)",5762,15,0,goproglib
3656,2023-05-23 09:22:04+00:00,"**Стоит ли учить язык Go в 2023?**

Статья читателя «Библиотеки программиста», в которой рассмотрены несколько причин, почему Go остается актуальным и востребованным языком программирования, и почему его знание может стать вашим конкурентным преимуществом в индустрии разработки программного обеспечения.

 [Основной сайт](https://proglib.io/sh/hpzjmFDHBX)
 [Зеркало](https://proglib.tech/p/stoit-li-uchit-yazyk-go-v-2023-2023-05-19)",5533,22,4,goproglib
3655,2023-05-22 20:20:03+00:00,"**GORM/ent** vs **чистый SQL**: холиварные, но чертовски грамотные мысли на этот счет от Preslav Rachev.

[Читать](https://preslav.me/2023/05/15/my-issue-with-orm/)",5755,21,0,goproglib
3654,2023-05-22 18:44:04+00:00,"Анонс [нового профайлера](https://github.com/stealthrocket/wzprof) на основе pprof для WebAssembly, построенного поверх [Wazero](https://github.com/tetratelabs/wazero). Он предлагает возможность собирать профили ЦП и памяти во время выполнения модулей WebAssembly. Разбираемся, что у него под капотом.

[Читать](https://blog.stealthrocket.tech/performance-in-the-spotlight-webassembly-profiling-for-everyone/)",6496,11,0,goproglib
3650,2023-05-21 18:41:03+00:00,"Тут Go __http.Response__ [ругают](https://manishrjain.com/must-close-golang-http-response). Как думаете, причина утечки горутин в незнании контекста автором, или в сообществе действительно не было консенсуса по этому поводу?",5245,11,5,goproglib
3649,2023-05-21 17:19:03+00:00,"**Под капотом Service Weaver: Dependency Injection**

Помните мы [рассказывали](https://t.me/goproglib/3442) о новом Go-фреймворке с открытым исходным кодом для разработки и деплоя распределенных приложений? Тут Preslav Rachev решил разобраться, как его отдельные компоненты работают на самом деле. И остановился он на внедрении зависимостей.

[Читать](https://preslav.me/2023/05/12/golang-dependency-injection-in-google-service-weaver/)",5473,5,0,goproglib
3647,2023-05-20 17:50:04+00:00,"Подробный обзор популярных пакетов для Go-разработчика с примерами использования.

[Читать](https://blog.canopas.com/the-ultimate-guide-to-the-most-useful-go-packages-34dd0728e34d)",5410,16,0,goproglib
3644,2023-05-19 17:23:05+00:00,"Петр Коробейников, техлид сервисов DBaaS for Redis и RabbitMQ в CloudMTS, делится некоторым опытом подготовки к прохождению алгоритмических интервью с примерами на Go.

[Читать](https://habr.com/ru/companies/cloud_mts/articles/735348/)",5592,11,2,goproglib
3643,2023-05-18 18:01:03+00:00,"**Testify** для Go-разработчика: начало работы с инструментом + обзор основных преимуществ использования.

[Читать](https://semaphoreci.com/blog/testify-go)",5449,11,2,goproglib
3640,2023-05-18 12:43:56+00:00," **Тесты на собеседовании: как к ним подготовиться и получить оффер**

Рассказываем, какие бывают тесты на собеседованиях, а главное – как и где к ним подготовиться, чтобы точно получить работу в компании мечты.

 [Основной сайт](https://proglib.io/sh/l7aohgxJrS)
 [Зеркало](https://proglib.tech/p/testy-na-sobesedovanii-kak-k-nim-podgotovitsya-i-poluchit-offer-2023-05-18)",4789,2,0,goproglib
3639,2023-05-17 21:06:51+00:00,"Девятичасовой курс по Go для начинающих — в лучших традициях 
freeCodeCamp.

 [Смотреть](https://youtu.be/un6ZyFkqFKo)",6216,8,0,goproglib
3638,2023-05-17 17:41:39+00:00,"**Разработка бессерверного бота Discord с помощью OpenFaaS и Go**

Узнайте, как создать бота Discord, который может создавать встречи Zoom по запросу, используя OpenFaaS и Go.

[Читать](https://www.openfaas.com/blog/build-a-serverless-discord-bot/)",6386,1,0,goproglib
3637,2023-05-17 08:43:42+00:00," **Нужна ли математика программисту?**

Считается, что стать программистом без хорошего знания математики невозможно. [Разберемся,](https://proglib.io/sh/HVJQjsedgO) так ли это на самом деле.

Ставь  — если нужна, 
 — если и без нее все норм",5384,160,14,goproglib
3635,2023-05-16 18:07:23+00:00,"[**Результаты опроса Go-разработчиков за 1 квартал 2023 года**](https://go.dev/blog/survey2023-q1-results)

В последнем опросе разработчиков приняли участие почти 6000 гоферов. Вот основные выводы:

▫️92% респондентов довольны использованием Go
▫️Обработка ошибок и обучение — основные проблемы респондентов
▫️Управление зависимостями и версиями — главные задачи для тех, кто мейнтейнит модули Go с открытым исходным кодом
▫️VS Code остается предпочтительным редактором, GoLand — на втором месте
▫️Большинство разработчиков Go работают либо на Mac, либо на Linux, но Windows особенно популярна среди новых разработчиков
▫️Начинающие Go-разработчики интересуются веб-разработкой",5648,9,6,goproglib
3633,2023-05-15 19:30:43+00:00,"**Modern Web Development with Go: Build real-world, fast, efficient and scalable web server apps using Go programming language**, 2023

**Автор**: Dušan Stojanović

Книга охватывает ключевые аспекты разработки веб-приложений на Go: от дизайна и выбора БД до деплоя и мониторинга. Материал книги будет интересен как профи, так и начинающим.",7017,19,21,goproglib
3632,2023-05-14 19:46:03+00:00,"Alex Edwards делится шаблоном make-файла, который он использует в качестве отправной точки для проекта на Go.

[Читать](https://www.alexedwards.net/blog/a-time-saving-makefile-for-your-go-projects)",6573,39,9,goproglib
3631,2023-05-14 09:40:56+00:00,"Запись сессии с Google I/O 2023, посвященной безопасной разработке на Go с помощью инструментов от Google.

[Смотреть](https://youtu.be/HSt6FhsPT8c)",5824,15,0,goproglib
3630,2023-05-13 12:02:24+00:00,"‍ **Статьи для IT: как объяснять и распространять значимые идеи

**Бесплатный [курс](https://stepik.org/course/101672/promo) для всех, кто любит качественные IT-публикации и хочет научиться интересно писать о программировании либо улучшить навыки письма.

Курс состоит из семи модулей, посвященных написанию, редактированию, иллюстрированию и распространению публикаций. Ограничений на время прохождения заданий нет.

Курс будет интересен авторам, работающим в составе редакции,  копирайтерам-одиночкам и просто программистам, которые хотят научиться интересно рассказывать о собственных проектах.

Материалы регулярно дополняются, обновляются и корректируется. Отвечаем на все учебные вопросы в комментариях курса.

**Как стать автором «Библиотеки программиста» и получать гонорары за статьи?
**️ [Заполните анкету](https://docs.google.com/forms/d/e/1FAIpQLSdZRp4TjqpvNptKlIhHWa7go-I4-9u8Ft8cda8woK6URep_Zw/viewform?usp=sf_link). 
Если все ок, мы свяжемся с вами и обсудим дальнейшие шаги.",4895,4,0,goproglib
3629,2023-05-13 08:11:25+00:00,"Взгляд на `strconv.Atoi()` в Go со стороны фронтенд-разработчика.

[Читать](https://giddydev.hashnode.dev/how-does-go-parseint)",4878,22,0,goproglib
3628,2023-05-12 20:09:06+00:00," **Кодинг от заката до рассвета**

[Разбираемся](https://proglib.io/sh/alIf5J2NB4), как правильно улучшить качество своего сна и избежать проблем с психическим здоровьем?

Ставь 
 — если спишь 8 часов и больше
 — если меньше",5073,270,5,goproglib
3627,2023-05-12 19:40:33+00:00,"Управление зависимостями в Go, или Как легко изменить зависимости с помощью `go get`.

[Читать](https://blog.manel.in/posts/go-deps)",5158,11,0,goproglib
3626,2023-05-12 06:00:44+00:00,"️ **Библиотека программиста» находится в поиске авторов оригинальных статей

Языки
**● Python, JavaScript, TypeScript, C#, Go, SQL.

**Тематика
**● Информационная безопасность, Data Science, базовые концепции языков, продвинутый Python, JS (и т. д), бэкенд веб-приложений, фронтенд-разработка, React, системное программирование, базы данных.

**Объем
**● от 7 до 15 тыс. знаков.

️ [Заполнить анкету](https://docs.google.com/forms/d/e/1FAIpQLSdZRp4TjqpvNptKlIhHWa7go-I4-9u8Ft8cda8woK6URep_Zw/viewform?usp=sf_link) ⬅️

**Я хорошо программирую, но пишу «так себе». Что делать?
**Если вы хорошо программируете, но навыки письма немного отстают, пройдите наш бесплатный курс на Степике [«Статьи для IT: как объяснять и распространять значимые идеи»](https://stepik.org/course/101672/promo).",4938,4,2,goproglib
3625,2023-05-11 18:00:35+00:00,"Илья Сергунин, веб-разработчик из продуктовой команды Авито, делится опытом реализации паттерна «Репозиторий» в Go через менеджер транзакций.

[Читать](https://habr.com/ru/companies/avito/articles/727168/)",5522,17,0,goproglib
3623,2023-05-10 18:04:26+00:00,"**Function as a Service на Go**: пишем простой FAAS-сервер, который позволит писать модули на любом языке, предназначенном для WASM, — нечто среднее между GCP [Cloud Functions,](https://cloud.google.com/functions) [Cloud Run](https://cloud.google.com/run) и старым добрым [CGI.](https://en.wikipedia.org/wiki/Common_Gateway_Interface)

[Читать](https://eli.thegreenplace.net/2023/faas-in-go-with-wasm-wasi-and-rust/)",6571,14,0,goproglib
3621,2023-05-09 17:00:43+00:00,"Записи самых интересных докладов и дискуссий в сообществе **Gopher Club**, организованном Николаем Тузовым:

1. [Garbage Collector и арены памяти в Go](https://gopher-club.mave.digital/ep-1)
2. [Развитие дженериков в Go](https://gopher-club.mave.digital/ep-2)",5661,18,0,goproglib
3618,2023-05-07 06:55:17+00:00,"`.ʕ◔ϖ◔ʔ` вместо `.go`? Почему нет?!

https://github.com/golang/go/issues/59968",5482,47,3,goproglib
3616,2023-05-05 16:32:35+00:00,"Серия руководств о фаззинг-тестировании в Go:

1. [Random testing in Go](https://bitfieldconsulting.com/golang/random-testing)
2. [Fuzz tests in Go](https://bitfieldconsulting.com/golang/fuzz-tests)
3. [Writing a Go fuzz target](https://bitfieldconsulting.com/golang/fuzz-target)
4. [Finding bugs with fuzzing](https://bitfieldconsulting.com/golang/bugs-fuzzing)",6145,22,1,goproglib
3615,2023-05-05 08:57:45+00:00," **5 этапов формирования привычек с точки зрения нейробиологии**

Привычка позволяет человеку не «распыляться» на мелочи, а занимать мозг действительно важными вещами. Рассмотрим, как формируется привычка с научной точки зрения.

 [Основной сайт](https://proglib.io/sh/PoEbi4OTZ3)
 [Зеркало](https://proglib.tech/p/5-etapov-formirovaniya-privychek-s-tochki-zreniya-neyrobiologii-2023-05-04)",5135,17,0,goproglib
3613,2023-05-04 11:59:09+00:00,"**Написание операционной системы на Go

**Это —** **начало чего-то долгого и увлекательного. Следите за обновлениями.

[Часть 1. The Bootloader](https://totallygamerjet.hashnode.dev/writing-an-os-in-go-the-bootloader)",5384,46,4,goproglib
3612,2023-05-03 17:50:20+00:00,"**rueidis** — быстрый Go-клиент для Redis, который поддерживает кэширование на стороне клиента, автоматическую конвейерную обработку, Generics OM, RedisJSON, RedisBloom, RediSearch и т. д. Единственная сложность в том, как правильно произнести его название.

https://github.com/redis/rueidis",6828,25,4,goproglib
3610,2023-05-03 11:26:31+00:00,"**Тест-игра на выживание: как джуну протянуть первую рабочую неделю и не потерять работу**

Первая неделя на новой работе – это всегда стресс для разработчика. В голове тысяча мыслей, давление зашкаливает, и сердце стучит без остановки. Знаете ли вы, как в такой ситуации не перегореть на старте? Если да, тогда вы легко пройдете нашу мини-игру на выживание про адаптацию джуна в незнакомых условиях. Итак, представьте: желанный оффер уже получен, вас приняли в компанию вашей мечты и сегодня первый рабочий день.

 [Основной сайт](https://proglib.io/w/1001c8a1)
 [Зеркало](https://proglib.tech/tests/test-igra-na-vyzhivanie-kak-dzhunu-protyanut-pervuyu-rabochuyu-nedelyu-i-ne-poteryat-rabotu)",4267,15,0,goproglib
3609,2023-05-02 19:20:03+00:00,"Jonathan Hall теперь официально контрибьютор Go и, по его словам, это совсем не страшно и не сложно.

На видео Jonathan документирует рабочий процесс, проводя нас через простые изменения в библиотеке регулярных выражений Go.

[Смотреть](https://youtu.be/FFib-v6z1Ys)",5162,5,0,goproglib
3608,2023-05-02 18:21:58+00:00,"Представлены релизы **Go 1.20.4 и 1.19.9**, которые подвезли фиксы безопасности для `html/template` (CVE-2023-24539, CVE-2023-24540 и CVE-2023-29400).

[Подробнее](https://groups.google.com/g/golang-announce/c/MEb0UyuSMsU)",4727,19,0,goproglib
3606,2023-05-01 21:56:49+00:00,"Запись Go-митапа, организованного SberMarket Tech. Вы услышите доклады от спикеров из СберМаркета, Ozon и Selectel:

Exactly-once Kafka
Борьба с драйвером PosgreSQL: Bouncer vs. Pgx
Дженерики не нужны

[Смотреть](https://www.youtube.com/live/NgHwQC6nnJ8?feature=share)",5416,16,0,goproglib
3605,2023-05-01 19:41:15+00:00,"**Functional options** в Go: что с ними не так и можно ли найти золотую середину?

[Читать](https://www.felesatra.moe/blog/2023/04/23/beyond-functional-options)",4836,4,3,goproglib
3604,2023-04-30 20:03:21+00:00,"Руководство, которое охватывает ключевые фундаментальные аспекты обработки ошибок в Go.

[Читать](https://medium.com/@methosi/master-golang-error-handling-a-comprehensive-step-by-step-guide-to-best-practices-698a0530604f)",5360,6,0,goproglib
3603,2023-04-30 15:44:37+00:00,"**Демистификация каналов, горутин и оптимальной конкурентности в Go**: разбираем примеры, при которых конкурентность имеет смысл по производительности. 

[Читать](https://betterprogramming.pub/golang-channels-goroutines-and-optimal-concurrency-demystifying-through-examples-a43ba6aee74f)",5366,5,0,goproglib
3602,2023-04-30 07:19:22+00:00,"**Путешествие по созданию векторной базы данных на Go**: проблемы и творческие решения, с которыми столкнулась команда разработчиков при создании **Weaviate** с нуля.

[Смотреть](https://youtu.be/K1R7oK2piUM)",4819,10,0,goproglib
3601,2023-04-29 21:27:42+00:00,"**Производительность конкатенации строк в Go**: strings.Builder в целом дает очень хорошую производительность, но мы можем улучшить ее еще лучше.

[Читать](https://thefortunedays.com/articles/golang-string-concatenation-performance)",4940,15,2,goproglib
3599,2023-04-29 19:01:50+00:00,#вопросы_для_самопроверки,4576,3,0,goproglib
3598,2023-04-29 18:18:42+00:00,"Простой пошаговый гайд по работе с приватными модулями Go.

[Читать](https://medium.com/the-godev-corner/how-to-create-a-go-private-module-with-docker-b705e4d195c4)",4833,9,0,goproglib
3597,2023-04-28 21:14:00+00:00," **ooze** — библиотека для мутационного тестирования Go. Выведете тестирование на новый уровень.

https://github.com/gtramontina/ooze",5047,17,3,goproglib
3596,2023-04-28 18:35:17+00:00,"**Создаем скелеты микросервисов быстро и без боли**

Виталий Карпенко, Go-разработчик в tooling-команде Lamoda Tech, делится опытом использования **Scratch** для генерации кода.

[Читать](https://habr.com/ru/companies/lamoda/articles/728920/)",5564,14,2,goproglib
3595,2023-04-27 20:20:58+00:00,"️ Подоспели записи выступлений с
**Conf42 Golang 2023**.

 [Смотреть](https://youtube.com/playlist?list=PLIuxSyKxlQrBDOCy9ThDZ0kJX7skLE2ks)",5359,8,1,goproglib
3594,2023-04-27 19:05:44+00:00,"История миграции со Scala на Go, что позволило значительно повысить производительность и уменьшить потребление памяти, даже несмотря на первые разочаровывающие результаты.

[Читать](https://medium.com/trendyol-tech/new-winner-of-kafka-consumers-scala-to-go-journey-604c6bdd7041)",5131,1,37,goproglib
3591,2023-04-26 18:00:54+00:00,"Исследование тайных закоулков покрытия тестами в Go и практика использования новой функции профайлинга Go 1.20 для интеграционных тестов. На выходе — увеличение общего покрытия с 50% до 76% в активном проекте без добавления новых тестов.

[Читать](https://evilmartians.com/chronicles/go-integration-testing-with-courage-and-coverage)",4852,4,3,goproglib
3588,2023-04-25 19:21:15+00:00,"Обзор наиболее распространенных причин утечек памяти в Go и демонстрация использования [Grafana Pyroscope](https://grafana.com/blog/2023/03/15/pyroscope-grafana-phlare-join-for-oss-continuous-profiling/) для поиска и устранения утечек.

[Читать](https://grafana.com/blog/2023/04/19/how-to-troubleshoot-memory-leaks-in-go-with-grafana-pyroscope/)",5229,15,0,goproglib
3587,2023-04-24 20:00:07+00:00,"#проектирование_систем 

Подробное визуальное руководство, которое предоставляет разработчикам быструю и простую шпаргалку по ключевым концепциям и передовым методам проектирования систем.

 [Источник](https://blog.devgenius.io/system-design-blueprint-the-ultimate-guide-e27b914bf8f1)",4327,28,0,goproglib
3585,2023-04-23 21:56:13+00:00,"Искандер возвращается с серией заметок о [разработке игр на Go](https://t.me/go_gamedev) и рассказывает о шейдерах в Ebitengine.

https://habr.com/ru/articles/730848/",5029,7,4,goproglib
3584,2023-04-23 07:11:53+00:00," **LLaMA.go** — порт популярного C++-проекта [llama.cpp](https://github.com/ggerganov/llama.cpp) на чистый Go.

[LLaMA](https://ai.facebook.com/blog/large-language-model-llama-meta-ai/) — большая языковая модель с 65 миллиардами параметров от команды Meta AI.

https://github.com/gotzmann/llama.go",5353,13,0,goproglib
3583,2023-04-23 03:51:11+00:00,"‍🆙 **Карьера в Big Tech: как попасть и достичь успеха**

В этой статье поговорим о том, как попасть в Big Tech, как происходит карьерный рост в крупных компаниях, и куда идти после «большой пятерки».

 [Основной сайт](https://proglib.io/sh/4rx3QfBH08)
 [Зеркало](https://proglib.tech/p/karera-v-big-tech-kak-popast-i-dostich-uspeha-2023-04-20)",4523,4,0,goproglib
3581,2023-04-21 20:18:27+00:00,"«__Как Go исправил все, что было не так с программированием__»

Весьма смелое заявление! Хотя ничего удивительно, ведь это авторская статья.

[Читать](https://medium.com/@jankammerath/how-go-fixed-everything-that-was-wrong-with-programming-1b599a1055a8)",4759,13,4,goproglib
3579,2023-04-20 20:30:47+00:00,"**Profile-guided optimization**: быстрое введение в представленный в Go 1.20 инструмент оптимизации.

[Читать](https://habr.com/ru/companies/yandex_praktikum/articles/729570/)",5407,4,0,goproglib
3577,2023-04-20 11:36:16+00:00,"Filippo Valsorda рассматривает предпосылки, которые привели к уязвимости в `crypto/elliptic`[,](https://golangweekly.com/link/138365/web) исправленной в Go 1.20.2.

[Читать](https://words.filippo.io/dispatches/near-miss/)",5369,2,0,goproglib
3576,2023-04-19 21:04:34+00:00,"Свежее видео на [YouTube от Google](https://t.me/goproglib/3562), из которого вы узнаете, почему Go ~~просто охренительный~~ отлично подходит для разработки CLI-инструментов.

 [Смотреть](https://youtu.be/vOhLCTwtgiQ)",5490,5,0,goproglib
3575,2023-04-19 20:45:10+00:00,"**Тест: насколько хорошо вы знаете Git?**

Независимо от того, новичок вы или опытный пользователь, этот тест проверит ваши знания фундаментальных концепций и передовых методов Git.

 [Основной сайт](https://proglib.io/w/78a9f32b)
 [Зеркало](https://proglib.tech/tests/naskolko-horosho-vy-znaete-git)",4311,9,2,goproglib
3574,2023-04-19 19:40:07+00:00,"**Углубленный взгляд на системные вызовы Go в Windows**

Проанализировав множество вредоносных программ Go, автор в конечном итоге узнал много о том, как Go скрытно вызывает API-интерфейсы Windows, и делится опытом в блоге.

[Читать](https://leandrofroes.github.io/posts/An-in-depth-look-at-Golang-Windows-calls/)",4966,5,0,goproglib
3572,2023-04-18 21:09:15+00:00," #в_заметки

Советы и предложения по структурированию проекта на Go.

 [GitHub Gist](https://gist.github.com/candlerb/3cb11576b2d73800b58f3b548dc2ba4a)",6136,13,0,goproglib
3571,2023-04-18 18:18:01+00:00,"Время паниковать: Макс Хоффман из Dolthub рассказывает о том, где имеет место паника, почему паника быстрее вызова ошибок и какие компромиссы между ними необходимо учитывать.

[Читать](https://www.dolthub.com/blog/2023-04-14-keep-calm-and-panic/)",6212,7,0,goproglib
3570,2023-04-18 12:08:26+00:00," **26 правил эффективного общения для разработчиков**

Разработчики часто лучше пишут код, чем общаются с людьми, и это может привести к недопониманию и конфликтам. В этой статье мы расскажем, как эффективно общаться в чатах, по электронной почте, на созвонах и во время код-ревью. Следуя нашим советам, вы улучшите свое взаимодействие с коллегами по команде и избежите ненужных конфликтов.

 [Основной сайт](https://proglib.io/sh/0rqVK6WahO)
 [Зеркало](https://proglib.tech/p/26-pravil-effektivnogo-obshchenie-dlya-razrabotchikov-2023-04-18)",5701,3,1,goproglib
3568,2023-04-17 21:29:44+00:00,"**The Tao of Go 

**А что, если бы мы подошли к разработке программного обеспечения на Go деликатно и разумно, следуя естественным контурам языка и проблемам, а не пытаясь стереть их с дороги, как бы это выглядело?

Кажется, ночное чтиво должно быть именно [таким.](https://bitfieldconsulting.com/golang/tao-of-go) И хотя в статье упоминается Go, принципы, о которых говорит автор, универсальны и применимы к любому языку программирования.",5643,9,3,goproglib
3567,2023-04-17 18:55:50+00:00,"Помните ту самую библиотеку [conc](https://t.me/goproglib/3373), которая по заявлению автора предоставляет более структурированную конкурентность для Go? На Хабре есть небольшой обзор данной библиотеки с примерами.

https://habr.com/ru/articles/729324/",5303,7,6,goproglib
3565,2023-04-16 20:31:09+00:00,"[Комментарий](https://www.reddit.com/r/golang/comments/12gddba/go_is_great_the_code_i_wrote_in_2016_is_still/) из поста на Reddit, где автор хвалит Go. Код, который он написал в 2016 году, до сих пор легко понять и расширить.

Тянет на цитату недели",5141,11,5,goproglib
3564,2023-04-16 08:32:27+00:00,"**Обработка ошибок в Go — это форма повествования**

Чтобы не испытывать проблем с разбором загадочных логов при возникновении ошибок, просто добавьте осмысленный контекст к ошибке везде, где это возможно. В Go добавление контекста ошибки буквально означает расширение сообщения об ошибке поясняющим текстом. О том, как грамотно это сделать, рассказано в статье.

[Подробнее](https://preslav.me/2023/04/14/golang-error-handling-is-a-form-of-storytelling/)",5781,20,5,goproglib
3562,2023-04-15 09:25:56+00:00,"Несколько свежих видео из официального YouTube-канала Go:

[Deploy Go applications in a serverless environment](https://youtu.be/pHCKVXUwceg)
[Enjoy Kubernetes with Go](https://youtu.be/U7RKEqfM1XY)
[Go development for your startup](https://youtu.be/Gp3iKZMW21g)",6759,8,0,goproglib
3560,2023-04-14 14:26:36+00:00,"**Безопасность цепочки поставок: серия статей Go-разработчика**

Go меняет ландшафт безопасности цепочки поставок, исправляя основу — сам язык. От раннего внедрения OSV до обширной информации о пакетах, курируемой информации об уязвимостях. Одним словом, Go подает пример для экосистемы.

▫️Часть 1: [управление уязвимостями](https://security.googleblog.com/2023/04/supply-chain-security-for-go-part-1.html)
▫️Часть 2: [скомпрометированные зависимости](https://security.googleblog.com/2023/06/supply-chain-security-for-go-part-2.html)
▫️Часть 3: [сдвиг влево](https://security.googleblog.com/2023/07/supply-chain-security-for-go-part-3.html)",5241,4,0,goproglib
3559,2023-04-13 20:28:30+00:00,"Полный четырехчасовой видеокурс по основам Go для новичков.

 [Смотреть](https://youtu.be/YzLrWHZa-Kc)",7217,17,1,goproglib
3554,2023-04-12 20:10:22+00:00," **GoGetPodcast: **Скорость разработки и цена ошибки разработчика

Николай Тузов, Глеб Яльчик и Даниил Подольский обсуждают скорость работы разработчика, цену/вероятность ошибок во время разработки и многое другое.

 [Смотреть](https://youtu.be/RxkX0NapCDw)",5185,15,3,goproglib
3551,2023-04-11 19:55:21+00:00,"️ **9 лучших практик по работе с микросервисами**

Микросервисы позволяют разрабатывать приложения в виде набора слабосвязанных сервисов, которые взаимодействуют через API, что упрощает разработку, поддержку и масштабирование приложений. Однако с этой архитектурой связаны определенные сложности. В этой статье мы обсудим лучшие практики, которые помогут вам построить более эффективную экосистему микросервисов с меньшим количеством архитектурных недочетов.

 [Основной сайт](https://proglib.io/sh/gvNfdoJTma)
 [Зеркало](https://proglib.tech/p/9-luchshih-praktik-po-rabote-s-mikroservisami-2023-04-09)",4528,6,0,goproglib
3550,2023-04-10 20:32:36+00:00,"Разбираемся с моками в Go: гайд для новичков от Николая Тузова.

Что такое мок?
Как генерировать моки с помощью **Mockery**?
Как правильно использовать сгенерированные моки в тестах?

 [Смотреть](https://youtu.be/qaaa3RsC0FQ)",7044,25,0,goproglib
3548,2023-04-10 06:13:21+00:00," **Готовимся к интервью по Golang: массивы, слайсы и строки**

Статья начинает серию материалов по подготовке к интервью на backend-разработчика на языке Go. В данном тексте рассматриваются особенности таких структур данных, как массивы, слайсы и строки, нюансы их использования и немного задач для самостоятельной тренировки.

 [Основной сайт](https://proglib.io/sh/6nOj7LgPxs)
 [Зеркало](https://proglib.tech/p/gotovimsya-k-intervyu-po-golang-massivy-slaysy-i-stroki-2023-04-09)",4793,16,0,goproglib
3547,2023-04-09 20:17:43+00:00,"Пример реализации аутентификации и авторизации на Go с учетом принципа REST statelessness.

[Читать](https://betterprogramming.pub/securing-your-golang-application-unleashing-the-power-of-authentication-and-authorization-94686e2fc683)",5758,12,0,goproglib
3546,2023-04-09 18:37:37+00:00,"Пишем компилятор C, используя чистый Go?! Хм, как трудно это может быть? И каких размеров может быть самый маленький бинарь Go? Спойлер: 

• Windows — 5120 байт
• macOS — 51 186 байт
• Linux — 196 608 байт
• FreeBSD — 196 608 байт

[Читать](https://totallygamerjet.hashnode.dev/the-smallest-go-binary-5kb)",5065,15,0,goproglib
3544,2023-04-08 18:00:45+00:00,"**Гайд** **для новичков по запуску приложения на Go + React в Docker**

Он охватывает настройку окружения, создание простых примеров Go API и приложения React, а также настройку Nginx.

[Читать](https://dev.to/shaggyrec/run-a-golang-nginx-and-react-app-in-docker-59kn)",5572,15,2,goproglib
3543,2023-04-08 17:01:56+00:00,"Как подружить формат стека вызовов и IDE? Опытом делится Артем Навроцкий, разработчик в компании Joom.

[Читать](https://habr.com/ru/companies/joom/articles/727418/)",4919,3,0,goproglib
3541,2023-04-08 15:21:00+00:00,#вопросы_для_самопроверки,4559,0,0,goproglib
3539,2023-04-07 18:53:15+00:00,"Простые советы по повышению производительности приложений на Go.

[Читать](https://betterprogramming.pub/6-ways-to-boost-the-performance-of-your-go-applications-5382bb7532d7)",5560,16,2,goproglib
3538,2023-04-06 19:00:43+00:00,"**Benthos** — Go-инструмент для обработки данных, который может помочь вам преобразовать, фильтровать, отправлять и принимать данные из различных [sources](https://www.benthos.dev/docs/components/inputs/about) и [sinks.](https://www.benthos.dev/docs/components/outputs/about)

Он прост в развертывании и мониторинге и готов к внедрению в ваш пайплайн в виде статического бинаря, Docker-образа или бессерверной функции.

https://github.com/benthosdev/benthos",5400,9,3,goproglib
3536,2023-04-05 20:19:07+00:00," Go и веб-сокеты в продакшене: проблемы, решения, библиотеки, масштабирование и многое другое.

[Читать](https://www.druva.com/blog/websockets--scale-at-fractional-footprint-in-go)",5756,8,2,goproglib
3535,2023-04-05 19:41:18+00:00,"Антон Околелов, тимлид Go-команды в компании Karuna, делится рассуждениями относительно нахождения самой длинной общей подпоследовательности (longest common subsequence) на Go.

[Читать](https://habr.com/ru/companies/karuna/articles/725552/)",5223,1,0,goproglib
3534,2023-04-04 19:40:25+00:00,"#news 

Представлены релизы Go 1.20.3 и 1.19.8, которые включают исправления безопасности в go/parser, html/template, mime/multipart, net/http и net/textproto.

[Подробнее](https://groups.google.com/g/golang-announce/c/Xdv6JL9ENs8)",5087,21,0,goproglib
3532,2023-04-04 17:40:19+00:00,#вопросы_для_самопроверки,4963,0,12,goproglib
3531,2023-04-04 16:49:36+00:00," **Модульная архитектура: что, как и почему?**

Модульный подход к архитектуре делает написание кода более простым и динамичным и имеет множество преимуществ: от возможности работать над кодом в команде удаленно до высокого уровня безопасности. В статье разберемся, что такое модульная архитектура, как она работает и как модульный подход поможет оптимизировать работу над вашими проектами и даже улучшить их качество.

 [Основной сайт](https://proglib.io/sh/EAUkob4HNR)
 [Зеркало](https://proglib.tech/p/modulnaya-arhitektura-chto-kak-i-pochemu-2023-04-04)",4496,7,0,goproglib
3530,2023-04-03 20:33:14+00:00,"И да будет холивар

https://preslav.me/2023/03/23/where-is-the-spring-framework-for-golang/",4966,11,20,goproglib
3529,2023-04-02 14:46:22+00:00,"**Конфигурация линтера Go, правильная версия

**Олег Ковалов делится своим взглядом на конфигурацию линтера и дает полезные советы начинающим.

[Читать](https://olegk.dev/go-linters-configuration-the-right-version)",5804,9,0,goproglib
3528,2023-04-02 07:41:16+00:00,"Отладка Go приложений в Docker-контейнерах с использованием VS Code: гайд для начинающих.

[Читать](https://www.kenaqshal.com/blog/debugging-dockerized-go-applications)",5758,10,0,goproglib
3527,2023-04-01 22:43:50+00:00,"**Yaegi** — еще один элегантный интерпретатор Go от Traefik Labs с полной поддержкой спецификации языка и Go 1.18/1.19.

https://github.com/traefik/yaegi",5291,12,4,goproglib
3526,2023-04-01 18:04:40+00:00,"Пишем свой Uber на Go: серия статей для начинающих.

[Часть 1](https://medium.com/@mhrlife/building-an-online-taxi-app-like-uber-with-golang-part-1-nearby-taxis-c509168ef59f)
[Часть 2](https://medium.com/@mhrlife/building-an-online-taxi-app-like-uber-with-golang-part-2-scalability-and-authorization-4583d51f22a3)
[Часть 3](https://medium.com/@mhrlife/building-an-online-taxi-app-like-uber-with-golang-part-3-redis-to-rescue-ab579cfdd299)
[Часть 4](https://medium.com/@mhrlife/building-an-online-taxi-app-like-uber-with-golang-part-4-why-golang-1cd70d416417)",7135,37,0,goproglib
3525,2023-04-01 15:52:31+00:00,"Думали Телеграм останется в стороне, и ничего не сделает к 1 апреля, но нет, новая анимация при нажатии лайка — прекрасная! Круто придумали, молодцы! Видимо сам Дуров приложил к этому руку ",4960,256,5,goproglib
3524,2023-04-01 10:40:29+00:00,"**Интеграционные тесты в Go с PostgreSQL**

Разбор нескольких способов использования PostgreSQL в сценариях тестирования, каждый из которых имеет свои плюсы и минусы.

[Читать](https://www.storj.io/blog/go-integration-tests-with-postgres)",5689,12,0,goproglib
3523,2023-03-31 20:18:17+00:00,"**Разработчики DoltDB открыли исходный код SwissMap**

[SwissMap](https://github.com/dolthub/swiss) — хэш-таблица, основанная на [SwissTable](https://abseil.io/blog/20180927-swisstables). Она работает быстрее и использует меньше памяти, чем встроенный тип Go map. Под катом — мотивация, дизайн, реализация и затравочка, чтобы вы наконец ее попробовали. 

https://www.dolthub.com/blog/2023-03-28-swiss-map/",5555,23,0,goproglib
3522,2023-03-31 18:03:38+00:00,"Пожалуй, один из самых подробных и понятных примеров реализации паттерна **Адаптер** на Go.

[Читать](https://bitfieldconsulting.com/golang/adapter)",5272,4,0,goproglib
3521,2023-03-31 09:55:51+00:00," **Шпаргалка по Go: slices, maps, channels**

Эта статья содержит основную информацию по таким структурам данных Go, как slices, maps и channels. Включает описание их поведения в разных состояниях и соответствующие примеры. Небольшое описание представлено для каждой структуры данных.

 [Основной сайт](https://proglib.io/sh/ij0hK2GzR5)
 [Зеркало](https://proglib.tech/p/shpargalka-po-go-slices-maps-channels-2023-03-31)",4656,11,0,goproglib
3520,2023-03-31 06:19:20+00:00,"**Практика инструментирования микросервиса Go с использованием Gin и X-Ray
**
X-Ray — сервис AWS, который собирает данные о запросах, и предоставляет инструменты для просмотра, фильтрации, анализа этих данных и выявления проблем/возможностей оптимизации.

[Читать](https://dev.to/makko/instrumenting-go-microservices-with-gin-and-aws-x-ray-4e82)",4852,4,2,goproglib
3519,2023-03-30 20:52:43+00:00,"Обзор популярных книг для изучения Go от Джонатана Холла. 

 [Смотреть](https://www.youtube.com/watch?v=oxaWKtS0_S8&list=PLR-u4TOp1xswkO3UwTqSz08SSIo1u_dig)",4916,5,0,goproglib
3518,2023-03-30 19:56:05+00:00,"Пример реализации простого конечного автомата на Go.

[Читать](https://www.iamyadav.com/blogs/implementing-a-simple-state-machine-in-golang)",5084,10,0,goproglib
3516,2023-03-30 09:56:44+00:00,"Разбираем подводные камни, которые могут возникнуть при работе с **http.HandlerFunc**.

[Читать](https://www.willem.dev/blog/http-handler-func/)",4670,2,0,goproglib
3515,2023-03-29 20:19:52+00:00,"**Hacking with Go**

К бессменной ведущей подкаста **Go Time** Natalie Pistunovich присоединяются разработчики и этичные хакеры для обсуждения темной стороны языка. У каждого выпуска есть транскрибация для удобства перевода: 

 [Часть 1](https://changelog.com/gotime/205)
 [Часть 2](https://gotime.fm/251)
 [Часть 3](https://gotime.fm/259)
 [Часть 4](https://changelog.com/gotime/270)",5506,12,5,goproglib
3514,2023-03-29 17:24:33+00:00,"Полезные советы и кейсы для Go-разработчика, которые помогут при работе с Github Actions.

[Читать](https://olegk.dev/github-actions-and-go)",4947,2,0,goproglib
3513,2023-03-28 22:09:26+00:00,"**Go runtime scheduler**: подробное объяснение с помощью диаграмм и примеров кода.

[Читать](https://www.kelche.co/blog/go/golang-scheduling/)",7375,26,0,goproglib
3512,2023-03-28 20:15:16+00:00,"Настройка проекта Go для работы с GitLab CI/CD: запускаем тесты и линтер.

 [Смотреть](https://youtu.be/-CbXTBX0dbo)",5340,7,0,goproglib
3511,2023-03-28 19:09:05+00:00,"Пишем простое веб-приложение на Go + React: серия статей для начинающих.

1. [Creating a Full-Stack Go + React application with tests](https://medium.com/@adykaaa/creating-a-full-stack-go-react-application-with-tests-onlinenotez-a060bb9ded09)
2. [The lib folder, and why I’m not using “utils” or “helpers” instead](https://medium.com/@adykaaa/onlinenotez-part-2-the-lib-folder-and-why-im-not-using-utils-or-helpers-instead-103f99217546)
3. [main.go, service layer and testing](https://medium.com/@adykaaa/onlinenotez-part-3-main-go-service-layer-and-testing-4f53a9b1a49a)
4. [Router, handlers and testing them](https://medium.com/@adykaaa/onlinenotez-part-4-router-handlers-and-testing-them-788f56420d7f)
5. [Client side authentication, middleware, and tests of course!](https://medium.com/@adykaaa/onlinenotez-part-5-client-side-authentication-middleware-and-tests-of-course-84c904f683ce)",5783,23,0,goproglib
3509,2023-03-28 07:30:26+00:00," Хочешь устроиться в зарубежную IT-компанию?

30 марта в 19:00 Библиотека программиста проводит вебинар «Стратегии трудоустройства в международную IT-компанию».

Специалисты из крупнейших международных BigTech компаний расскажут о своем опыте трудоустройства в IT-корпорации и поделятся советами по поиску вакансий, составлению резюме и прохождению технических собеседований.

 Регистрация по ссылке: https://proglib.io/w/a7f45971

На вебинаре вы узнаете

Стоит ли работать из России на международную компанию или сразу искать вариант с релокацией
Плохой английский: что делать
Куда ни ногой: «красные флаги» зарубежных компаний
Как составить резюме и выделиться среди других кандидатов
Как пройти собеседование: общение с рекрутером
Какие документы и сколько денег потребуются для переезда

 После регистрации вы получите гайд по поиску вакансий за рубежом, который поможет вам получить оффер в компанию мечты",4483,6,2,goproglib
3508,2023-03-27 18:41:56+00:00," **Go OpenAI** (ранее go-gpt3) — Go-клиент для взаимодействия с OpenAI API, который поддерживает ChatGPT
GPT-3/GPT-4, DALL·E 2 и Whisper.

https://github.com/sashabaranov/go-openai",5056,15,4,goproglib
3507,2023-03-27 06:46:56+00:00,"️ **Библиотека программиста» находится в поиске авторов оригинальных статей

Языки
**● Python, JavaScript, TypeScript, C#, Go, SQL.

**Тематика
**● Информационная безопасность, Data Science, базовые концепции языков, продвинутый Python, JS (и т. д), бэкенд веб-приложений, фронтенд-разработка, React, системное программирование, базы данных.

**Объем
**● от 7 до 15 тыс. знаков.

️ [Заполнить анкету](https://docs.google.com/forms/d/e/1FAIpQLSdZRp4TjqpvNptKlIhHWa7go-I4-9u8Ft8cda8woK6URep_Zw/viewform?usp=sf_link) ⬅️

**Я хорошо программирую, но пишу «так себе». Что делать?
**Если вы хорошо программируете, но навыки письма немного отстают, пройдите наш бесплатный курс на Степике [«Статьи для IT: как объяснять и распространять значимые идеи»](https://stepik.org/course/101672/promo).",4274,0,0,goproglib
3506,2023-03-26 13:00:33+00:00,"**Исправление ошибки  Out Of Memory** (OOM) **в TiDB с помощью GOMEMLIMIT**

В статье рассказано и наглядно показано, как утечки памяти вызвали ошибку OOM в TiDB, распределенной базе данных SQL, и как команда устраняла эту проблему. Вы увидите возможности Go 1.19 + GOMEMLIMIT для снижения вероятности ошибок OOM.

[Читать](https://dzone.com/articles/how-we-solved-an-oom-issue-in-tidb-with-gomemlimit)",4695,8,0,goproglib
3505,2023-03-26 11:01:39+00:00," Если вы всегда хотите быть в курсе книжных новинок, обновлений и другой полезной информации, касающейся вашего языка или области программирования, вы можете начать читать один из наших каналов, где мы каждый день публикуем учебные материалы для разработчиков разного уровня.

 Канал с мемами: t.me/itmemlib

‍ Полезные материалы по всему, что может быть интересно любому программисту.
Библиотека программиста: t.me/proglibrary
Библиотека хакера: t.me/hackproglib
Go: t.me/goproglib
C\C++: t.me/cppproglib
PHP: t.me/phpproglib
Frontend: t.me/frontendproglib
Python: t.me/pyproglib
Mobile: t.me/mobileproglib
Data Science: t.me/dsproglib
Java: t.me/javaproglib
C#: t.me/csharpproglib
Devops: t.me/devopsslib
Тестирование: t.me/testerlib
Книги для программистов: t.me/progbook
Бот с IT-вакансиями: t.me/proglib_job_bot

 Школа Proglib Academy: https://t.me/proglib_academy


 Канал на YouTube: https://www.youtube.com/c/Библиотекапрограммиста

 Лента в Дзен: https://zen.yandex.ru/proglib


 Если вы хотите быть в курсе последних событий в мире разработки, подписывайтесь на нашего бота t.me/event_listener_bot. Там можно настроить бота под себя: указать интересующие города и темы.

Подписывайтесь: t.me/event_listener_bot",3855,2,0,goproglib
3504,2023-03-26 09:13:12+00:00,Нас 12 000 ! Спасибо за интерес к «Библиотеке Go-разработчика».,4114,46,2,goproglib
3502,2023-03-26 08:51:25+00:00,"Разработка чат-бота Gatekeeper в режиме онлайн: запись стрима от канала Tsoding (за наводку спасибо подписчику).

 [Смотреть](https://youtu.be/TS0C_pt08Go)",4562,5,1,goproglib
3501,2023-03-25 20:30:49+00:00," Традиционный обзор планов работы над криптографией в Go 1.21 от Filippo Valsorda.

[Читать](https://words.filippo.io/dispatches/go-1-21-plan/)",4410,4,0,goproglib
3500,2023-03-25 18:30:49+00:00,"**GopherCon 2022**: Samantha Coyle — путешествие по интеграционному тестированию с Go — что может пойти не так?

От ограничений некоторых пакетов с открытым исходным кодом до разногласий между разработчиками и инженером, который эти самые тесты принимает. В общем, есть что послушать и посмотреть.

 [Смотреть](https://youtu.be/o_B4HFfeKEs)",4600,1,0,goproglib
3499,2023-03-25 16:30:23+00:00,"Обычный синтаксис слайсов в Go, с которым вы наверняка знакомы: `a[low:high]`.

Существует также другой синтаксис слайса в виде `a[low:high:max]`, который принимает три индекса вместо двух. 

Индекс `max` предназначен для установки емкости слайса. В спецификации Go это называется __full slice expression__.

[Разбираемся](https://build-your-own.org/blog/20230316_go_full_slice/), зачем это было добавлено в Go и чем это полезно.",4654,10,1,goproglib
3498,2023-03-25 14:19:04+00:00,"На новом заряженном позитивом стриме Anthony De Meulemeester демонстрирует пошаговое руководство по разработке фулстек приложения на Go.

 [Смотреть](https://www.youtube.com/live/rSrv-TWyO6A?feature=share)",4654,9,0,goproglib
3497,2023-03-24 20:40:52+00:00,"Первоначальная ограниченная поддержка Xbox, дополнительные функции векторного рисования, улучшенный контроль над смешиванием графики/цветов и многое другое в **Ebitengine 2.5**.

[Подробнее](https://ebitengine.org/en/documents/2.5.html)",4859,17,0,goproglib
3496,2023-03-24 16:21:16+00:00,"Проектирование и реализация типа **Set** на Go с использованием дженериков.

[Читать](https://bitfieldconsulting.com/golang/generic-set)",4828,5,1,goproglib
3495,2023-03-24 12:01:20+00:00," **GPT-4 против людей: кто выйдет победителем? На что способна новая мультимодальная языковая модель**

OpenAI представила GPT-4 – большую мультимодальную языковую модель, которая генерирует данные на основе текстовых и визуальных запросов. Разбираемся, в чем модель превосходит своих предшественников и как скоро заменит человека.

 [Основной сайт](https://proglib.io/sh/Hy130pRMis)
 [Зеркало](https://proglib.tech/p/gpt-4-protiv-lyudey-kto-vyydet-pobeditelem-na-chto-sposobna-novaya-multimodalnaya-yazykovaya-model-2023-03-24)",4742,3,1,goproglib
3493,2023-03-23 17:58:59+00:00,"Утечки памяти в Go-приложениях: чем могут быть вызваны и с чего начать поиск источника проблемы.

[Читать](https://habr.com/ru/post/724402/)",5246,13,0,goproglib
3491,2023-03-22 10:01:02+00:00,"Использование Go-библиотеки **gomarkdown/markdown**: от базовых основ до расширенной обработки.

[Читать](https://blog.kowalczyk.info/article/cxn3/advanced-markdown-processing-in-go.html)",4667,6,0,goproglib
3489,2023-03-21 19:29:09+00:00,"Шаблоны синхронизации в Go: гайд для начинающих.

[Читать](https://code-pilot.me/synchronization-patterns-in-go)",6499,15,4,goproglib
3488,2023-03-21 14:45:05+00:00," 24 марта приглашаем на вебинар: «Краткое введение в A/B тестирование и его применение в Data Science».

На вебинаре разберем основные методы A/B тестирования и их применение на примере реального финтех продукта.

Вы узнаете:
Для чего нужны A/B-тесты и где они применяются
Стандартные статистические методы проведения A/B тестов
Что такое стратификация и как ее применять
Как увеличить чувствительность A/B-тестов с помощью CUPED
Как применять А/B-тесты на практике: реальный кейс из финтеха

Также, при регистрации вы получите: 4 книги по математическому анализу и теории вероятностей, где хорошо описаны основы a/b тестирования.

 Регистрируйтесь по ссылке: https://proglib.io/w/4cdb15e5",4581,3,0,goproglib
3487,2023-03-21 13:30:24+00:00," **Зарплаты в ИТ: подводим итоги первого квартала 2023 года**

Слухи о том, что зарплатная планка, предложенная нанимателями отечественным ИТ-специалистам стала снижаться, до сих пор не дают покоя всем, кто работает в цифровой индустрии. Поэтому наша редакция решила разобраться с тем, что творится на рынке вакансий и так ли все страшно на самом деле.

 [Основной сайт](https://proglib.io/sh/68kPs1Ii5h)
 [Зеркало](https://proglib.tech/p/zarplaty-v-it-podvodim-itogi-pervogo-kvartala-2023-goda-2023-03-21)",4541,4,0,goproglib
3486,2023-03-21 11:38:30+00:00,"**GopherCon 2022: Kyle Conroy — безопасно, быстро и легко: создание системы плагинов с помощью WebAssembly**

Добавление плагинов в приложение на Go раньше означало проблемы с кросс-компиляцией, уязвимости безопасности и медленную скорость. Благодаря WebAssembly это больше не так. Из доклада вы узнаете, как создать быструю и безопасную систему плагинов на базе WebAssembly и WASI.

[Смотреть](https://youtu.be/pRT36VqpljA)",4672,4,0,goproglib
3484,2023-03-20 05:00:35+00:00,"Различные команды в Google используют Go [для создания многих сервисов](https://opensource.google/projects/go). 

Вот публичные:

️Прокси-сервер [Flywheel](https://research.google.com/pubs/pub43447.html) для мобильных пользователей Chrome
️Kubernetes 
️Прокси-сервер [Vitess](https://github.com/youtube/vitess) для баз данных MySQL YouTube
[️](https://talks.golang.org/2013/oscon-dl.slide#1)[Серверы загрузки dl.google.com](https://talks.golang.org/2013/oscon-dl.slide#1) для Chrome, Earth и Android SDK
[️](http://www.unofficialgoogledatascience.com/2015/12/replacing-sawzall-case-study-in-domain.html)[Замена Sawzall на Go](http://www.unofficialgoogledatascience.com/2015/12/replacing-sawzall-case-study-in-domain.html) для анализа логов",5001,5,0,goproglib
3483,2023-03-19 20:34:45+00:00," Если вы всегда хотите быть в курсе книжных новинок, обновлений и другой полезной информации, касающейся вашего языка или области программирования, вы можете начать читать один из наших каналов, где мы каждый день публикуем учебные материалы для разработчиков разного уровня.

 Канал с мемами: t.me/itmemlib

‍ Полезные материалы по всему, что может быть интересно любому программисту.
Библиотека программиста: t.me/proglibrary
Библиотека хакера: t.me/hackproglib
Go: t.me/goproglib
C\C++: t.me/cppproglib
PHP: t.me/phpproglib
Frontend: t.me/frontendproglib
Python: t.me/pyproglib
Mobile: t.me/mobileproglib
Data Science: t.me/dsproglib
Java: t.me/javaproglib
C#: t.me/csharpproglib
Devops: t.me/devopsslib
Тестирование: t.me/testerlib
Бот с IT-вакансиями: t.me/proglib_job_bot

 Школа Proglib Academy: https://t.me/proglib_academy


 Канал на YouTube: https://www.youtube.com/c/Библиотекапрограммиста

 Лента в Дзен: https://zen.yandex.ru/proglib


 Если вы хотите быть в курсе последних событий в мире разработки, подписывайтесь на нашего бота t.me/event_listener_bot. Там можно настроить бота под себя: указать интересующие города и темы.

Подписывайтесь: t.me/event_listener_bot",4333,3,0,goproglib
3482,2023-03-19 18:00:49+00:00,"**Performance Benchmarks **— коллекция видео от Anton Putra, сеньор-разработчика в Juniper Networks, на которых он демонстрирует тесты производительности между разными языками и проектами с открытым исходным кодом. Проекты на Go сравниваются с проектами на Rust, Node.js, Java и других языках.

 [Смотреть](https://www.youtube.com/playlist?list=PLiMWaCMwGJXl-h2RgOSpdO-pQaSRwlVjd)",4661,0,1,goproglib
3481,2023-03-19 14:10:14+00:00,"Ретроспектива развития **rqlite**, легковесной распределенной реляционной базы данных, написанной на Go, которая использует SQLite в качестве механизма хранения. Первый выпуск rqlite был в 2014 году!

[Читать](https://www.philipotoole.com/9-years-of-open-source-database-development-the-design-docs/)",4802,14,0,goproglib
3480,2023-03-19 12:45:37+00:00,"Anthony De Meulemeester делится своим подходом к структурированию приложений на Go.

 [Смотреть](https://youtu.be/eSDYl-RuHjc)",5112,11,43,goproglib
3479,2023-03-18 19:38:59+00:00,"**Реверс-прокси с динамическим выбором бэкенда** 

В примере используется Caddy + JWT для маршрутизации клиентов на соответствующий бэкэнд-сервер. Всего несколько строк кода на Go. 

[Читать](https://www.artur-rodrigues.com/tech/2023/03/12/reverse-proxy-with-dynamic-backend-selection.html)",5240,11,0,goproglib
3476,2023-03-18 06:46:21+00:00,"Пример безопасных и надежных энумов в Go, основанных на интерфейсах.

[Читать](https://preslav.me/2023/03/17/create-robust-enums-in-golang/)",5134,10,0,goproglib
3475,2023-03-17 20:29:07+00:00,"Разработчики DoltDB — большие любители Go. Радует, что так же охотно они пишут о Go:

 [Hacking Go's Runtime with Generics](https://www.dolthub.com/blog/2022-12-19-maphash/)
 [Some Useful Patterns for Go's os/exec](https://www.dolthub.com/blog/2022-11-28-go-os-exec-patterns/)
 [Type embedding: Golang's fake inheritance](https://www.dolthub.com/blog/2023-02-22-golangs-fake-inheritance/)
 [Real World Golang Concurrency Examples](https://www.dolthub.com/blog/2023-03-13-golang-concurrency-examples/)",5407,19,9,goproglib
3474,2023-03-17 17:06:38+00:00,"️Proposal **log/slog**: structured, leveled logging —> Accepted

[Но обсуждение продолжается](https://github.com/golang/go/issues/56345#issuecomment-1470506816)…",4861,16,0,goproglib
3473,2023-03-16 20:28:44+00:00," Полезная подборка инструментов и библиотек для Go-разработчика. 

[Читать](https://levelup.gitconnected.com/go-libraries-i-use-in-nearly-every-project-1ea729f4a9e5)",5383,9,0,goproglib
3472,2023-03-16 19:21:24+00:00,"Стратегии модульного тестирования в Go: FunctionPerTest vs Table-Driven Test на примерах.

[Читать](https://medium.com/trendyol-tech/unit-test-strategies-with-go-b892c2ccb61a)",5053,4,5,goproglib
3470,2023-03-15 18:02:15+00:00,"**Обработка ошибок** **в Go лучше, чем вы думаете**

Свежий видеоурок от Anthony De Meulemeester, в котором он делится походом к обработке ошибок в Go.

 [Смотреть](https://youtu.be/XCXHzfJZ6CA)",5450,20,5,goproglib
3469,2023-03-15 16:36:34+00:00,"**Полезные советы и практики по структурированию проекта на Go**

Всегда помните, что оптимальная структура проекта зависит от ваших конкретных потребностей.

[Читать](https://appliedgo.com/blog/go-project-layout)",5282,10,0,goproglib
3468,2023-03-14 20:22:19+00:00,"‍ Очередное выступление Кэмерона Балахана о Go в целом и в частности о том, как команда Go создает полноценные, ориентированные на разработчиков решения. Не обошлось также и без аспектов, которые больше всего волнуют команду, и взгляда на опыт разработчиков Go будущего.

 [Смотреть](https://youtu.be/b7l0Qt8m6OQ)",5160,6,0,goproglib
3467,2023-03-14 19:34:13+00:00,"Обзор частых ошибок, допускаемых при покрытии Go-сервисов тестами, и полезных советов по их недопущению.

[Читать](https://habr.com/ru/post/721958/)",5568,13,10,goproglib
3466,2023-03-13 20:05:13+00:00,"️ Если вы знакомы с Python **ThreadPoolExecutor**, обратите внимание на [**gool**](https://github.com/txaty/gool). Под капотом следующие методы: Submit, AsyncSubmit, Map и AsyncMap.

https://github.com/txaty/gool",4945,8,3,goproglib
3464,2023-03-13 06:09:54+00:00,"Краткие заметки для Go-разработчика о том, что следует учитывать при переходе на **sqlc**.

[Читать](https://preslav.me/2023/03/07/reasons-against-sqlc/)",4878,6,0,goproglib
3463,2023-03-12 14:30:58+00:00,"#хочу_спросить

Задавайте любые вопросы о программировании и получайте ответы от пользователей. В комментариях под постом укажите #язык, #стек и/или #библиотеку, по которым задаете вопрос.",4463,0,9,goproglib
3462,2023-03-12 13:15:10+00:00,"В Go 1.20 был введен тип `http.ResponseController`, который предоставляет ряд преимуществ (приводим в оригинале из статьи Алекса Эдвардса):

1. You can now override your server-wide read and write deadlines on a per request basis.
2. The pattern for using the http.Flusher and http.Hijacker interfaces is clearer and feels less hacky. No more type assertions necessary!
3. It makes it easier and safer to create and use custom http.ResponseWriter implementations.

Узнайте подробнее об этих преимуществах на [примерах](https://www.alexedwards.net/blog/how-to-use-the-http-responsecontroller-type).",5982,19,0,goproglib
3461,2023-03-12 08:55:10+00:00,"**Testcontainers для**__ __**Go** — инструмент, упрощающий создание и очистку зависимостей на основе контейнеров для автоматизированных интеграционных/smoke тестов.

Он позволяет разработчикам программно определять контейнеры, которые следует запускать как часть теста, и очищать эти ресурсы после завершения теста.

https://github.com/testcontainers/testcontainers-go",5237,11,1,goproglib
3460,2023-03-11 22:06:14+00:00,"**errors.Join в Go 1.20** 

В последнем выпуске Go вы можете объединять ошибки, не переопределяя при этом исходные. Это также отлично работает в связке с `defer`.

https://wstrm.dev/posts/errors-join-heart-defer/",5346,17,1,goproglib
3459,2023-03-11 14:01:17+00:00,"**Простые приемы сокращения потребления памяти в Go **

Несмотря на то, что Go известен низким потреблением памяти, есть способы еще больше его сократить. При этом некоторые способы требуют глубокого рефакторинга, а некоторые очень просты. О них и пойдет речь в статье.

[Читать](https://www.ribice.ba/golang-memory-savings/)",6838,9,2,goproglib
3458,2023-03-11 11:01:18+00:00,"**Путь к высокопроизводительному синтаксическому анализу JSON в Go**

В статье приводится исследование производительности синтаксического анализатора JSON и, в конечном счете, описание высокопроизводительного синтаксического анализатора JSON, используемого в CockroachDB. 

[Читать](https://www.cockroachlabs.com/blog/high-performance-json-parsing/)",4957,4,0,goproglib
3456,2023-03-10 19:02:20+00:00,"‍ Свежая статья от команды Go о покрытии кода для интеграционных тестов.

[Читать](https://go.dev/blog/integration-test-coverage)",4832,8,2,goproglib
3455,2023-03-10 18:00:37+00:00,"Команда Turborepo, высокопроизводительной системы сборки для кодовых баз JavaScript и TypeScript, решила перейти с Go на Rust в версии 1.7. 

Из статьи вы узнаете о мотивах этой миграции и о проблемах, которые решает Rust.

[Читать](https://vercel.com/blog/turborepo-migration-go-rust)",4807,11,14,goproglib
3453,2023-03-09 18:17:06+00:00,"**Эволюция алгоритма фильтрации модификаций товаров в Авито**

Денис Колпаков, бэкенд-инженер в юните Core Services Авито, делится опытом решения продуктовой задачи, которая заключалась в поиске способа фильтрации модификаций товаров из базы данных. 

[Читать](https://habr.com/ru/company/avito/blog/720880/)",5066,4,0,goproglib
3452,2023-03-08 19:00:34+00:00,"Пошаговая разработка CRUD REST API на Go с использованием Mux, PostgreSQL, Docker и Docker Compose. На канале уже разгорался холивар относительно качества руководств по разработке CRUD. Ну что ж, давайте его продолжим. 

[Читать](https://dev.to/francescoxx/build-a-crud-rest-api-in-go-using-mux-postgres-docker-and-docker-compose-2a75) & [Смотреть запись стрима](https://www.youtube.com/live/aLVJY-1dKz8?feature=share)",5836,16,2,goproglib
3450,2023-03-08 15:16:36+00:00,"Представлены релизы Go 1.20.2 и 1.19.7, включающее одно исправление безопасности для **crypto/elliptic** (CVE-2023-24532).

[Подробнее](https://groups.google.com/g/golang-announce/c/3-TpUx48iQY)",4959,7,2,goproglib
3449,2023-03-06 19:46:46+00:00," Свистунов Сергей продолжает ускорять все что движется. В этот раз он играет с ассемблером в Go.

[Читать](https://habr.com/ru/post/720582/)",5834,18,1,goproglib
3448,2023-03-06 18:41:53+00:00,"Разработка простого веб-приложение с использованием Gin: серия статей для Go-разработчика.

 [A Solid Foundation to Start a New Gin Web App](https://universalglue.dev/posts/solid-foundation-new-gin-app/)
 [Integrating Gorm with Gin](https://universalglue.dev/posts/integrating-gorm-gin/)
 [How to Test Gin Web Handlers](https://universalglue.dev/posts/testing-gin-web-handlers/)
 [How to Handle Forms with Gin](https://universalglue.dev/posts/gin-post-form-data/)
 [Improve CI with Static Analysis](https://universalglue.dev/posts/integrating-semgrep/)
 [Validating Forms With Gin](https://universalglue.dev/posts/validating-forms-with-gin/)
 [Using CSS with Gin](https://universalglue.dev/posts/using-css-with-gin/)
 [Importing from CSV to SQLite in Go](https://universalglue.dev/posts/csv-to-sqlite/)
 [How to do Pagination with Gin](https://universalglue.dev/posts/gin-pagination/)
 [Using Go's Fuzz Testing with Gin](https://universalglue.dev/posts/gin-fuzzing/)
 [Session Management with Gin](https://universalglue.dev/posts/gin-sessions/)
 [Testing Generated HTML with goquery](https://universalglue.dev/posts/testing-with-goquery/)",5741,10,0,goproglib
3447,2023-03-06 06:15:53+00:00,"**OWASP API Security Top 10** — это всеобъемлющее руководство, которое помогает организациям и разработчикам понять риски и угрозы, связанные с их API, и способы их защиты.

[Релиз-кандидат OWASP API Security Top 10 2023](https://github.com/OWASP/API-Security/tree/master/2023/en/src) выглядит следующим образом: 

1. Broken object level authorization.
2. Broken authentication.
3. Broken object property level authorization.
4. Unrestricted resource consumption.
5. Broken function level authorization.
6. Server side request forgery.
7. Security misconfiguration.
8. Lack of protection from authentication threats.
9. Improper assets management.
10. Unsafe consumption of APIs.",4697,11,0,goproglib
3446,2023-03-05 19:23:33+00:00,"Anthony De Meulemeester продолжает радовать контентом: разработка, рефакторинг и использование движка [Hollywood](https://github.com/anthdm/hollywood).

— [I Created My Own Actor Framework In Golang](https://youtu.be/NuIaY74kCUs)!?
— [Refactoring My Golang Program For Insane Performance](https://youtu.be/_r0iz3pBAA4)
— [Refactoring Advanced Concurrency Code In Golang](https://youtu.be/oejRkew8CF0)
— [Another Approach To Microservices In Golang](https://youtu.be/BlDL4mJCijA)
— [Hollywood LMAX Queue is 3 Times Faster Than Golang Channels](https://youtu.be/Nnx-UVE3KUk)
— [How To Build A TCP Server With Actors In Golang](https://youtu.be/XyUsMV6nCCw)
— [Building A Chat Server And Client With Actors In Golang](https://youtu.be/V8sA00IbCmA)",5248,13,0,goproglib
3445,2023-03-04 15:49:34+00:00,"**Переезд с EC2 на ****Fly.io**

Автор перенес два сторонних проекта с Amazon EC2 на [Fly.io](https://fly.io/), что позволило ему удалить около 500 строк Ansible-скриптов и конфигурационных файлов, а также сэкономить 9 долларов в месяц. В статье он делится опытом.

[Читать](https://benhoyt.com/writings/flyio/)",5145,10,6,goproglib
3444,2023-03-03 16:43:48+00:00,"Код ревью проекта [portal](https://github.com/bagardavidyanisntreal/portal) от Глеба Яльчика, одного из участников подкаста GoGetPodcast.

[Смотреть](https://youtu.be/oqBTz3E19GA)",5397,13,0,goproglib
3443,2023-03-03 15:39:34+00:00,"**Руководство для начинающих по созданию веб-приложения на Go + Ent**

Руководство предназначено для новичков в Ent и Go, которые хотят начать с создания простого проекта: минимальной системы управления контентом.

[Читать](https://entgo.io/blog/2023/02/23/simple-cms-with-ent/)",5526,7,0,goproglib
3442,2023-03-02 21:55:10+00:00," [**Service Weaver**](https://github.com/ServiceWeaver/weaver) — новый Go-фреймворк с открытым исходным кодом для разработки и деплоя распределенных приложений.

Фреймворк позволяет писать приложения в виде модульного монолита и деплоить в виде набора микросервисов. 

[Подробнее](https://opensource.googleblog.com/2023/03/introducing-service-weaver-framework-for-writing-distributed-applications.html)",5587,22,0,goproglib
3441,2023-03-02 19:49:15+00:00,"От Test-Driven Development к Behavior Driven Development: предпосылки перехода и примеры для Go-разработчика.

 [Введение](https://medium.com/the-godev-corner/scrap-your-tdd-for-bdd-part-i-heres-why-25fe40673907)
 [Имплементация](https://medium.com/the-godev-corner/scrap-your-tdd-for-bdd-part-ii-heres-how-to-start-d2468dd46dda)
 [Продолжение](https://medium.com/the-godev-corner/scrap-your-tdd-for-bdd-part-ii-i-heres-how-to-implement-5684adeb1fed)",5554,5,4,goproglib
3440,2023-03-02 18:36:05+00:00,"Николай Тузов рассказывает и показывает, почему интерфейсы лучше описывать в месте их использования.

[Смотреть](https://youtu.be/eYHCCht8eX4)",5489,15,11,goproglib
3438,2023-03-01 20:50:01+00:00,#вопросы_для_самопроверки,4957,0,0,goproglib
3437,2023-03-01 20:18:17+00:00,"**Серии коротких и полезных заметок для Go-разработчика**

 Mastering Go Concurrency:

— [With Fanout and Goroutines](https://blog.kfelter.com/posts/mastering-concurrency-in-go-with-fanout-and-goroutines/)
— [Fan in With Channels](https://blog.kfelter.com/posts/mastering-concurrency-in-go-part-2-fan-in-with-channels/) 
— [Synchronizing Critical Sections With Mutex](https://blog.kfelter.com/posts/mastering-concurrency-in-go-synchronizing-critical-sections-with-mutex-part-3/)
— [Decoupling Data Transfer With Buffered Channels ](https://blog.kfelter.com/posts/mastering-concurrency-in-go-decoupling-data-transfer-with-buffered-channels-part-4/)
— [Running Background Tasks with Goroutines](https://blog.kfelter.com/posts/mastering-go-concurrency-running-background-tasks-with-goroutines-part-5/)

 Mastering Go Application Design

— [HTTP Servers](https://blog.kfelter.com/posts/mastering-go-application-design-http-servers-part-1/)
— [HTTP Path Parameters](https://blog.kfelter.com/posts/mastering-go-application-design-http-path-parameters-part-2/)",5376,4,0,goproglib
3436,2023-03-01 19:35:08+00:00,"#проектирование_систем

**Бесплатная книга по системному проектированию**

По большому счету, это расширенная и углубленная версия рассылки ByteByteGo от Alex Xu и команды.",4340,18,1,goproglib
3435,2023-02-28 19:48:07+00:00,"Пополняемая серия статей о внутренностях некоторых пакетов Go:

— [Testing t.Log](https://www.damianopetrungaro.com/posts/go-internals-testing-t-log/);
— [context](https://www.damianopetrungaro.com/posts/go-internal-context-package/)**.**",4982,5,0,goproglib
3434,2023-02-28 19:00:41+00:00,"️**Log** — легковесная, красочная и настраиваемая библиотека ведения логов в Go. Проект от создателей Bubble Tea и Gum — поэтому вы знаете что делать.‍

https://github.com/charmbracelet/log",4931,11,12,goproglib
3433,2023-02-28 18:00:52+00:00,"Преимущества и практика использования [фреймворка от Google](https://github.com/google/wire) для внедрения зависимостей в Go.

[Читать](https://nelsonparente.medium.com/googles-wire-automated-dependency-injection-in-go-4e98864c3dd5)",4792,16,22,goproglib
3430,2023-02-27 21:26:12+00:00,"Выходим за рамки testify: полезные заметки о тестировании в Go.

[Читать](https://blog.lobocv.com/posts/golang_testing/)",4741,6,1,goproglib
3429,2023-02-27 19:05:17+00:00,"️ **koanf** — легковесная альтернатива viper с расширяемостью и гораздо меньшим количеством зависимостей. Поддерживает JSON, TOML, YAML, env, флаги CLI, файлы, S3 и другие источники конфигурации. 

https://github.com/knadh/koanf",4806,16,0,goproglib
3427,2023-02-26 19:00:29+00:00,"Полезные мысли относительно тестирования в Go и обзор того, как на самом деле работает `go test`.

[Читать](https://bryce.is/writing/code/go-test-and-parallelism.html)",4887,1,14,goproglib
3426,2023-02-26 18:40:15+00:00,"Разработка e-commerce проекта JSON API на Go с использованием JWT-аутентификации, PostgreSQL и Docker: пополняемая серия видеоруководств от Anthony De Meulemeester.

 [Смотреть](https://youtube.com/playlist?list=PL0xRBLFXXsP6nudFDqMXzrvQCZrxSOm-2)",5098,4,0,goproglib
3424,2023-02-26 13:30:21+00:00,"Разбираемся, как **GoReleaser** помогает создавать сборки для нескольких платформ и менеджеров пакетов, как настроить его для создания SBOM и как запустить его для сборки и публикации встроенных двоичных файлов и пакетов.

[Читать](https://www.kosli.com/blog/how-to-publish-your-golang-binaries-with-goreleaser/)",4677,7,1,goproglib
3423,2023-02-26 11:36:15+00:00,"Обзор уязвимости в Go-библиотеке golang/net/html, которая может привести к XSS (Cross-Site Scripting). Автор получил за нее 3 133 доллара от Google.

 [Смотреть](https://youtu.be/H1TVk3HhL9E)",6251,15,3,goproglib
3422,2023-02-25 18:01:37+00:00," Погружение в **cloud native Go**: пошаговое руководство по разработке приложения RESTful API для управления простой книжной полкой.

 [Репозиторий](https://github.com/learning-cloud-native-go/myapp)
 [Документация](https://learning-cloud-native-go.github.io/)",5274,18,0,goproglib
3421,2023-02-25 16:07:00+00:00,"Полное руководство по использованию OpenTelemetry в Go.

[Читать](https://www.komu.engineer/blogs/11/opentelemetry-and-go)",4847,7,0,goproglib
3420,2023-02-25 11:54:11+00:00," **GoGetPodcast: Пет-проекты для разработчика**

Николай Тузов, Александр Бруяко (сеньор Go-разработчик в Avito) и Денис Фетинин (сеньор разработчик в Lamoda, Go community lead) обсуждают пет-проекты в жизни разработчика:

— какие пет-проекты мы делали, для чего и каковы результаты;
— является ли их наличие/отсутствие плюсом/минусом на собеседовании, что вообще полезного они дают?
— как находить идеи и время для пет-проектов?
— что НЕ надо в них делать
и другое.

 [YouTube](https://youtu.be/1aT5D9PZBRk) | [Apple Подкасты](https://podcasts.apple.com/us/podcast/ep-8-pet-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D1%8B-%D0%B4%D0%BB%D1%8F-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%87%D0%B8%D0%BA%D0%B0/id1610745137?i=1000601313949) | [Google Подкасты](https://podcasts.google.com/feed/aHR0cHM6Ly9jbG91ZC5tYXZlLmRpZ2l0YWwvNDAxMDI/episode/ODM2MDYyYTYtZGNiNS00ZTA4LWEyOGMtODYxMTljZmIyN2Jl?sa=X&ved=0CAUQkfYCahcKEwiIrL2W3a39AhUAAAAAHQAAAAAQAQ) | [Яндекс Музыка](https://music.yandex.com/album/21540938/track/111773477?activeTab=track-list&dir=desc) | [VK](https://vk.com/gogetpodcast?z=podcast-210788342_456239024)",4951,8,0,goproglib
3419,2023-02-24 20:05:42+00:00,"**Embedding** — ловушка, в которую разработчики попадают при переходе на Go с объектно-ориентированного языка, такого как Java. 

Вдохновленный постом с [Reddit](https://www.reddit.com/r/golang/comments/112vfr3/how_to_deal_with_java_developers_polluting_the_go/), Zach Musgrave показывает, как слишком сильное увлечение объектно-ориентированными идеями может привести к трудно отслеживаемым ошибкам.

[Читать](https://www.dolthub.com/blog/2023-02-22-golangs-fake-inheritance/)",4754,9,1,goproglib
3418,2023-02-24 18:36:28+00:00,"TFTDS: 18 подробных лекций про отказоустойчивость в распределенных системах от **Романа Липовского**:

1. Модель распределенной системы.
2. Линеаризуемость. Репликация регистра, алгоритм ABD.
3. Atomic Broadcast, State Machine Replication, Consensus.
4. Невозможность консенсуса, теорема FLP.
5. Single-Decree Paxos
6. Multi-Paxos.
7. RAFT.
8. Made Live.
9. Exabyte-scale KV & DFS.
10. Спецификация распределённой системы. TLA+.
11. Транзакции, изоляция транзакций, 2PL и SI.
12. Распределенные транзакции в Google Spanner.
13. Детерминированные распределенные транзакции (Calvin).
14. Византийские отказы.
15. PBFT.
16. Bitcoin.
17. HotStuff.
18. Итоги
 
 [Смотреть](https://youtube.com/playlist?list=PL4_hYwCyhAvaYKF6HkyCximCvlExxxnrC)",4267,33,0,goproglib
3417,2023-02-24 06:02:11+00:00,"Реализация алгоритма распределённого консенсуса Raft: запись стрима от Anthony De Meulemeester.

 [Смотреть](https://www.youtube.com/live/y3UsyQTMeyI?feature=share)",5985,8,1,goproglib
3416,2023-02-23 20:31:45+00:00,Вышла вторая часть серии статей про **причуды** **и** **приемы Go**  https://t.me/goproglib/3395,5764,5,0,goproglib
3408,2023-02-22 13:01:00+00:00,"Вышла вторая часть в серии статей про реализацию hashmap на Go. Автор рассматривает generic ключи и рост мапы, разбирается с нерефлексивными ключами, деталями итерации во время роста и коробочным хешированием.

 https://t.me/goproglib/3188",4654,7,0,goproglib
3407,2023-02-22 10:24:25+00:00,"#news

‍ **Команда Go может добавить телеметрию, включенную по умолчанию**

Это одна из самых горячих тем в сообществе на данный момент. Руководитель разработкой Go представил возможный план реализации телеметрии в наборе инструментов Go.

Russ Cox считает, что проекты с открытым исходным кодом должны исследовать новые схемы телеметрии, которые помогают разработчикам получать информацию, необходимую им для эффективной и результативной работы, без сбора следов подробной активности пользователя. Естественно, это вызвало массу недоумений. Автор статьи переварил общественное мнение и представил в своем материале.

[Читать](https://www.theregister.com/2023/02/10/googles_go_programming_language_telemetry_debate/)",4710,20,1,goproglib
3406,2023-02-22 10:08:51+00:00,"#tools #recon

Всегда радуют инструменты, которые начинаются с «__next-generation__». Но у projectdiscovery с этим все в порядке. Встречайте: next-generation фреймворк для сканирования веб-приложений и поиска информации.

https://github.com/projectdiscovery/katana",4195,8,0,goproglib
3405,2023-02-22 10:08:51+00:00,Очередной любопытный инструмент для этичного хакинга на Go ,4147,0,0,goproglib
3402,2023-02-21 19:13:43+00:00,"Goroutines, channels, waitgroup, mutex и многие другие термины:  практическое руководство по конкурентности в Go.

[Читать](https://blog.canopas.com/a-practical-guide-to-concurrency-in-golang-key-terms-and-examples-aa54dddb9fec)",5038,8,0,goproglib
3400,2023-02-20 21:47:30+00:00,"#devjoke

‍ Когда запустил 'rm -rf /*' без sudo. Линуксоиды поймут...",4249,34,5,goproglib
3399,2023-02-20 20:11:57+00:00,"Глубокое погружение Julien Cretel в предпосылки постоянной борьбы разработчиков с Cross-Origin Resource Sharing (CORS), его «Бесстрашный CORS», философия проектирования библиотек CORS middleware с 12-ю принципами и готовая к работе Go-библиотека **fcors**. Если вы видели более подробное погружение в CORS, пришлите его в комментарии.

[Читать](https://jub0bs.com/posts/2023-02-08-fearless-cors/)",4680,2,2,goproglib
3398,2023-02-20 18:00:56+00:00,"#от_подписчика #проект_в_студию

Рубрика #от_подписчика, в который мы рассказываем об инструментах, написанных вами.

И начнем ее с логгера от @bearatol. Инструмент [lg](https://github.com/bearatol/lg) расширяет стандартный пакет логирования и предоставляет различную полезную информацию (префикс, дату и время, файл и строку), не загромождая лишним кодом. Уровни ошибок и подсветка вывода легко кастомизируются.

Вы тоже можете прислать свой проект, а мы обсудим его в комментариях и обязательно опубликуем на канале. Пишите в комментариях (да, мы их всегда читаем) или в бота обратной связи. В комментариях на всякий случай указывайте хештег #проект_в_студию.",4408,12,4,goproglib
3396,2023-02-19 20:59:44+00:00,"‍ **Статьи для IT: как объяснять и распространять значимые идеи

**Бесплатный [курс](https://stepik.org/course/101672/promo) для всех, кто любит качественные IT-публикации и хочет научиться интересно писать о программировании либо улучшить навыки письма.

Курс состоит из семи модулей, посвященных написанию, редактированию, иллюстрированию и распространению публикаций. Ограничений на время прохождения заданий нет.

Курс будет интересен авторам, работающим в составе редакции,  копирайтерам-одиночкам и просто программистам, которые хотят научиться интересно рассказывать о собственных проектах.

Материалы регулярно дополняются, обновляются и корректируется. Отвечаем на все учебные вопросы в комментариях курса.

**Как стать автором «Библиотеки программиста» и получать гонорары за статьи?
**️ [Заполните анкету](https://docs.google.com/forms/d/e/1FAIpQLSdZRp4TjqpvNptKlIhHWa7go-I4-9u8Ft8cda8woK6URep_Zw/viewform?usp=sf_link). 
Если все ок, мы свяжемся с вами и обсудим дальнейшие шаги.",4460,2,0,goproglib
3395,2023-02-19 19:46:52+00:00,"**Причуды** **и** **приемы Go**

Go обычно считается «простым» языком, но в нем больше пограничных случаев и хитростей, чем можно было бы ожидать.

 Часть 1: [объявления, поток управления и система типов](https://eblog.fly.dev/quirks.html)
 Часть 2: [дженерики и многое другое](https://eblog.fly.dev/quirks2.html)",5598,13,0,goproglib
3394,2023-02-19 13:51:50+00:00,"️**purego** — библиотека для вызова функций C из Go без Cgo. Под капотом:

— простая кросс-компиляция;
— более быстрая компиляция;
— двоичные файлы меньшего размера;
— динамическое связывание;
— интерфейс внешних функций.

 [Репозиторий](https://github.com/ebitengine/purego)
 [Подробнее](https://news.ycombinator.com/item?id=34763681)",5228,19,0,goproglib
3393,2023-02-18 19:32:46+00:00,"**Оптимизация доступа к элементам слайса в Go**

В общем, автор [статьи](https://t.me/goproglib/3386) пошел дальше и нашел способ улучшить код еще в 2 раза.

[Читать](https://habr.com/ru/post/717716/)",5381,12,0,goproglib
3392,2023-02-18 08:10:04+00:00,"Пишем простой сокращатель URL-адресов с использованием Go, Gorm и Sqlite.

[Читать](https://blog.pratimbhosale.com/building-a-url-shortener-using-go-and-sqlite)",5581,12,12,goproglib
3391,2023-02-17 18:53:40+00:00,"‍ **Comparable types** в деталях: свежая статья от команды Go.

[Читать](https://go.dev/blog/comparable)",5788,11,0,goproglib
3390,2023-02-17 17:24:52+00:00,"**Rust против Go в 2023 году**: беспристрастное сравнение производительности, простоты, безопасности, функционала, масштабируемости и конкурентности

Вывод один, и он не меняется: если у вас есть время для глубокого изучения только одного языка, не принимайте окончательного решения, пока вы не использовали и Go, и Rust на практике.

[Читать](https://bitfieldconsulting.com/golang/rust-vs-go)",5379,10,7,goproglib
3389,2023-02-16 19:32:59+00:00,"️ При работе с чем-либо, связанным с сетью, повторение запроса/действия часто является необходимой стратегией, которую необходимо реализовать. 

Попробуйте библиотеку **retry-go** — в ней как раз реализованы необходимые механизмы.

https://github.com/avast/retry-go",5376,18,3,goproglib
3388,2023-02-16 16:34:10+00:00,"Разработка микросервиса на Go с использованием инструмента [Hollywood](https://github.com/anthdm/hollywood): новая запись стрима от Anthony De Meulemeester.

[Смотреть](https://www.youtube.com/live/XD1iaWZXIeY?feature=share)",4954,5,0,goproglib
3387,2023-02-15 19:53:09+00:00,"Углубленный анализ ассемблерного кода, генерируемого компилятором Go для вызовов функций на arm64.

[Читать](https://blog.felixge.de/go-arm64-function-call-assembly/)",5251,7,1,goproglib
3385,2023-02-15 10:06:00+00:00,"‍ **«Я понял, ради чего живу»: как изменилась жизнь русскоязычных айтишников за последний год? Результаты опроса «Библиотеки программиста»**

Коротко о главном: пессимистов больше, чем оптимистов; зарплата в IT все равно растет, несмотря ни на что; доход тимлидов и джунов не снижается, а сеньоров и мидлов все-таки штормит.

 [Основной сайт](https://proglib.io/sh/qPuoW5UYBe)
 [Зеркало](https://proglib.tech/p/ya-ponyal-radi-chego-zhivu-kak-izmenilas-zhizn-russkoyazychnyh-aytishnikov-za-posledniy-god-rezultaty-oprosa-biblioteki-programmista-2023-02-14)",4516,7,2,goproglib
3384,2023-02-14 20:40:09+00:00," Представлены релизы Go 1.20.1 и 1.19.6, исправляющие уязвимости в net/http, crypto/tls, mime/multipart и path/filepath (только в Windows).

[Подробнее](https://groups.google.com/g/golang-announce/c/V0aBFqaFs_E)",5080,17,0,goproglib
3383,2023-02-14 17:03:10+00:00,"**Как отладка кода на Go стала быстрее с Delve и eBPF**

Глубокое погружение в использование Delve для трассировки и отладки Go-кода и предпосылки использования eBPF для достижения максимальной эффективности и скорости.

[Читать](https://developers.redhat.com/articles/2023/02/13/how-debugging-go-programs-delve-and-ebpf-faster)",6429,5,0,goproglib
3382,2023-02-14 11:32:17+00:00," Разработка консольной игры на Go без сторонних библиотек: новая запись стрима от Anthony GG.

[Смотреть](https://www.youtube.com/live/AgPRCBudmGM?feature=share)",5206,14,0,goproglib
3381,2023-02-13 20:00:27+00:00,"Владимир Калугин, руководитель бэкенд-разработки в МТС Travel, делится опытом работы с Go-инструментом **KrakenD**. 

**KrakenD** — готовое решение, которое используется его командой для реализации API-шлюза.

[Читать](https://habr.com/ru/company/ru_mts/blog/716512/)",5340,26,4,goproglib
3380,2023-02-13 19:15:04+00:00,"**Паттерны и практики Go**

[Слайды + заметки с презентации Abhinav Gupta](https://abhinav.github.io/presentation-go-patterns-2022/) о нескольких шаблонах и передовых методах, которые вы можете использовать для разработки Go-библиотек, совместимых с предыдущими версиями.",5313,13,0,goproglib
3379,2023-02-12 19:34:53+00:00,"️**Nebula** — инструмент для построения защищенных сетей, написанный на Go. Ключевые особенности — производительность, простота и безопасность. 

Он позволяет легко подключать компьютеры в любой точке мира, работает на Linux, OSX, Windows, iOS и Android. [Анонсирован](https://slack.engineering/introducing-nebula-the-open-source-global-overlay-network-from-slack/) командой Slack в 2019 году и используется по настоящее время.

https://github.com/slackhq/nebula",5218,13,1,goproglib
3377,2023-02-12 11:06:32+00:00," Если вы всегда хотите быть в курсе книжных новинок, обновлений и другой полезной информации, касающейся вашего языка или области программирования, вы можете начать читать один из наших каналов, где мы каждый день публикуем учебные материалы для разработчиков разного уровня.

 Канал с мемами: t.me/itmemlib

‍ Полезные материалы по всему, что может быть интересно любому программисту.
Библиотека программиста: t.me/proglibrary
Библиотека хакера: t.me/hackproglib
Go: t.me/goproglib
C\C++: t.me/cppproglib
PHP: t.me/phpproglib
Frontend: t.me/frontendproglib
Python: t.me/pyproglib
Mobile: t.me/mobileproglib
Data Science: t.me/dsproglib
Java: t.me/javaproglib
C#: t.me/csharpproglib
Devops: t.me/devopsslib
Тестирование: t.me/testerlib
Бот с IT-вакансиями: t.me/proglib_job_bot

 Школа Proglib Academy: https://t.me/proglib_academy


 Канал на YouTube: https://www.youtube.com/c/Библиотекапрограммиста

 Лента в Дзен: https://zen.yandex.ru/proglib


 Если вы хотите быть в курсе последних событий в мире разработки, подписывайтесь на нашего бота t.me/event_listener_bot. Там можно настроить бота под себя: указать интересующие города и темы.

Подписывайтесь: t.me/event_listener_bot",4416,3,0,goproglib
3376,2023-02-11 20:29:18+00:00,"️ **mockery** — инструмент, который упрощает процесс создания моков для интерфейсов Go с помощью пакета [stretchr/testify/mock](https://pkg.go.dev/github.com/stretchr/testify/mock). 

https://github.com/vektra/mockery",4827,0,9,goproglib
3375,2023-02-11 13:54:22+00:00,"**Пять шагов, которые позволят сделать ваш код на Go быстрее и эффективнее **

[Презентация](https://docs.google.com/presentation/u/0/d/1MD_Vlb9d32aMDPu9MOlyVO796mK1Y6GrRcXOl63C7g4/) автора книги **Efficient Go** на FOSDEM 2023, где он делится конкретными кейсами, которые вы можете начать использовать в своем коде уже сегодня.",5449,8,0,goproglib
3374,2023-02-10 19:35:41+00:00,"Полное погружение в работу с битами для Go-разработчика.

[Читать](https://lemire.me/blog/2023/02/07/bit-hacking-with-go-code/)",5933,19,0,goproglib
3373,2023-02-10 15:23:19+00:00,"**Анонс библиотеки **[**conc**](https://github.com/sourcegraph/conc) **от разработчика из Sourcegraph, которая делает конкурентный код более элегантным и сокращает объем шаблонного кода**

Автор сначала рассказывает о проблемах, возникающих при написании конкурентного кода, затем погружает читателя в предметную область, после чего показывает работу новой библиотеки на практике.

[Читать](https://about.sourcegraph.com/blog/building-conc-better-structured-concurrency-for-go)",5485,20,0,goproglib
3372,2023-02-09 20:35:48+00:00,"Использование **profile-guided optimization** на примере: гайд от команды Go.

https://go.dev/blog/pgo-preview",5146,9,0,goproglib
3371,2023-02-09 17:19:03+00:00,"Серия руководств, в которых рассматриваются встроенные функции и сторонние реализации для ведения логов в Go:

[How to Get Started with Logging in Go](https://betterstack.com/community/guides/logging/logging-in-go/)
[A Complete Guide to Logging in Go with Zerolog](https://betterstack.com/community/guides/logging/zerolog/)",5436,2,0,goproglib
3370,2023-02-08 19:26:24+00:00,"Максим Шамаев, бэкенд-разработчик в X-Cart, рассказывает, почему народ побежал в Go и что надо знать перед побегом.

 [Смотреть](https://youtu.be/BCj_mgxq7PM)",5167,1,2,goproglib
3369,2023-02-08 18:55:42+00:00,"️ **rpcx** — RPC-фреймворк, подобный Alibaba Dubbo и Weibo Motan, но с бОльшим количеством функций и с упором на простоту, производительность и многое другое. 

https://github.com/smallnest/rpcx",4806,10,0,goproglib
3368,2023-02-08 06:06:57+00:00,"#ищу_команду

Ищите единомышленников, делайте коллабы, создавайте новые проекты. В комментариях под постом укажите #язык, #библиотеку и/или #стек, который вас интересует и опишите общую концепцию проекта.",4389,1,7,goproglib
3367,2023-02-07 19:50:00+00:00," **GoGetPodcast: Как развиваться Go-разработчику?**

Как готовиться к собеседованиям, чего от вас будут ожидать, что пригодится на работе, как расти и развиваться в профессии. Эти и другие вопросы в новом выпуске подкаста.

 [Смотреть](https://youtu.be/aWP6JIime8w)",4946,15,4,goproglib
3365,2023-02-07 19:11:34+00:00,#вопросы_для_самопроверки,4415,0,0,goproglib
3363,2023-02-06 20:06:46+00:00,"Примеры использования Go для отслеживания появления твинков (когда один пользователь создает несколько учетных записей на сайте).

[Читать](https://habr.com/ru/post/715006/)",4659,8,1,goproglib
3362,2023-02-06 19:01:08+00:00,"**Основы обработки ошибок в Go**: краткий гайд по созданию кастомных типов ошибок с полезными советами.

[Читать](https://haykot.dev/blog/go-errors-cheat-sheet-2022/)",4874,5,0,goproglib
3360,2023-02-05 16:29:09+00:00,"Оптимизация передачи больших файлов в Linux с помощью Go: как syscall sendfile и io.Copy() могут помочь сделать передачу файлов более эффективной.

[Читать](https://dev.to/douglasmakey/optimizing-large-file-transfers-in-linux-with-go-an-exploration-of-tcp-and-syscall-15eo)",5203,18,0,goproglib
3359,2023-02-05 10:14:01+00:00,"‍ Пополняем коллекцию руководств по Go для начинающих: подборка материалов от Влада Тена (пополняется, сейчас в черновом варианте).

https://github.com/vladtenlive/gosling",4974,10,28,goproglib
3358,2023-02-04 19:07:18+00:00,"Как использовать AVX-512 в Go через компилятор C: инструменты и кейсы команды [Gorse](https://gorse.io/).

[Читать](https://gorse.io/posts/avx512-in-golang.html)",4807,7,0,goproglib
3357,2023-02-04 16:27:53+00:00,"Более 130 докладов, каждый из которых решает конкретную задачу.

[Смотреть](https://youtube.com/playlist?list=PLH-XmS0lSi_zCq4H_OZrXD509X23xwvao)",4346,15,0,goproglib
3356,2023-02-04 09:03:12+00:00,"**Memory Arenas против традиционного управления памятью

**Go 1.20 представляет экспериментальную концепцию для управления памятью, которую можно использовать для повышения производительности кода на Go. Узнайте, что это такое, как она работает на практике и многое другое.

[Читать](https://pyroscope.io/blog/go-1-20-memory-arenas/)",6300,12,0,goproglib
3355,2023-02-03 19:01:10+00:00,"Вышла третья часть в **серии статей об изменениях в Go 1.20**. Вы узнаете про некоторые изменения в стандартной библиотеке: `math/rand`, `path/filepath`, `httputil.ReverseProxy`, `strings.CutPrefix` и другие.

https://t.me/goproglib/3284",4727,6,0,goproglib
3354,2023-02-03 17:45:43+00:00,"**Улучшение наблюдаемости Go-сервисов**

Этот гайд не охватывает основы, а сразу переходит к практике ведению логов, метрик, трассировки с помощью TraceQL, объединения профилирования с трассировкой и многому другому.

[Читать](https://flow.com/engineering-blogs/golang-services-improving-observability)",5129,7,0,goproglib
3353,2023-02-03 11:43:01+00:00,"‍ Списки Awesome на GitHub — это курируемые списки ресурсов и инструментов, относящихся к определенной теме или области. Они создаются и поддерживаются сообществом GitHub и часто служат всеобъемлющей и хорошо организованной коллекцией полезных ресурсов для разработчиков, специалистов по анализу данных, сисадминов и т. д. Списки Awesome охватывают широкий круг вопросов: от конкретных языков программирования и фреймворков до более широких тем, таких как машинное обучение, безопасность и QA. Они являются отличной отправной точкой для тех, кто хочет узнать больше о конкретной теме или найти лучшие инструменты и ресурсы для своей работы.

‍  JavaScript: [awesome-javascript
](https://github.com/sorrycc/awesome-javascript)‍ React: [awesome-react
](https://github.com/enaqx/awesome-react)‍ Vue: [awesome-vue
](https://github.com/vuejs/awesome-vue)‍ Angular: [awesome-angular
](https://github.com/PatrickJS/awesome-angular)‍ Node.js: [awesome-nodejs
](https://github.com/sindresorhus/awesome-nodejs)‍ Typescript: [awesome-typescript
](https://github.com/dzharii/awesome-typescript)‍ Java: [awesome-java
](https://github.com/akullpp/awesome-java)‍ Go: [awesome-go
](https://github.com/avelino/awesome-go)‍ Ruby: [awesome-ruby
](https://github.com/markets/awesome-ruby)‍ PHP: [awesome-php
](https://github.com/ziadoz/awesome-php)‍ Kotlin: [awesome-kotlin
](https://github.com/KotlinBy/awesome-kotlin)‍ Rust: [awesome-rust
](https://github.com/rust-unofficial/awesome-rust)‍ Swift: [awesome-swift
](https://github.com/Wolg/awesome-swift) iOS-разработка: [awesome-ios
](https://github.com/vsouza/awesome-ios)‍ Android-разработка: [awesome-android
](https://github.com/JStumpp/awesome-android)‍ C: [awesome-c
](https://github.com/oz123/awesome-c)‍ C++: [awesome-cpp
](https://github.com/fffaraz/awesome-cpp)‍ C#: [awesome-dotnet
](https://github.com/quozd/awesome-dotnet)‍ Unreal Engine: [awesome-unreal
](https://github.com/insthync/awesome-unreal)‍ Unity: [awesome-unity3d
](https://github.com/insthync/awesome-unity3d)‍ Python: [awesome-python
](https://github.com/vinta/awesome-python)‍ Django: [awesome-django
](https://github.com/wsvincent/awesome-django)‍Data Science: [awesome-datascience
](https://github.com/bulutyazilim/awesome-datascience)‍ TensorFlow: [awesome-tensorflow
](https://github.com/jtoy/awesome-tensorflow)[‍](https://github.com/luong-komorebi/Awesome-Linux-Software) Linux: [Awesome-Linux-Software
](https://github.com/luong-komorebi/Awesome-Linux-Software)‍ DevOps: [awesome-devops
](https://github.com/awesome-soft/awesome-devops)‍ SysAdmins: [awesome-sysadmin
](https://github.com/awesome-foss/awesome-sysadmin)‍ Nginx: [awesome-nginx
](https://github.com/agile6v/awesome-nginx)‍ Kubernetes: [awesome-kubernetes
](https://github.com/ramitsurana/awesome-kubernetes) Docker: [awesome-docker
](https://github.com/veggiemonk/awesome-docker)‍ AWS: [awesome-aws
](https://github.com/donnemartin/awesome-aws)‍ Google cloud: [awesome-google-cloud
](https://github.com/GoogleCloudPlatform/awesome-google-cloud)[](https://github.com/awesome-selfhosted/awesome-selfhosted) Сети: [awesome-networking
](https://github.com/facyber/awesome-networking)[](https://github.com/awesome-selfhosted/awesome-selfhosted) Автоматизация сетевой инфраструктуры: [awesome-network-automation
](https://github.com/networktocode/awesome-network-automation)️ Информационная безопасность: [awesome-security
](https://github.com/sbilly/awesome-security) QA: [awesome-testing
](https://github.com/TheJambo/awesome-testing)‍ Базы данных: [awesome-database-learning
](https://github.com/pingcap/awesome-database-learning)[](https://github.com/awesome-selfhosted/awesome-selfhosted) Selfhosted: [awesome-selfhosted
 
](https://github.com/awesome-selfhosted/awesome-selfhosted)#избранное

******Какие списки awesome достойны упоминания? Расскажите в комментариях.**",3692,27,0,goproglib
3352,2023-02-02 19:48:48+00:00,"Гайд по профилированию кода на Go для тех, кто использует GoLand и другие встроенные инструменты этой IDE.

[Читать](https://blog.jetbrains.com/go/2023/02/02/profiling-go-code-with-goland/)",6553,7,0,goproglib
3351,2023-02-02 19:12:59+00:00,"«**Немного IT**» — видеоподкаст про Go от разработчика и архитектора из Evrone. Вы услышите про преимущества/недостатки и погрузитесь в нюансы Go.

[Смотреть](https://youtube.com/playlist?list=PL4LclcoFiGVy0MQ0j6OUJ699X-2OBlfSI)",4786,4,0,goproglib
3350,2023-02-01 20:25:07+00:00," Примерно 20 минут релизнулся Go 1.20.

[Примечания к выпуску](https://go.dev/doc/go1.20)",5213,63,5,goproglib
3349,2023-02-01 20:22:21+00:00,"**Подборка примеров взаимозаменяемых конструкций и хаков Kotlin/Go**

Материал от системного архитектора из SpectrumData для тех, кто пишет на Kotlin, и для кого Go второй язык.

[Читать](https://habr.com/ru/post/714050/)",4858,7,0,goproglib
3348,2023-02-01 19:36:49+00:00,"Начиная с Go 1.20, компилятор Go поддерживает **Profile-guided optimization** (также называют **feedback-directed optimization) **для дальнейшей оптимизации сборок. Узнайте подробнее в новом руководстве от команды Go.

[Читать](https://tip.golang.org/doc/pgo)",4755,19,2,goproglib
3346,2023-01-31 19:30:03+00:00," **Bob** — билдер SQL-запросов для Go с поддержкой PostgreSQL, MySQL и SQLite.

https://github.com/stephenafamo/bob",4656,6,0,goproglib
3344,2023-01-31 18:35:49+00:00,#вопросы_для_самопроверки,4244,5,0,goproglib
3342,2023-01-30 19:28:38+00:00,"Месяц назад команда СберМаркета вместе с Хабром опросили Go‑разработчиков: чем они живут, над какими задачами работают и где черпают полезную информацию о Go. 

Под катом читайте основные инсайты, а еще: почему многие Go‑разработчики знают Python, мечтают выучить Rust и многое другое.

 [Читать](https://habr.com/ru/article/713190/)",4756,13,11,goproglib
3341,2023-01-30 10:02:05+00:00,"Команда Ent добавила возможность быстрой визуализации схемы с помощью entviz:

‍ `go run -mod=mod ariga.io/entviz ./path/to/ent/schema `

[Подробнее](https://entgo.io/blog/2023/01/26/visualizing-with-entviz/)",4777,38,2,goproglib
3340,2023-01-30 05:59:27+00:00,"**Опрос: Как изменилась жизнь русскоязычных айтишников за последний год?

**Прошедший год был неспокойным для многих, и русскоязычное ИТ-сообщество не стало исключением. Жизнь стала все больше напоминать ряд спринтов на прохождение головоломок: что делать, как быть, остаться или уезжать? Цель опроса — понять, с какими проблемами столкнулись русскоязычные ИТ-специалисты за последний год, как они адаптировались к этим изменениям и какой прогноз дают на ближайшее время.

Предыдущие опросы
● [« Что сейчас происходит с IT-индустрией и айтишниками?»
](https://proglib.io/p/chto-seychas-proishodit-s-it-industriey-i-aytishnikami-rezultaty-oprosa-biblioteki-programmista-2022-03-23)● [« Как изменилась жизнь русскоязычных айтишников за последние полгода? Результаты опроса «Библиотеки программиста»


](https://proglib.io/p/kak-izmenilas-zhizn-russkoyazychnyh-aytishnikov-za-poslednie-polgoda-rezultaty-oprosa-biblioteki-programmista-2022-09-08)[️ ](https://docs.google.com/forms/d/e/1FAIpQLSdo_iqdNxWj1FO2A-NVpyBVEA5BxkUH_2Dm6jawkiy9Vyni3Q/viewform?usp=sf_link)[Пройти анонимный опрос](https://docs.google.com/forms/d/e/1FAIpQLSdo_iqdNxWj1FO2A-NVpyBVEA5BxkUH_2Dm6jawkiy9Vyni3Q/viewform?usp=sf_link)",4248,5,29,goproglib
3339,2023-01-29 15:52:58+00:00,"[​](https://video.twimg.com/tweet_video/FnajSgsWQAkgHZW.mp4) Официальный плагин Go для VSCode теперь использует базу данных уязвимостей Go для обнаружения известных уязвимостей в ваших зависимостях.

[Подробнее](https://github.com/golang/vscode-go/wiki/features#analyze-vulnerabilities-in-dependencies)",4846,67,0,goproglib
3338,2023-01-29 11:30:45+00:00,"**Полное руководство по дженерикам в Go
**
Несмотря на то, что существует несколько подобных руководств, подробные примеры в течение всей статьи стоят того, чтобы добавить руководство закладки.

 [Читать](https://itnext.io/a-comprehensive-guide-to-generics-in-go-5a9dcda5669c)",5185,11,0,goproglib
3337,2023-01-29 07:37:22+00:00," Если вы всегда хотите быть в курсе книжных новинок, обновлений и другой полезной информации, касающейся вашего языка или области программирования, вы можете начать читать один из наших каналов, где мы каждый день публикуем учебные материалы для разработчиков разного уровня.

 Канал с мемами: t.me/itmemlib

‍ Полезные материалы по всему, что может быть интересно любому программисту.
Библиотека программиста: t.me/proglibrary
Библиотека хакера: t.me/hackproglib
Go: t.me/goproglib
C\C++: t.me/cppproglib
PHP: t.me/phpproglib
Frontend: t.me/frontendproglib
Python: t.me/pyproglib
Mobile: t.me/mobileproglib
Data Science: t.me/dsproglib
Java: t.me/javaproglib
C#: t.me/csharpproglib
Devops: t.me/devopsslib
Тестирование: t.me/testerlib
Бот с IT-вакансиями: t.me/proglib_job_bot

 Школа Proglib Academy: https://t.me/proglib_academy


 Канал на YouTube: https://www.youtube.com/c/Библиотекапрограммиста

 Лента в Дзен: https://zen.yandex.ru/proglib


 Если вы хотите быть в курсе последних событий в мире разработки, подписывайтесь на нашего бота t.me/event_listener_bot. Там можно настроить бота под себя: указать интересующие города и темы.

Подписывайтесь: t.me/event_listener_bot",3962,5,0,goproglib
3336,2023-01-28 20:57:42+00:00,"️ **Mocktail** — инструмент, который генерирует строго типизированные моки и обеспечивает простой и понятный синтаксис. 

Простой инструмент, который потенциально может сэкономить вам много времени, создавая моки вручную, даже если вы используете что-то вроде Testify.

 [Анонс инструмента](https://traefik.io/blog/mocktail-the-mock-generator-for-strongly-typed-mocks/)
 [Репозиторий](https://github.com/traefik/mocktail)",4732,11,3,goproglib
3335,2023-01-28 12:00:19+00:00,"**Миграция с Node.js, Python или Rust на Go**

В целом довольно бестолковый гайд, но какие-то советы почерпнуть можно.

[Читать](https://blog.logrocket.com/go-migration-guide-node-js-python-rust/)",4505,6,11,goproglib
3334,2023-01-28 10:17:30+00:00,"Яркий участник Go-сообщества Jonathan Hall делится десятью аспектами, которыми он не совсем доволен в языке:

1. Exported package variables
2. http.Handler doesn't return an error
3. No pointers to literals
4. Loop variables
5. Naked returns
6. Relative imports
7. gofmt's format
8. Comment directives
9. Array vs. Slice terminology
10. Pure functions

 [Смотреть](https://youtu.be/zC5qBBK9ZaM)",4630,21,6,goproglib
3333,2023-01-27 10:00:18+00:00,"Данила Проценко, Lead Software Architect в «Лаборатории Касперского», рассказывает о том, как во множестве микросервисов и просто сервисов можно стандартизировать структуру кода и сделать ее понятнее для всех.

[Читать](https://habr.com/ru/company/kaspersky/blog/699994/)",5079,11,6,goproglib
3330,2023-01-26 10:00:19+00:00,"‍  5 простых шорткатов GoLand для повышения вашей производительности.

[Читать](https://blog.jetbrains.com/go/2022/05/26/5-goland-shortcuts-to-boost-your-productivity/)",4551,7,6,goproglib
3328,2023-01-26 05:00:10+00:00,#вопросы_для_самопроверки,4311,0,4,goproglib
3327,2023-01-25 20:30:32+00:00,"‍ А что вы думаете о [целесообразности размещения](https://habr.com/ru/news/t/460333/) логотипа Google в углу футера главной страницы сайта? Из-за этого может показаться, что это проект только Google, хотя это далеко не так, — считают многие гоферы.",4365,14,4,goproglib
3326,2023-01-25 19:47:44+00:00,"Подборка туториалов по  различным аспектам Go для пополнения коллекции обучающих материалов.

[Читать](https://www.developer.com/?s=Go&post_type=post)",4748,8,0,goproglib
3324,2023-01-25 06:14:42+00:00,"Опыт перехода с C++ на Go: Владимир Балун рассказывает, как строился его переход на Go и как в будущем он смог найти работу.

[Смотреть](https://youtu.be/5FwBIPNChHk)",4578,11,0,goproglib
3322,2023-01-24 20:07:11+00:00,"️ **graph** — библиотека для создания графовых структур данных и выполнения операций над ними.

https://github.com/dominikbraun/graph/",4874,22,1,goproglib
3320,2023-01-24 14:31:11+00:00,"#хочу_спросить

Задавайте любые вопросы о программировании и получайте ответы от пользователей. В комментариях под постом укажите #язык, #стек и/или #библиотеку, по которым задаете вопрос.",4207,0,12,goproglib
3318,2023-01-24 05:00:10+00:00,"Детали работы с `net.IP` и `netip.Addr` в Go: все не так просто, как кажется.

[Читать](https://djosephsen.github.io//posts/ipnet/)",4511,1,0,goproglib
3317,2023-01-23 20:45:00+00:00,"**Executable examples в Go**

Знаете ли вы, что в Go вы можете писать исполняемые примеры? Они автоматически включаются в документацию пакета, их можно запускать непосредственно в веб-браузере, а также они автоматически проверяются каждый раз, когда вы запускаете `go` `test`. 

[Подробнее](https://bitfieldconsulting.com/golang/examples)",4766,3,0,goproglib
3314,2023-01-23 05:00:12+00:00,"Теоретический и практический гайд по работе с пакетом database/sql в Go на примере PostgreSQL.

[Читать](https://betterstack.com/community/guides/scaling-go/sql-databases-in-go/)",6223,12,1,goproglib
3313,2023-01-22 20:00:06+00:00,"Разбираемся, что из себя представляют процессы в Linux и как ими можно управлять с использованием Go.

[Читать](https://mezhenskyi.dev/posts/go-linux-processes/)",4869,20,1,goproglib
3310,2023-01-22 08:21:57+00:00,"‍ Хотите взглянуть на Go 1.20 шире? Jan Stamer подготовил доску на платформе Miro с ключевыми обновлениями.

[Смотреть](https://miro.com/app/board/uXjVPyMixKs=/)",4541,13,0,goproglib
3309,2023-01-21 17:39:06+00:00,‍ Стартовал январский выпуск опроса Go-разработчиков. [Примите участие и вы](https://google.qualtrics.com/jfe/form/SV_bNnbAtFZ0vfRTH8?s=t)!,4431,4,0,goproglib
3308,2023-01-21 12:07:07+00:00,Вышла вторая часть в серии статей об изменениях в Go 1.20  https://t.me/goproglib/3284,4658,6,0,goproglib
3307,2023-01-21 05:00:08+00:00,"**Go workspaces:** основные возможности и сценарии использования.

[Читать](https://blog.logrocket.com/go-workspaces-multi-module-local-development/)",4856,7,1,goproglib
3306,2023-01-20 19:39:58+00:00,"**Что такое фаззинг и зачем он нужен?**

Недавно [публиковали](https://t.me/goproglib/3302) расшифровку доклада Сергея Петрова о фаззинг-тестировании в Go. 

В этой статье разработчик из Ozon также углубляется в фаззинг: что это такое, зачем он нужен и как с его помощью найти баг на примере.

[Читать](https://habr.com/ru/company/ozontech/blog/711428/)",4647,5,0,goproglib
3305,2023-01-20 18:02:14+00:00,"**Программное создание диаграмм с помощью D2**

[D2](https://github.com/terrastruct/d2) — инструмент для создания сценариев декларативных диаграмм на базе Go. В руководстве рассматривается его использование из Go-кода для создания диаграммы схемы базы данных.

[Читать](https://terrastruct.com/blog/post/generate-diagrams-programmatically/)",4575,10,2,goproglib
3303,2023-01-20 12:18:22+00:00,"Команда [ngrok](https://ngrok.com/) представила [агент в виде Go-библиотеки](https://blog.ngrok.com/posts/announcing-ngrok-go), подходящий для интеграции непосредственно в Go-приложения.

В статье выше объясняется, как работает **ngrok-go**, чем он отличается от традиционных сетей и туннелей, а также как начать использовать его в своих приложениях.",4550,15,0,goproglib
3302,2023-01-19 17:08:19+00:00,"Текстовая расшифровка [доклада Сергея Петрова](https://youtu.be/eM_co_TxZXI) на GolangConf о том, как устроено fuzzing-тестирование в Go и как проверить функцию на корректную валидацию данных.

[Читать](https://habr.com/ru/company/oleg-bunin/blog/709248/)",4801,13,0,goproglib
3301,2023-01-19 05:00:14+00:00,"Автор [статьи](https://tomthorogood.net/writing/announcing-passit/) уже несколько лет трудится над менеджером паролей, и в качестве промежуточных результатов представил **passit**, набор инструментов для генерации паролей. Можете использовать его как CLI-инструмент или Go-пакет. Под капотом множество различных генераторов паролей, включая эмоджи.

https://github.com/tmthrgd/passit",4697,8,0,goproglib
3300,2023-01-18 20:15:00+00:00,"Насколько бы Go не был хорош, в нем есть свои недостатки. Ловите коллекцию статей, которые хейтят Go (на текущий момент репозиторий не поддерживается, последняя редакция в 2019 году).

[Читать](https://github.com/ksimka/go-is-not-good)",4834,11,17,goproglib
3299,2023-01-18 19:30:10+00:00,"️ **Кем стать в IT: 9 ролей специалистов в IT-проекте**

Если вы решили войти в АйТи, но еще не определились с направлением, наша пояснительная бригада спешит на помощь – разбираем роли каждого участника в жизненном цикле ИТ-проекта.

 [Основной сайт](https://proglib.io/sh/iyRPJswDhF)
 [Зеркало](https://proglib.tech/p/kem-stat-v-it-9-roley-specialistov-v-it-proekte-2023-01-18)",4395,3,0,goproglib
3298,2023-01-18 08:26:58+00:00,"Distributed cache на Go: записи стримов от Anthony GG.

 [Часть 1](https://youtu.be/sRXIRikME14)
 [Часть 2](https://youtu.be/s2zAh9g_Y2c)
 [Часть 3](https://youtu.be/kV9gK3HZjv8)
 [Часть 4](https://youtu.be/y3UsyQTMeyI)",5395,18,1,goproglib
3297,2023-01-17 18:43:14+00:00,"️ **Работа или жизнь: принципы Work-life balance**

Если ты работаешь 25/8, а переработка для тебя стала обыденностью – эта статья для тебя. Рассказываем об угрозах трудоголизма и как найти тот самый баланс.

 [Основной сайт](https://proglib.io/sh/qYV28d3ZU9)
 [Зеркало](https://proglib.tech/p/rabota-ili-zhizn-principy-work-life-balance-2023-01-12)",4133,2,0,goproglib
3295,2023-01-17 09:56:43+00:00,"«[pprof](https://pkg.go.dev/runtime/pprof) — один из тех инструментов, которые заставляют вас улыбаться, а затем плакать над потраченным впустую временем, а затем снова улыбаться». Примерно с такой фразы начинается статья об использовании **pprof** для изучения странной утечки памяти, которая сводилась к очень тонкой проблеме в одной строке кода.

[Читать](https://www.groundcover.com/blog/golang-pprof)",4991,7,0,goproglib
3294,2023-01-16 18:11:02+00:00,"ChatGPT не заменит программистов, но может стать отличным подспорьем уже сейчас. Ловите 10 кейсов применения ChatGPT для программистов от техдира Remote Work:

1. Генерация шаблонного кода —  «скелета» проекта.
2. Исследование и сравнение фреймворков/алгоритмов.
3. «Расшифровка» и объяснение кодовой базы.
4. Комментирование кода.
5. Генерация тест-кейсов.
6. Написание документации.
7. Генерация регулярных выражений.
8. Рефакторинг кода.
9. Поиск ошибок в коде.
10. Реализация алгоритмов для проведения собеседований и в повседневной деятельности.

Источник:

 Читать в [Твиттере](https://twitter.com/sergiorocks/status/1613553915131314178)
 Читать в [Thread Reader App](https://threadreaderapp.com/thread/1613553915131314178.html) (если Твиттер не открывается)",4431,17,2,goproglib
3292,2023-01-16 14:16:36+00:00,"Основы интеграции трейсинга в Go-приложения c использованием OpenTelemetry и Jaeger.

[Читать](https://habr.com/ru/post/710644/)",4926,12,0,goproglib
3291,2023-01-16 11:36:05+00:00,"**‍**** Статьи для IT: как объяснять и распространять значимые идеи

**Бесплатный [курс](https://stepik.org/course/101672/promo) для всех, кто любит качественные IT-публикации и хочет научиться интересно писать о программировании либо улучшить навыки письма.

Курс состоит из семи модулей, посвященных написанию, редактированию, иллюстрированию и распространению публикаций. Ограничений на время прохождения заданий нет.

Курс будет интересен авторам, работающим в составе редакции,  копирайтерам-одиночкам и просто программистам, которые хотят научиться интересно рассказывать о собственных проектах.

Материалы регулярно дополняются, обновляются и корректируется. Отвечаем на все учебные вопросы в комментариях курса.

**Как стать автором «Библиотеки программиста» и получать гонорары за статьи?
**[️ Заполните анкету](https://docs.google.com/forms/d/e/1FAIpQLSdZRp4TjqpvNptKlIhHWa7go-I4-9u8Ft8cda8woK6URep_Zw/viewform?usp=sf_link). 
Если все ок, мы свяжемся с вами и обсудим дальнейшие шаги.",4124,2,0,goproglib
3290,2023-01-15 20:42:03+00:00,"Запись эфира, в рамках которого Искандер Шарипов пишет простую игру на Go и Ebitengine:

 [Часть 1](https://youtube.com/watch?v=qqQEAk18Gu0)
 [Часть 2](https://youtube.com/watch?v=stUSFp8YKBs)",5171,19,0,goproglib
3289,2023-01-15 20:28:29+00:00,"Разбираемся в нюансах создания [оператора](https://kubernetes.io/docs/concepts/extend-kubernetes/operator/) на Go, который будет: 

— создавать необходимые секреты во всех неймспейсах кластера;
— создавать секреты при создании нового неймспейса;
— восстанавливать секрет, если его кто-то удалит;
— удалять всех потомков, если удаляется корневой объект.

[Читать](https://habr.com/ru/post/710588/)",4879,5,0,goproglib
3288,2023-01-15 18:07:23+00:00,"«Качели» с Next.js и успешный кейс встраивания React UI в Go: история команды Flipt, self-hosted feature flag решения.

[Читать](https://www.flipt.io/blog/embedding-react-in-go)",4849,5,2,goproglib
3287,2023-01-14 20:56:00+00:00,"**Go для Node.js разработчиков**

Репозиторий с примерами для изучения Node.js и Go — удобно, если вы движетесь в любом направлении.

https://github.com/miguelmota/golang-for-nodejs-developers",5457,9,5,goproglib
3286,2023-01-14 20:32:10+00:00,"**Разработка конкурентного TCP-сервера на Go, реализующего небольшое подмножество команд Redis
**
Автор статьи пишет книгу о создании простого Redis-like сервера на Ruby и исследует ту же идею на других языках. Его путешествие в Go тоже достаточно интересное.

[Читать](https://blog.pjam.me/posts/toy-redis-go/)",5597,14,0,goproglib
3285,2023-01-14 12:07:16+00:00,"Руководство по использованию пакета **flag** для реализации поддержки подкоманд в Go.

[Читать](https://abhinavg.net/2022/08/13/flag-subcommand/)",5440,9,0,goproglib
3284,2023-01-13 20:39:27+00:00,"‍ Что нового в Go 1.20: пополняемая серия статей.

 [Часть 1. Изменения в языке](https://blog.carlmjohnson.net/post/2023/golang-120-language-changes/)
 [Часть 2. Основные изменения стандартной библиотеки](https://blog.carlmjohnson.net/post/2023/golang-120-arenas-errors-responsecontroller/)
 [Часть 3. Минорные изменения стандартной библиотеки](https://blog.carlmjohnson.net/post/2023/golang-120-minor-features/)",6058,7,3,goproglib
3283,2023-01-13 16:11:33+00:00,"Руководство по использованию инструмента внедрения зависимостей от Uber на практике.

[Читать](https://medium.com/@devops-guy/how-to-build-large-golang-applications-using-fx-3ccfac153fc1)",5810,11,5,goproglib
3282,2023-01-13 11:57:19+00:00,"#news 

А вот и Go 1.20 Release Candidate 3 подоспел.

[Анонс](https://groups.google.com/g/golang-announce/c/7SPnPbP2DTU)",5113,21,0,goproglib
3281,2023-01-12 15:55:25+00:00,"️ **Работа или жизнь: принципы Work-life balance**

Если ты работаешь 25/8, а переработка для тебя стала обыденностью – эта статья для тебя. Рассказываем об угрозах трудоголизма и как найти тот самый баланс.

 [Основной сайт](https://proglib.io/sh/qYV28d3ZU9)
 [Зеркало](https://proglib.tech/p/rabota-ili-zhizn-principy-work-life-balance-2023-01-12)",4660,5,0,goproglib
3280,2023-01-12 12:52:07+00:00,"**Переход с Java на Go: зачем и, главное, как
**
Ответы на эти многие другие вопросы, а также полезные заметки, идеи и мысли, собираемые с течением времени Java-разработчиком, который был брошен в чудесный мир Go.

https://java2go.dev/",5476,10,3,goproglib
3279,2023-01-11 11:14:22+00:00,"#news

 Представлены Go 1.19.5 и 1.18.10.

[Подробнее](https://groups.google.com/g/golang-announce/c/wrmRT7JlevE)",5092,24,2,goproglib
3278,2023-01-11 07:25:23+00:00,"️ **Pushup** — **экспериментальный** фреймворк для создания веб-приложений на Go. В одном файле содержится код на Go и HTML, после чего страницы компилируются в чистый Go, опираясь на пакет net/http. Краткое демо [здесь](https://youtu.be/nkyiATkZ4Js). 

https://github.com/adhocteam/pushup",5082,7,15,goproglib
3277,2023-01-10 18:00:12+00:00,"**Ускоряя код на Go, помните о памяти**

Автор статьи рассказывает о 6-м дне решения __Advent of Code__ на Go и уделяет большое внимание вопросам производительности.

[Читать](https://f4t.dev/software/go-performance-memory/)",5066,9,0,goproglib
3276,2023-01-10 13:46:27+00:00,"Новогодние праздники подходят к концу, надеемся вы успели провести их с пользой

А если нет, спешим напомнить: Сегодня последний день 50% распродажи курсов в Библиотеке программиста!

– Математика для Data Science
– Алгоритмы и структуры данных
– Как айтишнику устроиться в международную компанию
– Основы IT для непрограммистов
– Основы программирования на Python
– Frontend Basic: принцип работы современного веба.

 **Успей**те **забронировать скидку на любой из курсов:** [ttps://proglib.io/w/5f799a40](https://proglib.io/w/5f799a40)

Начните новый год правильно!
И не забывайте - завтра подводим итоги конкурса, где можно выиграть:

 Apple AirPods Pro 2
 Курс «Математика для Data Science
 Курс: «Алгоритмы и структуры данных»

Поторопитесь, подробности по ссылке: https://proglib.io/w/e72668b2",4826,0,0,goproglib
3275,2023-01-10 11:57:43+00:00,"️ **safeurl** **—** Go-библиотека со встроенной защитой от атак с [подделкой запросов на стороне сервера](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery) (SSRF) и [DNS rebinding](https://en.wikipedia.org/wiki/DNS_rebinding).

Она реализует оболочку вокруг нативного HTTP-клиента и выполняет проверку входящего запроса по настроенным спискам.

 [Анонс библиотеки](https://blog.doyensec.com/2022/12/13/safeurl.html)
 [Репозиторий](https://github.com/doyensec/safeurl)",4750,13,0,goproglib
3274,2023-01-10 08:03:41+00:00,"Очередная попытка создать Go-проект с чистой архитектурой на базе Gin, mongo go driver, JWT viper, bcrypt, testify, mockery и других пакетов.

[Репозиторий](https://github.com/amitshekhariitbhu/go-backend-clean-architecture)",5269,29,18,goproglib
3272,2023-01-09 10:12:18+00:00,"Мы знаем, что дженерики в Go имеют весьма специфические ограничения. С одним из них автору статьи и захотелось разобраться.

[Читать](https://habr.com/ru/post/709438/)",5102,9,3,goproglib
3271,2023-01-09 07:06:07+00:00,"Обзор нескольких трюков Go, о которых вы, возможно, не знали.

[Читать](https://tech.storyly.io/some-go-tricks-you-never-knew-existed-until-now-a07507113272)",5101,15,13,goproglib
3270,2023-01-08 13:05:37+00:00,"Глубокое погружение в массивы и срезы Go.

[Читать](https://dev.to/dawkaka/go-arrays-and-slices-a-deep-dive-dp8)",5541,19,0,goproglib
3269,2023-01-08 06:51:03+00:00,"️ **conc** — набор инструментов для структурированной конкурентности в Go, которые делают обычные задачи проще и безопаснее.

https://github.com/sourcegraph/conc",5327,20,0,goproglib
3268,2023-01-07 18:03:14+00:00,"Все, что касается криптографии в Go 1.20.

[Читать](https://words.filippo.io/dispatches/go-1-20-cryptography/)",5090,16,0,goproglib
3267,2023-01-07 16:11:03+00:00,"Пошаговое руководство по генерации счета в формате PDF на Go.

[Читать](https://medium.com/the-godev-corner/how-to-create-a-pdf-in-go-157355429a94)",5216,20,5,goproglib
3266,2023-01-06 05:35:54+00:00," В Go 1.20 добавлена нативная поддержка покрытия интеграционными тестами.

[Читать официальную статью](https://go.dev/testing/coverage/)",5800,34,4,goproglib
3265,2023-01-05 20:00:06+00:00,"Unix domain sockets (AF_UNIX) vs Network sockets (AF_INET|AF_INET6): сравнение сокетов в Go на примерах.

[Читать](https://dev.to/douglasmakey/understanding-unix-domain-sockets-in-golang-32n8)",5579,25,0,goproglib
3264,2023-01-05 18:36:48+00:00,"А некоторые все пытаются применить принципы ООП в Go.

[Читать](https://dev.to/casualcoders/how-to-use-object-oriented-programming-in-go-bh9)",5066,29,17,goproglib
3262,2023-01-05 10:19:53+00:00,"#news

 Представлен Go 1.20 Release Candidate 2.

[Анонс](https://groups.google.com/g/golang-announce/c/muM4ByrIMbM)",4503,35,0,goproglib
3261,2023-01-04 20:30:43+00:00,"Разработка E-Commerce платформы с использованием Go, NextJS и Tailwind CSS: записи стримов от Anthony GG.

 [Часть 1](https://youtu.be/SKd_NUUI3l8)
 [Часть 2](https://youtu.be/McXlJ9ghoXM)",5073,10,0,goproglib
3260,2023-01-04 19:23:12+00:00,"Пошаговое руководство по разработке системы мониторинга аптайма сайтов на Go + Encore.

[Читать](https://encore.dev/docs/tutorials/uptime)",4765,8,0,goproglib
3259,2023-01-04 18:11:37+00:00," **Go Get Podcast**: специальный предновогодний выпуск на свободные темы.

 [Смотреть](https://youtu.be/hMCi1A_Q8vY)",4612,10,0,goproglib
3258,2023-01-03 20:41:29+00:00,"Теория и практика использования фреймворка **Flamingo** для реализации принципов DDD в Go.

[Читать](https://habr.com/ru/company/aktiv-company/blog/708030/)",5273,12,0,goproglib
3257,2023-01-03 13:14:11+00:00,"Введение в **maphash**, новый open source пакет для хэширования произвольных (comparable) типов в Go. Вы узнаете детали реализации и некоторые интересные факты о среде выполнения Go.

[Читать](https://www.dolthub.com/blog/2022-12-19-maphash/)",4905,16,1,goproglib
3256,2023-01-02 17:00:53+00:00,"Разработка игрушечного компилятора с использованием Go и LLVM.

[Читать](https://ketansingh.me/posts/toy-compiler-with-llvm-and-go/)",5061,16,1,goproglib
3255,2023-01-02 16:42:38+00:00,"**Hermit** позволяет [загружать и управлять](https://github.com/cashapp/hermit/blob/master/docs/static/screencasts/using.svg) изолированными средами разработки, привязанными к вашему проекту, например: конкретные версии Go, Rust, Node, GNU make и т. д. Можно также использовать в CI.

https://cashapp.github.io/hermit",4476,8,0,goproglib
3254,2023-01-02 16:42:38+00:00,Еще один любопытный проект на Go ,4506,0,0,goproglib
3253,2023-01-02 15:08:27+00:00,"Быстрый гайд по написанию чистых и эффективных табличных юнит-тестов в Go.

[Читать](https://semaphoreci.com/blog/table-driven-unit-tests-go)",6435,10,5,goproglib
3252,2023-01-01 14:43:15+00:00,"Разработка простого Twitter-бота с использованием Go, GPT-3 и AWS.

[Читать](https://dev.to/elpol/building-a-twitter-bot-with-go-and-gpt-3-57m7)",5119,14,0,goproglib
3251,2023-01-01 08:29:24+00:00,"▶️Как взаимодействовать с Linux userspace video API (V4L2) для выдачи команд управления подключенному видеооборудованию и использовать этот подход для захвата и потоковой передачи данных, как правильно сопоставлять и обмениваться данными между вашей программой на Go и драйвером для обеспечения совместимости ядра: эти и многие другие вопросы в [докладе Владимира Вивьена](https://youtu.be/uiVQQi20DgM). Также смотрите весь плейлист с докладами на [GopherCon 2022](https://t.me/goproglib/3148).",4932,10,1,goproglib
3250,2022-12-31 20:38:22+00:00,Всех с наступающим Новым годом! Чистого кода и мирного неба над головой!,4452,89,0,goproglib
3249,2022-12-31 14:11:51+00:00,"Когда с похмелья после нового года вы будете гуглить флаги для очередной *nix-команды, которые не хотите/можете запомнить, просто используйте CLI-инструмент cheat.

https://github.com/cheat/cheat",4247,10,1,goproglib
3247,2022-12-31 12:00:19+00:00,#вопросы_для_самопроверки,4416,3,3,goproglib
3246,2022-12-31 10:48:22+00:00,"**Go templates** в действии: пишем блог на Go + Chi + SQLite.

[Читать](https://blog.jetbrains.com/go/2022/11/08/build-a-blog-with-go-templates/)",4804,12,0,goproglib
3245,2022-12-30 21:26:50+00:00,"Т-образные пайплайны в Go: **io.TeeReader и io.MultiWriter**.

[Читать](https://iximiuz.com/en/posts/go-io-tee-reader-and-multi-writer/)",4730,24,0,goproglib
3243,2022-12-30 15:34:31+00:00," **Задачи по Python, способы сортировки и плохие программисты. Наши лучшие статьи за 2022 год**

Итоги 2022 года: 336 опубликованных статей, Питон традиционно в ТОПе, а слово года — релокация.

 [Основной сайт](https://proglib.io/sh/aYpBNWDwCz)
 [Зеркало](https://proglib.tech/p/zadachi-po-python-sposoby-sortirovki-i-plohie-programmisty-nashi-luchshie-stati-za-2022-god-2022-12-30)",3875,4,0,goproglib
3241,2022-12-29 16:16:36+00:00,#golang #tip by [Inanc Gumus](https://twitter.com/inancgumus),4770,22,7,goproglib
3240,2022-12-28 19:55:32+00:00,Нас 11 000 ! Спасибо за интерес к «Библиотеке Go-разработчика».,4670,103,4,goproglib
3239,2022-12-28 17:15:58+00:00,"Хорошие новости от Ardan Labs: во первых, опубликовано уже [четыре части](https://t.me/goproglib/2419) в серии статей, посвященной семантике и деталям реализации блокчейн-проекта Ardan, во-вторых, вышел [материал](https://www.ardanlabs.com/blog/2022/12/smart-contract-solidity-go-basic.html) об использовании Go для создания и тестирования смарт-контрактов Ethereum.",4880,4,0,goproglib
3238,2022-12-28 14:30:05+00:00,"Описание реализации схемы разделения ключа Шамира в Hashicorp Vault.

[Читать](https://habr.com/ru/post/708230/)",4839,11,0,goproglib
3237,2022-12-28 12:34:57+00:00,"Фаззинг в Go: варианты использования, преимущества/недостатки и практические аспекты.

[Читать](https://blog.jetbrains.com/go/2022/12/14/understanding-fuzz-testing-in-go/)",4714,7,0,goproglib
3236,2022-12-27 20:28:48+00:00,"[​](https://telegra.ph/file/d1978d988b990fec4f099.mp4) **Steampipe** **—** CLI SQL-клиент для мгновенных запросов к вашей облачной инфраструктуре, SaaS, коду, логам и многому другому.

https://github.com/turbot/steampipe",4569,6,0,goproglib
3235,2022-12-27 15:33:06+00:00," Новогодний розыгрыш от Proglib academy! 

Друзья, Новый год начинается с подарков, а лучший подарок себе – новые знания или даже профессия. И поэтому мы объявляем розыгрыш среди наших любимых подписчиков. 

Подарки под елкой:
 Apple AirPods Pro 2
 Курс «Математика для Data Science
 Курс: «Алгоритмы и структуры данных»

Подробнее об условиях участия, читайте тут: https://proglib.io/w/e72668b2",4518,1,0,goproglib
3234,2022-12-27 06:00:28+00:00,"Пошаговое руководство по разработке и публикации Go-пакета на pkg.go.dev.

[Читать](https://medium.com/the-godev-corner/how-to-create-publish-a-go-public-package-9034e6bfe4a9)",4683,9,0,goproglib
3233,2022-12-26 19:33:44+00:00,"Ну и немного поэзии для гоферов вам в ленту 

https://appliedgo.net/limericks/",4357,4,0,goproglib
3231,2022-12-26 06:08:03+00:00,"Functional stream processing: сравнение Go-библиотек, предоставляющих данный функционал.

[Читать](https://macias.info/entry/202212020000_go_streams.md)",4345,2,0,goproglib
3229,2022-12-25 20:44:39+00:00,#вопросы_для_самопроверки,4339,7,1,goproglib
3228,2022-12-25 12:00:13+00:00,"WebAssembly: сравнение Go, Rust и AssemblyScript на реальных примерах.

[Читать](https://ecostack.dev/posts/wasm-tinygo-vs-rust-vs-assemblyscript/)",4554,20,0,goproglib
3227,2022-12-25 07:13:22+00:00," **GoReplay** — open source инструмент для мониторинга сети, который позволяет записывать трафик в реальном времени и использовать его для теневого копирования, нагрузочного тестирования, мониторинга и подробного анализа.

https://github.com/buger/goreplay",4651,9,1,goproglib
3224,2022-12-24 12:00:12+00:00,"**Рекомендации по проектированию Go-библиотек**

Перед вами текстовая версия доклада, с которым выступал Abhinav Gupta в 2018 году. Несмотря на то, что экосистема Go изменилась с тех пор, информация в статье все еще актуальна.

[Читать](https://abhinavg.net/2022/12/06/designing-go-libraries/)",4349,6,0,goproglib
3223,2022-12-24 08:15:22+00:00,"Обзор нескольких известных Go-библиотек для взаимодействия с Redis и сравнение с задачами [Centrifugo](https://github.com/centrifugal/centrifugo).

[Читать](https://centrifugal.dev/blog/2022/12/20/improving-redis-engine-performance/)",4382,14,0,goproglib
3222,2022-12-23 20:12:08+00:00,"**Just** берет знакомые концепции (make-файлы + шелл-скрипты) и объединяет их в более мощный и простой для понимания CLI-инструмент. 

Инструмент просто запускает скрипты в виде команд. Команды или **recipes** хранятся в **justfile**’е с синтаксисом, вдохновленным make.

https://github.com/casey/just",4020,17,0,goproglib
3220,2022-12-23 18:30:04+00:00,#вопросы_для_самопроверки,4219,8,0,goproglib
3219,2022-12-23 17:28:10+00:00,"Гайд по разработке простого приложения на NextJS + Go.

[Читать](https://webapp.io/blog/nextjs-with-golang/)",4698,13,0,goproglib
3218,2022-12-23 15:56:21+00:00,"Переезд с Python на Go в QA-направлении Ozon: основные предпосылки и преимущества.

[Читать](https://habr.com/ru/company/ozontech/blog/707092/)",4496,7,0,goproglib
3217,2022-12-22 16:28:43+00:00,"[​](https://video.twimg.com/ext_tw_video/1604920309362171904/pu/vid/1176x720/kYuTS2jbHPEmkyL5.mp4?tag=12)#news 

Представлен релиз VS Code Go 0.37.0.

[Подробнее](https://github.com/golang/vscode-go/releases/tag/v0.37.0)",4616,25,0,goproglib
3216,2022-12-21 18:39:44+00:00," **IT и реальный сектор экономики: как мы цифровизировали птицеводство и что из этого получилось**

В то время как лопаются криптовалютные пузыри (история с FTX), мы развиваем сельское хозяйство, внедряя ERP-системы на птицефабриках, чтобы повысить показатели производства и снизить перекрестное заражение птиц.

 [Основной сайт](https://proglib.io/sh/ydwngaM8I7)
 [Зеркало](https://proglib.tech/p/it-i-realnyy-sektor-ekonomiki-kak-my-cifrovizirovali-pticevodstvo-i-chto-iz-etogo-poluchilos-2022-12-17)",4467,12,2,goproglib
3215,2022-12-20 18:00:06+00:00,"Обновился плейлист с докладами на [GopherCon 2022](https://t.me/goproglib/3148):

**—** [Donia Chaiehloudj - TinyGo: Getting the Upper Hen](https://youtu.be/D46NzhBoQC0)
**—** [Benji Vesterby - Secure Coding in Go: Avoiding Common Vulnerabilities](https://youtu.be/com5l5DKvqQ)",4823,7,0,goproglib
3213,2022-12-20 12:00:07+00:00,"Шардирование PostgreSQL клиентскими средствами с использованием Go и Goose.

[Читать](https://habr.com/ru/company/ozontech/blog/705912/)",4889,11,0,goproglib
3212,2022-12-20 05:00:05+00:00,"**Глубокое погружение во внутренности immutable базы данных immudb, разработанной на Go

**Глубокое погружение, но на концептуальном уровне, без кода.

[Читать](https://aly.arriqaaq.com/diving-into-the-internals-of-an-immutable-database/)",4750,3,0,goproglib
3211,2022-12-19 18:00:07+00:00,"**Go Time: Делаем Go более эффективным**

Ведущие подкаста вместе с приглашенными гостями отвечают на важный вопрос: «Как сделать код на Go более эффективным с помощью современных практик observability».",4557,4,0,goproglib
3210,2022-12-19 09:00:29+00:00," **osv-scanner** — сканер уязвимостей, написанный на Go. Инструмент позволяет искать уязвимости в зависимостях проекта на основе информации из open source БД [OSV](https://osv.dev/).

https://github.com/google/osv-scanner",6265,6,0,goproglib
3209,2022-12-19 06:09:19+00:00,"**Реализация Bitcask на Go**

[Bitcask](https://riak.com/assets/bitcask-intro.pdf) **— **disk-based key-value механизма хранения, предназначенный для быстрых операций чтения и записи.

[Читать](https://mrkaran.dev/posts/barreldb/)",4798,13,53,goproglib
3208,2022-12-18 20:40:00+00:00,"О ChatGPT слышно из каждого утюга. Разбираемся, насколько хорошо модель понимает Go.

[Смотреть](https://youtu.be/OldZ3hAgsqQ)",4902,4,0,goproglib
3207,2022-12-18 19:20:50+00:00,"Ключевые аспекты, которые необходимо знать при переходе с Java на Go.

[Читать](https://appliedgo.com/blog/from-java-to-go)",4472,6,1,goproglib
3205,2022-12-18 13:41:24+00:00,"Команда Bitly выбрала Go в 2015 году в качестве основного языка программирования, но этому предшествовали определенные предпосылки и соображения. Узнайте, какие именно.

[Читать](https://bitly.com/blog/why-we-write-everything-in-go/)",4247,1,2,goproglib
3204,2022-12-17 20:32:19+00:00,"Записи онлайн-эфиров с решением головоломок на **Advent Of Code**.

[Смотреть](https://www.youtube.com/watch?v=SrnFFP9hzyE&list=PL0xRBLFXXsP5y347zTEHQUym98sl7u3TM)",4499,4,2,goproglib
3203,2022-12-17 18:56:31+00:00,"Помните [proposal](https://t.me/goproglib/3102) про структурированное логирование в Go? Автор статьи уже поэкспериментировал с библиотекой Slog и решил обобщить свои знания в блоге. 

[Читать](https://josephwoodward.co.uk/2022/11/slog-structured-logging-proposal)",4331,9,0,goproglib
3202,2022-12-17 05:34:25+00:00,"#news

6 декабря были представлены релизы Go 1.19.4 и 1.18.9, в которых исправлены уязвимости в net/http (CVE-2022-41717, CVE-2022-41720) и os (CVE-2022-41720).

[Подробнее](https://groups.google.com/g/golang-announce/c/L_3rmdT0BMU)",4308,22,0,goproglib
3201,2022-12-16 20:00:05+00:00,"**HTTP, базы данных, разработка CLI, тестирование, observability, конфигурация и многое другое: быстрый обзор 22-х Go-библиотек, проверенных в боевых условиях ** 

Автор — Robert Laszczak, principal engineer в SlashID, co-founder Three Dots Labs и разработчик Watermill.

[Читать](https://threedots.tech/post/list-of-recommended-libraries/)",5064,17,3,goproglib
3197,2022-12-15 19:48:43+00:00,"Разработка простого CLI-проекта на Go + Cobra, который взаимодействует с Stripe API.

[Смотреть](https://youtu.be/jasgSuYt2Jg)",4863,11,0,goproglib
3195,2022-12-14 20:03:32+00:00," **Go** **1.19 standard libary mind map**

[Источник](https://nicetomap.com/golang-1.19-standard-library)",5363,44,0,goproglib
3194,2022-12-14 18:44:04+00:00,"Перевод той самой [холиварной статьи](https://t.me/goproglib/3165) о фреймворках в Go. 

[Читать](https://habr.com/ru/post/705078/)",4721,7,0,goproglib
3192,2022-12-14 08:00:13+00:00,"Привет! На связи proglib.academy 

Мы решили организовать вебинар для тех, кто хочет, но не может решиться на старт карьеры в IT. 
Именно для того, чтобы развеять все мифы про IT , мы пригласили Александра Пупышева, руководителя группы разработки в компании Robofinance. Александр проведёт вебинар  в формате Q/A и ответит на все вопросы, которыми задаются новички в IT сфере.

На вебинаре вы узнаете: 

Есть ли потолок по возрасту для входа в it?
Как выглядит работа джуна в разных компаниях
Как устроиться в IT без опыта работы

Встречаемся уже сегодня, в 19:00, 
Успей зарегистрироваться по ссылке: [Q/A: всё, что вы хотели знать про IT](https://proglib.io/w/678669f4)",4381,0,0,goproglib
3190,2022-12-13 18:00:05+00:00,#вопросы_для_самопроверки,4207,15,2,goproglib
3188,2022-12-13 07:29:53+00:00,"**Hashmap в Go**: что это, как выглядит под капотом Go 1.19, отличия реализации с Java/Python и немного практики на дженериках.

 [Часть 1](https://habr.com/ru/post/704796/)
 [Часть 2](https://habr.com/ru/post/717724/)",6862,37,0,goproglib
3186,2022-12-11 22:00:00+00:00,"[proposal](https://github.com/golang/go/issues/31442): Improve error handing using guard and must keywords.

Автор статьи находит предложение по улучшению обработки ошибок в Go интересным, но не совсем тем, что хотелось бы увидеть реализованным. А что, собственно, не так? Читайте в статье. 

[Читать](https://wagslane.dev/posts/guard-keyword-error-handling-golang/)",4527,5,2,goproglib
3185,2022-12-11 19:30:01+00:00,"Привет! На связи proglib.academy 

Мы решили организовать вебинар для тех, кто хочет, но не может решиться на старт карьеры в IT. 
Именно для того, чтобы развеять все мифы про IT, мы пригласили Александра Пупышева, руководителя группы разработки в компании Robofinance. Александр проведёт вебинар в формате Q/A и ответит на все вопросы, которыми задаются новички в IT-сфере.

На вебинаре вы узнаете: 

Есть ли потолок по возрасту для входа в IT?
Как выглядит работа джуна в разных компаниях
Как устроиться в IT без опыта работы

**Встречаемся 14 декабря в 19:00**. 
Успей зарегистрироваться по ссылке: [Q/A: всё, что вы хотели знать про IT](https://proglib.io/w/678669f4)",4480,0,0,goproglib
3184,2022-12-11 18:00:13+00:00,"Go + gRPC + Jaeger + distributed tracing: простой гайд по настройке в вашем проекте.

[Читать](https://habr.com/ru/post/697496/)",6458,18,0,goproglib
3183,2022-12-11 16:45:26+00:00,"️ **GoToSocial** — серверная часть соцсети [ActivityPub](https://activitypub.rocks/), написанная на Go.

https://github.com/superseriousbusiness/gotosocial",4451,9,0,goproglib
3182,2022-12-10 09:26:05+00:00,"Краткий обзор полезных шаблонов для взаимодействия с пакетом [**os/exec**](https://pkg.go.dev/os/exec)**.

**[Читать](https://www.dolthub.com/blog/2022-11-28-go-os-exec-patterns/)",4639,25,0,goproglib
3181,2022-12-09 17:03:06+00:00," [Ретроспектива Ebitengine в 2022 году](https://ebitengine.org/en/blog/2022.html): проекты, статьи, записи докладов с конференций и многое другое.

Кто-то пробовал Go в геймдеве? Напишите в комментариях. ",4696,0,4,goproglib
3180,2022-12-08 05:30:19+00:00,"#news 

 Представлен Go 1.20 Release Candidate 1.

[Анонс](https://groups.google.com/g/golang-announce/c/iqUo0Spdl9I)",5298,22,2,goproglib
3178,2022-12-07 20:20:32+00:00,#вопросы_для_самопроверки,4717,0,1,goproglib
3176,2022-12-07 10:48:54+00:00,"**Быстрые встроенные шаблоны в Go **

**quicktemplate** — шаблонизатор в Go, который отличается от предлагаемого стандартной библиотекой механизма шаблонов тем, что каждый шаблон преобразуется в Go-код, а затем компилируется. Быстрое введение в инструмент на примере создания HTML-страниц в статье. 

[Читать](https://andrewpillar.com/programming/2022/11/29/fast-embedded-templates-in-go-with-quicktemplate/)",4687,8,0,goproglib
3175,2022-12-06 19:34:01+00:00,"Помните [доклад](https://t.me/goproglib/3112) Николая Тузова о внутреннем устройстве каналов в Go? Ловите остальные доклады с митапа:

▶[️](https://youtu.be/AT_T4z0bnjg)[Ошибки, которые нельзя обработать в Golang](https://youtu.be/AT_T4z0bnjg) (Андрей Беренда, Senior Software Developer Ozon Fintech)
▶[️](https://youtu.be/xlnyIBLghH4)[Реализация ролевой системы доступа с помощью Open Policy Agent](https://youtu.be/xlnyIBLghH4) (Антон Губарев, Платформенный инженер Авито)",5114,19,0,goproglib
3173,2022-12-06 06:02:17+00:00,"** 16 универсальных идей для пет-проектов вне зависимости от языка

**Хотите создать что-нибудь эдакое, но вам не хватает фантазии и вдохновения? Держите 16 идей для разработки собственного проекта от «Библиотеки программиста».

 [Основной сайт
](https://proglib.io/p/16-universalnyh-idey-dlya-pet-proektov-vne-zavisimosti-ot-yazyka-2022-10-26) [Зеркало](https://proglib.tech/p/16-universalnyh-idey-dlya-pet-proektov-vne-zavisimosti-ot-yazyka-2022-10-26)",3938,2,0,goproglib
3172,2022-12-05 22:11:08+00:00," Если вы всегда хотите быть в курсе книжных новинок, обновлений и другой полезной информации, касающейся вашего языка или области программирования, вы можете начать читать один из наших каналов, где мы каждый день публикуем учебные материалы для разработчиков разного уровня.

 Канал с мемами: t.me/itmemlib

‍ Полезные материалы по всему, что может быть интересно любому программисту.
Библиотека программиста: t.me/proglibrary
Библиотека хакера: t.me/hackproglib
Go: t.me/goproglib
C\C++: t.me/cppproglib
PHP: t.me/phpproglib
Frontend: t.me/frontendproglib
Python: t.me/pyproglib
Mobile: t.me/mobileproglib
Data Science: t.me/dsproglib
Java: t.me/javaproglib
C#: t.me/csharpproglib
Devops: t.me/devopsslib
Тестирование: t.me/testerlib
Бот с IT-вакансиями: t.me/proglib_job_bot

 Наша школа Proglib Academy: https://t.me/proglib_academy


 Наш канал на YouTube: https://www.youtube.com/c/Библиотекапрограммиста

 Лента в Дзен: https://zen.yandex.ru/proglib


 Если вы хотите быть в курсе последних событий в мире разработки, подписывайтесь на нашего бота t.me/event_listener_bot. Там можно настроить бота под себя: указать интересующие города и темы.

Подписывайтесь: t.me/event_listener_bot",3762,3,0,goproglib
3171,2022-12-05 20:26:59+00:00,"Если вы писали бенчмарки и пытались понять, что там ускорилось и насколько, то наверняка как и автор статьи пользовались утилитами вроде **benchstat**.

Однако автор считает, что некоторые её особенности работают против него. В статье он рассказывает о разработанной обертке над benchstat. Она добавляет улучшения, которые могут пригодиться вам в работе.

[Читать](https://habr.com/ru/post/703294/)",4391,6,0,goproglib
3169,2022-12-05 19:09:58+00:00,#вопросы_для_самопроверки,4326,0,0,goproglib
3168,2022-12-04 13:00:13+00:00,"Что вам нравится/не нравится в Go? Напишите в комментариях.

Ответы на HN: https://news.ycombinator.com/item?id=33757306",4741,0,27,goproglib
3167,2022-12-04 09:01:20+00:00,"  **1 декабря GoLand исполнилось 5 лет**

Команда решила выбрать именно эту дату для выпуска GoLand 2022.3.

[Подробнее](https://blog.jetbrains.com/go/2022/12/01/goland-turns-5/)",5061,19,7,goproglib
3166,2022-12-04 07:35:25+00:00,"️ [​](https://video.twimg.com/tweet_video/Fi6CadNUcAIHcps.mp4)**Наглядное объяснение механизмов работы RPC и gRPC от **[**Alex Xu**](https://twitter.com/alexxubyte/status/1598358394397552649?s=46&t=RI1TXwI99sIyXClwoqI6lg)

Более подробно об этой теме смотрите в видео. 

  [Смотреть](https://youtu.be/gnchfOojMk4)",4653,21,0,goproglib
3165,2022-12-03 22:21:18+00:00,"**Лучший Go-фреймворк — это когда фреймворка нет?**

В Java есть Spring, в Python — Django и Flask, в Ruby — Rails, в C# — ASP.NET, в Node — Express, а в PHP — Symfony и Laravel. В Go все по-другому: [нет фреймворка по умолчанию](https://threedots.tech/post/best-go-framework/). 

Но отсутствие фреймворка не означает, что вам нужно будет создавать все самостоятельно. Существует множество проверенных библиотек, предоставляющих необходимую вам функциональность. Так что, можно не использовать фреймворк в крупном проекте? Что думаете по этому поводу?",5078,17,11,goproglib
3164,2022-12-03 20:10:22+00:00,"#хочу_спросить

Задавайте любые вопросы о программировании и получайте ответы от пользователей. В комментариях под постом укажите #язык, #стек и/или #библиотеку, по которым задаете вопрос.",4152,0,5,goproglib
3163,2022-12-03 12:00:06+00:00,"**Полное руководство по тестированию в Go**

Вы начнете с простой функции тестирования и поработаете с другими инструментами и стратегиями, которые помогут вам освоить тестирование в Go.

[Читать](https://blog.jetbrains.com/go/2022/11/22/comprehensive-guide-to-testing-in-go/)",5200,5,0,goproglib
3160,2022-12-03 05:00:08+00:00,#вопросы_для_самопроверки,4291,11,0,goproglib
3159,2022-12-02 19:10:18+00:00,"️ Пример приложения для кофейни на Go. Архитектура изображена выше.

https://github.com/thangchung/go-coffeeshop",5919,40,8,goproglib
3157,2022-12-02 11:45:23+00:00,"Откликнулись бы?

Больше вакансий вы найдете на канале @godevjob ",4495,0,0,goproglib
3156,2022-12-02 10:47:56+00:00,"#news 

Go 1.18/1.19 теперь нативно поддерживается в Azure App Service.

[Подробнее](https://azure.microsoft.com/en-us/updates/public-preview-go-language-support-on-azure-app-service/)",4664,17,0,goproglib
3155,2022-12-01 20:40:47+00:00,"**Let My Gophers Go!**

Очередная подборка материалов для начинающих Go-разработчиков.

[Читать](https://wdesert.notion.site/Let-My-Gophers-Go-29d7e8fe712141cf8ac39b84350f0db7)",5254,19,0,goproglib
3153,2022-11-30 20:47:17+00:00,#вопросы_для_самопроверки,4742,4,2,goproglib
3152,2022-11-30 18:03:12+00:00,"Гоферы, как вам [такая музыка](https://youtu.be/8T5Gc-Jnt50) для фона?",4695,26,3,goproglib
3150,2022-11-29 19:09:18+00:00,"Разработка кастомного поискового индекса исходного кода на Go для проекта searchcode.com: взгляд со стороны разработчика.

[Читать](https://boyter.org/posts/how-i-built-my-own-index-for-searchcode/)",4514,4,0,goproglib
3148,2022-11-28 20:46:51+00:00,"От синтаксического анализа и сборки мусора до WebAssembly и фаззинг-тестирования: эти и другие доклады на GopherCon 2022.

 [Смотреть](https://www.youtube.com/watch?v=v24wrd3RwGo&list=PL2ntRZ1ySWBfiSJSt-zPRbVSMDfK0EwQC)",4883,6,0,goproglib
3147,2022-11-28 11:34:36+00:00," **15 лучших практик SQL после 20 лет программирования**

Даже если ваш SQL-код работает правильно, его все равно можно улучшить, в частности в том, что касается производительности и читаемости. В статье перечислены лучшие практики составления SQL-запросов, которым вы должны следовать, чтобы сделать ваш код более легким для чтения и понимания.

 [Основной сайт](https://proglib.io/sh/Rhc2Znbl84)
 [Зеркало](https://proglib.tech/p/15-luchshih-praktik-sql-posle-20-let-programmirovaniya-2022-11-28)",4250,10,0,goproglib
3146,2022-11-27 20:59:05+00:00,"Теория и практика разработки анонимного мессенджера на Go, построенного на ядре анонимной сети HLS (Hidden Lake Service).

[Читать](https://habr.com/ru/post/701488/)",5146,10,0,goproglib
3144,2022-11-27 07:48:28+00:00,#вопросы_для_самопроверки,4492,6,1,goproglib
3143,2022-11-26 07:31:35+00:00,"**Рассматриваем под лупой отладчик Delve для Go-разработчиков**

Автор рассказывает о возможностях Delve: о том, что умеет сам отладчик, а не что нам предоставляет IDE.

[Читать](https://habr.com/ru/company/ozontech/blog/701198/)",5036,17,1,goproglib
3139,2022-11-24 22:21:56+00:00,"‍ **Всем привет! На связи** **«Библиотека программиста»** 

Мы переезжаем с текущего офиса в центре Москвы с идеальной локацией — рядом метро и все необходимое. 

Если у кого-то есть знакомые, которым нужно хорошее пространство на 5 человек, например, взамен коворкингу, то это идеальный вариант. 

А еще там осталась мебель в хорошем состоянии, которую можно выкупить дешевле, чем заказывать из магазина.

Адрес: https://yandex.ru/maps/-/CCUfFIa2-D

Записаться на просмотр: https://proglib.tech/w/c9e8bf63",4061,9,2,goproglib
3137,2022-11-24 22:15:14+00:00,#вопросы_для_самопроверки,4294,0,0,goproglib
3136,2022-11-24 20:26:30+00:00,"3 способа внедрить хэш коммита в ваши Go-проекты.

[Читать](https://developers.redhat.com/articles/2022/11/14/3-ways-embed-commit-hash-go-programs)",4608,9,0,goproglib
3135,2022-11-23 17:41:13+00:00," Сохраняйте в заметки: подборка YouTube-каналов, книг, блогов и репозиториев для изучения Go от сотрудников Selectel.

[Читать](https://habr.com/ru/company/selectel/blog/700996/)",5898,24,0,goproglib
3133,2022-11-22 18:00:09+00:00,#вопросы_для_самопроверки,4591,4,0,goproglib
3131,2022-11-22 10:47:23+00:00,"Помните публиковали [пост](https://t.me/goproglib/3074) о разработке децентрализованной игры в покер на базе Ethereum с использованием Go и Solidity? 

Если вы остановились не только на этом плейлисте, то увидели, что на канале много годного материала по Go и Rust: 

— [Как создавать интерфейсы](https://youtu.be/-gW7oSFxT2I) и [типизированные функции](https://youtu.be/pR5nQ6N6-YA) | [тестировать HTTP-обработчики](https://youtu.be/Ztk9d78HgC0) | [использовать горутины для агрегирования данных в Go](https://youtu.be/LGVRPFZr548) 
— [Разработка JSON API на Go](https://www.youtube.com/watch?v=pwZuNmAzaH8&list=PL0xRBLFXXsP6nudFDqMXzrvQCZrxSOm-2) (JWT, Postgres и Docker)
— [Основы Go на примерах](https://www.youtube.com/watch?v=z75DKfOfDA4&list=PL0xRBLFXXsP5cru52B5GAQmIrTTAL8A66) и многое другое",4717,10,0,goproglib
3130,2022-11-21 19:19:48+00:00,"Cameron Balahan, Cody Oss, Jonathan Amsterdam, Michael Knyszek и Russ Cox на Go Day 2022:

— [How do Go programs keep working?](https://youtu.be/moS35OlJBmY)
— [A consistent logging format for Go](https://youtu.be/gd_Vyb5vEw0)
— [Write applications faster and securely with Go](https://youtu.be/aw7lFSFGKZs)
— [How to avoid out-of-memory conditions in Go](https://youtu.be/57Oglajg97E)",4882,10,0,goproglib
3128,2022-11-20 07:45:23+00:00," **Twirp** — RPC-фреймворк от Twitch, который, как и gRPC, использует Protobufs и намного проще в использовании. 

В статье приводится краткое введение в Twirp: от установки до вызова RPC через HTTP.

[Читать](https://thedevelopercafe.com/articles/rpc-in-go-using-twitchs-twirp-3dcb78ece775)",5135,16,2,goproglib
3126,2022-11-19 08:42:38+00:00," Если вы всегда хотите быть в курсе книжных новинок, обновлений и другой полезной информации, касающейся вашего языка или области программирования, вы можете начать читать один из наших каналов, где мы каждый день публикуем учебные материалы для разработчиков разного уровня.

 Канал с мемами: t.me/itmemlib

‍ Полезные материалы по всему, что может быть интересно любому программисту.
Библиотека программиста: t.me/proglibrary
Библиотека хакера: t.me/hackproglib
Go: t.me/goproglib
C\C++: t.me/cppproglib
PHP: t.me/phpproglib
Frontend: t.me/frontendproglib
Python: t.me/pyproglib
Mobile: t.me/mobileproglib
Data Science: t.me/dsproglib
Java: t.me/javaproglib
C#: t.me/csharpproglib
Devops: t.me/devopsslib
Тестирование: t.me/testerlib
Бот с IT-вакансиями: t.me/proglib_job_bot

 Наша школа Proglib Academy: https://t.me/proglib_academy


 Наш канал на YouTube: https://www.youtube.com/c/Библиотекапрограммиста

 Лента в Дзен: https://zen.yandex.ru/proglib


 Если вы хотите быть в курсе последних событий в мире разработки, подписывайтесь на нашего бота t.me/event_listener_bot. Там можно настроить бота под себя: указать интересующие города и темы.

Подписывайтесь: t.me/event_listener_bot",4276,6,0,goproglib
3124,2022-11-19 07:40:19+00:00,#вопросы_для_самопроверки,4361,3,0,goproglib
3123,2022-11-18 18:00:12+00:00,"**Команда Google опубликовала руководство по стилю, стилевые решения **(__обобщение решений по конкретным аспектам стиля__) **и лучшие практики для Go-разработчиков
**
Эти документы систематизируют наилучшие современные подходы к написанию читабельного и идиоматического кода на Go.

[Читать](https://google.github.io/styleguide/go/index)",7037,54,0,goproglib
3121,2022-11-17 19:39:26+00:00,"История о том, как изменение одного символа привело к значительному ускорению программы на Go.

[Читать](https://habr.com/ru/post/699538/)",5041,19,2,goproglib
3119,2022-11-16 19:34:42+00:00," **Go Get Podcast**: **Монорепозиторий vs Мультирепозиторий**

Николай Тузов (разработчик в Lamoda), Глеб Яльчик (техдир в Gaijin) и Алексей Акулович (Developer Advocate в inDriver) обсуждают плюсы и минусы монорепозитория.

 [Смотреть](https://youtu.be/Mw1rPViW6fs)
 Слушать",15847,9,0,goproglib
3117,2022-11-16 11:34:57+00:00," **IT и реальный сектор экономики: какие отрасли выстрелят через 5 лет**

Каждые пять-десять лет список актуальных и востребованных профессий меняется. Разберемся, какие отрасли могут быть популярны в 2027 году.

 [Основной сайт](https://proglib.io/sh/c2v10dUtSH)
 [Зеркало](https://proglib.tech/p/it-i-realnyy-sektor-ekonomiki-kakie-otrasli-vystrelyat-cherez-5-let-2022-11-16)",4056,5,4,goproglib
3116,2022-11-15 20:59:23+00:00,"Daniel Martí по доброй традиции снова собрал предстоящие фичи Go 1.20 в один тред: 

— [Читать в Твиттере](https://twitter.com/mvdan_/status/1588242469577117696)
— [Читать в Threadreader, если Твиттер не открывается](https://threadreaderapp.com/thread/1588242469577117696.html)",4532,13,0,goproglib
3114,2022-11-15 19:51:00+00:00,#вопросы_для_самопроверки,4453,3,0,goproglib
3112,2022-11-15 07:10:48+00:00,"Опубликован доклад Николая Тузова на митапе Evrone о внутреннем устройстве каналов в Go.

[Смотреть](https://youtu.be/8NhcDt1BCmc)",5390,32,0,goproglib
3111,2022-11-14 19:35:37+00:00,"Пошаговая разработка обёртки для API Токийской фондовой биржи на Go.

[Читать](https://habr.com/ru/company/ruvds/blog/698740/)",4845,14,0,goproglib
3109,2022-11-13 08:33:30+00:00,"Портируем шахматный движок **sunfish** на Go и разбираемся:

— как изобразить шахматную доску (поля, фигуры, допустимые ходы);
— как оценивать доску (кто, скорее всего, победит);
— как выполнить поиск оптимального хода.

[Читать](https://zserge.com/posts/carnatus/)",4944,20,0,goproglib
3108,2022-11-12 22:01:29+00:00," **autopprof** — инструмент для автоматического профилирования Go-приложения и информирования в случае превышения заданного порога использования ЦП или памяти.

https://github.com/daangn/autopprof",6181,0,1,goproglib
3105,2022-11-12 09:00:20+00:00,#вопросы_для_самопроверки,6232,0,0,goproglib
3103,2022-11-12 07:35:04+00:00,"Откликнулись бы?

Больше вакансий вы найдете на канале @godevjob ",4512,0,0,goproglib
3102,2022-11-11 22:38:54+00:00,"**Proposal: Structured Logging**

Jonathan Amsterdam предлагает добавить структурированное логирование с уровнями в стандартную библиотеку. Цели и детали идеи — под катом.

[Подробнее](https://go.googlesource.com/proposal/+/master/design/56345-structured-logging.md)",4809,25,2,goproglib
3101,2022-11-11 20:28:13+00:00,"В чем по вашему мнению настоящая проблема Go, если это не обработка ошибок? 

[Подробнее](https://vanitynotes.com/posts/20221101-the-real-problem-with-go)",4610,3,42,goproglib
3100,2022-11-11 18:49:35+00:00,"#news 

**Вчера Go исполнилось 13 лет**  

Основные достижения этого года и ключевые доклады с конференций увидите в статье. 

[Читать](https://go.dev/blog/13years)",4693,62,2,goproglib
3098,2022-11-11 11:39:07+00:00,▶️ Больше мемов вы найдете на канале @itmemlib,4214,0,0,goproglib
3096,2022-11-11 04:22:01+00:00,"**Введение в OpenAPI v3 генератор для Go**

В статье рассказано, чем **ogen** отличается от существующих решений и почему стоит его попробовать.

[Читать](https://habr.com/ru/post/694090/)",4977,22,1,goproglib
3090,2022-11-10 11:32:27+00:00,"** Основные SQL-команды и запросы с примерами, которые должен знать каждый разработчик

**В небольшом обзоре разберем наиболее важные команды языка запросов SQL и сделаем шаг в сторону грамотного изучения работы с базами данных.

[ Основной сайт](https://proglib.io/sh/wyurktzTaZ)
[ Зеркало](https://proglib.tech/p/osnovnye-sql-komandy-i-zaprosy-s-primerami-kotorye-dolzhen-znat-kazhdyy-razrabotchik-2022-04-14)",46312,15,0,goproglib
3089,2022-11-09 15:06:57+00:00," **SaaS Startup Kit** — набор Go-библиотек для создания масштабируемых SaaS-приложений.

https://github.com/raseels-repos/golang-saas-starter-kit",4766,3,0,goproglib
3088,2022-11-08 21:32:46+00:00,⬆️ Комментарии к предыдущему квизу в оригинале,4587,15,0,goproglib
3084,2022-11-08 18:23:44+00:00," **ТОП-10 самых высокооплачиваемых языков программирования в 2022 году**

Известная платформа по поиску работы DevJobsScanner составила список самых высокооплачиваемых языков программирования. Вместе разберемся, кто же входит в первую десятку и посмотрим, какие цифры рисуют работодатели в объявлениях, чтобы привлечь специалистов.

 [Основной сайт](https://proglib.io/sh/KiN2ExRotG)
 [Зеркало](https://proglib.tech/p/top-10-samyh-vysokooplachivaemyh-yazykov-programmirovaniya-v-2022-godu-2022-11-08)",4188,4,5,goproglib
3083,2022-11-07 20:17:51+00:00,"Использование конкурентности для ускорения обработки больших файлов: руководство для Go-разработчика.

[Читать](https://medium.com/@snassr/processing-large-files-in-go-golang-6ea87effbfe2)",6137,18,0,goproglib
3079,2022-11-06 19:32:11+00:00,"Разработка CLI kanban-доски с использованием Bubble Tea: серия видеоруководств для Go-разработчика.

[Смотреть](https://www.youtube.com/watch?v=ZA93qgdLUzM&list=PLLLtqOZfy0pcFoSIeGXO-SOaP9qLqd_H6)",5158,11,0,goproglib
3078,2022-11-05 17:41:21+00:00," **Autostrada** — веб-сервис, который позволяет за несколько шагов создать кастомную кодовую базу для традиционного веб-приложения или JSON-API.

Сервис создает каркасы приложений для Go-проекта, адаптированные к вашим потребностям и экономящие часы времени и размышлений.

https://autostrada.dev/",5289,18,2,goproglib
3077,2022-11-04 07:20:10+00:00,"#news 

Представлены релизы Go 1.19.3 и 1.18.8, в которых исправлена уязвимость CVE-2022-41716 (syscall, os/exec: unsanitized NUL в переменной окружения).

[Подробнее](https://groups.google.com/g/golang-announce/c/mbHY1UY3BaM)",5108,12,0,goproglib
3075,2022-11-03 11:45:23+00:00,"Владимир Романько, Development Team Lead из «Лаборатории Касперского», рассказывает про фаззинг в Go в целом, и в частности про:

— историю фаззинга;
— где и как искать баги;
— как помочь фаззинг-тестам эффективнее находить их в самых неожиданных местах. 

И показывает этот подход на примере обнаружения SQL-инъекций.

[Читать](https://habr.com/ru/company/kaspersky/blog/696724/)",8265,4,2,goproglib
3074,2022-11-02 19:40:33+00:00,"Лайв-кодинг на Go: пишем децентрализованную игру в покер на базе Ethereum с использованием Go и Solidity. 

[Смотреть](https://www.youtube.com/watch?v=Iw5Y_-vsGac&list=PL0xRBLFXXsP4AqkUr9XHdFJwfwN-dy9oS)",6445,30,0,goproglib
3073,2022-11-01 04:02:44+00:00,"‍ **Как составить резюме программисту: 10 бесплатных сервисов для создания привлекательных резюме**

В статье постараемся проанализировать, какими критериями пользуются рекрутеры при подборе кандидатов на IT-вакансии и из каких разделов должен состоять документ, способный приблизить вас к желаемой цели – собеседованию с работодателем.

 [Основной сайт](https://proglib.io/sh/dFPV5ehby4)
 [Зеркало](https://proglib.tech/p/kak-sostavit-rezyume-programmistu-10-besplatnyh-servisov-dlya-sozdaniya-privlekatelnyh-rezyume-2022-10-31)",4893,3,0,goproglib
3072,2022-10-31 20:39:00+00:00,"**sqlc** в действии: пошаговый туториал для Go-разработчика.

[Читать](https://eltonminetto.dev/en/post/2022-10-22-creating-api-using-go-sqlc/)",5435,11,0,goproglib
3071,2022-10-31 00:09:54+00:00,"**Обзор некоторых недокументированных изменений в Go 1.18 и 1.19**

В статье перечислены несколько изменений, отсутствующих в Go 1.18 и 1.19 release notes.

[Читать](https://go101.org/blog/2022-08-22-some-undocumented-changes-in-go-1.18-and-1.19.html)",5464,13,0,goproglib
3070,2022-10-29 10:14:10+00:00,"[​](https://telegra.ph/file/f189b852c227ff76be0ff.mp4) **vhs** — ваш домашний CLI-видеорегистратор для выполнения различных действий в терминале, которые затем трансформируются в GIF/MP4/webm.

Отлично подходит для создания быстрых демонстраций ваших CLI-инструментов, которые можно добавить в README-файлы.

https://github.com/charmbracelet/vhs",7302,26,4,goproglib
3069,2022-10-28 14:42:57+00:00,"Автор **aretext**, легковесного текстового редактора на Go, демонстрирует практические аспекты использования шаблонов функционального программирования для создания быстрых и выразительных парсеров.

[Читать](https://dev-nonsense.com/posts/incremental-parsing-in-go/)",5575,6,0,goproglib
3068,2022-10-27 18:18:00+00:00,"**Дженерики в Go по полочкам**

На примерах (Go + Python) автор разбирается, что изменилось с выпуском релиза Go 1.18, в чём особенность синтаксиса дженериков, когда они нужны и когда лучше обойтись другими инструментами.

[Читать](https://habr.com/ru/company/oleg-bunin/blog/695400/)",6489,12,0,goproglib
3066,2022-10-27 10:40:47+00:00,"#проект_в_студию

Присылайте в комментарии ссылку на самый интересный проект, который вы поддерживаете. Укажите #язык, #стек и/или #библиотеку, а лучшие по количеству реакций мы опубликуем на канале.",4231,3,0,goproglib
3065,2022-10-26 20:59:00+00:00,"Практическое руководство по работе с JSON в Go.

[Читать](https://developer20.com/json/)",5114,0,0,goproglib
3064,2022-10-26 17:42:22+00:00,"#news

Подборка новостей и обновлений популярных инструментов/библиотек для Go-разработчика:

— [proposal: spec: add clear(x) builtin, to clear map, zero content of slice, ptr-to-array](https://github.com/golang/go/issues/56351) 
— [proposal: log/slog: structured, leveled logging](https://github.com/golang/go/issues/56345)
— Анонс [mirrord 3.0](https://metalbear.co/blog/mirrord-3.0-is-out/)
— [Релиз](https://entgo.io/docs/aggregate/) новой опции `Aggregate` в ent
— Релиз [Wails 2.1](https://github.com/wailsapp/wails/releases/tag/v2.1.0)
— Релиз [Buf 1.9](https://github.com/bufbuild/buf/releases/tag/v1.9.0)
— Релиз [GoatCounter 2.3](https://github.com/arp242/goatcounter/releases/tag/v2.3.0)
— Релиз [rqlite 7.9.2](https://github.com/rqlite/rqlite/releases/tag/v7.9.2)
— Релиз [Easegress 2.2](https://github.com/megaease/easegress/releases/tag/v2.2.0)
— Релиз [retry-go 4.3](https://github.com/avast/retry-go/releases/tag/v4.3.0)
— Релиз [goctl 1.4.2](https://github.com/zeromicro/go-zero/releases/tag/tools%2Fgoctl%2Fv1.4.2) (инструмент go-zero)",4745,4,1,goproglib
3063,2022-10-26 15:57:06+00:00,"️ **16 универсальных идей для пет-проектов вне зависимости от языка**

Хотите создать что-нибудь эдакое, но вам не хватает фантазии и вдохновения? Держите 16 идей для разработки собственного проекта от «Библиотеки программиста».

 [Основной сайт](https://proglib.io/sh/Ix4vGs6HZ5)
 [Зеркало](https://proglib.tech/p/16-universalnyh-idey-dlya-pet-proektov-vne-zavisimosti-ot-yazyka-2022-10-26)",4152,0,0,goproglib
3061,2022-10-25 11:11:46+00:00,Хотите больше мемов? Подписывайтесь на канал ,4586,0,0,goproglib
3060,2022-10-24 21:29:49+00:00,"Пишем легковесный сокращатель URL-адресов на Go + Redis.

[Читать](https://dev.to/mahadevans87/building-a-fast-url-shortener-with-go-and-redis-31b9)",5482,19,0,goproglib
3059,2022-10-24 04:50:09+00:00,"#хочу_спросить

Задавайте любые вопросы о программировании и получайте ответы от пользователей. В комментариях под постом укажите #язык, #стек и/или #библиотеку, по которым задаете вопрос.",4447,1,37,goproglib
3058,2022-10-23 22:06:48+00:00,"#news 

Команда ent представила новую опцию `Aggregate`.

[Подробнее](https://entgo.io/docs/aggregate/)",4723,11,0,goproglib
3057,2022-10-23 11:58:51+00:00,"Hashicorp Configuration Language, или Как добавить в Go-проект конфигурацию на языке Terraform.

[Читать](https://habr.com/ru/company/domclick/blog/692814/)",4877,7,3,goproglib
3056,2022-10-22 09:41:24+00:00,"Известный образовательный ресурс **Learn Go with Tests** пополнился новым материалом: 

— [Introduction to acceptance tests](https://quii.gitbook.io/learn-go-with-tests/testing-fundamentals/intro-to-acceptance-tests)
— [Scaling acceptance tests](https://quii.gitbook.io/learn-go-with-tests/testing-fundamentals/scaling-acceptance-tests)",5125,14,0,goproglib
3053,2022-10-21 06:18:50+00:00,"Доклад на **Google Cloud Tech **о том, как писать приложения на Go быстрее и безопаснее. 

[Смотреть](https://youtu.be/0ZxYL3M9Ytg)",6501,8,0,goproglib
3052,2022-10-20 05:52:25+00:00,"Мы знаем как быстро и легко начать карьеру в IT 
Попробуй курсы от Proglib.academy 

Именно для тебя мы делаем скидку на все наши курсы, в которых есть вся необходимая база 
Скидка 50% действует до 31 октября

Выбрать курсы: 

[Алгоритмы и структуры данных](https://proglib.io/w/cbba80a3)
[Математика для Data Science](https://proglib.io/w/ab8ead75)
[Основы IT для непрограммистов](https://proglib.io/w/d75fd176)
[Основы программирования на Python](https://proglib.io/w/c0f7c846)
[Frontend Basic: принцип работы современного веба](https://proglib.io/w/f7a9efdb) 

Также мы устраиваем конкурс на 3 бесплатных места на любой наш курс. Переходи по [ссылке](https://forms.gle/Yy3YLUmdAcep5zBaA), заполняй анкету, и 31 октября мы случайным образом разыграем доступ к курсу ️",12631,2,0,goproglib
3051,2022-10-19 20:42:23+00:00,"Пример использования Wails для разработки десктопного приложения на React + Go.

[Читать](https://betterprogramming.pub/build-a-desktop-app-using-react-and-go-13c425bf2dba)",5040,12,0,goproglib
3049,2022-10-18 20:20:35+00:00,"История о том, как команда Ozon Tech перешла с Java на Go для выстраивания процессов тестирования.

[Читать](https://habr.com/ru/company/ozontech/blog/693740/)",5268,4,14,goproglib
3048,2022-10-18 11:37:10+00:00," **Не только мозговой штурм: 10 ментальных моделей в помощь программисту**

Как думать, чтобы решать задачи быстрее? Ментальные модели (паттерны мышления) помогут найти причину проблемы и понять, в каком порядке расставить приоритеты, чтобы быстро найти решение.

 [Основной сайт](https://proglib.io/sh/VaKguEvr0G)
 [Зеркало](https://proglib.tech/p/ne-tolko-mozgovoy-shturm-10-mentalnyh-modeley-v-pomoshch-programmistu-2022-10-18)",4473,2,0,goproglib
3047,2022-10-17 20:06:25+00:00,"**Golang Aha! Moments** — пополняемая серия статей от разработчика из OpenZiti

Как и любой разработчик автор сталкивался с трудностями и преодолевал их. Таким образом, перед вами исключительно практическая серия статей.

— [Каналы](https://openziti.io/golang-aha-moments-channels)
— [Дженерики](https://openziti.io/golang-aha-moments-generics)",5143,3,0,goproglib
3045,2022-10-16 19:37:06+00:00,"Какие подкасты вы слушаете?
Расскажите в комментариях ⬇️",4316,2,14,goproglib
3044,2022-10-16 17:43:14+00:00," **Coraza** — высокопроизводительный WAF, написанный на Go. Он поддерживает наборы правил ModSecurity SecLang и полностью совместим с основным набором правил OWASP.

https://github.com/corazawaf/coraza",6785,7,0,goproglib
3043,2022-10-16 12:34:20+00:00,"Пополняемая серия статей о пошаговой разработке легковесного аналога Kubernetes на Go. От вас требуются базовые знания Go, Docker и Linux.

[Читать](https://dev.to/jonatan5524/series/20062)",5272,16,15,goproglib
3042,2022-10-15 20:33:13+00:00,"Гайд по использованию database/sql и sqlx максимально эффективно.

[Читать](https://habr.com/ru/company/vk/blog/692062/)",5377,11,0,goproglib
3041,2022-10-15 19:38:26+00:00," **Pagoda** — базовый стартовый набор для быстрой и простой фуллстек-разработки на Go. Под капотом: echo, ent, Postgres, Redis, htmx, Alpine.js и Bulma.

https://github.com/mikestefanello/pagoda",4864,11,0,goproglib
3040,2022-10-14 16:20:59+00:00,"**Автоматическое создание архитектурных диаграмм для микросервисной архитектуры с использование Encore: видеоруководство для Go-разработчика**

Под капотом также автообновление в режиме реального времени по мере внесения изменений в код. Бесплатно, если у вас до 3 человек в команде.

[Смотреть](https://youtu.be/6lOLx26S0MU)",5215,5,2,goproglib
3038,2022-10-14 11:41:17+00:00,"**Как реализован бэкенд Apple AirTag?** Почему сайдкар лучше фреймворка? Как правильно задизайнить API? Как работает алгоритм консенсуса в рапределенных системах?

Антон Скогорев - руководитель отдела разработки делится полезными материалами и авторским контентом в своем телеграмм канале об [архитектуре распределенных систем](https://t.me/startup_architecture), подписывайтесь.

Самый быстрый и эффективный способ набрать опыта для system design interview.

https://t.me/startup_architecture",4629,3,0,goproglib
3031,2022-10-14 05:58:39+00:00,"**Какие алгоритмы нужно знать, чтобы стать хорошим программистом?

**Самые распространенные алгоритмы и структуры данных, но и более сложные вещи, о которых вы могли не знать. 

  [Основной сайт
](https://proglib.io/w/247f87f1)  [Зеркало

](https://proglib.tech/p/required-programmer-algorithms)**Зачем вообще нужны алгоритмы?
**Знание алгоритмов и структур данных является важной базой у начинающих программистов для оптимизации кода. Эти знания помогут держать мозг в тонусе, пройти техническое собеседование любой сложности на позицию разработчика и повысить свой чек за работу.

**Как мне оперативно научиться применять алгоритмы?
**Мы запустили курс [«Алгоритмы и структуры данных»](https://proglib.io/w/a6d456c7), на котором junior и middle+ программисты  смогут потренировать навыки применения алгоритмов и сгенерировать идеальные решения сложных задач в сообществе других разработчиков.

[️](https://proglib.io/w/a6d456c7) [Начать обучение](https://proglib.io/w/a6d456c7)",3950,9,0,goproglib
3030,2022-10-13 20:40:22+00:00,"На заметку гоферам, которые любят длинные технические статьи.

[Источник](https://arxiv.org/abs/2208.06810)",5082,5,0,goproglib
3028,2022-10-13 05:49:20+00:00,"Каких знаний вам не хватает?
Расскажите в комментариях ⬇️",4355,0,14,goproglib
3027,2022-10-12 21:48:31+00:00,"Go Worker Pool: от бизнес-логики к конкурентности через рефакторинг.

[Читать](https://medium.com/higher-order-functions/go-worker-pool-the-concurrency-powerhouse-2dc7971f4f15)",5340,15,0,goproglib
3025,2022-10-12 20:39:58+00:00,"Go CPU profiler под капотом.

[Читать](https://sumercip.com/posts/inside-the-go-cpu-profiler/)",5032,12,0,goproglib
3023,2022-10-11 20:43:40+00:00,"Структура памяти и принцип работы массивов/срезов в Go: наглядное и краткое видеоруководство.

[Смотреть](https://youtu.be/RVTfPy_NELc)",6733,13,2,goproglib
3022,2022-10-11 19:20:37+00:00,Go против Rust для разработки веб-API: [быстрое сравнение](https://levelup.gitconnected.com/golang-vs-rust-for-web-api-development-projects-a-quick-comparison-fcc2ae2d0f6d) + [оценка производительности](https://levelup.gitconnected.com/rust-and-golang-web-apis-performance-testing-results-objective-data-points-to-choose-between-fd7a84c4272f).,5337,25,5,goproglib
3021,2022-10-10 11:34:56+00:00,"** Пройди тест на знание алгоритмов и структур данных

**Давай проверим, насколько хорошо ты разбираешься в алгоритмах, и не пора ли подтянуть знания. Всего 10 несложных вопросов 

 [Основной сайт
](https://proglib.io/w/788fb64b) [Зеркало](https://proglib.tech/tests/proydi-test-na-znanie-algoritmov-i-struktur-dannyh)",4944,3,0,goproglib
3020,2022-10-10 06:20:56+00:00,"Как применяете принципы SOLID?
Расскажите в комментариях ⬇️",5373,3,11,goproglib
3019,2022-10-09 15:26:25+00:00,"**Коттманн, Паттен, Стил: Black Hat Go. Программирование для хакеров и пентестеров (2022)

**Black Hat Go исследует темные стороны [Go](https://t.me/goproglib) — популярного языка программирования, который высоко ценится [хакерами](https://t.me/hackproglib) за его простоту, эффективность и надежность. 

Вы начнете с базового обзора синтаксиса языка и стоящей за ним философии, после чего перейдете к изучению примеров, которые пригодятся для разработки инструментов. Вас ждет знакомство с протоколами HTTP, DNS и SMB, далее вы перейдете к изучению различных тактик и задач, с которыми сталкиваются пентестеры, рассмотрите такие темы, как кража данных, сниффинг сетевых пакетов и разработка эксплойтов. Вы научитесь создавать динамические встраиваемые инструменты, после чего перейдете к изучению криптографии, атаке на Windows и стеганографии.

️ [Подробнее](https://www.labirint.ru/books/878309/?p=27465)",5582,12,4,goproglib
3018,2022-10-08 19:45:15+00:00,"Что будет завтра — сложно сказать, поэтому мы решили сфокусироваться на сегодняшнем дне и провести короткий опрос «**С какими трудностями вы столкнулись в последнее время?**», чтобы понять, что сейчас вообще происходит в IT-индустрии.

Статью с результатами опроса опубликуем через неделю.

️ [Пройти опрос](https://docs.google.com/forms/d/e/1FAIpQLSevxVgXIdj3IwD8y7TeV8yvpqJm9iw4Am1dA2RwPVLZDqHWIg/viewform?usp=sf_link) (можно анонимно)",4885,0,0,goproglib
3017,2022-10-08 18:18:17+00:00,"Разработка простой NoSQL базы данных с нуля: пошаговое руководство для Go-разработчика.

[Читать](https://betterprogramming.pub/build-a-nosql-database-from-the-scratch-in-1000-lines-of-code-8ed1c15ed924)",5318,10,0,goproglib
3015,2022-10-07 20:48:47+00:00,"Практические аспекты функционального программирования на заметку Go-разработчику.

[Читать](https://bitfieldconsulting.com/golang/functional)",4750,2,0,goproglib
3014,2022-10-07 08:13:27+00:00,"**Сохраняйте в избранное

**[ Зачем разработчику знать алгоритмы и структуры данных?
](https://proglib.io/p/zachem-razrabotchiku-znat-algoritmy-i-struktury-dannyh-2022-06-08)[ 10 алгоритмов для работы с графами, которые должен знать каждый кодер
](https://proglib.io/p/10-algoritmov-dlya-raboty-s-grafami-kotorye-dolzhen-znat-kazhdyy-koder-2022-06-17)[ Деревья и графы: что это такое и почему их обязательно нужно знать каждому программисту
](https://proglib.io/p/derevya-i-grafy-chto-eto-takoe-i-pochemu-ih-obyazatelno-nuzhno-znat-kazhdomu-programmistu-2022-06-13)[ Сравнение 6 алгоритмов сортировки: пузырьком, выбором, кучей, вставками, слиянием и быстрая
](https://proglib.io/p/sravnenie-6-algoritmov-sortirovki-puzyrkom-vyborom-kuchey-vstavkami-sliyaniem-i-bystraya-2022-02-08)[ 10 анимированных алгоритмов на графах

](https://proglib.io/p/10-animirovannyh-algoritmov-na-grafah-2020-09-09)**C++
**[  7 способов сортировки массивов на примере С++ с иллюстрациями
](https://proglib.io/p/7-sposobov-sortirovki-massivov-na-primere-s-s-illyustraciyami-2022-04-20)[‍ Алгоритмы и структуры данных на C++ для новичков. Часть 1: Основы анализа алгоритмов
](https://proglib.io/p/algoritmy-i-struktury-dannyh-na-c-dlya-novichkov-chast-1-osnovy-analiza-algoritmov)[‍ Must-have алгоритмы для работы со строками на C++

](https://proglib.io/p/must-have-algoritmy-dlya-raboty-so-strokami-na-c-2020-03-30)**JavaScript
**[️ Распространенные алгоритмы и структуры данных в JavaScript: полезные алгоритмы для веб-разработки
](https://proglib.io/p/realizaciya-rasprostranennyh-algoritmov-i-struktur-dannyh-v-javascript-poleznye-algoritmy-dlya-veb-razrabotki-2021-11-19)[️ Распространенные алгоритмы и структуры данных в JavaScript: графы
](https://proglib.io/p/rasprostranennye-algoritmy-i-struktury-dannyh-v-javascript-grafy-2021-10-20)[️ Распространенные алгоритмы и структуры данных в JavaScript: деревья
](https://proglib.io/p/rasprostranennye-algoritmy-i-struktury-dannyh-v-javascript-derevya-2021-10-18)[️ Распространенные алгоритмы и структуры данных в JavaScript: стеки, очереди и связные списки
](https://proglib.io/p/rasprostranennye-algoritmy-i-struktury-dannyh-v-javascript-steki-ocheredi-i-svyaznye-spiski-2021-10-13)[️ Распространенные алгоритмы и структуры данных в JavaScript: основные понятия и работа с массивами

](https://proglib.io/p/rasprostranennye-algoritmy-i-struktury-dannyh-v-javascript-osnovnye-ponyatiya-i-rabota-s-massivami-2021-10-06)**Машинное обучение
**[ Машинное обучение для начинающих: алгоритм случайного леса (Random Forest)

](https://proglib.io/p/mashinnoe-obuchenie-dlya-nachinayushchih-algoritm-sluchaynogo-lesa-random-forest-2021-08-12)**Python
**[ Сложность алгоритмов и операций на примере Python

](https://proglib.io/p/slozhnost-algoritmov-i-operaciy-na-primere-python-2020-11-03)***

**— Как-то сложно — не Хауди Хо... Мне нужно, чтобы кто-нибудь объяснил алгоритмы простыми словами.
**— Алгоритмы и структуры данных действительно непростая тема для самостоятельного изучения: не у кого спросить и что-то уточнить. Поэтому мы запустили курс  [«Алгоритмы и структуры данных»](https://proglib.io/w/76076ed4) (живые вебинары, 47 видеолекций, 150 практических занятий + консультации с преподавателями).

[️ Записаться на курс](https://proglib.io/w/76076ed4)",4294,10,0,goproglib
3013,2022-10-06 22:15:21+00:00,"#news

Традиционный выпуск новостей из мира Go-разработки:

— Анонс [Go 1.19.2 и 1.18.7](https://groups.google.com/g/golang-announce/c/xtuG5faxtaU)
— Анонс [GoLand 2022.3 EAP](https://blog.jetbrains.com/go/2022/09/23/the-goland-2022-3-early-access-program-has-started/)
— Релиз [Micro 4.9](https://github.com/go-micro/go-micro/releases/tag/v4.9.0)
— Релиз [RQLite 7.7](https://github.com/rqlite/rqlite/releases/tag/v7.7.0)
— Релиз [Sarama 1.37.2](https://github.com/Shopify/sarama/releases/tag/v1.37.2) 
— Релиз [Ebitengine 2.4.7](https://github.com/hajimehoshi/ebiten/releases)
— Релиз [gofumpt 0.4](https://github.com/mvdan/gofumpt/releases/tag/v0.4.0)
— Релиз [go-binarytree](https://github.com/dnaeon/go-binarytree)
— Релиз [Ginkgo 2.2](https://github.com/onsi/ginkgo/releases/tag/v2.2.0)
— Релиз [scc 3.1](https://github.com/boyter/scc/releases/tag/v3.1.0)
— Релиз [mo 1.5](https://github.com/samber/mo/releases/tag/v1.5.0)
— Релиз [jqp 0.3](https://github.com/noahgorstein/jqp/releases/tag/v0.3.0)
— Релиз [mpb 8.1.2](https://github.com/vbauerster/mpb/releases/tag/v8.1.2)",4647,11,1,goproglib
3012,2022-10-06 19:58:15+00:00,"Сергей Киммель, PHP/Go-разработчик и руководитель отдела разработки торгового движка, делится опытом работы с секретами в Go и рассказывает о проблемах, с которыми столкнулась его команда.

[Читать](https://habr.com/ru/company/oleg-bunin/blog/679546/)",5076,9,2,goproglib
3011,2022-10-06 11:35:37+00:00,"** Зачем разработчику знать алгоритмы и структуры данных?

**Рассказываем о преимуществах, которые дает хорошее знание алгоритмов, о том, что именно нужно изучить в первую очередь, и как проходит алгоритмическая секция в техническом собеседовании.

 [Основной сайт](https://proglib.io/w/dd52455d)
 [Зеркало](https://proglib.tech/p/zachem-razrabotchiku-znat-algoritmy-i-struktury-dannyh-2022-06-08)",5203,6,0,goproglib
3010,2022-10-05 19:38:26+00:00,"Краткое изложение одного из разделов книги [100 Go Mistakes and How to Avoid Them](https://t.me/goproglib/2973) об утечках памяти при работе с maps в Go.

[Читать](https://teivah.medium.com/maps-and-memory-leaks-in-go-a85ebe6e7e69)",5687,18,0,goproglib
3009,2022-10-05 11:38:23+00:00,Расскажите про самый стремный факап за карьеру разработчика. ⬇️,5107,2,22,goproglib
3008,2022-10-04 20:18:35+00:00,"#news 

 Представлены релизы Go 1.19.2 и 1.18.7, которые включают исправления безопасности для archive/tar (CVE-2022-2879), net/http (CVE-2022-2880) и regexp (CVE-2022-41715).

[Подробнее](https://groups.google.com/g/golang-announce/c/xtuG5faxtaU)",5166,9,2,goproglib
3007,2022-10-04 19:33:50+00:00,"[​](https://telegra.ph/file/ecd2471c8e8c11f0ccf92.jpg)️ **14 советов, как давать грамотный фидбэк, чтобы никого не обидеть**

Хотите стать фидбэкером 99-го уровня и не испортить отношения с коллегами? В этой статье делимся лучшими практиками мастеров грамотного фидбэка.

 [Основной сайт](https://proglib.io/sh/TWrhsn2kzD)
 [Зеркало](https://proglib.tech/p/14-sovetov-kak-davat-gramotnyy-fidbek-chtoby-nikogo-ne-obidet-2022-10-04)",5068,3,0,goproglib
3005,2022-10-03 20:31:05+00:00,"Фреймворк Bud в действии: настройка, структура проекта, создание простого приложения и сравнение с другими фреймворками.

[Читать](https://blog.logrocket.com/full-stack-bud-go/)",5224,10,0,goproglib
3004,2022-10-03 10:54:06+00:00,"Если вы работаете с БД напрямую через драйвер без использования ORM и устали вручную перебирать строки и сканировать данные из всех столбцов в соответствующее место назначения, то для вас есть хорошие новости. 

Инструмент **scany** стремится решить эту проблему. Он позволяет разработчикам сканировать сложные данные из БД в структуры Go и другие составные типы всего одним вызовом функции и не беспокоиться об итерации строк.

https://github.com/georgysavva/scany",5341,4,5,goproglib
3003,2022-10-02 21:39:04+00:00,"Расширяем границы Markdown-файла с использованием Go: «крестики-нолики» в GitHub README.md.

[Читать](https://betterprogramming.pub/play-tic-tac-toe-from-github-readme-md-file-754539603380)",5178,0,2,goproglib
3002,2022-10-02 07:54:12+00:00,"#tips #go #docker

Подробности [здесь](https://youtu.be/SLD1X12PywI).",5470,14,3,goproglib
3001,2022-10-01 19:18:32+00:00,"Автор [недавно опубликованной книги](https://t.me/goproglib/2994) радует новым контентом: полное руководство по работе с куками в Go.

[Читать](https://www.alexedwards.net/blog/working-with-cookies-in-go)",5797,14,0,goproglib
2999,2022-10-01 13:20:50+00:00,"Практика сканирования Go-микросервиса на наличие уязвимостей и интеграции сканера в CI/CD пайплайн.

[Читать](https://awkwardferny.medium.com/go-application-security-and-appsec-automation-made-easy-36bd2f3d520b)",6579,11,0,goproglib
2997,2022-09-30 20:11:20+00:00,"[​](https://telegra.ph/file/041f613e986417ef48770.jpg)**Менее известные фичи go.mod**

В статье рассматривается дизайн модулей в Go и разбирается, как они поддерживают безопасность цепочек поставок. 

[Читать](https://verdverm.com/go-mods/)",5576,10,0,goproglib
2996,2022-09-30 19:07:44+00:00,"Разработка кастомного Go-линтера с использованием **Sylver**.

[Читать](https://blog.sylver.dev/build-a-custom-go-linter-in-5-minutes)",5676,4,0,goproglib
2995,2022-09-29 21:39:56+00:00,"Местами спорные, но все равно любопытные мысли о структурировании Go-проекта.

[Читать](https://habr.com/ru/company/indriver/blog/690088/)",7171,15,2,goproglib
2994,2022-09-29 19:13:56+00:00,"**Let's Go 2nd edition** (2022)

**Автор**: Alex Edwards

Перед вами книга, которая отвечает на многие вопросы в разработке веб-приложений на Go. Например:

— Где можно увидеть конкретный пример реального веб-приложения?
— Как лучше структурировать и организовать код?
— Как управлять зависимостями и контролировать версии?
— Как эффективно протестировать веб-приложение? И многие другие.

В книге рассказывается о сборке полного рабочего приложения от начала до конца, подкрепляя все на практике. К концу книги у вас будут знания, необходимые для создания профессиональных веб-приложений.",8384,35,7,goproglib
2991,2022-09-28 19:32:25+00:00,"Обзор основных изменений в Go runtime за последние 4 года.

[Читать](https://go.dev/blog/go119runtime)",5643,8,0,goproglib
2988,2022-09-28 05:54:26+00:00,"[​](https://telegra.ph/file/b8de2799db1e95f34e438.jpg) fgtrace — экспериментальный профилировщик/трассировщик горутин.

https://github.com/felixge/fgtrace",5823,13,0,goproglib
2987,2022-09-27 05:22:04+00:00,"#ищу_работу

Напишите пару слов о себе, добавьте ссылку на гитхаб/резюме и укажите хештеги: #язык, #стек, #библиотеки",5189,3,10,goproglib
2986,2022-09-26 19:55:10+00:00,"Анонс Go-линтера **usestdlibvars**, который определяет, можно ли повторно использовать переменные или константы из стандартной библиотеки, вместо того чтобы создавать собственные.

[Читать](https://habr.com/ru/company/evrone/blog/689606/)",5163,25,0,goproglib
2984,2022-09-25 06:25:01+00:00,"Полный гайд по интеграции JWT-аутентификации в приложение на Go + [chi](https://github.com/go-chi/chi) с использованием **chi jwtauth middleware**.

[Читать](https://www.newline.co/@kchan/integrating-jwt-authentication-with-go-and-chi-jwtauth-middleware--ff9a6cec)",5704,13,0,goproglib
2983,2022-09-24 14:44:42+00:00,"Обзор полезных возможностей VS Code для Go-разработчика.

[Читать](https://bitfieldconsulting.com/golang/vs-code-go)",7130,18,0,goproglib
2982,2022-09-24 06:36:56+00:00,"**️Go** **Get** **Podcast: правила хорошего тона для разработчика

**В очередном выпуске обсуждаются вопросы, связанные с написанием хорошего кода на Go: 

— Нужен ли он? 
— Насколько важен? 
— Экономит ли «грязный код» время? 
— Как научиться писать хороший код? И др.",5347,9,0,goproglib
2981,2022-09-23 20:03:34+00:00,"️После длительной работы представлена вторая версия Wails, альтернативы Electron на Go. 

[Читать](https://wails.io/blog/wails-v2-released/)",5659,23,1,goproglib
2980,2022-09-23 18:00:01+00:00,"[​](https://telegra.ph/file/64cf1033c93d35ef4a823.jpg)** 5 советов, как быстро справиться с тревогой, беспокойством и стрессом

**Тревожность – уже привычное состояние каждого небезразличного человека в последние дни. Рассказываем, что делать в ситуации, когда корвалол кажется единственным спасением.

 [Основной сайт
](https://proglib.io/sh/u8XLNqdhBE) [Зеркало](https://proglib.tech/p/5-sovetov-kak-bystro-spravitsya-s-trevogoy-bespokoystvom-i-stressom-2022-03-06)",5404,11,0,goproglib
2979,2022-09-23 14:53:47+00:00,"Записи всех докладов с конференции GopherCon UK 2022.

[Смотреть](https://youtube.com/playlist?list=PLDWZ5uzn69exbERujDiGxOadne_nkibSo)",6712,24,1,goproglib
2978,2022-09-22 19:17:18+00:00,"Kafka producer/consumer на Go: руководство для начинающих.

[Читать](https://medium.com/codex/implement-kafka-topics-joiner-with-golang-f8a9c046fcbe)",6353,23,2,goproglib
2976,2022-09-21 18:31:54+00:00,"Гайд по разработке простого SPA-приложения на Go + Hugo + AWS Lambda.

[Читать](https://dev.to/toul_codes/how-to-use-golang-hugo-and-lambda-for-a-single-page-application-52p9)",5549,4,0,goproglib
2975,2022-09-20 14:00:10+00:00,"Разбор четырех распространенных ловушек, которые ведут к неточностям тестирования в Go.

[Читать](https://teivah.medium.com/how-to-write-accurate-benchmarks-in-go-4266d7dd1a95)",6018,7,0,goproglib
2974,2022-09-20 11:00:17+00:00,"Привет! На связи продакшн-центр proglib.academy 

Мы ищем спикера на курс «Основы IT для непрограммистов». 
Хочешь рассказывать отделу продаж, чем отличается Java от JavaScript и языки программирования от естественных языков? Тогда нам есть, о чём поговорить!

 Если ты:
— можешь доносить сложные темы простым языком
— владеешь одним или несколькими языками программирования
— не боишься публичных выступлений 
— умеешь чётко формулировать мысли
— имеешь опыт преподавания или очень хочешь попробовать себя в роли спикера

 Чувствуешь, что хочется и можется, тогда пройди небольшой опрос и оставь свой контакт в [гугл-форме](https://proglib.io/w/705a724c).",5615,0,0,goproglib
2973,2022-09-20 08:11:02+00:00,"**100 Go Mistakes and How to Avoid Them** (2022)

**Автор**: Teiva Harsanyi

Книга обязательна к прочтению Go-разработчиками перед тем, как приступить к кодингу. Она покажет вам, как:

— Избежать самых распространенных ошибок
— Структурировать и оптимизировать код
— Эффективно обрабатывать данные и управляющие структуры
— Работать с ошибками в идиоматической манере
— Подготовить приложение к проду и улучшить качество тестирования
— Улучшить навыки работы с конкурентностью и многое другое

+ [исходные коды](https://github.com/teivah/100-go-mistakes) к книге.",8203,30,4,goproglib
2972,2022-09-19 20:18:22+00:00,"Filippo Valsorda до 2022 года отвечал за криптографию и безопасность в команде Go в Google, но на текущий момент он продолжает сопровождать стандартную библиотеку криптографии Go. О крипте и пойдет речь в статье, точнее о планах в Go 1.20.

[Читать](https://words.filippo.io/dispatches/go1-20/)",5402,10,0,goproglib
2971,2022-09-18 19:58:38+00:00,"Гайд по разработке простого todo-приложения с использованием веб-вреймворка Echo, который охватывает основные аспекты разработки веб-приложения.

[Читать](https://thedevelopercafe.com/articles/echo-a-go-web-framework-todo-app-a614c9942f0c)",5845,26,0,goproglib
2970,2022-09-18 10:30:38+00:00,"Если кто-то ещё не знает автора BoltDB **Бена Джонсона**, обязательно ознакомьтесь с его блогом. Сейчас, судя по всему, у него творческий кризис на статьи и руководства в блоге, но полезной информации все равно достаточно.

[Читать](https://www.gobeyond.dev/)",5363,12,1,goproglib
2969,2022-09-17 21:33:35+00:00,"Легко изучать, писать, читать, тестировать и деплоить — вот почему команда Google Cloud любит Go.

[Читать](https://cloud.google.com/blog/products/application-modernization/why-david-yach-loves-go)",4947,5,0,goproglib
2968,2022-09-17 08:41:38+00:00,"Тут Russ Cox начал дискуссию об обратной совместимости Go. [Прочитайте](https://github.com/golang/go/discussions/55090), если интересно.",4911,10,0,goproglib
2967,2022-09-16 21:28:18+00:00,"Автор **100 Go Mistakes** делится фундаментальными знаниями о конкурентности в Go и показывает пример, где к производительности конкурентного решения «есть вопросы».

[Читать](https://teivah.medium.com/concurrency-isnt-always-faster-in-go-de325168907c)",6756,14,0,goproglib
2966,2022-09-16 09:00:02+00:00,"Пополняем коллекцию руководств по Go для начинающих: быстрое знакомство с языком.

[Читать](https://learnxinyminutes.com/docs/go/)",4949,8,1,goproglib
2965,2022-09-16 06:00:02+00:00,"[Golang Юниор](https://t.me/golangprofi) - это канал, для начинающих Go разработчиков. Для профи каналы уже не нужны. А вот в начале карьеры - самое то. 

**Наш упор на 
**1. вопросы с собеседований
2. задачи и их решение
3. Код 
4. Полезные ресурсы

1 канал вместо тысячи учебников и курсов, [подписывайтесь](https://t.me/golangprofi): 

 @golangprofi",4811,4,0,goproglib
2964,2022-09-15 19:30:04+00:00,"Базовое руководство по деплою веб-сервиса на Go с использованием Azure Functions и работе с GitHub Actions для автоматизации деплоя.

[Читать](https://sahansera.dev/serverless-go-with-azure-functions-github-actions/)",4682,10,0,goproglib
2962,2022-09-15 11:35:22+00:00,"[​](https://telegra.ph/file/474162ece5eeaf26623e9.jpg)⬆️ **Как договориться с начальством о повышении зарплаты за 5 простых шагов**

Как подготовиться к переговорам, какие аргументы подобрать и как избежать манипуляций со стороны руководства? Держите наш алгоритм повышения зарплаты.

 [Основной сайт](https://proglib.io/sh/sq1ZrM6p5X)
 [Зеркало](https://proglib.tech/p/kak-dogovoritsya-s-nachalstvom-o-povyshenii-zarplaty-za-5-prostyh-shagov-2022-09-15)",4622,4,0,goproglib
2961,2022-09-14 16:19:17+00:00,"#ищу_команду

Ищите единомышленников, делайте коллабы, создавайте новые проекты. В комментариях под постом укажите #язык, #библиотеку и/или #стек, который вас интересует и опишите общую концепцию проекта.",4471,10,5,goproglib
2960,2022-09-14 05:45:42+00:00,"Краткие заметки от Николая Тузова об устройстве функции `time.Sleep()` в Go.

[Читать](https://tuzov.su/posts/%D0%BA%D0%B0%D0%BA-%D1%83%D1%81%D1%82%D1%80%D0%BE%D0%B5%D0%BD%D0%B0-%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F-time-sleep/)",5820,21,0,goproglib
2959,2022-09-13 18:28:46+00:00,"**13 сентября, 256-й день в году — наш день

**Друзья, давайте сегодня отдохнем: отложим несрочные таски, побездельничаем, выключим вечером все рабочие чаты и выбросим из головы «как же сделать, чтобы заработало?».

Мы этого заслужили! Поздравляем с днем программиста! ",5543,56,2,goproglib
2957,2022-09-13 09:00:07+00:00,"**Go Developer Survey 2022 Q2

**В статье представлены результаты опроса Go-разработчиков за июнь 2022 года. Вот ключевые результаты:

— Дженерики получили быстрое распространение, чего не скажешь о фаззинге
**— **Сторонние зависимости являются главной проблемой безопасности
**— **Обработка ошибок остается проблемой для разработчиков

[Читать](https://go.dev/blog/survey2022-q2-results)",4768,4,0,goproglib
2955,2022-09-12 20:30:44+00:00,"#news 

Ещё неделю назад были представлены релизы Go 1.19.1 и 1.18.6, включающие исправления для net/http (CVE-2022-27664) и net/url (CVE-2022-32190).

[Подробнее](https://groups.google.com/g/golang-announce/c/x49AQzIVX-s)",4435,13,0,goproglib
2952,2022-09-11 21:37:15+00:00," **health** — Go-библиотека, которая реализует health check в вашем проекте. Ответы о работоспособности кэшируются, чтобы не нагружать проект.

[Репозиторий](https://github.com/alexliesenfeld/health)",4839,19,0,goproglib
2951,2022-09-11 08:20:07+00:00,"С ростом клиентской базы и популярности DigitalOcean приложения на Rails посыпались, после чего на помощь пришли Go и микросервисная архитектура. В статье кратко описаны предпосылки перехода и основные технические детали. 

[Читать](https://www.digitalocean.com/blog/inside-digitaloceans-reserved-ip-rails-migration)",5960,15,0,goproglib
2950,2022-09-10 09:40:26+00:00,"#хочу_спросить

Задавайте любые вопросы о программировании и получайте ответы от пользователей. В комментариях под постом укажите #язык, #стек и/или #библиотеку, по которым задаете вопрос.",4578,3,19,goproglib
2949,2022-09-09 18:07:08+00:00,"Полный гайд по логированию в Go с использованием Zerolog: как установить, настроить и использовать Zerolog logger в Go-приложении.

[Читать](https://betterstack.com/community/guides/logging/zerolog/)",5162,18,1,goproglib
2948,2022-09-09 05:58:43+00:00,"Разработчик в VK Никита Галушко рассказывает, как Go подходит к инлайнингу функций (встраиванию).

[Читать](https://habr.com/ru/company/vk/blog/686758/)",5027,15,2,goproglib
2947,2022-09-08 12:00:18+00:00,"[​](https://telegra.ph/file/96bdbfb62938807d8bebb.jpg)️ **Как изменилась жизнь русскоязычных айтишников за последние полгода? Результаты опроса «Библиотеки программиста»**

Почти полгода назад мы проводили аналогичный опрос, и тогда респонденты ожидали большого количества сокращений, планировали переезд в другие страны и ждали трудностей с программным обеспечением. Посмотрим на итоги нового опроса и какие ожидания и страхи сбылись.

 [Основной сайт](https://proglib.io/sh/MRwxsUH7Fj)
 [Зеркало](https://proglib.tech/p/kak-izmenilas-zhizn-russkoyazychnyh-aytishnikov-za-poslednie-polgoda-rezultaty-oprosa-biblioteki-programmista-2022-09-08)",4687,7,0,goproglib
2946,2022-09-08 09:50:59+00:00,"Разработка goroutine-safe пакета на Go с пошаговыми примерами.

[Читать](https://madflojo.medium.com/making-golang-packages-thread-safe-bb9592aeab92)",4859,4,0,goproglib
2945,2022-09-07 14:14:08+00:00,"Привет! 
На связи proglib.academy. Мы вместе с [Geecko ](https://geeckomove.com/)организуем вебинар, на котором подробно разберём основные мифы о релокации для IT специалиста. 

На[ вебинаре](https://proglib.io/w/a42b9ef7) вы узнаете об основных ошибках , которые допускают специалисты во время релокации

Также после вебинара вы получите гайд «как записать продающую презентацию о себе»

Встречаемся 8 сентября в 19:00, 
Успей зарегистрироваться по ссылке: [ТОП-3 Заблуждений о релокации IT-Специалиста](https://proglib.io/w/a42b9ef7)",4501,2,0,goproglib
2944,2022-09-07 06:02:00+00:00,"Узнайте, какие инструменты существуют для управления уязвимостями в Go-проекте на текущий момент.

[Читать](https://go.dev/blog/vuln)",4600,4,0,goproglib
2943,2022-09-06 20:04:59+00:00,"Dependency Injection в Go: подробное объяснение с примерами.

[Читать](https://markphelps.me/posts/dependency-injection-explained/)",4998,16,0,goproglib
2942,2022-09-06 19:34:03+00:00,"А тем временем вышел первый трейлер Линстории, документального фильма о Линукс в России. 

[Смотреть](https://youtu.be/PMg8d1N6Dy0)",4199,21,1,goproglib
2941,2022-09-05 06:03:08+00:00,"**Go** **Get** **Podcast: собеседование Go-разработчика глазами нанимателя

Вы **услышите ответы на вопросы, которые не дают покоя многим разработчикам:  
  
— Берут ли на работу новичков?  
— Зачем на собеседованиях нужны алгоритмы и live-coding?  
— Достаточно ли скинуть ссылку на pet-project на GitHub'е?  
— Играет ли роль высшее образование?  
— Играет ли роль возраст? И многие другие.",5045,23,0,goproglib
2940,2022-09-04 14:00:07+00:00,"**Список с пропусками** (Skip List): подробное объяснение и реализация на Go.

[Читать](https://ketansingh.me/posts/lets-talk-skiplist/)",5076,2,0,goproglib
2939,2022-09-04 11:00:11+00:00,"Разбор 4-х подходов для поиска родительских ссылок в Go [ast](https://pkg.go.dev/go/ast).

[Читать](https://eli.thegreenplace.net/2022/parent-links-in-go-asts/)",4869,6,3,goproglib
2938,2022-09-04 07:53:10+00:00,"**Go Time: боль управления зависимостями**

Baruch Sadogursky (Chief Sticker Officer в JFrog) присоединяется к ведущим подкаста для обсуждения текущего состояния управления зависимостями в Go и других языках. Они обсуждают проблемы, с которыми сталкиваются менеджеры зависимостей, возможные технические решения и многое другое.",4697,5,0,goproglib
2937,2022-09-03 20:00:04+00:00,"**Как история Google привела к созданию Go, этапы роста Go и что Google думает о будущей траектории Go**

Эти и другие вопросы вы услышите из доклада Кэмерона Балахана на GopherCon Europe 2022, который недавно стал руководителем направления Go в Google. 

 [Смотреть](https://youtu.be/vQm_whJZelc)",4964,15,0,goproglib
2936,2022-09-03 18:55:45+00:00,"Ebiten развивается — теперь это Ebitengine. Узнайте, какие изменения появились в версии 2.4.

[Читать](https://ebiten.org/documents/2.4.html)",4410,11,0,goproglib
2935,2022-09-03 12:30:01+00:00,"**«Библиотека программиста» находится в поиске авторов оригинальных статей

Языки:
**– Python, JavaScript, TypeScript, Java, C#, Go, SQL.

**Тематики:
**– Информационная безопасность, Data Science, базовые концепции языков, продвинутый Python, JS (и т. д), бэкенд веб-приложений, фронтенд-разработка, React, системное программирование, базы данных.

**Объем:
**– от 7 до 15 тыс. знаков.

[️ Заполнить анкету](https://docs.google.com/forms/d/e/1FAIpQLSdZRp4TjqpvNptKlIhHWa7go-I4-9u8Ft8cda8woK6URep_Zw/viewform?usp=sf_link) ⬅️

**Я хорошо программирую, но пишу «так себе». Что делать?
**Если вы хорошо программируете, но навыки письма немного отстают, пройдите наш бесплатный курс на Степике [«Статьи для IT: как объяснять и распространять значимые идеи»](https://stepik.org/course/101672/promo).",4335,8,0,goproglib
2934,2022-09-03 09:46:24+00:00,"**Написание нативного потокового пайплайна на Go**

В ходе доклада на Beam Summit 2022 инженеры из Google углубляются в новые функции Beam Go SDK и обсуждают, как их можно использовать для создания потоковых пайплайнов, полностью написанных на Go.

Вы поймете некоторые проблемы относительно обработки неограниченных наборов данных и многое другое.

 [Смотреть](https://youtu.be/PNDY2OYASrE)",4423,12,0,goproglib
2933,2022-09-02 18:00:08+00:00,"Краткие заметки по использованию пакета **httpc** из go-zero для отправки типобезопасных HTTP-запросов.`

`[Читать](https://dev.to/kevwan/sending-type-safe-http-requests-with-go-5h2l)",4385,6,0,goproglib
2931,2022-09-01 20:11:09+00:00,"Помните [статью](https://t.me/goproglib/2896) о простых highload паттернах на Go? Автор решил продолжить и описал подходы, ориентированные на масштабирование приложения при верхнеуровневом рассмотрении с примерами на Go. 

[Читать](https://habr.com/ru/post/684904/)",5084,22,0,goproglib
2930,2022-09-01 17:03:23+00:00,"[Ben Boyter](https://twitter.com/boyter) описывает ошибки (и то, как их исправил), с которыми недавно столкнулся при разработке системы архивации на Go.

[Читать](https://boyter.org/posts/more-annoying-go-bugs/)",4511,9,0,goproglib
2929,2022-08-31 20:36:12+00:00,"#pentest #CVE #security #appsec 

**CVE-2021-38297**

Технические детали и эксплуатация уязвимости в связке Go (до 1.16.9 и 1.17.x-1.17.2) + WebAssembly.

[Читать](https://jfrog.com/blog/cve-2021-38297-analysis-of-a-go-web-assembly-vulnerability/)",4429,8,0,goproglib
2928,2022-08-31 18:00:07+00:00,"Гоферу на заметку: опыт повышения скорости разработки с помощью кодогенерации в платформе СберМаркета PaaS.

[Читать](https://habr.com/ru/company/sbermarket/blog/676486/)",4698,17,0,goproglib
2926,2022-08-30 20:52:05+00:00,"**Когда стоит переходить с Python на Go, а когда нужно оставить всё как есть**: рассказывает и показывает Василий Копытов, руководитель группы разработки рекомендаций в Авито.

[Читать](https://habr.com/ru/company/avito/blog/679560/)",4518,5,4,goproglib
2925,2022-08-30 19:10:19+00:00,"Разбор внутреннего устройства каналов от Николая Тузова: как реализована потокобезопасноть, как в буферизированном канале хранятся данные, какие интересные оптимизации там есть, как работает оператор Select, как каналы закрываются и т. д.

 [Смотреть](https://youtu.be/ZTJcaP4G4JM)",7085,42,0,goproglib
2923,2022-08-29 19:55:03+00:00,"Go functions: автоматическое масштабирование и метрики с Kubernetes + OpenFaaS.

[Читать](https://dominikbraun.io/blog/go-functions-as-a-service-with-kubernetes-and-openfaas/)",5503,6,0,goproglib
2921,2022-08-29 14:17:00+00:00,"**Опрос «Библиотеки программиста»

**Прошло почти полгода с момента нашего опроса «[ Что сейчас происходит с IT-индустрией и айтишниками?](https://proglib.io/p/chto-seychas-proishodit-s-it-industriey-i-aytishnikami-rezultaty-oprosa-biblioteki-programmista-2022-03-23)». По версиям респондентов (более 700) IT-отрасль ждала волна сокращений, массовая релокация, наплыв стартапов и трудности с заменой железа и ПО на отечественные аналоги.

Общий прогноз звучал так: __«Слишком много переменных, прогнозы от неутешительных до удовлетворительных»

__Насколько оправдался этот прогноз? Как изменилась ваша жизнь за последние полгода? 

️ [Пройти опрос](https://docs.google.com/forms/d/e/1FAIpQLScQBuG548fKUStfNHhyUg2ChQHMNBhLXJwZM7YwralN3iahbA/viewform)",4275,0,0,goproglib
2919,2022-08-27 15:55:36+00:00,"Любопытная история об использовании Go для управления радио 3Sixty.

[Читать](https://appliedgo.net/auxin/)",4621,4,0,goproglib
2918,2022-08-26 19:41:08+00:00,"**Разработчик из команды Ozon делится опытом перехода с C# на Go**

В статье он рассказывает свои впечатления от Go, о некоторых различиях между языками, а также делится опытом поиска работы на новом языке.

[Читать](https://habr.com/ru/company/ozontech/blog/684422/)",4930,31,2,goproglib
2917,2022-08-26 15:00:14+00:00,"Weekend Offer в команды Почты и Облака Mail.ru от VK — это возможность проверить себя, пообщаться с интервьюерами крупных команд, получить представление о своих знаниях и навыках в короткий срок, синхронизироваться с рынком труда, узнать о работе в команде VK и получить оффер всего за одни выходные. Ждут именно вас: подавайте заявку до 2 сентября.
 
[Зарегистрироваться](https://vk.cc/cfRe6U)",4593,9,0,goproglib
2916,2022-08-25 22:04:27+00:00,"Как не следует использовать Go-роутер: мнение [Axel Wagner](https://twitter.com/themerovius).

[Читать](https://blog.merovius.de/posts/2017-06-18-how-not-to-use-an-http-router/)",5664,10,1,goproglib
2914,2022-08-24 15:59:38+00:00,"Как насчёт провести расслабленную субботу и получить оффер в Ozon Tech за 1 день?
Ozon Tech ищет Go-разработчиков (Middle и Senior). Поэтому ребята 10 сентября устраивают Here we Go — событие, совмещающее финальные собеседования и субботний чилл. Здесь вас ждет квест по офису с призами, пивная йога, выступление стендап комика, фуршет и диджей.
Чтобы туда попасть, нужно пройти несколько этапов:

1) [Подать заявку
](https://bit.ly/3pFiDM4)2) Успешно пройти предварительное интервью
3) Прийти на финальное собеседование 10 сентября.

[**Relax and get offer**](https://bit.ly/3pFiDM4)",4552,24,8,goproglib
2913,2022-08-24 07:43:16+00:00,"Почему не так просто писать конкурентный код на Go? Объяснение на примерах.

[Читать](https://blog.devgenius.io/concurrency-in-go-is-hard-57500304650)",5066,22,1,goproglib
2911,2022-08-23 13:23:16+00:00,"**Как построить карьеру в IT и не выгореть? А что вообще происходит в индустрии?**

Об этом пишет [Outlines Tech ](https://t.me/outlines_tech)— это тг-канал одноименной IT-компании, где эксперты делятся лайфхаками, новостями и личным опытом.

Подборка постов:
[Отделения будущего с Face ID: что такое «умный» банковский офис
](https://t.me/outlines_tech/203)
[Лайфхаки по контролю задач в условиях неопределённости](https://t.me/outlines_tech/172)

[Как IT-специалисту составить резюме и не облажаться](https://t.me/outlines_tech/179)

[Что делать, если работа раздражает, а силы на исходе](https://t.me/outlines_tech/47)

[Как отказаться от работы мечты и стать счастливее: история тестировщика](https://t.me/outlines_tech/139)

А ещё в Outlines Tech найдете классные вакансии! Подписывайтесь: @outlines_tech",4309,2,0,goproglib
2910,2022-08-23 08:18:21+00:00,"Опыт прохождения собеседований на позиции middle/senior Go-разработчика.

[Читать](https://habr.com/ru/post/683920/)",4953,13,1,goproglib
2909,2022-08-22 18:40:34+00:00,"Фильтр Блума: подробное объяснение и реализация на Go.

[Читать](https://programmer.group/explain-the-principle-and-implementation-of-bloom-filter-in-detail.html)",4880,7,0,goproglib
2907,2022-08-21 07:32:08+00:00,"Разработка простого бота на Go для автоматизации задач по взаимодействию с GitHub.

[Читать](https://devops.com/creating-automated-github-bots-in-go/)",5067,17,2,goproglib
2905,2022-08-19 05:36:52+00:00,"Быстрое введение в теги сборки в Go от Ardan Labs.

[Смотреть](https://youtu.be/vQ8GJDwBdos)",7027,18,0,goproglib
2903,2022-08-18 06:58:41+00:00,"Бесплатный онлайн-сервис, который позволяет создавать готовый каркас кодовой базы для JSON API или веб-приложения на Go. На текущий момент проект Autostrada находится в стадии открытого бета-тестирования и активной разработки.

[Подробнее](https://autostrada.dev/)",5378,16,0,goproglib
2902,2022-08-17 15:00:07+00:00,"[​](https://telegra.ph/file/c4b8a05c24505f4e4b3fd.jpg)Скоро сентябрь, и кое-кто даже ностальгирует по школе. Но только не разработчики — они и так учатся всю жизнь. 

Вы — Junior и Middle-разработчик? Тогда предлагаем фундаментальную прокачку на курсе «Алгоритмы и структуры данных для разработчиков» от Skillbox. 

️ Вы научитесь реализовывать базовые алгоритмы на массивах и разные виды алгоритмов бинарного поиска. 

️ Познакомитесь с принципами построения хэш-таблиц и способами решения проблемы коллизий хэш-функций.

️ Научитесь работать со связными списками, очередями, стэками, двусторонними очередями (деками), кучами, бинарными, B-, R- и суффиксными деревьями, различными видами графов.

️ Сможете реализовывать алгоритмы сортировки SelectionSort, QuickSort и MergeSort, создавать и применять рекурсивные и жадные алгоритмы.

️ Научитесь оценивать сложность различных типов алгоритмов по времени и памяти. 

️ Сможете оценивать программный код и находить способы его оптимизации и ускорения.

Интересно? Переходите по ссылке, чтобы узнать подробности: https://clc.to/IsmJlQ",4528,28,0,goproglib
2901,2022-08-17 12:00:28+00:00,"«Это то, что меняет правила игры для приложений с большим объемом памяти», — говорит Команда Weaviate об опыте использования GOMEMLIMIT.

[Читать](https://weaviate.io/blog/2022/08/GOMEMLIMIT-a-Game-Changer-for-High-Memory-Applications.html)",4425,14,0,goproglib
2900,2022-08-17 09:01:38+00:00,"Скоро сентябрь, и кое-кто даже ностальгирует по школе. Но только не разработчики — они и так учатся всю жизнь. 

Вы — Junior и Middle-разработчик? Тогда предлагаем фундаментальную прокачку на курсе «Алгоритмы и структуры данных для разработчиков» от Skillbox. 

️ Вы научитесь реализовывать базовые алгоритмы на массивах и разные виды алгоритмов бинарного поиска. 

️ Познакомитесь с принципами построения хэш-таблиц и способами решения проблемы коллизий хэш-функций.

️ Научитесь работать со связными списками, очередями, стэками, двусторонними очередями (деками), кучами, бинарными, B-, R- и суффиксными деревьями, различными видами графов.

️ Сможете реализовывать алгоритмы сортировки SelectionSort, QuickSort и MergeSort, создавать и применять рекурсивные и жадные алгоритмы.

️ Научитесь оценивать сложность различных типов алгоритмов по времени и памяти. 

️ Сможете оценивать программный код и находить способы его оптимизации и ускорения.

Интересно? Переходите по ссылке, чтобы узнать подробности: https://clc.to/IsmJlQ",4305,26,0,goproglib
2898,2022-08-17 05:45:09+00:00,"**Как структурировать проект на Go

**Автор статьи ещё в 2020 году освещал данную тему, но с акцентом на CLI-проекты. Этот материал больше относится к бэкэнд-сервисам.

[Читать](https://madflojo.medium.com/how-to-structure-a-golang-project-aad7095d70a)",4927,2,0,goproglib
2896,2022-08-16 07:19:30+00:00,"Обзор highload паттернов с реализацией на Go и описанием достоинств/недостатков.

[Читать](https://habr.com/ru/post/682618/)",6129,21,0,goproglib
2895,2022-08-15 18:00:12+00:00,"Абстрагирование веб-библиотек в Go-приложениях: опыт команды PicPay.

[Читать](https://medium.com/inside-picpay/abstracting-web-libraries-in-go-applications-166feeaf6aff)",4955,0,0,goproglib
2893,2022-08-15 12:24:33+00:00,"[​](https://telegra.ph/file/1e93e368945eae9b6e9fa.jpg)️ **Лучшие стратегии по работе с РСУБД: индексы, транзакции и уровни изоляции**

В какой-то «идеальной» базе данных реализованы почти все хорошие стратегии, которые вы когда-либо могли придумать. В этой статье делимся лучшими практиками по работе с РСУБД.

 [Основной сайт](https://proglib.io/sh/owGkKx4AbP)
 [Зеркало](https://proglib.tech/p/luchshie-strategii-po-rabote-s-rsubd-indeksy-tranzakcii-i-urovni-izolyacii-2022-08-15)",4331,6,0,goproglib
2892,2022-08-15 11:01:53+00:00,"Пошаговая разработка простого Go-приложения для соревнований, основанного на веб-сокетах, sync.Map и широковещательной рассылке.

[Читать](https://betterprogramming.pub/build-basic-real-time-competition-app-with-go-96c2ca0d35bf)",5140,7,0,goproglib
2891,2022-08-14 20:30:01+00:00,"Использование SQLite в Go на примере Telegram-бота.

[Смотреть](https://youtu.be/rrDtiKKO_mc)",4942,14,0,goproglib
2890,2022-08-14 19:29:08+00:00," **goyave** — фреймворк для разработки веб-приложений, ориентированный на REST API и призванный упростить процесс разработки.

[Репозиторий](https://github.com/go-goyave/goyave)",4768,14,0,goproglib
2889,2022-08-13 21:49:05+00:00," **Go Get Podcast**

Кстати, тут Николай Тузов (разработчик в Lamoda), Глеб Яльчик (техдир Gaijin) и другие разработчики пилят подкаст о Go. Вот два актуальных выпуска (ссылки на подкаст-площадки внутри):

 [Почему Go хороший? Почему Go плохой?](https://gogetpodcast.ru/post/2022/07/29/%D0%B2%D1%8B%D0%BF%D1%83%D1%81%D0%BA-2-%D0%BF%D0%BE%D1%87%D0%B5%D0%BC%D1%83-go-%D1%85%D0%BE%D1%80%D0%BE%D1%88%D0%B8%D0%B8-%D0%BF%D0%BE%D1%87%D0%B5%D0%BC%D1%83-go-%D0%BF%D0%BB%D0%BE%D1%85%D0%BE%D0%B8/) 
 [GameDev в Go](https://gogetpodcast.ru/post/2022/08/13/%D0%B2%D1%8B%D0%BF%D1%83%D1%81%D0%BA-3-gamedev-%D0%B2-go/)",4997,17,0,goproglib
2888,2022-08-13 17:23:31+00:00,"Что не так с обработчиками HTTP по умолчанию в Go? Рассуждает Preslav Rachev.

[Читать](https://preslav.me/2022/08/09/i-dont-like-golang-default-http-handlers/)",4829,4,0,goproglib
2887,2022-08-13 14:39:29+00:00,"Советы по обработке ошибок в приложениях на Go с примерами.

[Читать](https://medium.com/@self.bordin/golang-treating-errors-the-right-way-f503f00fd55)",5056,6,0,goproglib
2886,2022-08-12 17:10:13+00:00,"Тут старый добрый regex matcher Роба Пайка (написан на C) небезызвестный Ben Hoyt решил переписать на Go. Узнайте технические детали и результаты тестов производительности.

[Подробнее](https://benhoyt.com/writings/rob-pike-regex/)",4726,11,0,goproglib
2885,2022-08-11 22:57:38+00:00,"Работа с `embed` на практике: краткое видеоруководство от Ardan Labs.

[Смотреть](https://youtu.be/2cc4irG6bDA)",4928,6,3,goproglib
2884,2022-08-11 19:08:49+00:00,"[​](https://telegra.ph/file/e8680502df840604f6bee.jpg) **Как правильно писать сообщения коммитов в GIT, чтобы всем было хорошо**

Правильно написанные сообщения к коммитам в Git помогают сделать проект с открытым или закрытым исходным кодом удобным для дальнейшей доработки и поддержки. В этой статье вы познакомитесь с различными стратегиями написания хороших сообщений и их использования для оптимизации процесса разработки.

 [Основной сайт](https://proglib.io/sh/0FZq2jGSnz)
 [Зеркало](https://proglib.tech/p/kak-pravilno-pisat-soobshcheniya-kommitov-v-git-chtoby-vsem-bylo-horosho-2022-08-11)",4165,9,0,goproglib
2883,2022-08-11 06:15:22+00:00,"Поиск и устранение проблем с производительностью в веб-приложении на Go + SQLite.

[Читать](https://mtlynch.io/notes/picoshare-perf/)",4757,9,17,goproglib
2882,2022-08-10 19:34:55+00:00,"Обзор основных концепций функционального программирования в Go.

[Читать](https://betterprogramming.pub/investigate-functional-programming-concepts-in-go-1dada09bc913)",4950,10,0,goproglib
2881,2022-08-09 21:26:26+00:00,"Практика использования паттерна “**fat service” **для разработки веб-приложений и API на Go, который представляет собой смесь между [service object](https://mitchel.me/2017/django-service-objects/) и [fat model](https://olegkrivtsov.github.io/using-zend-framework-3-book/html/en/Model_View_Controller/Skinny_Controllers__Fat_Models__Simple_Views.html).

[Подробнее](https://www.alexedwards.net/blog/the-fat-service-pattern)",4989,10,0,goproglib
2880,2022-08-09 05:38:40+00:00,"Коллекция скринкастов, демонстрирующих различные инструменты и методы использования TDD в Go.

[Смотреть](https://youtube.com/playlist?list=PLtFquUj7IL8VpSL98BTvl3lnD8HS4NGlA)",5028,8,1,goproglib
2879,2022-08-08 18:30:02+00:00,"Пример обработки 60k одновременных HTTP-запросов на Raspberry Pi с использованием Go.

[Читать](https://waclawthedev.medium.com/golang-handling-tens-of-thousands-of-simultaneous-http-requests-even-on-raspberry-pi-5115ca9b152d)",5416,23,10,goproglib
2878,2022-08-08 17:02:00+00:00,"#news

Традиционный выпуск недельных новостей из мира Go-разработки:

— Разбор атаки [ParseThru](https://t.me/goproglib/2870) 
— [GoLand Roadmap 2022.3](https://blog.jetbrains.com/go/2022/08/04/goland-roadmap-2022-3/)
— Анонс [gitea 1.17](https://blog.gitea.io/2022/07/gitea-1.17.0-is-released/)
— Релиз [yaegi 0.14.1](https://github.com/traefik/yaegi/releases/tag/v0.14.1)
— Релиз [listmonk 2.2](https://github.com/knadh/listmonk/releases/tag/v2.2.0) 
— Релиз [progressbar 3.9](https://github.com/schollz/progressbar/releases/tag/v3.9.0) 
— Релиз [dig 1.15](https://github.com/uber-go/dig/releases/tag/v1.15.0) 
— Релиз [fiber 2.36](https://github.com/gofiber/fiber/releases/tag/v2.36.0)
— Релиз [muffet 2.6](https://github.com/raviqqe/muffet/releases/tag/v2.6.0)",4666,7,0,goproglib
2877,2022-08-08 10:41:08+00:00,"Библиотека программиста продолжает серию вебинаров по темам, интересным для наших подписчиков.

 Сегодня в 19:00 стартует трансляция вебинара, посвященного актуальным навыкам в профессии Data Science.

Темы вебинара:
— Что происходит сейчас в направлении Data Science - перспективы и доход;
— Какие навыки должен иметь успешный дата-сайентист;
— Почему математика нужна в DS и как она используется;
— Посмотрим на практике работу дата-сайентиста.

Спикер: Артур Сапрыкин — Data Scientist, предприниматель, исследователь ML/DL, ex-data scientist ПАО «Мегафон».

 Регистрация на вебинар: https://proglib.io/w/7484fd79",4517,3,0,goproglib
2876,2022-08-07 16:00:09+00:00,"Руководство по управлению секретами в Go-приложений с использованием [HashiCorp Vault](https://www.vaultproject.io/docs/what-is-vault).

[Читать](https://www.twilio.com/blog/manage-go-application-secrets-using-vault)",5003,19,0,goproglib
2874,2022-08-07 12:00:08+00:00,"Разбор четырех различных методов организации доступа к базе данных на Go.

[Читать](https://www.alexedwards.net/blog/organising-database-access)",4755,22,0,goproglib
2873,2022-08-07 09:00:13+00:00,"Пошаговое руководство по использованию Go, AWS Lambda, DynamoDB и API Gateway для разработки бессерверного сокращателя URL-адресов.

[Читать](https://dev.to/abhirockzz/build-a-serverless-url-shortener-with-go-10i2)",4727,7,1,goproglib
2872,2022-08-07 07:19:34+00:00,А нас тут уже 10k ,4204,134,3,goproglib
2870,2022-08-07 07:01:59+00:00,"#news #security 

**Исследователи из Oxeye обнаружили новую уязвимость, позволяющую получить несанкционированный доступ к приложениям на Go**

Go использует библиотеку `net/url` для анализа URL-адресов и до версии 1.17 рассматривал точку с запятой в части запроса как допустимый разделитель. 

Однако в версии 1.17 точки с запятой рассматриваются как ошибка, и один из методов, отвечающих за получение проанализированной строки запроса, игнорирует возвращаемую ошибку.

Таким образом, в определённых условиях это позволяет обходить проверки, основанные на параметрах HTTP-запроса.

[Подробнее](https://www.oxeye.io/blog/golang-parameter-smuggling-attack)",4424,11,0,goproglib
2869,2022-08-06 20:41:24+00:00," Простой сервер от Gotify для обмена сообщениями в режиме реального времени через веб-сокеты. 

[Репозиторий](https://github.com/gotify/server)",4665,13,0,goproglib
2868,2022-08-06 09:19:51+00:00,"Разработка аналога SSH-сервера на Go, который умеет только исполнять команды, но не использует шифрование.

[Читать](https://jvns.ca/blog/2022/07/28/toy-remote-login-server/)",4560,7,11,goproglib
2867,2022-08-05 18:00:04+00:00,"**Интервью с разработчиком фреймворка **[**Bud**](https://t.me/goproglib/2668) **Мэттом Мюллером**

Тот самый фреймворк, который использует лучшее из Go и Svelte, чтобы помочь разработчикам сосредоточиться на решении реальных проблем, не беспокоясь о безопасности типов, производительности или деплое.

[Читать](https://goingwithgo.com/2022/08/matt-mueller-building-modern-web-applications-faster-with-bud/)",4565,0,3,goproglib
2866,2022-08-05 15:00:07+00:00,"Go разработчик проекта быстрой доставки СберМаркета 

Быстрая доставка - это молодое направление для СберМаркета. Цель проекта: доставить заказ из магазина как можно быстрее. Много бизнес-логики внутри и тем интересней. Здесь Big Data: нужно просуммировать, просчитать — большое поле для деятельности!

**Стек: Golang, PostgreSQL, Redis, Kafka, React, CI/CD, Kubernetes, ClickHouse**

Что нужно будет делать:

- придумывать алгоритмы и внедрять их;
- улучшать геотрекинг;
- повышать наблюдаемость сервисов;
- рассчитывать срок доставки заказа и помогать выводить наших партнеров в смены;
- реализовывать механизм гибких формул для расчетов прайсеров;
- обеспечивать покрытие кода модульными и интеграционными тестами;
- проводить Code review коллег и вырабатывать оптимальные решения.

Подробнее про вакансию по ссылке https://bit.ly/3JaFE28

Пиши Юле [@shmalkina](https://t.me/shmalkina), если готов пообщаться по вакансии ",4480,0,4,goproglib
2864,2022-08-05 11:51:17+00:00,"#tools 

 **ImHex** — любопытный hex-редактор с множеством расширенных функций, которые часто можно найти только в платных приложениях. Работает на Windows, macOS и Linux.

 [Подробнее](https://imhex.werwolv.net/)",3732,13,0,goproglib
2862,2022-08-04 21:08:01+00:00,"Обзор простых методов «экономии» памяти в Go. 

[Читать](https://www.ribice.ba/golang-memory-savings/)",4752,19,0,goproglib
2861,2022-08-04 19:22:48+00:00,"Практика работы с gRPC, HTTPGateway, buf и Go от Артура Карапетова (YouTube-канал The Art of Development).

[Смотреть](https://www.youtube.com/watch?v=Yf7ZZdrQ7Bc&t=145s)",4944,14,0,goproglib
2859,2022-08-03 20:50:55+00:00,"Линтинг c golangci-lint в действии: установка, настройка, использование, интеграция в pre-commit хуки и CI workflow.

[Читать](https://freshman.tech/linting-golang/)",4821,23,1,goproglib
2858,2022-08-03 18:00:13+00:00,"Видеоруководство по рефакторингу юнит-тестов в процессе разработки на основе TDD.

[Смотреть](https://youtu.be/9NePBQTG2Fo)",4700,8,2,goproglib
2856,2022-08-02 21:35:04+00:00,"Гайд по разработке GraphQL-сервера на Go с использованием go-graphql.

[Читать](https://www.apollographql.com/blog/graphql/golang/building-a-graphql-server-in-go-with-go-graphql/)",5029,14,0,goproglib
2855,2022-08-02 20:11:32+00:00,"[​](https://telegra.ph/file/3360d9d8d7fe41c545aaf.jpg)#news

Традиционный выпуск недельных новостей из мира Go-разработки:

— Анонс [Go 1.19](https://go.dev/doc/go1.19) 
— Анонс [GoLand 2022.2](https://blog.jetbrains.com/go/2022/07/28/goland-2022-2-is-here/)
— Анонс [Go 1.18.5 и 1.17.13](https://groups.google.com/g/golang-announce/c/YqYYG87xB10) (включают исправления безопасности encoding/gob and math/big)[
](https://t.me/goproglib/2822)— Релиз [modernc/sqlite 1.18.0](https://pkg.go.dev/modernc.org/sqlite@v1.18.0)
— Релиз [Go Micro 4.8](https://github.com/asim/go-micro/releases/tag/v4.8.0)
— Релиз [Sonic 1.3.4](https://github.com/bytedance/sonic/releases/tag/v1.3.4) 
— Релиз [Sarama 1.35](https://github.com/Shopify/sarama/releases/tag/v1.35.0) 
— Релиз [Bud 0.2.3](https://github.com/livebud/bud/releases/tag/v0.2.3)
— Релиз [chromedp 0.8.3](https://github.com/chromedp/chromedp/releases/tag/v0.8.3) 
— Релиз [aws-lambda-go 1.34.1](https://github.com/aws/aws-lambda-go/releases/tag/v1.34.1)
— Релиз [Milvus 2.1 ](https://github.com/milvus-io/milvus/releases/tag/v2.1.0)
— Релиз [Buf 1.7](https://github.com/bufbuild/buf/releases/tag/v1.7.0)
— Релиз [fq 0.0.8](https://github.com/wader/fq/releases/tag/v0.0.8)
— Релиз [imgproxy 3.7.1](https://github.com/imgproxy/imgproxy/releases/tag/v3.7.1)
— Релиз [Chaos Mesh 2.3](https://github.com/chaos-mesh/chaos-mesh/releases/tag/v2.3.0)
— Релиз [gobackup 1.1](https://github.com/huacnlee/gobackup/releases/tag/v1.1.0)",4558,19,0,goproglib
2854,2022-08-02 11:44:23+00:00,"Артем Чаадаев, Go-разработчик в МТС Digital, рассматривает распространенные примеры использования конкурентного кода в Go на основе личного опыта.

[Читать](https://habr.com/ru/company/ru_mts/blog/680324/)",5361,14,0,goproglib
2853,2022-08-01 20:36:49+00:00,"Пошаговая реализация простого веб-сервиса для создания и чтения самоуничтожающихся секретов на Go.

[Читать](https://dusted.codes/building-a-secure-note-sharing-service-in-go)",4882,12,0,goproglib
2852,2022-08-01 17:13:58+00:00,"#news

Представлены релизы Go 1.18.5 и 1.17.13, включающие исправления безопасности encoding/gob and math/big (CVE-2022-32189).

[Подробнее](https://groups.google.com/g/golang-announce/c/YqYYG87xB10)",4586,9,0,goproglib
2851,2022-07-31 20:50:50+00:00,"CLI пинг-понг в качестве первого проекта на Go — отличный способ узнать основные концепции языка.

[Часть 1](https://earthly.dev/blog/pongo/)",5164,15,1,goproglib
2850,2022-07-31 15:04:20+00:00,"[​](https://telegra.ph/file/30c8cd0f0e4e7445f5c3c.jpg) **Горутины: что такое и как работают
**
Легковесная, потребляет мало памяти, имеет низкую задержку — знакомимся с горутиной.

https://proglib.io/sh/5QPiHEGhx3",4375,13,0,goproglib
2849,2022-07-31 11:00:10+00:00,"Broadcast Channels в Go: основные принципы и примеры из практики.

[Читать](https://medium.com/@leonardo5621_66451/how-to-broadcast-messages-in-go-using-channels-b68f42bdf32e)",4887,8,0,goproglib
2848,2022-07-31 07:17:55+00:00,"Пошаговое руководство для начинающих по разработке и тестированию REST API на Go с использованием Gorilla Mux и PostgreSQL.

[Читать](https://semaphoreci.com/community/tutorials/building-and-testing-a-rest-api-in-go-with-gorilla-mux-and-postgresql)",5113,19,0,goproglib
2847,2022-07-30 14:00:08+00:00,"На заметку Go-разработчикам, которые имеют дело с криптой и инвестициями.

[Читать](https://marianogappa.github.io/software/2022/07/27/10-gotchas-for-building-a-universal-crypto-candlestick-iterator-in-go/)",4667,7,0,goproglib
2846,2022-07-30 11:18:04+00:00,"Разбор основных аспектов, которые необходимо учитывать при написании конкурентного кода на Go.

[Читать](https://www.storj.io/blog/production-concurrency)",5014,16,0,goproglib
2845,2022-07-29 20:26:40+00:00,"Советы по расширению функциональности тегов структур в Go.

[Читать](https://medium.com/codex/extending-go-struct-tags-without-getting-too-dirty-8bf14cd61d1f)",5609,6,0,goproglib
2844,2022-07-29 17:10:13+00:00," HugoConf 2022 завершился — на YouTube уже доступны записи всех сессий.

[Подробнее](https://hugoconf.io/)",4477,9,0,goproglib
2843,2022-07-29 14:45:35+00:00,"В далеком 2015 году команда CockroachDB объясняла, почему Go был для них правильным выбором. Спустя семь лет все осталось по-прежнему и вот [почему](https://www.cockroachlabs.com/blog/why-go-was-the-right-choice-for-cockroachdb/).",4527,9,1,goproglib
2842,2022-07-28 19:07:28+00:00,"Простой пример бенчмаркинга Go-кода на примере двух алгоритмов сортировки.

[Читать](https://dev.to/jpoly1219/benchmarking-go-code-1k23)",5833,9,0,goproglib
2841,2022-07-28 16:06:27+00:00,"#news

Представлен официальный релиз GoLand 2022.2 

[Подробнее](https://blog.jetbrains.com/go/2022/07/28/goland-2022-2-is-here/)",4516,13,0,goproglib
2840,2022-07-27 19:48:15+00:00,"Пример объединения концепций нескольких паттернов для создания простой и гибкой структуры Go-сервиса.

[Читать](https://medium.com/@B1scuit/clean-services-in-go-63a7cc953841)",6038,14,0,goproglib
2839,2022-07-27 18:08:58+00:00,"Если вас заинтересовала библиотека [Allure-Go](https://t.me/goproglib/2741), погрузиться в работу с ней можно с помощью нового материала.

[Читать](https://habr.com/ru/company/ozontech/blog/677690/)",4630,0,0,goproglib
2838,2022-07-26 20:10:01+00:00,"Kubernetes IaC на Go: глубокое погружение в библиотеку cdk8s 

 [Начало работы с cdk8s](https://betterprogramming.pub/write-your-kubernetes-infrastructure-as-go-code-getting-started-with-cdk8s-989725f8af73)
 [cdk8s-plus в действии](https://betterprogramming.pub/kubernetes-infrastructure-as-code-for-go-developers-cdk8s-plus-in-action-ee3eb2203745)
 [Использование Kubernetes Custom Resource Definitions с cdk8s](https://betterprogramming.pub/write-your-kubernetes-infrastructure-as-go-code-using-custom-resource-definitions-with-cdk8s-5d9500693e02)",6026,7,2,goproglib
2837,2022-07-26 19:41:29+00:00,"#news

Традиционный выпуск недельных новостей из мира Go-разработки:

— Стив Франсия покидает должность руководителя Go в Google. И [вот почему](https://t.me/goproglib/2831)
— Анонс [VSCodeGo v0.35.0
](https://t.me/goproglib/2822)— Релиз [plow 1.3](https://github.com/six-ddc/plow/releases/tag/v1.3.0)
— Релиз [logrus 1.9](https://github.com/sirupsen/logrus/releases/tag/v1.9.0) 
— Релиз [rqlite 7.6](https://github.com/rqlite/rqlite/releases/tag/v7.6.0)
— Релиз [tproxy 0.5](https://github.com/kevwan/tproxy/releases/tag/v0.5.0)
— Релиз [eBPF 0.9.1](https://github.com/cilium/ebpf/releases/tag/v0.9.1)
— Релиз [pg_timetable 4.8](https://github.com/cybertec-postgresql/pg_timetable/releases/tag/v4.8.0)
— Релиз [benthos 4.4.1](https://github.com/benthosdev/benthos/releases/tag/v4.4.1)",4570,5,0,goproglib
2836,2022-07-25 16:52:25+00:00,"Базовое руководство по использованию пакета `migrate` для миграции базы данных на Go:

 [Часть 1. Миграция на примере PostgreSQL](https://thedevelopercafe.com/articles/database-migrations-in-go-using-migrate-package-5735cf056231)",5058,15,0,goproglib
2835,2022-07-24 20:35:35+00:00,"Разбор практического кейса завершения Go-приложения с использованием пакетов `context` и `os/signal`.

[Читать](https://medium.com/@leonardo5621_66451/how-to-shutdown-a-golang-application-in-a-cleaner-way-e9307b0ea505)",5972,8,0,goproglib
2834,2022-07-24 18:47:00+00:00,"**Go Time: Go для новичков**

Этот выпуск подкаста предназначен для всех: кто еще не начал использовать Go, кто интересуется или начал изучать Go, но хочет выйти за рамки основ. 

Ведущие отвечают на вопросы о том, как изучать Go, приводят доступные ресурсы и векторы дальнейшего развития.",4641,12,0,goproglib
2833,2022-07-24 17:47:51+00:00,"Преобразование байтов в VarInt и VarLong: примеры + юнит-тесты на Go.

[Читать](https://habr.com/ru/post/677642/)",4524,4,0,goproglib
2832,2022-07-23 18:30:01+00:00,"Разработчик [библиотеки](https://github.com/esimov/pigo) для распознавания лиц размышляет о сильных сторонах Go в области «творческого программирования». Никуда от этого не денешься, но варианты использования Go со временем продолжают расширяться в стиле Python .

[Читать](https://itnext.io/exploring-the-go-language-as-a-medium-for-creative-programming-ef0fd4372b61)",4681,18,0,goproglib
2831,2022-07-23 16:30:03+00:00,"**Стив Франсия покидает должность руководителя Go в Google**

Стив — очень продуктивный разработчик, который много сделал для Go, будь то работа в основной команде или разработка Hugo и Cobra. В статье вы увидите размышления Стива о времени, проведенном с командой Go и сообществом Go в целом. Безусловно, это стоит прочитать.

[Читать](https://spf13.com/p/spf13-google/)",4865,37,2,goproglib
2830,2022-07-23 13:39:17+00:00,"Настройка Neovim для разработки на Go с использованием плагинов Lua и `init.lua`. 

[Читать](https://habr.com/ru/post/678298/)",4925,14,0,goproglib
2829,2022-07-22 20:35:37+00:00,"Реализация простого клона jq на Go + разбор основ профилирования памяти в Go.

[Читать](https://notes.eatonphil.com/implementing-a-jq-clone-in-go.html)",4715,7,1,goproglib
2828,2022-07-22 10:13:56+00:00,"**Первый Институт с реальным фокусом на продукте

**В Йошкар-Оле запустился Институт iSpring с бакалавриатом по 4 специальностям: программирование, маркетинг, управление продуктом, и дизайн в IT. Студентов набирают по принципу формирования рабочих команд в IT-компаниях — смотрят на когнитивный потенциал, работоспособность и мотивацию — и с первого дня погружают в рынок. Цель — не просто научить талантливо кодить, рисовать и продвигать, а привить понятие культуры продукта и выпустить спецов, которые быстро интегрируются в любую бизнес-команду и смогут работать над крутыми проектами на российский и глобальный рынок. 
Здесь студенты с первого курса работают с менторами из IT-компаний, проходят стажировки и объединяются для создания собственных стартапов. Уже на 2-м курсе всем помогают найти part-time job, чтобы после 4-го выпуститься с большим портфолио и навыками уровня Pro. 

Подробности [на сайте Института iSpring](https://ispring.institute/software-engineering?utm_source=kate&utm_medium=partner&utm_campaign=goproglib_tg&utm_term=bachelor_engineering)",4759,6,0,goproglib
2827,2022-07-21 19:04:40+00:00,"Обзор наиболее полезных функций GoLand от команды JetBrains.

[Читать](https://blog.jetbrains.com/go/2022/07/21/hidden-gems-in-goland/)",4772,25,0,goproglib
2825,2022-07-20 16:02:55+00:00,"Разбираемся на практике с пакетом [sync/singleflight](https://pkg.go.dev/golang.org/x/sync/singleflight), который предоставляет механизм подавления повторяющихся вызовов.

[Читать](https://habr.com/ru/post/677444/)",4998,6,3,goproglib
2824,2022-07-19 20:24:58+00:00,"Шпаргалка по Go для начинающих с примерами из [Go-тура](https://go.dev/tour/).

[Репозиторий](https://github.com/a8m/golang-cheat-sheet)",5330,29,0,goproglib
2823,2022-07-19 06:00:25+00:00,"Подробная реализация дерева отрезков (Segment Tree) на Go.

[Читать](https://rtoch.com/posts/golang-segment-tree/)",5069,4,0,goproglib
2822,2022-07-18 20:50:12+00:00,"[​](https://telegra.ph/file/e0168d5beaab1635f2080.mp4)#news 

 **Представлен VSCodeGo v0.35.0**

Подсказки показывают дополнительную информацию прямо в вашем коде — предполагаемые типы, имена полей/параметров и многое другое. Настройте параметры ""go.inlayHints.*"".

[Примечания к выпуску](https://github.com/golang/vscode-go/releases/tag/v0.35.0)",5044,35,7,goproglib
2820,2022-07-18 19:52:14+00:00,"[Это](https://medium.com/@Aaron0928/amazon-posts-article-on-rust-go-tech-lead-dont-pull-the-plug-on-us-2dd542c1f026) когда-нибудь закончится? 

В комментариях к статье некто Avraam J. Dectis решил сменить тему ‍️",4280,2,1,goproglib
2819,2022-07-18 18:30:01+00:00,"Стала доступна запись второго митапа, посвященного тестированию на Go. Вот темы:

— Сергей Макаров (Ozon): «Go, Allure и HTTP, или Как мило тестировать HTTP-сервисы на Go»
— Василий Юдин (Авито): «Как подружить QA и разработку через применение практики хранения тестов в коде»
— «Профессия QA Atomation»: круглый стол со спикерами из Ozon, Авито, Skyeng и Mirantis

[Смотреть](https://youtu.be/oXjK672Yrbs)",4777,15,0,goproglib
2817,2022-07-18 14:30:01+00:00,В серии статей о предотвращении утечек памяти в Go обновление  https://t.me/goproglib/2801,4332,6,0,goproglib
2816,2022-07-18 11:31:11+00:00,"Главное преимущество летнего поиска работы — низкий уровень конкуренции. К тому же, сейчас на IT-рынке большая нехватка кадров и множество открытых вакансий. 

Чтобы наши читатели не отвлекались на нерелевантные предложения, мы сделали ряд тематических телеграм-каналов с вакансиями по отдельным языкам ([Python](https://t.me/pydevjob), [Java](https://t.me/javadevjob), [Go](https://t.me/godevjob), [C](https://t.me/csharpdevjob)#, [C](https://t.me/cppdevjob)++, [PHP](https://t.me/phpdevjob), [JavaScript](https://t.me/jsdevjob)) и различным направлениям: [тестированию](https://t.me/testerrjob), [мобильной разработке](https://t.me/mobiledevjob),  [информационной безопасности и](https://t.me/hackdevjob) [Data Science](https://t.me/datajob).

Присоединяйтесь! Будем рады помочь найти вам лучшую работу.",4317,12,0,goproglib
2815,2022-07-17 19:50:53+00:00,"[​](https://telegra.ph/file/2437c9903e6de0916c28c.jpg)** lensm **— инструмент для одновременного просмотра сборки и исходного кода Go.

[Репозиторий](https://github.com/loov/lensm)",4947,60,0,goproglib
2814,2022-07-17 07:04:49+00:00,"Go-библиотека marshmallow: предпосылки создания и практические кейсы, которые позволили сократить 70% затрат на парсинг JSON.

[Читать](https://medium.com/perimeterx/boosting-up-json-performance-of-unstructured-structs-in-go-5c2f2a017148)",4794,12,0,goproglib
2813,2022-07-16 20:22:20+00:00,"#news

Традиционный выпуск недельных новостей из мира Go-разработки:

— Представлены [Go 1.18.4, Go 1.17.12](https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE) и [Go 1.19 Release Candidate 2](https://groups.google.com/g/golang-announce/c/czoG5UpT0EU) 
— Что нового в Go 1.19 [EN](https://blog.carlmjohnson.net/post/2022/golang-119-new-features/) & [RU](https://habr.com/ru/company/ozontech/blog/674190/)[
](https://blog.jetbrains.com/go/2022/07/07/goland-2022-2-goes-beta/)— Релиз [ent 0.11](https://github.com/ent/ent/releases/tag/v0.11.0)
— Релиз [afero 1.9](https://github.com/spf13/afero/releases/tag/v1.9.0)
— Релиз [croc 9.6](https://github.com/schollz/croc/releases/tag/v9.6.0)
— Релиз [usql 0.11](https://github.com/xo/usql/releases/tag/v0.11.0)
— Релиз [kratos 2.4](https://github.com/go-kratos/kratos/releases/tag/v2.4.0)
— Релиз [ferretDB 0.5](https://github.com/FerretDB/FerretDB/releases/tag/v0.5.0)
— Релиз [caddy 2.5.2 ](https://github.com/caddyserver/caddy/releases/tag/v2.5.2)
— Релиз [frp 0.44](https://github.com/fatedier/frp/releases/tag/v0.44.0)
— Релиз [tproxy 0.4](https://github.com/kevwan/tproxy/releases/tag/v0.4.0)
— Релиз [gorse 0.4.5](https://github.com/gorse-io/gorse/releases/tag/v0.4.5)
— Релиз [PB 3.1](https://github.com/cheggaaa/pb/releases/tag/v3.1.0)",4505,15,0,goproglib
2812,2022-07-16 18:45:08+00:00,"Базовое руководство по работе с пакетом Validator, который реализует проверку значений для структур и отдельных полей на основе тегов.

[Читать](https://thedevelopercafe.com/articles/payload-validation-in-go-with-validator-626594a58cf6)",4595,7,1,goproglib
2811,2022-07-15 20:29:01+00:00,"**tproxy** — CLI-инструмент для проксирования и анализа TCP-соединений. Можно использовать для мониторинга подключений gRPC, пулов соединений MySQL и любых TCP-соединений на лету.

[Репозиторий](https://github.com/kevwan/tproxy)",4850,7,0,goproglib
2810,2022-07-15 20:03:29+00:00,"Go + WebAssembly снова в деле:

[gotemplate.io](https://gotemplate.io/)
[Что это?](https://gotemplate.io/what-is-this/)
[Как это работает?](https://gotemplate.io/how-does-this-work/)",4596,6,0,goproglib
2809,2022-07-15 11:36:34+00:00,"Нууу, [понеслась](https://habr.com/ru/post/676994/) ",4782,33,6,goproglib
2808,2022-07-14 20:28:54+00:00,"#tools 

 **gokey** — простой менеджер паролей на Go от Cloudflare, который не требует хранилища паролей. 

Вместо того, чтобы хранить ваши пароли в хранилище, он получает их «на лету» из мастер-пароля и предоставленной строки (например, URL-адрес ресурса). 

Таким образом, вам не нужно управлять, создавать резервные копии, синхронизировать хранилище паролей или доверять его управление третьей стороне, поскольку ваши пароли доступны немедленно в любом месте.

https://proglib.io/w/87e73b95",4412,10,4,goproglib
2807,2022-07-14 19:25:03+00:00,"**Серия собеседований на Middle Go разработчика с Сергеем Парамошкиным** (руководит центром разработки и автоматизации в МТС.Digital)

Вы увидите реальные вопросы, кейсы и задачи, а также узнаете, почему спрашивали именно эти вопросы и как лучше всего подготовиться к собеседованию.

[Сергей Парамошкин — Даниил](https://youtu.be/sZSNf5eVnRA) 
[Сергей Парамошкин — Дмитрий Болдин](https://youtu.be/W_ctQFFnzK0)",5535,16,1,goproglib
2806,2022-07-14 11:59:56+00:00,"В официальной документации новое руководство по сборщику мусора Go.

[Читать](https://go.dev/doc/gc-guide)",4925,21,1,goproglib
2805,2022-07-13 20:57:54+00:00,"Антон Киреев, техлид в Авито и бэкенд-разработчик с 11-летним опытом, рассказывает о работе Go с памятью.

[Читать](https://habr.com/ru/company/oleg-bunin/blog/676332/)",6540,25,0,goproglib
2804,2022-07-13 19:45:56+00:00,"[Mat Ryer](https://twitter.com/matryer), [Jaana Dogan](https://twitter.com/rakyll) и [Johnny Boursiquot](https://twitter.com/jboursiquot) на подкасте **Go Time** обсуждают инструменты, которые они используют каждый день для повышения продуктивности.",4545,4,0,goproglib
2803,2022-07-13 06:21:55+00:00,"#news 

Представлены [Go 1.18.4, Go 1.17.12](https://groups.google.com/g/golang-announce/c/nqrv9fbR0zE) и [Go 1.19 Release Candidate 2](https://groups.google.com/g/golang-announce/c/czoG5UpT0EU) .",4513,19,0,goproglib
2802,2022-07-12 20:25:21+00:00,"Distributed Message Streaming: работаем с [Nats](https://docs.nats.io/) в Go.

[Читать](https://medium.com/vlmedia-tech/distributed-message-streaming-in-golang-using-nats-jetstream-29f28be66dc6)",4759,9,1,goproglib
2801,2022-07-12 19:39:29+00:00,"Виталий Исаев, бэкенд-разработчик в компании МойОфис, описывает проблему повышенного потребления оперативной памяти Go-приложениями и советы по ее предотвращению.

[Часть 1. Ошибки бизнес-логики](https://habr.com/ru/company/ncloudtech/blog/675390/)
[Часть 2. Особенности рантайма](https://habr.com/ru/company/ncloudtech/blog/676960/)",4976,8,0,goproglib
2800,2022-07-12 18:17:19+00:00,"Go-библиотеки от CTO ScreebApp, основанные на дженериках: [do](https://github.com/samber/do), [lo](https://github.com/samber/lo) и [mo](https://github.com/samber/mo).",4658,9,0,goproglib
2799,2022-07-12 11:47:44+00:00,"Привет! На связи команда [Proglib.academy](https://proglib.academy/).

«Библиотека программиста» живет и развивается 8 лет, и сейчас, как ты, наверное, уже знаешь, мы расширили сферу своей деятельности — делаем онлайн-курсы Proglib.academy.

Мы обучаем всех желающих программированию с нуля, помогая получить необходимые навыки программирования для успешной карьеры. У нас есть уже несколько запущенных и успешно продающихся курсов, и мы хотим, чтобы их стало больше.

Мы готовы расширять нашу команду и открыли вакансию **Менеджера по продажам**.

— если ты давно хотел стать частью нашей команды, 
— если тема IT кажется тебе так же, как и нам, перспективной и вдохновляющей,
— если ты умеешь и любишь общаться с людьми,
— то, возможно, ты именно тот, кого мы ищем!

️ Все подробности можно узнать у нашего HR — Насти, bav@proglib.io

PS: если у вас есть знакомые продажники, просим вас скинуть им эту вакансию",4398,11,0,goproglib
2798,2022-07-11 17:54:25+00:00,"Пишем простое todo-приложение на Go с использованием AWS Lambda, API Gateway и DynamoDB.

[Читать](https://rtoch.com/posts/serverless-golang-with-lambda-and-dynamo/)",4704,8,0,goproglib
2797,2022-07-11 05:21:54+00:00,"Серия статей про создание CI-пайплайна для Go-библиотеки и CLI-приложения с использованием Dagger.

[Читать](https://dev.to/sagikazarmark/series/18776)",4638,3,0,goproglib
2796,2022-07-10 16:30:03+00:00,"Контейнеризация Go-приложения с использованием Docker: гайд для новичков.

[Читать](https://bartlomiejmika.com/post/2022/how-to-containerize-a-golang-app-with-docker-for-development-and-production/)",4975,10,0,goproglib
2795,2022-07-10 13:18:40+00:00,"#news

Традиционный выпуск недельных новостей из мира Go-разработки:

— Анонс [Go 1.19 Release Candidate 1](https://groups.google.com/g/golang-announce/c/Lu8ODY19HhA)
— Анонс [GoLand 2022.2 Beta
](https://blog.jetbrains.com/go/2022/07/07/goland-2022-2-goes-beta/)— Релиз [Miller 6.3 
](https://github.com/johnkerl/miller/releases/tag/v6.3.0)— Релиз [GoBGP 3.4
](https://github.com/osrg/gobgp/releases/tag/v3.4.0)— Релиз [OctoSQL 0.8
](https://github.com/cube2222/octosql/releases/tag/v0.8.0)— Релиз [go-junit-report 2.0
](https://github.com/jstemmer/go-junit-report/releases/tag/v2.0.0)— Релиз [s5cmd 2.0
](https://github.com/peak/s5cmd/releases/tag/v2.0.0)— Релиз [lo 1.25
](https://github.com/samber/lo/releases/tag/v1.25.0)— Релиз [Maddy 0.6.2](https://github.com/foxcpp/maddy/releases/tag/v0.6.2)
— Релиз [Delve 1.9](https://github.com/go-delve/delve/releases/tag/v1.9.0)
— Релиз [Slacker 0.1](https://github.com/shomali11/slacker/releases/tag/v0.1.0)",4488,14,0,goproglib
2794,2022-07-10 11:04:19+00:00,"**Подкаст «Мы обречены»: **Гениальный Go-разработчик из Узбекистана Влад Тен — пишет код, читает рэп",4354,46,0,goproglib
2793,2022-07-09 17:11:26+00:00," **PocketBase** — open source Go-инструмент, который компилируется в один переносимый бинарник и состоит из:

— встроенной базы данных SQLite + realtime subscriptions,
— встроенного управления файлами и пользователями,
— удобной панели администратора,
— и простого REST-API.

 [Сайт & демо](https://pocketbase.io/)
 [Репозиторий](https://github.com/pocketbase/pocketbase)",4053,26,0,goproglib
2792,2022-07-09 14:00:07+00:00,"Собственная реализация rsync на Go?! Michael Stapelberg рассказывает о предпосылках, которые повлияли на его решение, а также о своём домашнем маршрутизаторе router7, который работает на gokrazy, собственной платформе Go для Raspberry Pi и многом другом.

[Смотреть](https://youtu.be/wpwObdgemoE)",4321,14,1,goproglib
2791,2022-07-09 11:00:12+00:00,"Погружение в исходные коды [Caddy](https://github.com/caddyserver/caddy): узнайте, какие архитектурные решения и подходы использовали разработчики второй версии популярного веб-сервера.

[Читать](https://sourcegraph.com/notebooks/Tm90ZWJvb2s6MTM2Nw==)",4336,16,0,goproglib
2790,2022-07-09 08:11:48+00:00,"Чем сложнее код, тем больше вероятность столкнуться с неожиданным поведением. В статье описаны два возможных последствия объединения дженериков, интерфейсов и переключателей типов в Go.

[Читать](https://appliedgo.com/blog/a-tip-and-a-trick-when-working-with-generics)",4217,7,0,goproglib
2789,2022-07-09 07:07:54+00:00,"#appsec #pentest #security 

Обзор различных конструкций Go-кода, которые могут привести к уязвимостям.

https://proglib.io/w/07f23a84",3879,6,0,goproglib
2782,2022-07-08 18:31:08+00:00,"**⌛️ 15 советов для джунов: как быстро взять себя в руки за пять минут до собеседования

**Пять минут до начала собеседования могут стать самыми нервными для кандидата на должность. Наши советы помогут вам успокоиться и провести это время с пользой.

[https://proglib.io/sh/BWTSXxEwFM](https://proglib.io/sh/BWTSXxEwFM)",3525,12,1,goproglib
2780,2022-07-08 13:00:14+00:00,"Редко кто так подробно документирует этапы прохождения челленджа «100 дней *», но в этом случае все иначе. 

[Читать](https://dev.to/mr_destructive/series/17548)",4420,4,0,goproglib
2779,2022-07-08 11:12:35+00:00,"[​](https://telegra.ph/file/9f59caed588c757c45e22.jpg)Представлен релиз Go 1.19 Release Candidate 1 

[Подробнее](https://groups.google.com/g/golang-announce/c/Lu8ODY19HhA)",4240,7,3,goproglib
2778,2022-07-07 18:11:02+00:00,"Мысли о DDD в Go: на какие компромиссы придётся пойти?

[Читать](https://habr.com/ru/company/constanta/blog/675408/)",4863,5,4,goproglib
2777,2022-07-07 11:34:43+00:00,"[​](https://telegra.ph/file/98f28a2862ad9096c2104.jpg)️ **Бережем зрение: ТОП-15 мониторов для программиста**

В небольшом обзоре мы постарались выбрать относительно безопасные для зрения мониторы из разных ценовых категорий.

https://proglib.io/sh/VQmZeH9Ms8",4442,6,1,goproglib
2776,2022-07-06 17:48:39+00:00,"Учимся настраивать CORS в связке Go + React.

[Смотреть](https://youtu.be/VY8thJoSw9E)",4735,14,1,goproglib
2775,2022-07-06 11:37:19+00:00,"Всем привет!

Если вы пользуетесь VPN и соскучились по метафорам, металогике и преимущественно визуальному контенту, то ждем в гости по двум адресам:

f****.com/proglib
i****.com/proglibrary",4322,21,0,goproglib
2774,2022-07-05 17:51:46+00:00,"Краткий обзор популярных веб-фреймворков для Go.

[Читать](https://habr.com/ru/company/quadcode/blog/674302/)",4623,17,1,goproglib
2773,2022-07-05 11:38:48+00:00,"[​](https://telegra.ph/file/b25f98413fc83847b7b18.jpg)️ **Как стать IT-блогером: подробный гайд для начинающих**

Если у вас есть полезный опыт в IT, попробуйте поделиться им в блоге. Рассказываем, какие бывают форматы IT-блогинга и что нужно для ведения текстового и видеоблога. Cпойлер: смартфона, простого штатива и бюджетного освещения вполне достаточно.

https://proglib.io/sh/9vfLbErZTD",3932,27,0,goproglib
2772,2022-07-04 20:15:01+00:00,"#news

Традиционный выпуск недельных новостей из мира Go-разработки:

— Анонс [GoLand 2022.2 EAP #7](https://blog.jetbrains.com/go/2022/07/01/support-for-fmt-appendf-resolve-modes-for-databases-and-more-in-goland-2022-2-eap-7/)
— Релиз [Pongo2 6.0.0](https://github.com/flosch/pongo2/releases/tag/v6.0.0)
— Релиз [eRPC 7.0.0](https://github.com/andeya/erpc/releases/tag/v7.0.0)
— Релиз [go-elasticsearch 8.3.0](https://github.com/elastic/go-elasticsearch/releases/tag/v8.3.0)
— Релиз [Traefik 2.8.0](https://github.com/traefik/traefik/releases/tag/v2.8.0)
— Релиз [FerretDB 0.4.0](https://github.com/FerretDB/FerretDB/releases/tag/v0.4.0)
— Релиз [Vitess 14.0.0](https://github.com/vitessio/vitess/releases/tag/v14.0.0)
— Релиз [Casbin 2.50.0](https://github.com/casbin/casbin/releases/tag/v2.50.0)
— Релиз [fasthttp 1.38.0](https://github.com/valyala/fasthttp/releases/tag/v1.38.0)
— Релиз [go-version 1.6.0](https://github.com/hashicorp/go-version/releases/tag/v1.6.0)
— Релиз [Hertz 0.1](https://github.com/cloudwego/hertz/releases/tag/v0.1.0)[.](https://github.com/cloudwego/hertz/releases/tag/v0.1.0)[0](https://github.com/cloudwego/hertz/releases/tag/v0.1.0)
— Релиз [Zinc 0.2.5](https://github.com/zinclabs/zinc/releases/tag/v0.2.5)
— Релиз [Go-nanoid 1.0](https://github.com/jaevor/go-nanoid/releases/tag/v1.0.0)[.](https://github.com/jaevor/go-nanoid/releases/tag/v1.0.0)[0](https://github.com/jaevor/go-nanoid/releases/tag/v1.0.0)
— Релиз [Phonenumbers 1.1](https://github.com/nyaruka/phonenumbers/releases/tag/v1.1.0)[.](https://github.com/nyaruka/phonenumbers/releases/tag/v1.1.0)[0](https://github.com/nyaruka/phonenumbers/releases/tag/v1.1.0)
— Релиз [Render 1.5.0](https://github.com/unrolled/render/releases/tag/v1.5.0)
— Релиз [Garr 0.1.1](https://github.com/line/garr/releases/tag/v0.1.1)
— Релиз [Bluemonday 1.0.19](https://github.com/microcosm-cc/bluemonday)",4384,14,0,goproglib
2771,2022-07-04 19:33:35+00:00,"Репозиторий с простыми и небольшими задачами по Go, которые необходимо исправить.

https://github.com/soypat/gopherlings",4542,9,0,goproglib
2770,2022-07-04 15:00:23+00:00,"**Пойдешь на Docker – захватишь Kubernetes со скидками** 

Чтобы обучение летом прошло с двойной пользой, дарим **скидку 30% на комплект**  курсов «Docker: from zero to hero» и «Kubernetes База».

Вы научитесь не только работать с контейнерами, но и сможете эксплуатировать сложные приложения из нескольких контейнеров при помощи k8s.

 **Бонус – сертификация.** Если вы наберете достаточно баллов, мы дадим вам именной сертификат, который можно добавить в портфолио.

**Узнать больше:** https://slurm.club/3yyRfVa",4346,12,1,goproglib
2769,2022-07-03 19:57:54+00:00,"Имплементация простого WebSocket эхо-сервера на Go.

[Читать](https://habr.com/ru/post/674694/)",4980,15,0,goproglib
2768,2022-07-03 15:00:12+00:00,"Пополняем коллекцию руководств по Go для начинающих: серия Go-beginners от Chris Noring, GDE и Cloud Developer Advocate в Microsoft.

[Читать](https://dev.to/softchris/series/17227)",4741,8,0,goproglib
2767,2022-07-03 12:09:04+00:00,"Александр Сахаров из Ozon рассказывает о том, как писать тесты в Go.

[Смотреть](https://youtu.be/iJK99AQqKZY)",5667,28,1,goproglib
2766,2022-07-02 19:05:20+00:00,"[​](https://telegra.ph/file/438fdba2206ac27d20855.jpg)Пишем Go-сервис с использованием Docker, AWS Lambda и S3.

[Читать](https://earthly.dev/blog/aws-lambda-golang/)",4886,22,10,goproglib
2765,2022-07-02 09:48:55+00:00,"Опыт миграции команды Brev.dev с Go 1.17 до 1.18: с какими проблемами столкнулись и как решили.

[Читать](https://www.brev.dev/post/upgrading-go-lang-from-v1-17-to-v1-18)",4601,10,0,goproglib
2764,2022-07-02 09:04:29+00:00,"[​](https://telegra.ph/file/5ff9afe92840a90b3a06e.mp4) **viddy **— современная альтернатива команде `watch`. Все просто и красиво, и с возможностью просмотра истории.

https://proglib.io/w/9e1fab40",4190,10,0,goproglib
2763,2022-07-02 09:04:29+00:00,Очередной любопытный инструмент на Go ,4283,2,0,goproglib
2762,2022-07-01 18:36:30+00:00,"**Продолжение серии видеоуроков про фаззинг** **в Go** ([часть 1](https://t.me/goproglib/2748))

В новом видео больше практики: показано, как написать/запустить простой фаззинг-тест и проанализировать логи.

[Смотреть](https://youtu.be/y8Rpb3nrJn8)",5977,5,0,goproglib
2761,2022-06-30 18:00:02+00:00,"Что Go грядущий нам готовит? Леонид Могучев, Go-разработчик в Ozon Tech, разбирает изменения в Go 1.19.

[Читать](https://habr.com/ru/company/ozontech/blog/674190/)",5023,29,0,goproglib
2760,2022-06-30 16:37:02+00:00,"Отслеживание изменений схемы базы данных с помощью Go: советы и простые практические приемы.

[Читать](https://betterprogramming.pub/database-migrations-f3a227e29f5f)",4838,2,0,goproglib
2759,2022-06-29 20:59:53+00:00,"Архив видеозаписей докладов с митапов StLGo 

[Смотреть](https://www.youtube.com/watch?v=KryLiR6F4D4&list=PLURe8gXecIWhNScQX_w861vWTzi_B__zK)",4852,5,0,goproglib
2758,2022-06-29 18:37:10+00:00,"Переход из PHP-монолита на Go-микросервисы в «Ситимобил»: предпосылки и основные преимущества.

[Читать](https://habr.com/ru/company/southbridge/blog/673656/)",5212,10,0,goproglib
2757,2022-06-28 18:27:57+00:00,"Разработка REST API на Go + AWS с использованием [SST](https://github.com/serverless-stack/sst): руководство для начинающих.

[Читать](https://sst.dev/examples/how-to-create-a-rest-api-in-golang-with-serverless.html)",4788,1,0,goproglib
2755,2022-06-27 13:00:18+00:00,"7 книг для освоения Go и других неотъемлемых технологий: рекомендации от разработчиков из компании МойОфис.

[Читать](https://habr.com/ru/company/ncloudtech/blog/672906/)",6575,25,2,goproglib
2754,2022-06-27 11:31:33+00:00,"[​](https://telegra.ph/file/1316231effb96fdc8d9e7.jpg) **«Сделай красиво и чтоб работало – это вместо ТЗ». Что больше всего раздражает программистов на работе? Результаты опроса «Библиотеки программиста»**

Отправь эту статью коллеге или руководителю. Может что-нибудь поменяется.

https://proglib.io/sh/RHx4fjPaLT",4138,4,1,goproglib
2753,2022-06-26 19:44:31+00:00,"Uber использует монорепозиторий для внутренних сервисов и библиотек на основе Go. 

Его недостатком был каскад проверок и сложность при внесении изменений в широко используемые зависимости. В статье команда Uber описывает, как получилось преодолеть эти проблемы.

[Читать](https://eng.uber.com/how-we-halved-go-monorepo-ci-build-time/)",5009,8,0,goproglib
2751,2022-06-25 10:44:33+00:00,"Опыт использования Preact, Vite и Hugo для быстрой и эффективной веб-разработки.

[Читать](https://medium.com/gumgum-tech/faster-development-experience-with-vite-hugo-and-preact-c08cbcfce5fb)",4776,12,0,goproglib
2750,2022-06-24 19:46:49+00:00,"Свежий взгляд на чистую архитектуру в Go от канала The Art of Development.

[Смотреть](https://youtu.be/B_GUqUO42cA)",5672,23,0,goproglib
2749,2022-06-24 09:00:06+00:00,"**Набор на бесплатные курсы для разработчиков от Ozon

**Route 256 — бесплатные курсы для middle-разработчиков от опытных инженеров Ozon Tech.
Чтобы попасть на курс нужно пройти отборочный контест 1-3 июля.

Сейчас идет набор на направления Go, QA (Python), C#. Оставить заявку на участие можно по [ссылке

](https://bit.ly/3HCNBfW)Чтобы узнать больше о курсах Route 256 — [читай обзор на Proglib](https://proglib.io/p/route-256-besplatnye-kursy-dlya-middle-razrabotchikov-ot-ekspertov-ozon-2022-06-21)",4680,22,0,goproglib
2748,2022-06-23 20:04:42+00:00,"Введение в фаззинг: новое видеоруководство на официальном YouTube-канале.

[Смотреть](https://youtu.be/-hc6LGA46Bg)",5982,13,0,goproglib
2745,2022-06-23 18:47:16+00:00,"**SyMon** — легковесный Go-инструмент для системного мониторинга и оповещения. 

[Репозиторий](https://github.com/dhamith93/SyMon)",4412,22,0,goproglib
2744,2022-06-23 13:09:07+00:00,"**Golang meetup online

**1. **Ложь, наглая ложь и benchmarks **- Юрий Букаткин, teamlead «Программный Регион»
__Расскажу про бенчмарки, про утилиты, которые помогают определить что что то в тестировании произошло не так, расскажу про причины почему так происходит и сделаем из этого выводы.__

2. **NeoVim как IDE для Golang и не только** - Антон Губарев, software engineer «Авито»
__Расскажу про плюсы и минусы использования NeoVim как основной среды. Покажу функциональные возможности сравню с аналогичными в Goland. Приведу примеры решения частых рабочих кейсов

__3. **Потребление оперативной памяти в языке Go: проблемы и пути решения **- Виталий Исаев, старший разработчик «МойОфис»
__Исследование и сравнительный анализ механизмов ограничения потребления оперативной памяти рантаймом языка Go.

__

 29 июня, начало в 19:00 мск, Среда

 **ОНЛАЙН

**[](https://meetups.evrone.com/ruby-meetup-no17-online?utm_source=tg&utm_medium=ITMeeting&utm_campaign=online_ruby_meetup) [Регистрация на мероприятие](https://meetups.evrone.com/go-meetup-online-0?utm_source=tg&utm_medium=goproglib&utm_campaign=online_go_meetup)",4503,11,0,goproglib
2742,2022-06-22 20:43:27+00:00,"Опыт создания CI-пайплайна для Go-библиотеки с использованием Dagger.

[Читать](https://sagikazarmark.hu/blog/dagger-go-library/)",5494,3,0,goproglib
2741,2022-06-22 18:10:23+00:00,"Create Your Tests Easily: анонс open source библиотеки от Ozon Tech в BDD-стиле, которая облегчает тяготы создания автотестов.

[Читать](https://habr.com/ru/company/ozontech/blog/672678/)",4741,20,0,goproglib
2740,2022-06-21 20:49:46+00:00,"gRPC в действии: разбираем 4 метода взаимодействия с gRPC в Go.

[Читать](https://faun.pub/4-types-of-grpc-communication-in-golang-c395df1f3cff)",5958,9,1,goproglib
2739,2022-06-21 18:00:10+00:00,"Как на самом деле устроен тип Map в Go? Рассказывает Николай Тузов.

[Смотреть](https://youtu.be/P_SXTUiA-9Y)",5441,33,0,goproglib
2737,2022-06-21 07:00:06+00:00,"[​](https://telegra.ph/file/58e2f72dc2b043be75ef7.jpg)Golang — это простой, быстрый и удобный язык программирования, с помощью которого можно писать сложные программы. Познакомьтесь с Go-разработкой на практике и освойте один из востребованных языков на бесплатном вебинаре 23 июня в 19:00 по московскому времени.

Регистрируйтесь по ссылке. Мы сразу пришлём вам на почту подборку полезных материалов для изучения Go:https://clc.to/gu5_hQ


Во время вебинара вы:

 изучите основы языка Golang;
 узнаете, как библиотеки помогают ускорить разработку приложений;
 познакомитесь с синтаксисом и основными функциями Golang;
 создадите многофункционального бота для Telegram и добавите проект в портфолио.

Практический вебинар будет вести Senior Golang Developer с 11-летним опытом в веб-разработке  Валерий Кабисов.
 
 Дойдите до конца вебинара и получите в подарок электронную книгу Пола Доэрти и Джеймса Уилсона «Человек + машина». Участвуйте онлайн и получите сертификат на 10 000 рублей для обучения на образовательной платформе Skillbox.",4196,17,1,goproglib
2736,2022-06-21 04:30:00+00:00,"**Everyday Golang - The Fast Track **(2021)

Автор: Alex Ellis

Перед вами мини-книга от автора множества руководств по модульному тестированию в Go и других учебных материалов (книги **Serverless For Everyone Else** и курса **Kubernetes on Raspberry Pi**). 

**Everyday Golang** — это ускоренный курс для изучения концепций и методов, которые вы можете применять в своей повседневной работе и проектах.

Материал книги представляет собой сборник практических примеров, уроков и техник для Go-разработчиков.",4953,2,0,goproglib
2735,2022-06-20 19:43:21+00:00,"Ответы на популярные вопросы о конкурентности в Go на примерах: 

— Что это? 
— Какие проблемы возникают из-за конкурентного кода и как с ними справиться?

[Читать](https://sayedalesawy.hashnode.dev/concurrency-race-conditions-and-concurrency-control)",4273,3,1,goproglib
2734,2022-06-20 18:41:38+00:00,"[​](https://telegra.ph/file/66be69a9c3715ef365a23.jpg)Руководство по реализации распределенной трассировки в Go-приложении с использованием OpenTelemetry и SigNoz:.

[Читать](https://dev.to/signoz/implementing-distributed-tracing-in-a-golang-application-5cm1)",4213,0,0,goproglib
2730,2022-06-19 17:30:02+00:00," **HTTPLoot** — Go-инструмент для исследования безопасности веб-приложений. Позволяет автоматически сканировать, определять технический стек, заполнять формы, извлекать секреты из страниц ошибок/отладки и JavaScript-кода сайтов.

Инструмент разработан командой RedHunt Labs. Свою результативность он [уже доказал](https://redhuntlabs.com/blog/millions-of-secrets-exposed-via-web-application-frontend.html), найдя 1 676 634 секретов в результате двух этапов глубокого тестирования. 

[Репозиторий](https://github.com/redhuntlabs/httploot)",5879,17,0,goproglib
2729,2022-06-19 14:27:02+00:00,"#news

Новости из мира Go-разработки:

— [Погружение в новый алгоритм сортировки pdqsort](https://itnext.io/gos-new-sorting-algorithm-pdqsort-822053d7801b)
— Релиз [go-mysql 1.6.0](https://github.com/go-mysql-org/go-mysql/releases/tag/v1.6.0)
— Релиз [Tengo 2.12.0](https://github.com/d5/tengo/releases/tag/v2.12.0)
— Релиз [Garble 0.7.0](https://github.com/burrowers/garble/releases/tag/v0.7.0)
— Релиз [Task 3.13.0](https://github.com/go-task/task/releases/tag/v3.13.0)
— Релиз [RoseDB 1.1.1](https://github.com/flower-corp/rosedb/releases/tag/v1.1.1)
— Релиз [Chroma 2.2.0](https://github.com/alecthomas/chroma/releases/tag/v2.2.0)
— Анонс [GoLand 2022.2 EAP #5](https://blog.jetbrains.com/go/2022/06/17/goland-2022-2-eap-5-is-out-with-automatic-sql-injection-support-for-websockets-and-graphql-endpoints-and-more/)",4155,4,0,goproglib
2728,2022-06-19 10:56:39+00:00,"**Серия статей по разработке интернет-магазина**

В первой части описаны теоретические и практические аспекты разработки и деплоя ориентированного на DDD микросервиса с использованием Go, gRPC, OpenAPI, Docker и других инструментов.

[Читать](https://tproger.ru/articles/kak-razrabotat-veb-prilozhenie-urovnja-enterprise-application-s-nulja/)",4769,7,3,goproglib
2727,2022-06-18 08:39:14+00:00,"[​](https://telegra.ph/file/d31e19867af8be0cdfe55.jpg)Специалисты Akamai зафиксировали новый P2P-ботнет, разработанный на Go. Что тут сказать? Отличная работа как разработчиков малвари, так и исследователей. Почитайте статью — сами все поймёте.

[Читать](https://www.akamai.com/blog/security/new-p2p-botnet-panchan)",5915,5,2,goproglib
2726,2022-06-17 19:30:02+00:00,С момента публикации [поста](https://t.me/goproglib/2669) вышли 3-4 части в серии ,4053,3,1,goproglib
2725,2022-06-17 18:46:14+00:00,"[​](https://telegra.ph/file/2b57d8f66a9df836f6ca7.jpg)#devtool 

 **scc** — инструмент для подсчета строк кода в кодовой базе. Работает быстро, оценивает сложность кода, время и необходимое количество разработчиков с общей стоимость реализации проекта с нуля. Интересно узнать, сойдутся ли цифры на ваших проектах?   

https://proglib.io/w/5257c880",3763,20,1,goproglib
2724,2022-06-17 18:46:14+00:00,Конечно же инструмент на Go ,3881,0,1,goproglib
2723,2022-06-17 11:50:53+00:00,"[​](https://telegra.ph/file/e764a520165c51e8c2931.jpg) **10 алгоритмов для работы с графами, которые должен знать каждый кодер**

Знакомимся с десятью маст-хэв для каждого кодера алгоритмами, которые будут полезными для работы с графами (исходный код прилагается).

https://proglib.io/sh/LpZb98VWRM",4606,13,10,goproglib
2722,2022-06-16 18:31:27+00:00,"Обзор проблем с существующими SQL-библиотеками в Go и анонс библиотеки, которая стремится упростить их решение.

[Читать](https://medium.com/@vingarcia00/golang-sql-problems-with-existing-libraries-145a037261b8)",4314,18,1,goproglib
2720,2022-06-15 16:27:13+00:00,"**Разбираемся с рендерингом и позиционированием текста**

Полезная заметка о разработке игр на Go + ebiten от Искандера, которая сэкономит пару-тройку вечеров.

[Читать](https://habr.com/ru/post/671556/)",4230,7,0,goproglib
2719,2022-06-14 19:40:00+00:00,"**Погружение в микросервисы**: мощный цикл статей из далекого 2015 года в блоге Nginx.

— [Introduction to Microservices](https://www.nginx.com/blog/introduction-to-microservices/)
— [Building Microservices: Using an API Gateway
](https://www.nginx.com/blog/building-microservices-using-an-api-gateway/)— [Building Microservices: Inter-Process Communication in a Microservices Architecture](https://www.nginx.com/blog/building-microservices-inter-process-communication/)
— [Service Discovery in a Microservices Architecture](https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/) + [пример на Go](https://abdulsamet-ileri.medium.com/lets-implement-basic-service-discovery-using-go-d91c513883f6)
— [Event-Driven Data Management for Microservices
](https://www.nginx.com/blog/event-driven-data-management-microservices/)— [Choosing a Microservices Deployment Strategy](https://www.nginx.com/blog/deploying-microservices/)
— [Refactoring a Monolith into Microservices](https://www.nginx.com/blog/refactoring-a-monolith-into-microservices/)",19567,19,0,goproglib
2718,2022-06-14 18:40:28+00:00,"Гайд по использованию Protocol Buffers и gRPC для проектирования API в Go-приложении.

[Читать](https://betterprogramming.pub/go-api-design-with-protocol-buffers-and-grpc-991838e4852b)",4835,7,0,goproglib
2717,2022-06-14 18:00:04+00:00,Вышла вторая часть серии статей с вопросами и ответами на собеседовании по Go  https://t.me/goproglib/2471,4541,9,0,goproglib
2716,2022-06-14 15:00:16+00:00,"В метавселенных можно работать, общаться и даже посещать концерты — все это виртуально  
Для чего еще нужны метавселенные и какие возможности они откроют в будущем? Узнайте в финальном выпуске первого сезона подкаста «ZIP. Архив техногенного мира» от команды Газпромбанка. 
  
Слушайте и делитесь > https://vk.cc/cekKBC",4061,1,0,goproglib
2715,2022-06-13 20:41:48+00:00,"Веб-разработчик с более чем двадцатилетним опытом помимо основного языка (PHP) решил изучить Go. Полезные заметки и мысли он оставляет у себя в блоге. Вдруг кто-то найдёт в них что-то новое и интересное. 

[Прошёл 13-й день](https://matthewsetter.com/learning-golang/day-13/)",4245,6,1,goproglib
2714,2022-06-13 18:01:12+00:00,"Chris Noring, Cloud Developer Advocate в Microsoft и Google Developer Expert, представил цикл статей по изучению основных концепций Go для новичков.

[Читать](https://dev.to/softchris/series/17227)",4269,5,0,goproglib
2713,2022-06-12 15:00:03+00:00,"Пополняем коллекцию учебных материалов для начинающих в Go: практика использования интерфейсов.

[Читать](https://eltonminetto.dev/en/post/2022-06-07-using-go-interfaces/)",4300,0,0,goproglib
2712,2022-06-12 12:00:12+00:00,"#news

Новости из мира Go-разработки:

— Релиз [Go 1.19 beta 1](https://go.dev/dl/#go1.19beta1)
— Релиз [SFTPGo 2.3.1](https://github.com/drakkan/sftpgo/releases/tag/v2.3.1)
— Релиз [Fyne 2.2](https://github.com/fyne-io/fyne/releases/tag/v2.2.0)
— Релиз [Go+ v1.1](https://github.com/goplus/gop/releases/tag/v1.1.0)
— Релиз [Benthos 4.2](https://github.com/benthosdev/benthos/releases/tag/v4.2.0)
— Анонс [GoLand 2022.2 EAP #4](https://blog.jetbrains.com/go/2022/06/10/goland-2022-2-eap-4-is-out-with-support-for-fuzz-testing-and-new-documentation-features/) 
— В GitHub-репозитории Go уже более 100k ⭐️",4124,9,0,goproglib
2711,2022-06-12 09:34:39+00:00,"Сравнение производительности coroutine-style лексического анализатора, представленного Робом Пайком ещё в 2021 году, с другими подходами. 

[Читать](https://eli.thegreenplace.net/2022/performance-of-coroutine-style-lexers-in-go/)",4076,3,1,goproglib
2710,2022-06-12 08:40:12+00:00,Обновили подборку видеоуроков по Go от канала **The Art of Development**  https://t.me/goproglib/2603,4183,8,0,goproglib
2709,2022-06-11 09:12:56+00:00,"[​](https://telegra.ph/file/23363dfe96c38c006a9a6.jpg)#news 

 Представлен релиз 1-й беты Go 1.19.

[Подробнее](https://groups.google.com/g/golang-announce/c/SNruPJUSFz0/m/8QKkkMpJAAAJ)",4247,9,0,goproglib
2708,2022-06-11 08:45:15+00:00,"Видеозаписи докладов и презентации спикеров с митапа «Быстрый бэкенд»:

— [Как битмап-индексы помогают быстро искать по каталогам. Денис Колпаков, Авито](https://youtu.be/_p3ctLifuFk). [Презентация](https://www.dropbox.com/s/ict1m66o0o83ah8/%D0%9A%D0%B0%D0%BA%20%D0%B1%D0%B8%D1%82%D0%BC%D0%B0%D0%BF-%D0%B8%D0%BD%D0%B4%D0%B5%D0%BA%D1%81%D1%8B%20%D0%BF%D0%BE%D0%BC%D0%BE%D0%B3%D0%B0%D1%8E%D1%82%20%D0%B1%D1%8B%D1%81%D1%82%D1%80%D0%BE%20%D0%B8%D1%81%D0%BA%D0%B0%D1%82%D1%8C%20%D0%BF%D0%BE%20%D0%BA%D0%B0%D1%82%D0%B0%D0%BB%D0%BE%D0%B3%D0%B0%D0%BC%20%E2%80%94%20%D0%94%D0%B5%D0%BD%D0%B8%D1%81%20%D0%9A%D0%BE%D0%BB%D0%BF%D0%B0%D0%BA%D0%BE%D0%B2%2C%20%D0%90%D0%B2%D0%B8%D1%82%D0%BE.pdf?dl=0) 
— [Ищем боттлнеки за 30 минут с помощью Jaeger трейсов. Артём Клюквин, Джум Лабс](https://youtu.be/7Dyf4AiUAcQ). [Презентация](https://www.dropbox.com/s/8spywn3cxwdc58z/%D0%98%D1%89%D0%B5%D0%BC%20%D0%B1%D0%BE%D1%82%D1%82%D0%BB%D0%BD%D0%B5%D0%BA%D0%B8%20%D0%B7%D0%B0%2030%20%D0%BC%D0%B8%D0%BD%D1%83%D1%82%20%D1%81%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E%20Jaeger%20%D1%82%D1%80%D0%B5%D0%B9%D1%81%D0%BE%D0%B2%20%E2%80%94%20%D0%90%D1%80%D1%82%D1%91%D0%BC%20%D0%9A%D0%BB%D1%8E%D0%BA%D0%B2%D0%B8%D0%BD%2C%20%D0%94%D0%B6%D1%83%D0%BC%20%D0%9B%D0%B0%D0%B1%D1%81.pdf?dl=0) 
— [30 TiB в MongoDB и как мы с этим живем. Сергей Загурский, Джум Лабс](https://youtu.be/XO98x0mU8Ow). [Презентация](https://www.dropbox.com/s/f7h5yi7dm4rklcj/30%20TiB%20%D0%B2%20MongoDB%20%D0%B8%20%D0%BA%D0%B0%D0%BA%20%D0%BC%D1%8B%20%D1%81%20%D1%8D%D1%82%D0%B8%D0%BC%20%D0%B6%D0%B8%D0%B2%D0%B5%D0%BC%20%E2%80%94%20%D0%A1%D0%B5%D1%80%D0%B3%D0%B5%D0%B9%20%D0%97%D0%B0%D0%B3%D1%83%D1%80%D1%81%D0%BA%D0%B8%D0%B9%2C%20%D0%94%D0%B6%D1%83%D0%BC%20%D0%9B%D0%B0%D0%B1%D1%81.pdf?dl=0)

 [Подробнее](https://habr.com/ru/company/joom/blog/670832/)",4511,0,0,goproglib
2707,2022-06-10 18:11:05+00:00," **Паттерны гонок данных в Go**

Инженеры из Uber разработали систему для обнаружения гонок данных в Go-микросервисах, которая обнаружила около 2000 случаев возникновения последних в кодовой базе. 1100 уже исправлено, что позволило выявить определенные шаблоны возникновения гонок данных. В общем, все подробности в статье.

[Читать](https://eng.uber.com/data-race-patterns-in-go/)",4766,13,0,goproglib
2706,2022-06-10 13:32:48+00:00,"⁉️ **Делаешь первые шаги в программировании? Собираешься стать успешным разработчиком? **
Тогда не пропусти бесплатный вебинар по основам алгоритмов от Proglib Academy!

**Для кого вебинар:**
Для начинающих разработчиков, которые хотят познакомиться с темой алгоритмов, использовать их в работе, писать красивый код и с легкостью проходить технические собеседования 

**Когда: **15 июня в 19:00 по МСК

**О чем ты узнаешь:**
️Что такое алгоритмы и структуры данных;
️Свойства и возможности применения алгоритмов в программировании;
️Почему знание алгоритмов обязательно для любого программиста;
️Как решаются задачи на примере линейных алгоритмов.

Даже если не получится попасть на вебинар — всем зарегистрировавшимся вышлем запись трансляции и презентацию!

**Спикер:** Мария Горденко — инженер-программист, старший преподаватель Факультета компьютерных наук НИУ ВШЭ, НИТУ МИСИС, аспирант департамента анализа данных и искусственного интеллекта ФКН НИУ ВШЭ, ведущий эксперт НИУ ВШЭ.

 **Регистрируйся**: [https://proglib.io/w/d06f9b6c](https://proglib.io/w/d06f9b6c)",4123,3,0,goproglib
2705,2022-06-09 20:58:28+00:00,"Event-Driven Distributed Systems: построение и реализация на Go + gRPC + NATS JetStream + CockroachDB.

[Читать](https://shijuvar.medium.com/building-event-driven-distributed-systems-in-go-with-grpc-nats-jetstream-and-cockroachdb-c4b899c8636d)",4733,17,0,goproglib
2704,2022-06-09 20:23:53+00:00,"Использование `Rows.Columns` или `Rows.ColumnTypes` для выполнения динамических SQL-запросов в Go.

[Читать](https://betterprogramming.pub/dynamic-sql-query-with-go-8aeedaa02907)",4206,0,0,goproglib
2703,2022-06-09 18:46:31+00:00,"Собеседование на Middle Go-разработчика от Александра Сахарова из Ozon.

[Смотреть](https://youtu.be/ryJOS-8hmQo)",5676,23,0,goproglib
2702,2022-06-08 20:20:35+00:00,"Шаблоны конкурентности в Go: краткий обзор с примерами.

[Читать](https://dev.to/karanpratapsingh/advanced-concurrency-patterns-in-go-2je1)",6300,3,0,goproglib
2701,2022-06-08 18:45:00+00:00,"Пополняем коллекцию учебных материалов по Go для начинающих и не только: фундаментальные основы работы веб-приложений, обработка и проверка форм, работа с базами данных и JSON, особенности языка, различные советы и многое другое от фуллстек-разработчика Алекса Эдвардса.

[Читать](https://www.alexedwards.net/blog)",4504,11,0,goproglib
2700,2022-06-08 18:09:35+00:00,"[​](https://telegra.ph/file/21530941fd6be171fe3c6.jpg)Т**ест на знание алгоритмов и структур данных**

Давайте проверим, насколько хорошо вы разбираетесь в алгоритмах, и не пора ли подтянуть знания. Всего 10 несложных вопросов .

[Погнали](https://proglib.io/tests/proydi-test-na-znanie-algoritmov-i-struktur-dannyh)",4258,10,15,goproglib
2698,2022-06-07 18:08:17+00:00,"Руководство по разработке простого приложения для аренды велосипедов с использованием Go + graphQL + gRPC + ArangoDB:

— [Часть 1](https://dev.to/myk_okoth_ogodo/using-graphqlgrpcgolang-to-create-a-bike-rental-microservices-with-persistence-on-arangodb-2a6h)
— Часть 2. ",4783,17,4,goproglib
2696,2022-06-07 11:28:49+00:00,"[​](https://telegra.ph/file/1a45034e92a4a0a32007d.jpg)‍ **Работа на лето: куда устроиться студенту. Стажировки и не только**

Лето – пора не только отдохнуть, но и немного подзаработать. Рассказываем о самых интересных вариантах для студентов.

https://proglib.io/sh/tUySmaKHWz",3747,4,0,goproglib
2694,2022-06-05 17:03:02+00:00,"Перезагрузка Go-приложения в режиме реального времени с помощью пакета [air](https://t.me/goproglib/1865): простое руководство для новичков.

[Читать](https://thedevelopercafe.com/articles/live-reload-in-go-with-air-4eff64b7a642)",4662,1,2,goproglib
2693,2022-06-04 18:11:51+00:00,"Go легко освоить и трудно от него отказаться: немного хейта и похвалы Go.

[Читать](https://fasterthanli.me/articles/lies-we-tell-ourselves-to-keep-using-golang)",4572,22,0,goproglib
2692,2022-06-04 15:00:14+00:00,"**Всё, что вы хотели узнать о релокации, и не побоялись спросить**

 Можно ли получить работу за рубежом без знания английского или со слабым уровнем?
 Какой стек востребован за рубежом?
 Какие перспективы трудоустройства у джунов?
 В каких странах легче всего получить ВНЖ?
 Как жить с рублями за границей?

Собрали топчик вопросов о релокации айтишников и жизни за границей. Совместно с каналом [RelocationDEV](https://t.me/+hY7xBGA5d6RkM2I6) узнали лайфхаки от тех, кто уже переехал, дополнили информацией от экспертов и написали целую статью.

[**Гоу читать!**](https://proglib.io/p/relokaciya-it-specialista-otvety-na-populyarnye-voprosy-2022-05-31)",4457,43,4,goproglib
2691,2022-06-03 19:22:34+00:00,"[​](https://telegra.ph/file/cfda62c284bffdb5d33e6.jpg) **Синдром самозванца: 5 способов преодоления чувства «незаслуженного успеха»**

Быть самозванцем на работе – чувство не из легких. Но ты такой не один. Разберемся, как определить синдром и как с ним бороться.

https://proglib.io/sh/xs50XmbiUE",3722,6,0,goproglib
2689,2022-06-03 15:00:13+00:00,"500 000 рублей за pull-request’ы в Open Source библиотеки МТС Digital, написанные на Go.

 Что делать С 13 июня по 12 июля закрываешь задачи на Гитхабе из выбранного пула issues. Решил задачку — отправил выполненный pull-requests в тг-канал конкурса.

 Как выбирают победителей Те, кто наберет больше всего замердженных issues, разделят призовой фонд в 1 250 000 рублей. Всего пять призовых мест с призами [от 100 до 500 тыс. руб](https://mts-digital.ru/opensourcecamp?utm_source=mrk_inf&utm_medium=goproglib&utm_campaign=is0_mts_open_source_q2_nontv_2022&utm_term=infeed_native) 

️ [Участвовать в конкурсе](https://mts-digital.ru/opensourcecamp?utm_source=mrk_inf&utm_medium=goproglib&utm_campaign=is0_mts_open_source_q2_nontv_2022&utm_term=infeed_native)",4529,41,8,goproglib
2688,2022-06-03 06:29:34+00:00,"Обзор дизайнерских решений, которые формируют общий успех Go.

[Читать](https://m-cacm.acm.org/magazines/2022/5/260357-the-go-programming-language-and-environment/fulltext)",4286,5,0,goproglib
2684,2022-06-02 09:00:36+00:00,"**Митап от Joom про то, как строить и развивать быстрый бэкенд

**Приглашаем бэкенд-разработчиков на митап в уютный и красивый офис Joom. Поговорим о том, как строить быстрый бэкенд и развивать его.

Темы докладов

— Как реализовали быструю фильтрацию модификаций в каталогах: от решения «в лоб» до оптимального — Денис Колпаков, Авито 
— Как искать боттлнеки за 30 минут с помощью Jaeger-трейсов — Артём Клюквин, Джум Лабс
— Как жить на проекте с большим кластером MongoDB — Сергей Загурский, Джум Лабс 

Помимо докладов и профессионального общения в кулуарах, будет отличный кофе в атмосфере зеленого города-сада. 

Когда: 4 июня, 14:00
Где: Москва, Авиаконструктора Сухого 2к2 
Регистрация: https://joom.timepad.ru/event/2036090/?utm_refcode=6f08de41b57980937a47ed2aa9f3b3f30f4e62ab",4195,17,3,goproglib
2683,2022-06-02 06:00:12+00:00,"[​](https://telegra.ph/file/2ac71c8e9fc1d9186c236.jpg)#news

 Представлены релизы Go 1.18.3 и 1.17.11 с исправлениями crypto/rand (CVE-2022-30634), crypto/tls (CVE-2022-30629), os/exec (CVE-2022-30580) и path/filepath (CVE-2022-29804).

 [Подробности](https://groups.google.com/g/golang-announce/c/TzIC9-t8Ytg)",3988,10,0,goproglib
2682,2022-06-01 20:07:55+00:00,"#devtool 

Полезные инструменты для диагностики производительности в Linux",3706,23,1,goproglib
2681,2022-06-01 19:52:36+00:00," Кстати, Go — самый быстрорастущий язык по популярности на GitHub.

[Подробнее](https://ossinsight.io/blog/explore-deep-in-4.6-billion-github-events/#go-the-new-favorite-and-the-fastest-growing-programming-language)",4018,14,0,goproglib
2680,2022-05-31 19:00:13+00:00,"#news

Новости из мира Go-разработки:

— Релиз [Rqlite 7.5.0](https://www.philipotoole.com/rqlite-trading-durability-for-performance/)
— Релиз [Gocache 3.0](https://github.com/eko/gocache/releases/tag/v3.0.0)
— Релиз [Concurrent Map 2.0](https://github.com/orcaman/concurrent-map/releases/tag/v2.0.0)
— Релиз [eBPF 0.9](https://github.com/cilium/ebpf/releases/tag/v0.9.0)
— Релиз [Sonic 1.3](https://github.com/bytedance/sonic/releases/tag/v1.3.0)
— Релиз [Kratos 2.3](https://github.com/go-kratos/kratos/releases/tag/v2.3.0)
— Релиз [immudb 1.3](https://github.com/codenotary/immudb/releases/tag/v1.3.0)
— Релиз [Plow 1.2](https://github.com/six-ddc/plow/releases/tag/v1.2.0) 
— Релиз [Traefik 2.7.0](https://github.com/traefik/traefik/releases/tag/v2.7.0)
— Релиз [Oak 4.0](https://github.com/oakmound/oak/releases/tag/v4.0.0)
— Релиз [Fiber 2.34.0](https://github.com/gofiber/fiber/releases/tag/v2.34.0)
— Релиз [WAL](https://github.com/wal-g/wal-g/releases/tag/v2.0.0)[-G](https://github.com/wal-g/wal-g/releases/tag/v2.0.0) [2.0](https://www.postgresql.org/about/news/wal-g-20-released-2456/)
— Анонс [GoLand 2022.2 EAP #2](https://blog.jetbrains.com/go/2022/05/27/goland-2022-2-eap-2-is-out-with-new-inspections-for-generics/)",4349,15,0,goproglib
2679,2022-05-31 18:16:13+00:00,"Евгений Лопаткин, Go-разработчик в Ozon Tech, делится опытом написания внешней Go-библиотеки, удобной для экспорта и импорта. 

[Читать](https://habr.com/ru/company/ozontech/blog/668254/)",4445,7,0,goproglib
2678,2022-05-31 15:00:04+00:00,"Слёрм запускает курс **«Golang для инженеров»**, на котором мы обучим разным полезным фичам: созданию своего API сервера, запуску контейнеров, взаимодействию с Docker и и Kubernetes. У нас все серьезно, это уже третий поток!

На выходе ты станешь разговаривать с Go на одном языке (буквально), сможешь создавать сложные программы, взаимодействовать с другими инструментами и работать с кастомными операторами.

GOтов погрузиться в поток? Тогда тебе сюда: https://slurm.club/38R50ER

Если займешь место на курсе сегодня, получишь приятную мелочь: скидку 10%. Просто скопируй промокод **GO-3_10**.",4084,9,0,goproglib
2677,2022-05-30 19:23:41+00:00,"Новое руководство по работе с пакетом `context` от автора [данного](https://t.me/goproglib/2606) мини-курса.

[Читать](https://dev.to/karanpratapsingh/understand-context-in-go-46em)",4383,6,0,goproglib
2676,2022-05-29 05:59:30+00:00," **concurrent-map** — расширенная альтернатива sync.Map.

[Репозиторий](https://github.com/orcaman/concurrent-map)",4539,0,4,goproglib
2675,2022-05-28 20:44:56+00:00,"Увеличение производительности в 5 раз и уменьшение объема оперативной памяти на 40**%. **Вот каких цифр позволил добиться Go по сравнению с Node.js в Hasura Storage. 

[Подробности](https://nhost.io/blog/hasura-storage-in-go-5x-performance-increase-and-40-percent-less-ram)",4387,11,0,goproglib
2674,2022-05-28 18:56:57+00:00," Разработка проекта на Go с нуля: от проектирования до реализации. 

https://proglib.io/w/010241bc",4444,8,0,goproglib
2671,2022-05-28 17:40:44+00:00,"Кстати, нас недавно стало 9000. Спасибо ",4000,55,2,goproglib
2670,2022-05-28 17:00:08+00:00,"Очередное сравнение производительности Go и Rust, любопытство к которому было спровоцировано статьей «[Наблюдение за выполнением конкурирующих задач в Go и Rust](https://habr.com/ru/post/663526/)».

[Читать](https://habr.com/ru/post/668166/)",4374,10,1,goproglib
2669,2022-05-27 18:45:00+00:00,"Серия видеоуроков по разработке игры с использованием Go и Raylib.

 [Смотреть](https://www.youtube.com/watch?v=iWp-mCIQgMU&list=PLVotA8ycjnCsy30WQCwVU5RrZkt4lLgY5)",4919,14,0,goproglib
2668,2022-05-27 18:00:10+00:00," **Bud** — новый веб-фреймворк для Go-разработчиков, который нацелен упростить процесс создания, запуска и обслуживания многофункциональных веб-приложений. 

На [скринкасте](https://youtu.be/LoypcRqn-xA) показан пошаговый процесс создания минимального клона Hacker News с использованием Bud.

 [Репозиторий](https://github.com/livebud/bud)
 [Документация](https://denim-cub-301.notion.site/Hey-Bud-4d81622cc49942f9917c5033e5205c69)",5045,22,2,goproglib
2666,2022-05-26 19:10:48+00:00,"[​](https://telegra.ph/file/6cec02228c12d2aec3c8c.jpg)**Серия статей о построении скелетона для API на Go**

— Часть 1. [Структура проекта, базовый функционал и зависимости](https://blog.devgenius.io/golang-apis-a-skeleton-for-your-future-projects-a082dc4d6818)
— Часть 2. ",5166,12,10,goproglib
2665,2022-05-26 17:54:11+00:00,"R*-tree (подвид алгоритма R-tree) в Go: теория и детали реализации.

[Читать](https://habr.com/ru/post/666904/)",4336,11,0,goproglib
2664,2022-05-26 12:37:03+00:00,"[​](https://telegra.ph/file/ec72c4be1d5bc8838eed8.jpg) **11 карьерных советов для начинающих разработчиков**

В помощь начинающим разрабам 11 советов по подготовке к собеседованию, продвижению себя в соцсетях, участию в опенсорс-проектах, поиску наставника и многому другому.

https://proglib.io/sh/ROAKEsm5ej",3636,8,0,goproglib
2663,2022-05-25 19:44:36+00:00,"Несколько советов по повышению связности в приложениях на Go с использованием дженериков от [Miłosz Smółka](https://twitter.com/m1_10sz), синьор бэкенд-инженера в [GetHarley](https://getharley.com/), сооснователя [Three Dots Labs](https://threedotslabs.com/) и создателя [Watermill](https://github.com/ThreeDotsLabs/watermill).

[Читать](https://threedots.tech/post/increasing-cohesion-in-go-with-generic-decorators/)",4135,3,0,goproglib
2661,2022-05-24 19:31:37+00:00,"[Eli Bendersky](https://twitter.com/elibendersky) решил снова переписать свой лексический анализатор с учетом всех нововведений Go. В итоге имеем трехкратное увеличение производительности и несколько полезных советов от автора, которые могут помочь при решении подобных задач.

[Читать](https://eli.thegreenplace.net/2022/a-faster-lexer-in-go/)",4156,3,0,goproglib
2660,2022-05-24 18:05:23+00:00,Пополнили подборку видеоуроков по Go от канала **The Art of Development** новым материалом  https://t.me/goproglib/2603,5523,7,0,goproglib
2658,2022-05-23 20:49:12+00:00,"Небольшая подборка книг для Go-разработчиков, которая охватывает как работу с языком, так и книги для общего кругозора бэкенд-разработчика.

[Читать](https://tproger.ru/books/sem-glavnyh-knig-dlja-golang-razrabotchika-ot-donovana-i-kernigana-do-makdaujella/)",4445,14,1,goproglib
2657,2022-05-23 18:22:51+00:00,"Анонс библиотеки потоковой обработки данных **goio**, вдохновлённой Scala-библиотеками cats-effect и fs2.

[Читать](https://habr.com/ru/post/667164/)",4189,18,0,goproglib
2655,2022-05-22 16:00:07+00:00,"#news

Новости из мира Go-разработки:

— Релиз [GoLand 2022.1.1](https://blog.jetbrains.com/go/2022/05/13/goland-2022-1-1-is-out-with-syntax-highlighting-and-navigation-for-go-work-generics-related-inspections-and-more/)
— [Анонс GoLand 2022.2 EAP](https://blog.jetbrains.com/go/2022/05/20/goland-2022-2-early-access-program-is-now-open/)
— Релиз [Roaring 1.1](https://github.com/RoaringBitmap/roaring/releases/tag/v1.1.0)
— Релиз [cli 2.7](https://github.com/urfave/cli/releases/tag/v2.7.1)
— Релиз [golangci-lint 1.46.2](https://github.com/golangci/golangci-lint/releases/tag/v1.46.2)
— Добавлена конкретика в [proposal: Go 2: Lightweight anonymous function syntax](https://github.com/golang/go/issues/21498#issuecomment-1132271548)",4038,12,0,goproglib
2654,2022-05-22 13:00:11+00:00,"Как думаете, Go для новичка без боевого опыта — хороший выбор?

[Обсуждение на Reddit](https://www.reddit.com/r/golang/comments/uurhvs/is_go_a_good_language_for_a_newbie_with_no/)",3965,0,0,goproglib
2653,2022-05-22 09:40:11+00:00,"[​](https://telegra.ph/file/3b9848a6738ea63ff8cec.jpg) **К чему приводит обилие конкурентности в кодовой базе Go?**

В статье поговорим о том, какие проблемы возникают при конкурентном обращении нескольких потоков к одним и тем же данным.

https://proglib.io/sh/1ZUDVNWIXs",4082,9,0,goproglib
2652,2022-05-21 20:36:02+00:00,"Серия статей о работе со временем в Go:

— [Parse timestamp formats](https://dev.to/aohorodnyk/parse-timestamp-on-backend-m0h)
— [Parse time from different non timestamp formats](https://dev.to/aohorodnyk/parse-time-from-different-non-timestamp-formats-4kb9)
— [Universal time UnmarshalJSON implementation](https://dev.to/aohorodnyk/universal-time-unmarshaljson-implementation-3okm)",4297,5,0,goproglib
2651,2022-05-21 19:38:10+00:00,"Мнение одного из первых соавторов спецификации XML Тима Брея о дженериках.

[Читать](https://www.tbray.org/ongoing/When/202x/2022/05/14/Golang-Generics)",3951,6,0,goproglib
2650,2022-05-21 18:42:50+00:00,"[​](https://telegra.ph/file/6832c86e4510ca04bdea6.jpg)Практика использования **go-zero** для упрощения разработки RESTful API монолитного сервиса.

[Читать](https://betterprogramming.pub/developing-a-restful-api-with-go-b5150f693277)",4154,7,0,goproglib
2649,2022-05-20 19:34:08+00:00,"Примерно 600 строк Go-кода для реализации poc'а распределенной PostgresSQL.

[Читать](https://notes.eatonphil.com/distributed-postgres.html)",4337,10,0,goproglib
2648,2022-05-20 17:46:16+00:00,"Простой пример использования дженериков в Go: API для пагинации на клиентской стороне.

[Читать](https://vladimir.varank.in/notes/2022/05/a-real-life-use-case-for-generics-in-go-api-for-client-side-pagination/)",4294,8,0,goproglib
2647,2022-05-20 14:34:44+00:00,"[​](https://telegra.ph/file/0fd1604738f1348e48018.jpg)️ **25 полезных малоизвестных интернет-ресурсов для фронтендера и бэкендера**

Небольшой обзор интересных интернет-ресурсов в помощь специалистам цифровой индустрии: каталоги дорожных карт и шпаргалок, тесты веб-приложений, бесплатные макеты и иллюстрации, шаблоны резюме и многое другое.

https://proglib.io/sh/v3GP6WwUCe",3590,4,0,goproglib
2646,2022-05-20 09:01:38+00:00,"Прими участие в масштабном онлайн-хакатоне «Moscow City Hack 2022» от Агентства инноваций Москвы!

Тебя ждут:
 Призовой фонд 3 400 000 ₽;
 Задачи по разработке сервисов для мотивации студентов, привлечения волонтеров, цифрового маркетинга, импортозамещения и разоблачения fake news; 
 Эксперты от крупного бизнеса и Правительства Москвы;
 Образовательная программа с мастер-классами и интенсивами;
 Красочный мерч, подарки от партнеров и много крутых активностей 

 Хакатон пройдет 10-13 июня 2022 года

Регистрируйся уже сейчас!
https://bit.ly/3FTRpIP
Узнать подробности и найти команду можно в нашем Telegram-чате
t.me/MoscowCityHack",4069,0,0,goproglib
2645,2022-05-19 19:26:59+00:00,"**Go, from the beginning** (2022)

**Автор**: Chris Noring

Книга об основах Go, которая охватывает следующие темы:

— Создание CLI-приложений и веб-API
— Тестирование кода
— Разработка и публикация пакетов
— Организация кодовой базы
— Работа с файлами и каталогами
— Парсинг текста и многое другое",4924,12,2,goproglib
2644,2022-05-19 18:31:24+00:00,"Тестирование в Go: полный гайд с примерами.

[Читать](https://renatobogar.me/testing-in-go)",4541,1,1,goproglib
2643,2022-05-19 06:48:03+00:00,"️ Привет! Мы проводим опрос **«Что тебя больше всего раздражает в рабочем процессе и в программировании?»

** Говори прямо, не сдерживай себя. Орфографию и пунктуацию мы сохраним. Правда, вульгаризмы заменим на эвфемизмы, но без потери смысла :D

Что тебя больше всего раздражает на работе?  Бессмысленные комментарии к коду?  Постоянно отвлекают от работы, а потом ты полчаса входишь в рабочий процесс?  Переработки?  Срочные задачи в конце рабочего дня?  Низкий стол?  14"" электронно-лучевой  монитор? 

Опрос анонимный. Делись наболевшим. А в июне мы опубликуем статью со всеми ответами.

️ Опрос можно пройти по [ссылке](https://docs.google.com/forms/d/e/1FAIpQLScVJk_z1uoMTwiQw0mfc1xhkk0d9DKG9d7013Fdc2Ndz0ZIow/viewform?usp=sf_link) ⬅️",3774,2,0,goproglib
2642,2022-05-18 20:34:46+00:00,"Обработка статических файлов с помощью встроенных функций Go: http.Dir и http.FileServer.

[Читать](https://thedevelopercafe.com/articles/serving-static-files-in-go-f4acf2b4cfe5)",3869,1,2,goproglib
2641,2022-05-18 19:30:03+00:00,"**Архиватор на Go: серия видеоуроков по Go от Николая Тузова**

— Вводная часть, Variable-Length Code
— Каркас программы
— Алгоритм сжатия
— Распаковка сжатых файлов
— Работа над ошибками
— Рефакторинг
— Алгоритм Шеннона-Фано - теория
— Алгоритм Шеннона-Фано - реализация

[Смотреть](https://youtube.com/playlist?list=PLFAQFisfyqlX_pfTd09rT0zsl7BC6WTde)",4350,24,0,goproglib
2640,2022-05-18 18:49:53+00:00,"Несколько неочевидных трюков для работы с Go + testify.

[Смотреть](https://habr.com/ru/company/joom/blog/666440/)",4074,0,0,goproglib
2639,2022-05-18 15:00:23+00:00,"**30 мая стартует новый сезон конференции Techlead Crew**. Тема недели — «Continuous Delivery» или подходы и инструменты непрерывной поставки кода. Будет интересно не только техлидам, но всем, кто хочет выкатывать релизы в продакшен часто, быстро, качественно и с минимальными рисками для бизнеса.

__За неделю сессий вы:__
    Разберетесь в аббревиатурах CICDQAQC. 
    Узнаете все про AB тестирование и стратегии деплоймента.
    Научитесь собирать и тестировать нефункциональные требования на поставку вместе с экспертами из Bolt, AWS и Scentbird. 
    Оцените перспективность микрофронтенд-технологий на круглом столе.
    Узнаете, как выстроены CD процессы, выкатка новых фич, AB тестирование и проверка качества в компаниях мирового уровня.

__Если вы еще не разу не были на Podlodka Crew, то самое время попробовать! Главные фичи:__
   ⭐️ Узкая тема. Разбираем теорию и практику конкретного подхода или технологии.
   ⭐️ Удобное расписание: сессии идут 2 раза в день с понедельника по пятницу.
   ⭐️ Море практики, реальных кейсов и нетворкинга без границ

️ [Подробное расписание и билеты с хорошей скидкой уже на сайте!](https://podlodka.io/techcrew?utm_campaign=early_bird_techlead_crew_3&utm_source=telegram&utm_medium=paid&utm_content=goproglib) ⬅️ 
С нетерпением ждем на борту!",3850,5,0,goproglib
2638,2022-05-17 19:47:58+00:00,"Пополняем коллекцию учебных материалов для начинающих в Go:

— [Базовые концепции](https://blog.devgenius.io/learning-go-in-2022-boost-your-journey-6edc606ed030)
— [Углубляемся в конкурентность](https://blog.devgenius.io/learning-go-in-2022-boost-your-journey-part-2-2c23c401c7b5)",4680,4,0,goproglib
2637,2022-05-17 15:00:17+00:00,"Хочешь быть МЕГАХОРОШ в Apache Kafka?

Кафка сегодня – мегавостребованный инструмент: ее применяют Tesla, Adidas, Porsche, Netflix, Twitter, Uber и еще масса больших компаний. Именно поэтому Слёрм разработал 3-дневный онлайн-интенсив «Apache Kafka для разработчиков» (ссылка).

Тебя ждет полное погружение в практику, тонна увлекательных кейсов и уютное комьюнити, которое поддержит и не даст загрустить. Ты узнаешь обо всех тонкостях инструмента и научишься мастерски применять Кафку в работе. 

Стартуем 20 мая. Регистрируйся здесь: https://slurm.club/3sAWwYN",4009,5,0,goproglib
2636,2022-05-17 11:33:42+00:00,"[​](https://telegra.ph/file/d0ca7608f61e62ad1cac5.jpg) **Чем полезен Git Credential Manager?**

Обзор популярного менеджера аутентификации Git Credential Manager (GCM), обеспечивающего безопасную и удобную аутентификацию к репозиторию.

https://proglib.io/sh/yGKYarRFbH",3988,0,0,goproglib
2635,2022-05-17 06:19:10+00:00,"**«Библиотека программиста» находится в поиске автора оригинальных статей. 

Языки:
**– Python, JavaScript, Java, Go, SQL.

**Тематика:
**– Data Science, базовые концепции языков, продвинутый Python, JS (и т. д), бэкенд веб-приложений, фронтенд-разработка, системное программирование, базы данных.

**Объем:
**– от 5 до 10 тыс. знаков с пробелами.

[️ Заполнить анкету](https://docs.google.com/forms/d/e/1FAIpQLSdZRp4TjqpvNptKlIhHWa7go-I4-9u8Ft8cda8woK6URep_Zw/viewform?usp=sf_link) ⬅️

**Я хорошо программирую, но пишу «так себе». Что делать?
**Если ты хорошо программируешь, но навыки письма немного отстают, пройди наш бесплатный курс на Степике [«Статьи для IT: как объяснять и распространять значимые идеи»](https://stepik.org/course/101672/promo).",3594,3,0,goproglib
2634,2022-05-16 19:04:46+00:00,"В Твиттере сообщество [делится](https://twitter.com/golang/status/1526261198060236800) любимыми пакетами Go, с которыми начали работать в 2022 году. Поделитесь и вы любимыми пакетами в комментариях ",3968,2,4,goproglib
2633,2022-05-16 18:25:53+00:00,Пополнили подборку видеоуроков по Go от канала **The Art of Development** новым материалом  https://t.me/goproglib/2603,4053,6,0,goproglib
2631,2022-05-15 17:00:13+00:00,"Обзор и объяснение основных типов пакета `sync` в Go. 

[Читать](https://blog.devgenius.io/go-sync-101-39777f75a434)",4444,12,0,goproglib
2630,2022-05-15 14:09:17+00:00,"Интерфейсы в Go: основные антипаттерны и правильное использование на примерах. 

[Читать](https://8thlight.com/blog/go-interface-misuse/)",4863,6,0,goproglib
2629,2022-05-14 19:15:00+00:00,"Шпаргалка по Kubernetes Go ""Objects""",4546,14,0,goproglib
2628,2022-05-14 18:42:21+00:00,"Разбираемся с использованием команды `go run package@version` для управления зависимостями инструментов (в качестве альтернативы файлу `tools.go`).

[Читать](https://www.alexedwards.net/blog/using-go-run-to-manage-tool-dependencies)",4243,2,0,goproglib
2626,2022-05-14 11:20:26+00:00,"Основы и практика использования паттерна Singleton в Go. 

[Читать](https://thedevelopercafe.com/articles/singleton-in-golang-839d8610958b)",4332,8,2,goproglib
2625,2022-05-13 20:40:51+00:00,"Руководство по конкурентности в Go, основанное на некоторых примерах из книг **Go Concurrency in Go** и **Go Programming Language.

**[Читать](https://github.com/luk4z7/go-concurrency-guide)",6221,11,0,goproglib
2624,2022-05-13 15:42:04+00:00,"**Доклад на Google I/O 2022: «Рефакторинг облачных приложений в Go 1.18 с дженериками»**

  Узнайте, как работают дженерики в Go и когда нужно рефакторить существующий код, чтобы воспользоваться их преимуществами.

[Смотреть](https://youtu.be/-F2t3oInqKE)",4444,6,0,goproglib
2623,2022-05-13 15:09:09+00:00,"[​](https://telegra.ph/file/5322c2d4502a76bce6c8d.jpg) Представлены релизы Go 1.18.2 и 1.17.10, которые среди прочего включают исправление безопасности для syscall (CVE-2022-29526).

[Анонс](https://groups.google.com/g/golang-announce/c/Y5qrqw_lWdU)",3968,11,0,goproglib
2620,2022-05-12 19:32:45+00:00,"Цикл статей о разработке CLI-приложения с использованием Cobra, Viper и Bubbletea:

— [Часть 1. Определение](https://elewis.dev/charming-cobras-with-bubbletea-part-1) [структуры команд и стилей UI](https://elewis.dev/charming-cobras-with-bubbletea-part-1)",4246,6,0,goproglib
2619,2022-05-12 15:00:03+00:00,"Go-разработчик с нуля всего за год!

Нравится программирование, но не можете разобраться во всем самостоятельно? Мы поможем освоить новую профессию и расскажем, как найти высокооплачиваемую работу после обучения!
Переходите по ссылке ▶️ https://clc.to/qh5WWA

На курсе «Профессия Go-разработчик» вы получите базовые знания программирования, а также подробное обучение по работе с Golang. Пройдя обучающий курс, вы создадите крутое портфолио и сможете претендовать на должность junior-программиста.
Регистрируйтесь, 3 месяца обучения бесплатно!",3992,25,2,goproglib
2618,2022-05-12 11:30:57+00:00,"Технические детали реализации бота на Go + Postgres для блокчейна Signum, который позволяет легко следить за состоянием учетной записи и получать различные уведомления.

[Читать](https://habr.com/ru/company/karuna/blog/665344/)",4147,6,1,goproglib
2617,2022-05-12 06:00:03+00:00,"Бесплатная трансляция главного зала HighLoad++ Foundation. Здесь будут выступать ключевые спикеры конференции.

Для просмотра необходима только регистрация: [https://bit.ly/3MZLwvU](https://bit.ly/3MZLwvU)

Программа охватывает такие аспекты веб-разработок, как архитектуры крупных проектов, базы данных и системы хранения, devops и системное администрирование, нагрузочное тестирование, эксплуатация крупных проектов и другие направления, связанные с большими и высоконагруженными IT-системами.",4238,10,0,goproglib
2616,2022-05-11 19:00:06+00:00,"[​](https://telegra.ph/file/d3af694c322484984f464.jpg)История одной ошибки в Go-проекте, исправление которой увеличило скорость записи во внутреннюю БД более чем в 3,3 раза.

https://proglib.io/w/b13488c0",5553,0,0,goproglib
2615,2022-05-11 17:52:26+00:00,"Пишем и деплоим бэкенд для Slack (приложение интегрируется с Giphy API) с использованием Go, AWS Lambda Function URL, Go AWS CDK и Docker:

— [Using AWS Lambda Function URL to build a Serverless backend for Slack](https://itnext.io/using-aws-lambda-function-url-to-build-a-serverless-backend-for-slack-a292ef355a5d?gi=683d3cb5763f)
— [Package and deploy a Lambda function as a Docker container with AWS CDK](https://itnext.io/package-and-deploy-a-lambda-function-as-a-docker-container-with-aws-cdk-fd0df5e37de7)",4306,3,0,goproglib
2613,2022-05-10 14:29:00+00:00,"Сравнение примеров кода на Go и Java в разрезе конкурентности.

[Читать](https://mccue.dev/pages/5-2-22-go-concurrency-in-java)",4365,15,0,goproglib
2612,2022-05-09 20:13:05+00:00,"Пишем простой контроллер допуска в Kubernetes на Go и разворачиваем его в кластере. 

[Читать](https://bshayr29.medium.com/build-your-own-admission-controllers-in-kubernetes-using-go-bef8ba38d595)",4900,12,0,goproglib
2611,2022-05-09 08:51:21+00:00,"Серия статей **Laravel to Go** о шаблонах Laravel, которые можно реализовать с помощью Go:

— [Часть 1. Основы](https://medium.com/geekculture/laravel-to-go-part-1-basics-502fb236fdf0)
— [Часть 2. Маршрутизация и обработчики](https://medium.com/geekculture/laravel-to-go-part-2-routing-and-handlers-1303d8f529a5)",4697,25,1,goproglib
2610,2022-05-08 09:47:23+00:00,"Видеозаписи выступлений на конференции **Conf42 Golang 2022**.

 [Смотреть](https://youtube.com/playlist?list=PLIuxSyKxlQrDLKQOmnTsMndk0-xnwEuIM)",5805,14,1,goproglib
2609,2022-05-07 19:38:19+00:00,"Руководство по использованию OpenTelemetry Gin middleware для создания сквозной трассировки.

[Читать](https://dev.to/signoz/implementing-opentelemetry-in-a-gin-application-6l2)",4794,8,0,goproglib
2608,2022-05-07 11:03:58+00:00,"Краткий обзор результатов опроса разработчиков из сообществ [Fyne](https://fyne.io/) и [Gio](https://gioui.org/), заинтересованных в создании GUI с использованием Go:

— До 15% сообщества Go работают над GUI
— 32% респондентов выбрали Go из-за набора инструментов, а не из-за самого языка
— Fyne кажется более популярным, чем GTK+ и Qt вместе взятые, а Gio явно предпочтительнее GTK+

[Подробности](https://fynelabs.com/2022/05/03/go-gui-developer-survey-results/)",4664,5,6,goproglib
2607,2022-05-07 07:43:43+00:00,"**Data Science без знания математики – это как вождение машины без знаний ПДД**

__Почему так? Отщепенцы в дата сайенс юзают только чужие модели. Профи же создают свои модели и улучшают существующие __– __поэтому высоко ценятся!__

Хотите стать настоящим профессионалом в Data Science и решать любые задачи? Изучите линейную алгебру, матанализ, теорию вероятности, комбинаторику и другие разделы вышмата.

В этом поможет [курс «Математика для Data Science»](https://proglib.io/w/9f8d219f), специально разработанный преподавателями ВМК МГУ совместно с Proglib Academy 

Уникальная авторская программа поможет:
 • изучить разделы математики, необходимые для успешной работы в дата сайенс и анализе данных;
 • отработать навыки математического и абстрактного мышления;
 • подготовиться к поступлению в ШАД.
 
Хорошая новость для тех, кто подзабыл школьную математику – в программе есть блок, который поможет освежить и эти знания!

 [**Узнать больше о курсе **](https://proglib.io/w/9f8d219f)

Воспользуйтесь промокодом **PROGLIB**, чтобы получить **скидку 20% до 13 мая**!",4465,21,0,goproglib
2606,2022-05-06 19:55:52+00:00,"Пополняем коллекцию курсов для начинающих в Go. 

[Читать](https://dev.to/karanpratapsingh/learn-go-the-complete-course-plc)",5510,12,0,goproglib
2605,2022-05-06 18:16:50+00:00,"Daniel Martí по доброй традиции снова собрал предстоящие фичи Go в один тред: 

— [Читать в Твиттере](https://twitter.com/mvdan_/status/1522271576904937477)
— [Читать, если Твиттер не открывается](https://threadreaderapp.com/thread/1522271576904937477.html)",5076,3,0,goproglib
2604,2022-05-05 19:37:49+00:00,"Простой линтер для проверки горутин на наличие оператора defer.

[Репозиторий](https://github.com/nathants/go-hasdefer)",5290,4,1,goproglib
2603,2022-05-05 15:34:39+00:00,"Видеоуроки по Go от канала The Art of Development:

— [Дженерики в Go 1.18](https://youtu.be/itde7ImpWCU)
— [Фильтрация в REST API на Go и PostgreSQL](https://youtu.be/z9iHiY6AQ6s)
— Работаем с PostgreSQL в Go. Часть [1](https://youtu.be/YR9CDZqKS30) & [2](https://youtu.be/sLuQgC2GY3g) & [3](https://youtu.be/L-lJtV0-q_Y)
— Пишем полноценный production проект на Go. Часть [1](https://youtu.be/hb-9Lz-nuyM) & [2](https://youtu.be/gskSzKKeU2w) & [3](https://youtu.be/JYvWu-7vKY8)
— [Разбираемся с Neo4j + реализуем микросервис на Python + клиента на Go](https://youtu.be/gubppeDsWbE)
— [Уроки по Go - Advanced](https://www.youtube.com/watch?v=oTC-86QADI0&list=PLP19RjSHH4aENxkai8lzF0ocA4EZyS0vn)
— [Уроки по Go](https://www.youtube.com/watch?v=G6eZaX_lgbQ&list=PLP19RjSHH4aE9pB77yT1PbXzftGsXFiGl)
— [Паттерны в Go](https://www.youtube.com/watch?v=chS7DsGx4hU&list=PLP19RjSHH4aFX1OaVQc5CQZrpzmuXxuV1)",8963,35,0,goproglib
2602,2022-05-04 19:42:24+00:00,"[​](https://telegra.ph/file/f8e9ba04a5de3d0d18fe5.mp4)Bubble Tea в действии на примере обновленного CLI в [inngest](https://github.com/inngest/inngest-cli).

[Читать статью](https://www.inngest.com/blog/interactive-clis-with-bubbletea)",5407,4,0,goproglib
2601,2022-05-03 18:00:08+00:00,"Краткое, но ёмкое введение в дженерики для начинающих: Как они работают, как влияют на производительность, когда имеет смысл их использовать?

[Читать](https://dominikbraun.io/blog/a-gentle-introduction-to-generics-in-go/)",5500,0,0,goproglib
2600,2022-05-03 15:30:02+00:00,"Запись трансляции Go-митапа от СберМаркет Tech:

— «Генерируем данные тестов за вас» (Егор Урванов, Team Lead СберМаркет)
—  «Как взять контроль над ошибками в свои руки и начать жить» (Дмитрий Лукиянчук, Team Lead СберМаркет)
— «Как написать больше кода, написав меньше кода» (Александр Сусиков, Team Lead СберМаркет)

 [Смотреть](https://youtu.be/na5eUf_cXbY)",5039,20,0,goproglib
2599,2022-05-03 12:28:04+00:00,"Описание рабочего кейса локального тестирования и запуска Go + AWS API Gateway и Lambda.

[Читать](https://boyter.org/posts/testing-running-api-gw-lambda-locally/)",4263,0,0,goproglib
2598,2022-05-02 12:05:02+00:00,"Руководство от freeCodeCamp: основы анализа данных на Go с использованием пакета [Gota](https://github.com/go-gota/gota).

[Читать](https://www.freecodecamp.org/news/exploratory-data-analysis-in-go-with-gota/)",4600,16,0,goproglib
2597,2022-05-02 09:20:52+00:00,"#news 

Немного новостей из мира Go:

— [What’s Next: GoLand 2022.2 Roadmap](https://blog.jetbrains.com/go/2022/04/28/goland-2022-2-roadmap/)
— [Релиз Ebiten 2.3](https://ebiten.org/documents/2.3.html)
— [Релиз caddy v2.5.0](https://github.com/caddyserver/caddy/releases/tag/v2.5.0)
— [Релиз go-toml v2.0.0](https://github.com/pelletier/go-toml/releases/tag/v2.0.0)
— [Релиз go-zero ](https://github.com/zeromicro/go-zero/releases/tag/v1.3.3)[v1.3.3](https://github.com/zeromicro/go-zero/releases/tag/v1.3.3)",4407,6,0,goproglib
2596,2022-05-01 12:53:07+00:00,"Varun Gandhi, разработчик из [Sourcegraph](https://about.sourcegraph.com/), в течение полугода использует Go и делает заметки о положительных и отрицательных аспектах языка, с которыми сталкивается в ходе работы. Судя по всему, их набралось настолько много, что получилась целая статья. 

[Читать](https://typesanitizer.com/blog/go-experience-report.html)",4586,7,0,goproglib
2595,2022-04-30 13:31:01+00:00,"Jon Bodner, автор книги [Learning Go: An Idiomatic Approach to Real-World Go Programming](https://www.amazon.com/Learning-Go-Idiomatic-Real-World-Programming/dp/1492077216), рассказывает, как упростить конкурентность в Go с помощью дженериков.

[Читать](https://medium.com/@jon_43067/go-generics-and-concurrency-d0dccab73a73)",4850,10,2,goproglib
2594,2022-04-29 19:00:05+00:00,"Гайд от TutorialEdge: реализация проверки JSON-запроса в проекте на Go с использованием пакета [validator](https://github.com/go-playground/validator).

[Читать](https://tutorialedge.net/golang/validating-http-json-requests/)",4893,3,2,goproglib
2593,2022-04-29 17:59:19+00:00,"Руководства, которые помогут освоить фаззинг в Go: 

— [Основы](https://blog.fuzzbuzz.io/go-fuzzing-basics/)
— [Практика использования](https://blog.fuzzbuzz.io/writing-effective-go-fuzz-tests/)",6231,2,0,goproglib
2592,2022-04-29 15:28:50+00:00,"Всем привет! 

Нам часто поступают вопросы о курсе по английскому для IT. Мы всерьез заинтересовались этой темой и хотим узнать у вас, нашей аудитории, насколько это востребованно.

[Опрос](https://proglib.io/w/7af5dbc0) займет не более 10 минут, но нам очень важно знать ваше мнение. Итоговые результаты опроса опубликуем через неделю.

[Пройти опрос можно тут.](https://proglib.io/w/7af5dbc0)",4072,3,0,goproglib
2591,2022-04-28 19:56:08+00:00,"Знакомимся с базовыми возможностями ORM Bun. 

[Читать](https://habr.com/ru/post/663332/)",4673,7,1,goproglib
2589,2022-04-27 20:25:34+00:00,"[Интересные](https://christine.website/blog/gonads-2022-04-24) размышления о том, где не стоит использовать дженерики. Естественно, тема вызвала бурные обсуждения на [Hacker News](https://news.ycombinator.com/item?id=31149801).",4393,2,0,goproglib
2588,2022-04-27 18:43:30+00:00," **compress** — инструмент, который предоставляет различные оптимизированные алгоритмы сжатия данных.

[Репозиторий](https://github.com/klauspost/compress)",4391,5,0,goproglib
2587,2022-04-27 15:00:02+00:00,"**Tinkoff Invest Robot Contest — конкурс по разработке торговых роботов 

**Задача участников — создать робота на новом API Тинькофф Инвестиций, который реализует одну из торговых стратегий на бирже. Всего в конкурсе семь номинаций: 

— четыре для лучших решений на языках Java, Go, Python и JavaScript;
— лучший торговый робот для мобильных устройств;
— самое оригинальное использование API;
— и лучший интерфейс (визуализация) торговой стратегии.

Победители в каждой категории получат 200 000 рублей. Решения принимают до 23 мая включительно.

[Зарегистрироваться и прочитать подробнее о конкурсе](https://o.tinkoff.ru/tinkoff-invest-robot)",4353,20,3,goproglib
2586,2022-04-26 19:45:00+00:00,"Быстрый обзор интересных фич Go.

[Читать](https://levelup.gitconnected.com/features-in-go-you-will-like-77b3a3a64417)",5606,8,0,goproglib
2585,2022-04-26 19:16:48+00:00,"Пишем REST API с использованием Gin + GORM.

[Читать](https://carlosmv.hashnode.dev/building-a-rest-api-with-go-gin-framework-and-gorm)",4674,14,4,goproglib
2583,2022-04-25 20:04:57+00:00,"[​](https://telegra.ph/file/b291755dbec096d340f73.jpg)#news 

[Представлены](https://groups.google.com/g/golang-announce/c/oecdBNLOml8) Go 1.18.1 / 1.17.9 + [пропоузал](https://github.com/golang/go/commit/72e77a7f41bbf45d466119444307fd3ae996e257) по сортировке (pdqsort, Pattern-defeating quicksort).",4453,9,0,goproglib
2582,2022-04-25 16:33:40+00:00,"[​](https://telegra.ph/file/e0b501d1bf1e83b532ce2.jpg)Практика использования [go-zero](https://github.com/zeromicro/go-zero) для быстрой разработки монолитного сервиса с несколькими модулями.

[Читать](https://dev.to/kevwan/best-practices-on-developing-monolithic-services-in-go-3c95)",4641,1,0,goproglib
2581,2022-04-24 19:36:21+00:00,"Опубликована третья статья серии рассказов о подводных камнях, которые можно встретить в начале разработки на Go.

https://t.me/goproglib/2309",4865,0,0,goproglib
2580,2022-04-24 08:49:29+00:00,"Если вы сомневаетесь в целесообразности использования дженериков, руководство под названием «Когда использовать дженерики» точно для вас.

[Читать](https://go.dev/blog/when-generics)",6292,11,1,goproglib
2579,2022-04-23 19:38:18+00:00,"Разбор решения, которое используется в [Nutanix](https://www.nutanix.dev/) для поиска и очистки конфиденциальных данных в структурах Go. 

[Читать](https://www.nutanix.dev/2022/04/22/golang-the-art-of-reflection/)",4658,1,0,goproglib
2578,2022-04-22 19:05:15+00:00,"Глубокое погружение в Go для функций [OpenFaaS](https://www.openfaas.com/): как благодаря Go 1.18 улучшилась локальная разработка, как структурировать код и многое другое.

[Читать](https://www.openfaas.com/blog/golang-deep-dive/)",5066,5,0,goproglib
2577,2022-04-21 19:00:08+00:00,Разработчик платежной системы в Delivery Club Денис Лимарев [рассказывает](https://habr.com/ru/company/deliveryclub/blog/646081/) о линтере на базе библиотеки [go-ruleguard](https://github.com/quasilyte/go-ruleguard) (by [Искандер](https://github.com/quasilyte)) и [углубляется](https://habr.com/ru/company/deliveryclub/blog/661631/) в неочевидные приемы написания правил.,5037,8,0,goproglib
2576,2022-04-21 18:00:09+00:00,"**Краткие итоги опроса Go-разработчиков в 2021 году**:

— Большинство ответов соответствовали предыдущим годам. Например, удовлетворенность Go по-прежнему очень высока — 92% , а 75% респондентов используют Go в рабочих целях 
— Отсутствующие критически важные библиотеки, языковые функции и инфраструктура были наиболее распространенными препятствиями для использования Go (важно, что опрос проводился до выпуска Go 1.18 с дженериками, отсутствующей функцией №1, о которой чаще всего сообщалось)
— Респонденты хотят уделить первоочередное внимание улучшениям в области отладки и управления зависимостями
— Самые большие проблемы при использовании модулей касались управления версиями, использования частных репозиториев и многомодульных рабочих пространств (важно, что опрос проводился до Go 1.18, в котором были представлены Go Workspaces, решающие многие из этих проблем)
— 81% респондентов уверены в долгосрочной перспективе Go

 [Подробнее](https://go.dev/blog/survey2021-results)",4576,15,0,goproglib
2575,2022-04-21 15:00:02+00:00,"**GO meetup

1. Graceful Shutdown или как красиво уйти** - Сапогов Никита, Ситилинк
__Расскажу про то как изящно завершать приложение, учитывая большое кол-во внутренних и внешних факторов, а так же расскажу про нашу маленькую абстракцию которая намв этом помогает.

__**2. Дженерики на практике: производительность и вот это вот всё** - Керножицкий Максим, СберМегаМаркет
__Рассмотрим реализацию дженериков в go 1.18 с позиции производительности и усложнения конструкций языка

__**3. Круглый стол - Организация команды в условиях кризиса
**__В условиях информационного хаоса не хватает позитивной и полезной информации. Поэтому сразу после Go meetup 20 апреля мы решили провести круглый стол, где поговорим, как организовать команду в условиях кризиса. 

__

 26 апреля, начало в 19:00 мск, Вторник

 **ОНЛАЙН

**[](https://meetups.evrone.com/online-golang-meetup-0?utm_source=tg&utm_medium=ITMeeting) [Регистрация на мероприятие](https://meetups.evrone.com/go-meetup-online?utm_source=tg&utm_medium=goproglib&utm_campaign=online_go_meetup)",5818,19,2,goproglib
2574,2022-04-20 19:57:47+00:00,"[​](https://telegra.ph/file/0bb34b722fc03ced3dcc8.jpg)Разбор принципов работы механизма **TimingWheel** в [go-zero](https://github.com/zeromicro/go-zero), который позволяет разработчикам планировать множество отложенных задач. 

[Читать](https://faun.pub/implement-a-timing-wheel-for-millions-of-concurrent-tasks-942c8d9e4abe)",4787,6,0,goproglib
2573,2022-04-19 09:50:05+00:00,"**Реверс Go-бинарей с использованием Ghidra **

Запись доклада на **Hack In The Box Cyber Week 2021** о реверсе Go-бинарей с помощью Ghidra. Доклад включает введение в семейства вредоносных IoT-программ, написанные на Go, обсуждение уникальных особенностей и препятствий бинарных файлов Go, решение распространенных проблем при реверсе вредоносного ПО на Go, разбор сценариев Ghidra, которые используют докладчики в ходе реверса, а также исследование последних разработок вокруг обфускации Go и криптеров Linux.

 [Смотреть](https://youtu.be/J2svN8h21oo)",6719,14,0,goproglib
2572,2022-04-18 18:52:57+00:00,"Всем привет! 

5 дней назад мы провели тест на знание математики и **теперь рады объявить победителей!** 

К сожалению, среди тех, кто прошёл тест, были и те, кто отвечал на каждый вопрос меньше 12 секунд

Наш умный алгоритм вычислил таких участников — новые аккаунты, которые очень быстро проходили тест. Естественно, их мы не учли. 

А теперь объявляем первых трёх победителей, которые получат бонус на номер телефона: 

@M*********i
@O***L
@f****g

С вами свяжется менеджер в ближайшее время! 

Как и обещали, остальным 30 мы отправим сертификат на обучение в [proglib.academy](https://proglib.io/w/cff56588) в размере 10 тыс. руб.

 Не расстраивайтесь, если что-то не получилось, подтянуть знания по математике можно всегда на курсе Библиотеки программиста «[Математика для Data Science](https://proglib.io/w/09fab809)», который мы создали вместе с преподавателями МГУ.",4760,4,0,goproglib
2571,2022-04-18 13:26:48+00:00,"Привет!  Мы ищем **контент-менеджера** для ведения наших профильных тг-каналов. Увлеченность вопросами разработки и информационных технологий обязательна.

️ [Подробнее о вакансии
](https://stavropol.hh.ru/vacancy/54741613)️ [Форма для отклика](https://forms.gle/yeCRciQrkEq6TCXx9)",4177,3,0,goproglib
2570,2022-04-17 17:35:52+00:00,"8,5 часов убойной практики по Go от freeCodeCamp.

 [Смотреть](https://youtu.be/jFfo23yIWac)",7304,20,2,goproglib
2569,2022-04-17 14:00:06+00:00,"Три дня напряженной работы над пет-проектом и простая система контроля версий на чистом Go готова. Автор проекта [vX](https://github.com/Abdulsametileri/vX) рассказывает, как это было. 

[Читать](https://levelup.gitconnected.com/how-was-i-build-a-version-control-system-vcs-using-pure-go-83ec8ec5d4f4)",4945,11,5,goproglib
2568,2022-04-17 10:52:40+00:00,"Представлен официальный релиз GoLand 2022.1 с поддержкой дженериков, Go workspaces и новыми возможностями для работы с микросервисами. С основными изменениями можно познакомится в статье.

[Читать](https://www.jetbrains.com/go/whatsnew/)",4684,19,13,goproglib
2567,2022-04-16 17:27:07+00:00,"На популярном сайте **Рефакторинг.Гуру**, который посвящён тёмным материям программирования (рефакторингу, паттернам проектирования, принципам SOLID и другим важным темам из мира программирования), появился раздел с примерами на Go .

https://proglib.io/w/ae6ad9c8",5243,27,5,goproglib
2566,2022-04-15 19:40:50+00:00,Разбор задач для Go-разработчиков с платформы All Cups: https://proglib.io/w/10bb9ff4,5076,7,0,goproglib
2565,2022-04-15 18:12:54+00:00,"Обновлённое руководство по разработке через тестирование с помощью Go 

https://proglib.io/w/40f22786",5130,5,0,goproglib
2564,2022-04-14 19:57:07+00:00,"Разбираемся, почему стоит избегать использования `ctx.WithTimeout` / `ctx.WithDeadline` с кодом, который выполняет сетевые вызовы.

https://proglib.io/w/60ed0e89",7400,8,0,goproglib
2563,2022-04-14 19:29:29+00:00,"Расшифровка доклада на конференции Conf42 об использовании Go в событийно-ориентированной архитектуре

https://proglib.io/w/98aa6132",4835,7,2,goproglib
2562,2022-04-14 11:42:25+00:00,"[​](https://telegra.ph/file/225a1e5d376f723545a0d.jpg) **Основные SQL-команды и запросы с примерами, которые должен знать каждый разработчик**

В небольшом обзоре разберем наиболее важные команды языка запросов SQL и сделаем шаг в сторону грамотного изучения работы с базами данных.

https://proglib.io/sh/wyurktzTaZ",4078,6,0,goproglib
2561,2022-04-13 19:30:09+00:00,Кратко об изменениях функции append в Go 1.18: https://proglib.io/w/22e06902,5429,26,0,goproglib
2560,2022-04-13 06:19:54+00:00,"Описание кейса 80-кратного улучшения производительности кэширования в Go за счёт отказа от JSON в пользу gob.

https://proglib.io/w/80e45664",6432,16,0,goproglib
2559,2022-04-12 17:40:48+00:00,"Привет!

Программист? А как хорошо ты знаешь математику?

** Приготовься пройти тест по математике и проверить свои знания!**

__Мы собрали 15 интересных примеров__, решив которые, первые 30 человек получат **сертификат на 10 тыс. рублей** на обучение в онлайн-школе [proglib.academy](https://proglib.io/w/cff56588), а также те, кто займут первые три места, получат **вознаграждение** в размере 1500, 1000 и 500 руб., соответственно. 

 Результаты объявим через 5 дней, успехов! 

Пройти тест можно [по ссылке](http://t.me/QuizBot?start=iZiyH6gQ).",4546,0,0,goproglib
2558,2022-04-12 13:34:42+00:00,"Руководитель эксплуатацией инфраструктуры крупного хайлоад-проекта делится опытом разработки бота на Go для различных мессенджеров.

https://proglib.io/w/44556f5a",4463,7,0,goproglib
2556,2022-04-11 20:01:56+00:00,Простенький конструктор гоферов: https://proglib.io/w/39cd1aac,4641,17,2,goproglib
2555,2022-04-11 19:27:45+00:00,Шпаргалка по методам работы со слайсами в Go: https://proglib.io/w/ba1a955f,4874,16,0,goproglib
2553,2022-04-10 10:44:39+00:00,[​](https://telegra.ph/file/3fd5831541721ddc3a444.jpg)Go concurrency изнутри: https://proglib.io/w/4470561c,5213,12,0,goproglib
2552,2022-04-10 07:35:03+00:00,Серия видеоуроков от Николая Тузова о разработке Telegram-бота на Go: https://proglib.io/w/ec9c714e,5001,25,1,goproglib
2551,2022-04-09 18:35:38+00:00,"Объяснение принципа работы горутин и каналов в Go на примере игры в пинг-понг.

https://proglib.io/w/c242e843",5048,14,0,goproglib
2550,2022-04-09 15:42:21+00:00,"Разбираемся, как эффективно писать структуры в Go с точки зрения производительности.

https://proglib.io/w/08983150",4967,25,0,goproglib
2549,2022-04-09 12:00:08+00:00,"**Создайте игру «Звездные войны» и приложите в свое портфолио**

Старт 2-го потока [интенсива «Архитектуры и шаблоны проектирования»](https://proglib.io/w/4dfb4f60) **уже 15 мая**. 

️Освойте основные паттерны проектирования и прокачайте свои навыки архитектора программного обеспечения.

️В течение всего интенсива вы будете создавать игру «Звездные войны». У вас будет собственный корабль, который научится летать по полю битвы, стрелять основным оружием и применять секретное оружие.

**Для кого?** Интенсив подойдет как **новичкам**, так и **опытным разработчикам**, у которых есть опыт написания программ на объектно-ориентированном языке программирования.

Присоединяйтесь, пока действует **скидка 50%** до 14 апреля!

[Узнать подробнее и записаться можно на сайте.](https://proglib.io/w/4dfb4f60)",4361,2,0,goproglib
2548,2022-04-09 08:56:53+00:00,"**Learning Go Programming: Build ScalableNext-Gen Web Application using Golang** (2021)

Автор: **Shubhangi Agarwal**

Книга позволяет погрузиться в основные темы разработки на Go и затрагивает базовые основы создания веб-приложений. В ходе прочтения вы:

— Разберетесь с основами Go, изучите его историю и назначение
— Узнаете, как работать с переменными, константами, типами данных, операторами, управляющими структурами и функциями, как создавать собственные пакеты и устанавливать сторонние пакеты
— Поймете, как в Go достигается конкурентность с использованием горутин, мьютексов и каналов, как обрабатываются ошибки в Go и поддерживаемых библиотеках
— Ознакомитесь со стандартными библиотеками Go и многим другим",4890,12,0,goproglib
2547,2022-04-08 19:09:11+00:00,"Книга Go 101 теперь адаптирована под Go 1.18 

https://proglib.io/w/e08992ba",4848,19,0,goproglib
2546,2022-04-08 15:00:19+00:00,"«Лаборатория Касперского» объявляет набор на стажировку в команду мобильной разработки!

**Регистрируйтесь на митап **[**Kaspersky SafeBoard Mobile talks**](https://safeboard.kaspersky.ru/events/kaspersky-safeboard-mobile-talks/?utm_source=seed&utm_medium=telegram&utm_campaign=safeboard_mobile_talks&utm_term=goproglib) **, чтобы узнать:
** - о сложностях и преимуществах мобильной разработки;
 - о стажировках в команде, задачах и перспективах развития, а также о каждом направлении отбора;
 - как попасть в штат после стажировки — пообщаемся с недавними стажерами и подскажем, как расти еще быстрее! 

И, конечно же, ответим на твои вопросы!

Онлайн-встреча пройдет **21 апреля в 17:00**, где тебя ждет знакомство с командами и тестовое задание.

Скорее подавай заявку [по ссылке](https://safeboard.kaspersky.ru/events/kaspersky-safeboard-mobile-talks/?utm_source=seed&utm_medium=telegram&utm_campaign=safeboard_mobile_talks&utm_term=goproglib), заполняй анкету и получи возможность пройти отбор на стажировку в «Лабораторию Касперского».

Стань частью нашей команды!",4360,1,0,goproglib
2545,2022-04-08 13:58:51+00:00,"Сравнение Go и C/C++ с точки зрения embedded-разработки. Спойлер: естественно, Go нельзя рассматривать как замену C, однако во многих ситуациях существует большой потенциал для его использования.

https://proglib.io/w/0ada01f1",4198,0,0,goproglib
2544,2022-04-08 10:04:00+00:00,"Всем привет! 

«Библиотека программиста» проводит [опрос](https://proglib.io/w/77849b95) о заинтересованности родителей в дополнительном образовании для детей. В частности, о перспективах обучения детей программированию. Нам очень важно знать Ваше мнение, чтобы использовать Ваши пожелания и ответы при разработке курсов для детей онлайн-школы [proglib.academy](https://proglib.io/w/413d2b0e). 

Опрос займет не более 10 минут, но будет полезен для нашего будущего развития. 

Ваше мнение очень важно! 

https://proglib.io/w/77849b95",4249,3,2,goproglib
2543,2022-04-07 11:15:14+00:00,Свежее руководство по **Go workspaces**: https://proglib.io/w/19990e86,4463,3,0,goproglib
2542,2022-04-06 19:37:42+00:00,"Краткое руководство по быстрой проверке Go-сервиса на соответствие базовым требованиям безопасности.

https://proglib.io/w/302fade0",8540,6,0,goproglib
2541,2022-04-06 11:22:03+00:00,"Документ показывает, как и к чему приводит обилие конкурентности в кодовой базе Go наряду с языковыми идиомами и нюансами.",4927,14,5,goproglib
2540,2022-04-05 19:00:06+00:00," **goenv** — как pyenv и rbenv, но для Go.

https://proglib.io/w/aff8130e",5274,5,3,goproglib
2539,2022-04-05 18:02:38+00:00,Пробуем дженерики на практике с Николаем Тузовым: https://proglib.io/w/8b36815b,6101,12,2,goproglib
2538,2022-04-05 15:00:11+00:00,"[​](https://telegra.ph/file/5572f293f90fc24b323be.jpg)21 апреля в Слёрм стартует курс **«Безопасность проекта: аутентификация в Keycloak»

**‍Keycloak — опенсорсный инструмент для настройки уровня безопасности в приложениях. Он упрощает реализацию защиты, позволяет отделить управление пользователями от логики приложения, организовать SSO и многое другое.

️На курсе вы получите фундаментальные знания по работе с Keycloak и узнаете, как обеспечьте безопасность проекта с минимальными усилиям

Кому подойдёт курс
— DevOps-инженерам — поймёте, зачем нужен Keycloak, и научитесь его разворачивать и поддерживать.
— Разработчикам — узнаете, когда можно не писать свою аутентификацию, и научитесь работать с OIDC из вашего приложения.
— Тимлидам и техническим директорам — разберётесь, как использовать единый инструмент аутентификации для вашей инфраструктуры и приложений.

Спикеры:
— Виктор Попов, Техлид DevOps-команды платформы корневых сервисов в X5 Tech.
— Ирина Блажина, Корпоративный архитектор X5 Group

⏱Длительность: 1 неделя, старт  21 апреля

Посмотреть программу и записаться: https://slurm.club/3NN8x6w",4215,5,0,goproglib
2537,2022-04-04 19:16:37+00:00," **dasel** — инструмент, который позволяет выбирать, вставлять и удалять данные из файлов JSON, TOML, YAML, XML и CSV. 

Инструмент поддерживает преобразование между форматами и может использоваться как пакет Go.

https://proglib.io/w/0e4cc569",4440,10,0,goproglib
2536,2022-04-04 11:53:32+00:00,Разбираем внутренности горутин и каналов в Go: https://proglib.io/w/94177b59,6298,9,1,goproglib
2535,2022-04-03 09:16:42+00:00," **Testza** — полнофункциональный фреймворк для тестирования в Go, который может использоваться со стандартным инструментом `go test`.

https://proglib.io/w/4568572b",4727,7,0,goproglib
2534,2022-04-02 18:00:06+00:00,Go + Fiber в действии: https://proglib.io/w/6ddd21c8,4775,20,3,goproglib
2533,2022-04-02 15:30:36+00:00,"Менее чем 500 строк кода на Go и документоориентированная БД с поддержкой фильтров и индексов, подобных Lucene, готова.

https://proglib.io/w/4eca96a1",4559,17,0,goproglib
2532,2022-04-01 18:46:29+00:00,Лонгрид с вопросами и ответами для подготовки к Go-собеседованию: https://proglib.io/w/0a28f8e1,8416,31,0,goproglib
2531,2022-04-01 13:00:09+00:00,"Подборка статей, в которой представлен опыт работы с Go, AWS Lambda & CDK:

 [Go CDK - building Go Lambda functions](https://adrianhesketh.com/2021/07/17/go-cdk-building-go-lambda-functions/)
 [Github Actions CI/CD for Go AWS CDK projects](https://adrianhesketh.com/2021/07/24/github-actions-ci-cd-for-go-aws-cdk-projects/)
 [Trigger Fargate tasks on S3 upload with Go CDK](https://adrianhesketh.com/2021/10/15/trigger-fargate-tasks-on-s3-upload-with-go-cdk/)
 [Using AWS API Gateway V2 with Go Lambda functions](https://adrianhesketh.com/2021/12/20/aws-api-gateway-v2-go-lambda-http-handler-adaptor/)
 [Setting up an encrypted AWS Lambda dead letter queue with Go CDK](https://adrianhesketh.com/2022/02/28/aws-go-cdk-encrypted-sqs-lambda-dead-letter-queue/)
 [Alerting on errors in CloudWatch Logs, AWS Lambda, and API Gateway with Go CDK](https://adrianhesketh.com/2022/03/02/aws-go-cdk-lambda-error-alerting/)",6146,7,0,goproglib
2530,2022-04-01 11:03:17+00:00," **ТОП** **4 альтернативы YouTube в 2022 году (на случай блокировки)**

Чем все-таки заменить YouTube? Рассказываем [в новом ролике](https://youtu.be/GJ7FMawHask) о лучших альтернативах YouTube в 2022 году.",4294,43,7,goproglib
2529,2022-03-31 19:04:37+00:00,"Пример интеграции end-to-end тестирования в open source Go-проект [arkade](https://github.com/alexellis/arkade).

https://proglib.io/w/19d3c794",4236,1,0,goproglib
2528,2022-03-31 18:00:06+00:00,"У дженериков тоже есть обратная сторона. Разбираемся, как они могут замедлить ваш код на Go.

https://proglib.io/w/afd50e07",6631,4,1,goproglib
2527,2022-03-31 15:00:11+00:00,"**Бесплатный курс: продвинутая** **Go-разработка

3 апреля** прими участие в [**отборочном контесте**](http://cups.online/ru/contests/route256-2/?utm_source=tg&utm_medium=social&utm_campaign=goproglib) и развивайся под менторством экспертов Ozon.

**После курса ты сможешь:
**Писать на Golang
Разрабатывать надежный и поддерживаемый код
Проектировать сложные распределенные системы
Обеспечивать мониторинг и поддержку созданных систем
Работать в самой быстрорастущей отрасли

**Как попасть на курс?
**[Зарегистрируйся на контест на платформе All Cups](http://cups.online/ru/contests/route256-2/?utm_source=tg&utm_medium=social&utm_campaign=goproglib) ️ 3 апреля пройди контест ️ попади в рейтинг лучших ️ проходи бесплатно курс от Ozon.

[**Регистрация на отборочный контест**](http://cups.online/ru/contests/route256-2/?utm_source=tg&utm_medium=social&utm_campaign=goproglib)",4293,0,0,goproglib
2526,2022-03-30 19:22:41+00:00,"Технические детали уязвимости CVE-2021-39137, выявленной в go-ethereum. Как утверждает автор, Rust мог предотвратить данную ошибку.

https://proglib.io/w/3dba6aef",4771,3,0,goproglib
2525,2022-03-30 17:28:56+00:00,Разбираем детали компиляции вызовов методов интерфейса в Go: https://proglib.io/w/7023ef0e,4237,0,0,goproglib
2524,2022-03-30 14:45:03+00:00,"Основы безопасности web-приложений: воркшоп proglib.academy X REG RU –– **в эфире через 15 минут**!

Занятие полезно для всех, кто планирует развиваться в сфере кибербезопасности, в частности, в направлении разработки web-приложений. 

️На вебинаре вы узнаете о современных методах защиты web-приложений от кибератак. 

Рассказывает **Артём Мышенков**, инженер по безопасности лидера рынка хостинг-провайдеров REG RU и эксперт в области защиты данных и уязвимостей в безопасности web-приложений.

Подключайтесь по ссылке в 18.00, Мск – https://youtu.be/5Qzjjy3mxaQ",4228,3,0,goproglib
2523,2022-03-29 19:41:00+00:00,"Анонс беты GoLand 2022.1 

https://proglib.io/w/fce382d8",4242,15,7,goproglib
2522,2022-03-29 18:20:11+00:00,"#cheatsheet 

Шпаргалка по Git от GitHub Education",3833,9,0,goproglib
2521,2022-03-29 15:00:14+00:00,"Становимся гуру Кафки! Бэкенд-разработчик рано или поздно столкнется с Кафкой. Обучение поможет встретиться с ней как со старым другом, а не встречным автомобилем.

20 мая нас ждёт интенсив «Кафка для разработчиков». Начинаем с основ, забираемся в самые недра!

Программа:
1. Введение
2. Определение терминов
3. Архитектура Кафки 
4. Основы использования Кафки 
5. Алгоритмы на Кафке
6. Транзакции с использованием Кафки 
7. Событийно-ориентированная архитектура
8. Изнасилование Кафки (Kafka как база данных)

Будем использовать Golang и Java.

Всё удовольствие стоит 60 000 ₽.
Записаться: https://slurm.club/35hl2G1",4264,11,6,goproglib
2520,2022-03-29 12:25:59+00:00,"** storage **— библиотека, которая позволяет обеспечить общий интерфейс для работы с несколькими облачными хранилищами.

https://proglib.io/w/08952bb8",4076,3,0,goproglib
2519,2022-03-28 19:00:06+00:00,Go + [Colly](http://go-colly.org/) в действии: https://proglib.io/w/8a3f10ee,4316,8,5,goproglib
2518,2022-03-28 18:00:09+00:00,Простые советы по оптимизации проектов на Go: https://proglib.io/w/be787010,5805,12,2,goproglib
2512,2022-03-28 15:03:27+00:00," Мы — команда айтишников. В текущих условиях компания не может работать как работала, и мы решили переехать всей командой. 

 Создали канал для таких же, как мы, — тех, кто хочет уехать. Собираем всё самое полезное про релокацию. Рассказываем, с чем столкнулись сами, ищем лайфхаки и способы похачить систему (например, нашли несколько способов, как жить за границей на рубли).
[Присоединяйся](https://t.me/RelocationDEV) и узнаешь, как сделать так, чтобы твой котик не остался за бортом самолёта",3940,47,6,goproglib
2511,2022-03-27 12:00:05+00:00,"На примере простой задачи обработки данных телеметрии разбираем возможности фреймворка Flogo.

https://proglib.io/w/9d37fc22",4212,3,0,goproglib
2509,2022-03-27 07:36:16+00:00,"Плейлист с докладами на конференции **Saint HighLoad++ 2021**, посвящённой высоконагруженным системам и не только.

https://proglib.io/w/3268eb51",3532,12,0,goproglib
2508,2022-03-26 17:09:15+00:00,"Анализ и исправление утечки памяти в проекте на Go: кейс команды [Glean](http://www.glean.com/).

https://proglib.io/w/e8e92362",4203,0,0,goproglib
2507,2022-03-26 12:00:01+00:00,"Dominic Black из [Encore](https://encore.dev/) рассказывает, как он и его команда использовали возможности Go 1.18 при разработке функционала генерации идентификаторов.

https://proglib.io/w/0ece1f9e",4181,6,0,goproglib
2506,2022-03-25 20:28:41+00:00,"Разворачиваем простой Go-проект в Kubernetes с помощью helm charts и скриптов skaffold. 

https://proglib.io/w/0f11ea74",4847,11,0,goproglib
2505,2022-03-25 06:00:02+00:00,"**Приходи на бесплатный курс «Golang разработчик», изучи новый язык за 3 месяца и получи оффер в ****#CloudMTS****!

В чем преимущество курса? 
**Курс бесплатный и включает обучение не только Golang, но и работе с базами данных, брокерами сообщений, k8s/docker, новым фичам в Go, включая дженерики. По результатам обучения у тебя будет возможность попасть в команду разработки #CloudMTS, т.к. курс заточен под потребности компании. 

**Что такое CloudMTS?
**CloudMTS – это облачный провайдер с собственными магистральными каналами связи. Команда проектирует инфраструктурные службы облака и строит биллинг. Вся разработка ведётся на Golang.

**Как попасть на курс? 
**Кандидатам нужно наличие опыта коммерческой разработки от полугода, а также пройти отборочные на знание синтаксиса и базовых конструкций Go, основ работы с базами данных и брокерами сообщений. Подать заявку можно до 11 апреля 2022 года, обучение стартует 11 мая. 

**Как получить оффер? 
**После успешного окончания курса вас ждет собеседование с CloudMTS, к которому вы подготовитесь на курсе.
Регистрируйся на курс [тут](http://www.teta.mts.ru/golang?utm_source=telegram&utm_medium=post&utm_campaign=golang&utm_content=goproglib).",4626,27,6,goproglib
2504,2022-03-24 18:00:06+00:00,Шпаргалка по форматам даты и времени в Go: https://proglib.io/w/49bda0e7,4178,11,2,goproglib
2502,2022-03-24 09:01:52+00:00,"Материал о том, почему ещё в 2015 году в [Bitly](https://bitly.com/) выбрали Go как предпочитаемый внутренний язык. 

https://proglib.io/w/147c60bd",4073,4,0,goproglib
2501,2022-03-24 06:00:01+00:00,"Here we Go: получи оффер от Ozon в команду, которую выберешь ты.

Почему стоит попробовать:
▪️ Интервью длится всего 1 час — фактически, можно получить оффер за один день в выходной (02-03 апреля). 
▪️ Вы сами выбираете тимлидов, с которыми захотите пообщаться — 10 проектов на выбор. 

Локация: Формат работы в Ozon — гибрид или полная удаленка.

Стек: GO, Kubernetes, Kafka. 

Что делать: Проектировать, разрабатывать и внедрять новые микросервисы в продуктах, которыми пользуются миллионы людей по всей России.

Ссылка: https://your.gms.tech/v/2R3w34R4",4078,7,2,goproglib
2500,2022-03-23 18:00:06+00:00,"Go workspaces: что это и как использовать. 

https://proglib.io/w/e854543b",4192,3,0,goproglib
2499,2022-03-23 15:00:15+00:00,"2-3 апреля пройдет Weekend Offer для мобильных разработчиков от VK
 
Первая встреча состоится с 21 по 31 марта, а 2 и 3 апреля состоятся собеседования, по итогам которых выберут лучших кандидатов и отправят им офферы, бонусом к которым идет дополнительная зарплата на старте. 
 
️Оставить заявку на участие можно [тут](https://vk.cc/cc6doB)",3984,9,0,goproglib
2498,2022-03-23 13:40:00+00:00," **fgprof** — инструмент для одновременного профайлинга On-CPU / Off-CPU.

https://proglib.io/w/72feb63f",6082,0,0,goproglib
2497,2022-03-23 11:12:58+00:00,"**Двухдневный воркшоп: Основы безопасности web-приложений
**
**28 и 30 марта** «Библиотека программиста» совместно с REG RU проведет [бесплатный воркшоп](https://proglib.io/w/d9b19046). Он будет полезен для всех, кто планирует развиваться в сфере кибербезопасности, в частности в направлении разработки web-приложений. Знание основ web-уязвимостей поможет не допускать незащищенности в своем коде.

За два дня вы узнаете методы и практики по защите устройств и приложений от злоумышленников и кибератак. 

Обо всем расскажет и покажет на практике **Артём Мышенков**, инженер по безопасности лидера рынка хостинг-провайдеров REG RU и эксперт в области защиты данных и уязвимостей в безопасности web-приложений.

Артем ответит на все вопросы, а также всем участникам будет доступна запись двух дней воркшопа и презентация спикера.

[Зарегистрироваться](https://proglib.io/w/d9b19046).",4041,4,0,goproglib
2496,2022-03-23 08:31:53+00:00,"Разбираемся, когда вам может понадобиться писать скрипты на Go и какого поведения от них следует ожидать. 

https://proglib.io/w/5667d368",6116,7,8,goproglib
2495,2022-03-22 20:08:29+00:00,"**«Что нужно, чтобы освоить Go?»**

На данный вопрос постарались ответить [Mihalis Tsoukalos](https://twitter.com/mactsouk) (автор [Mastering Go](https://www.amazon.com/Mastering-Go-professional-utilities-concurrent/dp/1801079315/)) и [Johnny Boursiquot](https://twitter.com/jboursiquot) **в **рамках подкаста Go Time.",4281,8,0,goproglib
2494,2022-03-22 15:00:09+00:00,"IT-компании постоянно ищут сотрудников. Не исключение и VK — команда активно ведет телеграм-канал «VK устроит»: https://t.me/vkjobs

Там в том числе публикуются актуальные вакансии по Go. В каждом посте указана локация, набор хэштегов для удобства поиска, стек (по необходимости). Приятно, что в каждой вакансии указан телеграм-контакт рекрутера для связи — можно оперативно уточнить все детали.",4336,19,3,goproglib
2493,2022-03-22 12:08:28+00:00,"Пример реализации REST API на Go с использованием Gin + PostgreSQL.

https://proglib.io/w/cfdaa953",4784,11,0,goproglib
2492,2022-03-21 17:20:27+00:00," **Cadence** — распределенный, масштабируемый, надежный и высокодоступный механизм оркестрации от Uber. 

Cadence помогает скрыть большую часть тяжелой работы, необходимой для крупномасштабной распределенной системы. Из статьи вы узнаете основные аспекты, необходимые для работы с данным фреймворком.

https://proglib.io/w/a59e472f",4682,4,10,goproglib
2491,2022-03-21 12:00:01+00:00,"**Стань ментором по Go!**
Мы — небольшая команда Гоферов, которые хотят помогать своим коллегам изучить Golang. Мы верим, что самый эффективный способ передачи знаний — это разговор 1 на 1, поэтому решили не делать очередные курсы, а создать менторскую программу, цель которой: помочь ребятам с других языков перейти на Go, а Гоферам увеличить свой грейд

Мы запустились совсем недавно, но уже сейчас заявок на менторство больше, чем наша команда, поэтому мы ищем Senior Гоферов, которые хотели бы прокачать в себе скилл менторства

**Что вы получите если станете ментором?**
- Научишься растить джунов и миддлов, давать фидбек
- Крутая строчка в резюме
- Возможность утащить крутых спецов к себе в команду
- Крутой сайт проект, где ты напрямую влияешь на результат
- Немного денег

**Что нужно, чтобы стать ментором?**
- Пройти небольшое интервью
- Готовность тратить от полутора часов в неделю

Если хочешь узнать подробности, то переходи в нашего менторского бота: [@career_up_mentors_bot](https://t.me/career_up_mentors_bot?start=goproglib_21_03_2022)",4446,9,5,goproglib
2490,2022-03-20 12:00:08+00:00," **FreeCache** — инструмент, который позволяет кэшировать неограниченное количество объектов в памяти без увеличения задержки и снижения пропускной способности.

https://proglib.io/w/69e68de8",4881,5,1,goproglib
2489,2022-03-20 09:39:51+00:00,"[​](https://telegra.ph/file/c66d68b74b183cc93ca8a.jpg)‍️️ **Какие права есть у программистов на код и как правильно их защищать**

Какие у программистов есть права на код? Кому может принадлежать компьютерная программа? Как передать права на созданный вами код и что делать, если ваши авторские права нарушили? Об этом мы рассказываем в статье.

https://proglib.io/sh/xQYGJrID6A",3942,2,0,goproglib
2488,2022-03-19 20:00:03+00:00,[​](https://telegra.ph/file/df908aedacefdcb2cf6ad.jpg)Полное руководство по gRPC-Gateway: https://proglib.io/w/ab4db847,5078,8,4,goproglib
2487,2022-03-19 17:00:02+00:00,"**Оффер в Ozon Tech для Go-разработчиков

**Ozon Tech приглашает в команду Go-разработчиков middle+
Четыре простых шага, чтобы попасть в Ozon:

Пройти предварительный отбор на онлайн-интервью
Посмотреть онлайн-выступления тимлидов
Выбрать две интересные тебе команды, чтобы познакомиться поближе и пройти собеседование
Пройти одно собеседование с двумя тимлидами в выходной день

[**Оставить заявку на участие**](http://ozon.dev/go?utm_source=telegram&utm_medium=social&utm_campaign=goproglib)",4443,18,3,goproglib
2486,2022-03-19 16:47:45+00:00,Обсуждать плюсы / минусы дженериков можно бесконечно: https://proglib.io/w/43296517,4214,0,0,goproglib
2485,2022-03-18 07:59:19+00:00,"Полезные советы по написанию Dockerfile для проектов на Go.

https://proglib.io/w/31747246",7307,15,8,goproglib
2484,2022-03-17 15:00:13+00:00,"[​](https://telegra.ph/file/bef2655a7767420240aa4.jpg)21 марта стартует курс **«Golang для инженеров»

**Сейчас многие переживают непростые времена, когда сложно что-то прогнозировать. Преодолеть период турбулентности с наименьшими потерями и найти возможности для реализации помогают знания.
Знания дают дополнительную точку опоры, которой нам всем так не хватает. А ещё они повышают вашу ценность как специалиста — если вы можете предложить решение, которое помогает экономить и зарабатывать и даёт быстрый эффект, спрос на ваши услуги всегда будет.

️Мы запускаем новый поток курса «Golang для инженеров», где рассказываем, как быстро и безопасно внедрять изменения в код, запускать новые продукты и поддерживать работу высоконагруженных сервисов.

‍Обучение пройдёт в живом формате — будут онлайн-встречи со спикерами, обратная связь по домашним заданиям от ревьюеров и закрытый чат для участников.

Спикеры:
 Всеволод Севостьянов | Tech Lead в проекте vene.io
 Тигран Ханагян | Team Lead & Backend Developer в Citymobil

Посмотреть программу и записаться: https://slurm.club/3KHnMM3",4561,4,1,goproglib
2483,2022-03-17 08:50:49+00:00,"[​](https://telegra.ph/file/e99b00f5593fdeb90b773.jpg) **Как креативно оформить профиль на GitHub, чтобы он привлекал внимание**

В этой статье мы создадим привлекательный профиль на GitHub: добавим гифки, эмодзи, иконки социальных сетей, GitHub-статистику, ТОП языков программирования и многое другое. Код прилагается.

https://proglib.io/sh/CbVBEHslPy",3927,18,2,goproglib
2482,2022-03-16 06:41:45+00:00,"[​](https://telegra.ph/file/b2a8deac907278fbb195b.jpg) **Loggie** — легковесный, высокопроизводительный облачный агент и агрегатор на основе Go, который поддерживает несколько конвейерных и подключаемых компонентов.

https://proglib.io/w/e0ab5f4f",4819,0,1,goproglib
2481,2022-03-15 18:56:12+00:00,Разработка базового функционала SMTP-сервера на Go с нуля: https://proglib.io/w/d904566d,4889,14,0,goproglib
2480,2022-03-15 18:17:26+00:00,"[​](https://telegra.ph/file/5cb4419cfea5518b74c57.jpg) Друзья, сегодня официально представлен Go 1.18:

 [Примечания к выпуску](https://go.dev/doc/go1.18)
 [Скачать](https://go.dev/dl/#go1.18)",5139,61,2,goproglib
2478,2022-03-14 19:30:01+00:00,Объяснение интерфейсов в Go на пальцах: https://proglib.io/w/8e036bb6,4928,10,2,goproglib
2477,2022-03-14 17:30:02+00:00," **Как за 3 простых шага создать свой VPN и прокси-сервер**

С помощью простой копипасты команд (ctrl+c и ctrl+v) вы получите свой собственный VPN и сможете поделиться им со своими друзьями и родственниками. 

[Смотреть видео](https://youtu.be/TGUkp5Z3d7o).",4910,0,9,goproglib
2476,2022-03-14 16:04:12+00:00,"Вводная статья про удаленную разработку Go-проекта на Raspberry Pi с помощью Atom.

https://proglib.io/w/1fdfca7f",4475,0,2,goproglib
2475,2022-03-13 09:00:09+00:00,"Серия статей о работе с gRPC в Go:

 [Введение в gRPC](https://sahansera.dev/introduction-to-grpc/)
 [Создание сервера gRPC с помощью Go](https://sahansera.dev/building-grpc-server-go/)
 [Создание клиента gRPC с помощью Go](https://sahansera.dev/building-grpc-client-go)",5672,8,5,goproglib
2474,2022-03-13 06:00:02+00:00,"Разбираем новый шаблон расширяемой файловой системы для программ Go и принцип его работы.

https://proglib.io/w/f95c9e8d",4859,5,0,goproglib
2473,2022-03-12 12:27:08+00:00,Видеоруководство по разработке клона игры Wordle на Go и Ebiten: https://proglib.io/w/1b1e7d12,5069,2,0,goproglib
2472,2022-03-12 07:54:21+00:00,Советы по изоляции проблемного кода Cgo: https://proglib.io/w/fb660806,4851,3,0,goproglib
2471,2022-03-11 18:00:07+00:00,"Вопросы и ответы, с которыми разработчики часто сталкиваются на Go-собеседованиях:

 [Часть 1: ООП, области видимости, операторы, strings, int, const, array & slice, map, интерфейсы и defer](https://habr.com/ru/post/654569/)
 [Часть 2: конкурентность, каналы, контексты, память и сборщик мусора](https://habr.com/ru/post/670974/)",6537,33,0,goproglib
2470,2022-03-11 14:55:42+00:00,"Всем привет!  Мы проводим опрос: **«Что сейчас происходит с IT-индустрией и айтишниками»**.

Сложилась очень непростая ситуация: найм новых работников поставлен на паузу, некоторых сотрудников сокращают, а какие-то проекты вообще закрываются. Расскажите, как ваша компания и вы проходите через новый кризис. Опрос займет около 3 минут, результаты опубликуем на сайте proglib.io ориентировочно 21 марта.

️ Опрос можно пройти анонимно по [ссылке](https://docs.google.com/forms/d/e/1FAIpQLSe1ZrDVBcexL6e1pYWFLXdW8stfkWlTD1ElPfQcaHB7tCrdOg/viewform).",4800,15,8,goproglib
2469,2022-03-11 11:29:55+00:00,"Серия статей о работе с [NATS](https://nats.io/) (open source система обмена сообщениями) в целом и, в частности, об интеграции сервера NATS в проект Go. 

https://proglib.io/w/7918895a",5232,2,0,goproglib
2468,2022-03-10 20:07:11+00:00,Основы контрактного тестирования в Go: https://proglib.io/w/6bf30213,6887,3,0,goproglib
2467,2022-03-09 19:02:41+00:00,"Пример проекта на Go + Gin, включающего функции CRUD, аутентификацию, расширенные шаблоны и многое другое.

https://proglib.io/w/81edfa16",5380,5,0,goproglib
2466,2022-03-09 14:21:21+00:00,"Любой программист сталкивается с такими понятиями, как **алгоритмы и структуры данных**, в частности, при подготовке к собеседованиям.

Если Вы хотели бы изучить алгоритмы и структуры данных или же освежить свои знания по теме, внедрить в работе, то предлагаем пройти [опрос по программе курса](https://forms.gle/6GDH9FUKJMoaCnPEA).

В ""Библиотеке программиста"" мы стремимся создавать лучшие онлайн-курсы по IT-тематике, поэтому хотели бы собрать все ваши пожелания по курсу. [Опрос](https://forms.gle/6GDH9FUKJMoaCnPEA) займет не более 10 минут Вашего времени.

https://forms.gle/6GDH9FUKJMoaCnPEA",4716,0,1,goproglib
2465,2022-03-08 11:56:01+00:00,"Разработка простой in-memory key-value базы данных на Go: предпосылки, используемые структуры данных и архитектура.

https://proglib.io/w/0305ac39",6549,4,1,goproglib
2464,2022-03-07 18:32:14+00:00,"Эффективный механизм настройки сборки мусора в Go: кейс команды Uber.

https://proglib.io/w/a190e866",5071,2,3,goproglib
2463,2022-03-07 08:53:34+00:00,На Reddit делятся Go-проектами для контрибьютинга: https://proglib.io/w/571b5cfb,5146,3,0,goproglib
2462,2022-03-06 18:37:42+00:00,Веб-скрапинг на Go: https://proglib.io/w/b73b3a03,4921,4,0,goproglib
2461,2022-03-05 11:39:50+00:00,"#news 

Представлены Go 1.17.8 и Go 1.16.15: https://proglib.io/w/974390ea",4579,0,0,goproglib
2460,2022-03-04 19:12:44+00:00,Кладезь информации об истории разработки Go: https://proglib.io/w/320d0325,4766,3,0,goproglib
2458,2022-03-04 11:44:27+00:00," Michael Matloob и Daniel Martí в рамках подкаста Go Time обсуждают новые фичи Go 1.18, но не затрагивают фаззинг и дженерики.",4292,4,0,goproglib
2457,2022-03-03 19:07:58+00:00,Go снова засветился в отчетах ИБ-компаний: https://proglib.io/w/075f6ecd,4537,2,0,goproglib
2455,2022-03-03 13:45:31+00:00,"Разбираемся, что собой представляет утечка горутины и как предотвратить ее появление.

https://proglib.io/w/13aceaea",4650,4,0,goproglib
2454,2022-03-01 19:10:05+00:00,"Перевод статьи про структурированное логирование JSON в приложениях на Go.

https://proglib.io/w/6a4de45a",6697,11,0,goproglib
2453,2022-03-01 15:12:17+00:00,"Напоминаем, что у «Библиотеки программиста» существует [курс по математике для Data Science](https://proglib.io/w/1baa239b), разработанный совместно с преподавателями ВМК МГУ, одного из лучших математических факультетов страны.

В конце курса вы будете владеть математическим аппаратом, который необходим, чтобы стать специалистом в Data Science. [Курс](https://proglib.io/w/1baa239b) идеально подходит к поступлению в ШАД или Computer Science Center.

Чтобы оставаться востребованным специалистом, никогда не забывайте учиться новому.

По промокоду **DFA98MK** действует скидка 20% на все тарифы до 4 марта.

Курс постоянно обновляется, ваш доступ остается с вами навсегда.

[Посмотреть тарифы и записаться можно здесь](https://proglib.io/w/1baa239b).",4527,4,0,goproglib
2452,2022-03-01 06:00:03+00:00,"Ведущий инженер по тестированию в Ozon рассказывает об интеграции Go с Allure.

https://proglib.io/w/e825076e",4599,7,0,goproglib
2451,2022-02-28 17:30:04+00:00,"Подборка проектов для разработки GUI на Go:

 [Gio](https://gioui.org/) 
 [Fyne](https://fyne.io/)
 [giu](https://github.com/AllenDang/giu)
 [App](https://github.com/maxence-charriere/go-app) 
 [go-astilectron](https://github.com/asticode/go-astilectron)
 [go-sciter](https://github.com/sciter-sdk/go-sciter) 
 [gowd](https://github.com/dtylman/gowd)
 [Go-gtk](https://mattn.github.io/go-gtk/) 
 [gotk3](https://github.com/gotk3/gotk3) 
 [qt](https://github.com/therecipe/qt) 
 [walk](https://github.com/lxn/walk) 
 [webview](https://github.com/webview/webview) и [многие другие](https://github.com/go-graphics/go-gui-projects)",5168,25,10,goproglib
2450,2022-02-28 16:18:15+00:00,"[​](https://telegra.ph/file/a36437abee171cdd6c393.jpg) **Мы падаем: что делать со своими вложениями в текущем кризисе**

Рассказываем, что делать и как обезопасить свои вложения во время кризиса.

https://proglib.io/sh/8bcFHjqX32",4024,51,0,goproglib
2449,2022-02-28 13:50:19+00:00,"Начинающий YouTube-канал для Go-разработчиков: 

 [Generate an NFT Collection in Go](https://youtu.be/QPvE6qxdTDk)
 [Fuzz Testing in Go](https://youtu.be/w8STTZWdG9Y)
 [Logging in Go using logrus](https://youtu.be/tmAq3rE8_c4)",4570,1,2,goproglib
2448,2022-02-27 18:09:23+00:00,"Не надо изобретать велосипед, когда кто-то это уже сделал за вас: https://proglib.io/w/3168e135",4610,2,2,goproglib
2447,2022-02-27 13:05:15+00:00,Бенчмаркинг дженериков в Go: https://proglib.io/w/d7d5fc14,4498,3,5,goproglib
2446,2022-02-26 18:55:18+00:00,"**Podinfo** — легковесное веб-приложение на Go, которое демонстрирует лучшие практики запуска микросервисов в Kubernetes.

https://proglib.io/w/86b3adbf",5012,3,1,goproglib
2445,2022-02-25 20:06:57+00:00," **kratos **— фреймворк для разработки микросервисов на Go.

https://proglib.io/w/8b63f7c7",4720,13,0,goproglib
2444,2022-02-25 17:40:43+00:00,На Хабре появился перевод статьи об [использовании](https://t.me/goproglib/2245) [GitHub Actions для создания ](https://t.me/goproglib/2245)[конвейера](https://t.me/goproglib/2245) [CI](https://t.me/goproglib/2245)  https://proglib.io/w/2ab03058,4518,0,0,goproglib
2443,2022-02-24 18:38:53+00:00,"Несколько простых примеров, которые помогут понять методы в Go.

https://proglib.io/w/5382ea72",4398,0,3,goproglib
2441,2022-02-24 13:39:30+00:00,"[​](https://telegra.ph/file/70398814d8992d11dafa3.jpg)История контроля версий Go, к которой есть некоторые вопросы.

https://proglib.io/w/4d85c53b",3814,2,0,goproglib
2440,2022-02-24 08:48:01+00:00,"[​](https://telegra.ph/file/b057a88f56606ac214ff4.jpg)️ **Ключевые различия между Agile, Scrum и Kanban**

В небольшом обзоре попробуем сравнить популярные подходы к управлению проектами и понять какой из них лучше.

https://proglib.io/sh/lk35PW0CpY",3448,1,0,goproglib
2439,2022-02-23 17:00:08+00:00,Внутреннее устройство новой системы фаззинга Go  https://proglib.io/w/a1131e29,4093,0,0,goproglib
2438,2022-02-23 14:00:04+00:00,"Сравнение Redis и etcd с точки зрения производительности и разработки на Go.

https://proglib.io/w/8f683435",5267,4,4,goproglib
2437,2022-02-23 11:43:18+00:00,"[​](https://telegra.ph/file/9d05062b5c94022f5ac27.jpg)​Руководство по работе с сертификатами SSL/TLS для защиты соединения gRPC в Go.

https://proglib.io/w/7b154e0f",5354,9,0,goproglib
2436,2022-02-22 19:15:07+00:00,"Четыре аспекта, на которые следует обратить внимание при выборе фреймворка для реализации веб-API на Go.

https://proglib.io/w/94502fb4",3889,4,4,goproglib
2434,2022-02-22 15:00:10+00:00,"[​](https://telegra.ph/file/6aef7e01bca44c242a3c3.jpg) Тренинг-центр EPAM открывает новый бесплатный тренинг ""Основы разработки на Golang"" в Санкт-Петербурге.

https://epa.ms/go-spb-3222

 Во время обучения вы получите знания и практические навыки:
• научитесь программировать на Go;
• получите опыт работы с Docker, Git;
• научитесь писать современные web-приложения;
• освоите взаимодействие с базами данных.

 Успешно прошедших тренинг берём в команду EPAM!

Основные требования:
• умение программировать на базовом уровнем на каком-либо языке (Go, Python, Java, JavaScript, C#, C/C++, PHP и т.п.);
• знакомство с основными алгоритмами и структурами данных;
навыки работы с Git;
• понимание клиент-серверного взаимодействия;
• навыки работы с командной строкой;
• cтуденты последнего курса обучения, выпускники и молодые специалисты, проживающие в Санкт-Петербурге;
• знание разговорного английского языка на уровне не ниже B1 (Intermediate).",3823,0,5,goproglib
2433,2022-02-22 11:37:25+00:00,"Вадим Макеров, Go-разработчик в iSpring Tech, рассказывает о решении проблемы с соединениями к базе при помощи контекстов.

https://proglib.io/w/70daed85",3934,4,2,goproglib
2432,2022-02-21 20:18:11+00:00,"[​](https://telegra.ph/file/41c08ecc63033c47868ad.jpg)Пример приложения, реализованного с помощью gRPC-Web (Go + React). 

https://proglib.io/w/ff1ffa86",4166,5,0,goproglib
2431,2022-02-21 18:40:31+00:00,Мысли относительно [Async/Await](https://github.com/nkcmr/async) в Go 1.18  https://proglib.io/w/413a08d6,3755,20,2,goproglib
2430,2022-02-20 08:35:31+00:00,"Серия руководств по реализации микросервисов на Go:

 [What are Microservices and Getting started with REST API’s in Go](https://learnai1.home.blog/2021/03/15/microservices-in-go/)
 [Implement GET(single), PUT and DELETE API’s on our product catalog server for an e-commerce site](https://learnai1.home.blog/2021/03/18/microservices-in-go-part-2/)
 [Basic Authentication](https://learnai1.home.blog/2021/06/27/authentication-in-go-microservices/)
 [Docker and Go Microservices](https://learnai1.home.blog/2021/07/08/microservices-in-go-part-iv-docker-and-go-microservices/)
 [HTTPS Server in Go](https://learnai1.home.blog/2021/08/05/https-server-in-go/)
 [Go Client to HTTPS Server](https://learnai1.home.blog/2021/11/27/microservices-in-go-part-vi-go-client-to-https-server/)
 [CI using GitHub Actions](https://learnai1.home.blog/2022/01/13/microservices-in-go-part-vii-ci-using-github-actions/)
 [Deploy to Azure using ACR & App Service](https://learnai1.home.blog/2022/02/20/microservices-in-go-part-viii-deploy-to-azure-using-acr-app-service/)",5005,11,0,goproglib
2429,2022-02-19 18:00:10+00:00,"ТОП 10 языков программирования, с которых можно начать карьеру в сфере IT в 2022 году.

Каждый язык программирования лучшего всего решает какую-то конкретную задачу. Поэтому, при выборе языка важно определиться, в какой отрасли вы хотите реализоваться, и только после этого выбирайте соответствующий язык программирования.

‍Даниил Пилипенко, CEO Symbioway, подробнее рассказывает об этом в нашем новом видео. [Смотрите по ссылке](https://youtu.be/PIL5_rApde4).",3761,34,4,goproglib
2428,2022-02-19 14:42:19+00:00,"Руководство от DigitalOcean по работе с датой и временем в Go.

https://proglib.io/w/57727c75",3792,3,0,goproglib
2427,2022-02-19 13:25:11+00:00,"Видеокурс по разработке на Go с нуля от **YouTube-канала Be Geek**. Некоторые уроки уже в чем-то устарели, но никто не виноват, что язык так быстро развивается .

https://proglib.io/w/dc8d7e4d",3676,19,0,goproglib
2426,2022-02-18 19:27:39+00:00,"Пример использования Google Cloud Build для CI/CD проектов на Go.

https://proglib.io/w/035a0ce4",3760,0,0,goproglib
2424,2022-02-18 12:03:40+00:00,Теория и практика указателей в Go  https://proglib.io/w/04c74c88,4862,3,1,goproglib
2422,2022-02-17 20:27:26+00:00,"Разбираемся, как **Go Workspaces** упрощает жизнь разработчику  https://proglib.io/w/a0b08d75",3754,0,3,goproglib
2421,2022-02-17 18:00:12+00:00,[​](https://telegra.ph/file/8afc0c3a0032b444b385f.jpg) Представлен Go 1.18 Release Candidate 1  https://proglib.io/w/3bc0a431,3558,25,0,goproglib
2419,2022-02-17 11:55:45+00:00,"Серия статей, посвященная семантике и деталям реализации [блокчейн-проекта Ardan](https://github.com/ardanlabs/blockchain). Следите за обновлениями:

 Часть 1: [Digital Accounts, Signatures and Verification](https://www.ardanlabs.com/blog/2022/02/blockchain-01-digital-accounts-signatures-verification.html)
 Часть 2: [Transaction Distribution and Synchronization](https://www.ardanlabs.com/blog/2022/03/blockchain-02-transaction-distribution-synchronization.html)
 Часть 3: [Redundant Storage And Consensus](https://www.ardanlabs.com/blog/2022/04/blockchain-03-redundant-storage-and-consensus.html)
 Часть 4: [Fraud Detection](https://www.ardanlabs.com/blog/2022/05/blockchain-04-fraud-detection.html)",3861,9,0,goproglib
2417,2022-02-16 20:14:38+00:00,[​](https://telegra.ph/file/92defe1b7a0e072482b91.jpg)Кратко об управлении пакетами в Go  https://proglib.io/w/80b2cd80,3980,8,0,goproglib
2416,2022-02-16 18:00:08+00:00,"**Совместный митап X5 Tech и Слёрма по Keycloak

**Keycloak — опенсорсный продукт для настройки уровня безопасности в веб-приложениях. Еще полтора года назад о нём почти не было слышно, а сегодня все больше компаний указывают в требованиях знание и опыт работы с ним.

Мы не можем игнорировать это, поэтому вместе с коллегами из X5 Tech решили провести митап по Keycloak.

**17 февраля в 19:00** по мск расскажем о возможностях и перспективах Keycloak, научим работать с кастомными плагинами и настраивать Token Exchange.

Кому будет полезно:
️DevOps-инженерам — поймёте, как минимизировать рутинные задачи.
️Разработчикам — узнаете, как ускорить разработку и сосредоточиться на фичах.
️Тимлидам и техническим директорам — сможете упростить реализацию защиты приложений.

Участие бесплатное — регистрируйтесь по ссылке: https://slurm.club/3uGi5JB",3456,3,0,goproglib
2415,2022-02-16 17:50:00+00:00,"Обзор различных вариантов обработки ошибок в Go, с которыми автор столкнулся в продакшене.

https://proglib.io/w/a79746ed",4692,6,0,goproglib
2413,2022-02-15 20:15:08+00:00,"Краткие советы по структурированию модульных тестов в Go.

https://proglib.io/w/e56e0ba6",3533,9,0,goproglib
2412,2022-02-15 18:45:01+00:00,"Пополняемая серия статей **GoLang for Everyone**.

https://proglib.io/w/536c2ff5",3627,3,0,goproglib
2410,2022-02-14 18:00:09+00:00,"Статья, в которой описан процесс анализа bound checks в Go по CPU профилю.

https://proglib.io/w/1ccf8263",3570,5,0,goproglib
2401,2022-02-14 15:00:13+00:00,"[Selectel Careers ](http://t.me/selectelcareers)— канал о:

— well-being на работе и в жизни
— работе в продуктовой IT-компании (со своим облаком и дата-центрами)
— актуальными вакансиями 

Подписывайтесь ",3395,12,0,goproglib
2400,2022-02-14 06:33:19+00:00,"Руководство по настройке Vim как полноценной IDE для разработки на Go.

https://proglib.io/w/d44b97a8",4073,15,11,goproglib
2399,2022-02-13 17:03:40+00:00,"Коллекция статей, в которых пишут о проблемах Go  https://proglib.io/w/6c2c94ce",3850,21,0,goproglib
2398,2022-02-12 18:00:05+00:00,Разбираемся с фаззингом в Go на примерах  https://proglib.io/w/2b72413b,4251,6,0,goproglib
2397,2022-02-12 15:00:07+00:00,"[​Хотите](https://telegra.ph/file/8c8bef83d3e049d974f23.jpg) получить предложение о работе уже в эти выходные? Тогда приходите на Weekend Offer в Авито для Go-разработчиков. Приглашаются кандидаты middle- и senior-уровней с опытом в коммерческой разработке от 3 лет.

И вот пять причин отправить заявку:
— Комфортные условия: у вас будет бюджет на обучение, возможность работать удаленно, ДМС и техника Apple.
— Разные задачи: вы будете строить микросервисную архитектуру, разрабатывать мессенджер и звонки внутри приложения, а также автоматизировать работу поддержки.
— Участие в развитии сервиса: вы будете обсуждать продуктовые решения с командой, предлагать идеи и внедрять их в приложение, которым пользуются 40 млн человек ежемесячно.
— Большие объемы данных: вас ждут десятки тысяч RPS к бэкенду, более 84 млн актуальных объявлений в базе и терабайты картинок в хранилище.
— Сильная команда: в Авито больше 850 инженеров, готовых обмениваться опытом и внутреннее Go-сообщество, которое регулярно выступает с докладами и выпускает статьи.

Успейте занять позицию в компании — подавайте заявку до 15 февраля включительно: https://clc.to/3WJBYQ",3617,19,0,goproglib
2396,2022-02-12 13:48:07+00:00,"Инициализация структур в Go: какие опции Go дает для инициализации структур, каковы их ограничения и как их преодолеть.

https://proglib.io/w/4b822e15",5097,4,0,goproglib
2395,2022-02-11 19:02:48+00:00,"Кейс команды Blend Engineering по написанию GitHub Actions на Go.

https://proglib.io/w/3afbc0f3",3850,8,1,goproglib
2393,2022-02-11 11:34:05+00:00,"[​](https://telegra.ph/file/22b3bec41d3bf94da66ba.jpg)#news

Представлены релизы Go 1.17.7 и 1.16.14 с исправлениями безопасности.

https://proglib.io/w/e97b1caf",3690,0,0,goproglib
2392,2022-02-10 19:27:04+00:00,Scala vs Go  https://proglib.io/w/9c02182d,3802,2,0,goproglib
2391,2022-02-10 14:15:00+00:00,"**Открытое собеседование на Go-разработчика

**14 февраля в 19:00 приходите на открытое собеседование на позицию middle Go-разработчика, где каждый сможет узнать:
- Какие вопросы задают на собеседовании по Go?
- Что нужно сделать для получения крутого оффера?
- Как я могу увеличить свой грейд и зарплату?

**Как все происходит?
**- Вы увидите настоящее собеседование: реальные вопросы, кейсы, задачи
- Интервьюер будет отвечать на вопросы из чата
- В конце вебинара мы расскажем про нашу менторскую программу

**Кто будет проводить интервью?
**Сергей Парамошкин
- Руководит центром разработки и автоматизации в МТС.Digital
- В подчинении три команды разработки
- Интервьюирует респондентов на позиции Junior, Middle и Senior
- Больше 10 лет в IT, 7 лет опыт в Go

Напишите нашему боту, чтобы зарегистрироваться на вебинар!
[@mock_interviews_bot](https://t.me/mock_interviews_bot?start=goproglib_10_02_22_webinar)",3863,11,0,goproglib
2390,2022-02-10 11:47:49+00:00,"Почему при своих недостатках Go постепенно захватывает индустрию ПО? Причин много. Несогласных с ними тоже много. В общем, читайте статью и не забывайте про комментарии к ней. 

https://proglib.io/w/308ae971",3792,5,0,goproglib
2389,2022-02-10 07:28:55+00:00,"[​](https://telegra.ph/file/8b442e7a43ea56467d75c.jpg) **11 советов для программиста, которые помогут сохранить зрение при длительной работе за компьютером**

Делимся советами, как айтишнику сохранить здоровье глаз при работе за компьютером.

https://proglib.io/sh/zSksJ948QD",3236,0,0,goproglib
2388,2022-02-09 16:09:18+00:00,Дженерики для занятых  https://proglib.io/w/37d56742,3886,6,1,goproglib
2387,2022-02-09 11:00:07+00:00,[Источник](https://proglib.io/w/ac27e244),3950,17,45,goproglib
2386,2022-02-09 09:00:10+00:00,"[​](https://telegra.ph/file/2b18ba956eb540fda1459.jpg) **Сравнение 6 алгоритмов сортировки: пузырьком, выбором, кучей, вставками, слиянием и быстрая**

В этой статье мы начнем изучение алгоритмов сортировки, разберем 6 методов сортировки и ознакомимся с оценкой их эффективности.

https://proglib.io/sh/MleBkGR4VW",3902,6,0,goproglib
2385,2022-02-09 06:09:41+00:00,"[​](https://telegra.ph/file/b0cfaf3c93fbaebfaca54.jpg)**Как строить архитектуры приложений, которые позволяют не снижать скорость разработки по мере развития проекта?**

Освойте основные паттерны проектирования и прокачайте свои навыки архитектора программного обеспечения в режиме живых занятий с опытным разработчиком-практиком. 

**Старт интенсива** [«Архитектуры и шаблоны проектирования»](http://futurio.ru/architectures_and_design_patterns?utm_source=telegram&utm_medium=channels&utm_campaign=post) уже 15 февраля. 

**После интенсива вы будете:**

– Знать границы применения SOLID принципов и уметь их использовать не только в объектно-ориентированных языках.
– Писать модульные тесты на Mock-объектах.
– Уметь применять IoC контейнеры и CI.

Вы познакомитесь с типовыми задачами и приемами их решений построения архитектуры приложений, а также поработаете в команде, повысите свою эффективность и поймёте, как развиваться в профессии.

Осталось 3 места до закрытия набора группы, успейте присоединиться!

[Записаться сейчас со скидкой 50%](http://futurio.ru/architectures_and_design_patterns?utm_source=telegram&utm_medium=channels&utm_campaign=post) [можно здесь](http://futurio.ru/architectures_and_design_patterns?utm_source=telegram&utm_medium=channels&utm_campaign=post). 

**Промокод: SOLID50** (скидка -50%).",3744,0,0,goproglib
2384,2022-02-08 20:07:35+00:00," **httpin **— легковесная библиотека для декодирования данных HTTP-запроса из заголовков, данных формы, тела JSON/XML и переменных пути.

https://proglib.io/w/85689a21",3645,4,0,goproglib
2383,2022-02-08 18:00:08+00:00,Краткое руководство по работе с AWS Simple Queue Service (SQS) в Go  https://proglib.io/w/435fec25,3731,2,1,goproglib
2382,2022-02-08 15:00:03+00:00,"Авито приглашает Go-разработчиков middle- и senior-уровней на Weekend Offer ️ 

Хочешь реализовать свой профессиональный потенциал в крупной IT-компании, участвовать в развитии сервиса Авито и внедрять свои идеи?

Тогда **go** проходить тестовое: http://clc.to/GE_04w",3621,9,3,goproglib
2381,2022-02-07 17:02:26+00:00,"Стандартная библиотека Go предоставляет протокол TLS 1.3, но не поддерживает OCSP и CRL «из коробки».

Данные механизмы помогают проверить сертификат на предмет его отзыва. Из статьи вы узнаете, как реализовать поддержку OCSP и CRL с помощью Go.

https://proglib.io/w/e70c725d",3879,4,0,goproglib
2380,2022-02-06 17:22:59+00:00,"**Хорошие новости: **команда Stepik одобрила выдачу сертификатов по нашему курсу «Статьи для IT» https://stepik.org/101672.

**Для кого курс:** для всех, кто хочет научиться занятно писать о собственных проектах, крутых программных решениях и разработке вообще. Учим собирать и систематизировать заметки, писать, редактировать и иллюстрировать статьи. Всё это на примерах публикаций про информационные технологии.

**Зачем: **чтобы продвигать личные IT-продукты и услуги, научиться доносить идеи, развить навыки письма и общения.

**Сколько стоит:** бесплатный. Более того, регулярно отвечаем на вопросы студентов в комментариях.

**Ссылка на курс:** https://stepik.org/101672",10873,19,5,goproglib
2379,2022-02-06 12:00:06+00:00,Мини-видеокурс по основам Go от YouTube-канала ThisIsIT  https://proglib.io/w/67164410,3923,8,2,goproglib
2378,2022-02-06 08:13:29+00:00,"**Go for Java Programmers: Learn the Google Go Programming Language **(2022)

**Автор: **Barry Feigenbaum Ph.D.

Книга ориентирована на программистов, которые знают Java, и использует знания Java для изучения Go. Все возможности Go сравниваются с аналогичными возможностями Java.

Вы получите глубокое представление о Go и связанных с ним стандартных библиотеках времени выполнения, а также научитесь определять, когда уместно использовать Go вместо Java.",4163,7,3,goproglib
2377,2022-02-05 19:18:06+00:00,"[​](https://telegra.ph/file/860d8cdd25e09386052ba.jpg)**Результаты исследования более 13 000 зарплат IT-специалистов во втором полугодии 2021 года от Хабр Карьеры
**
Медианная зарплата среди всех IT-специалистов сейчас 140 000 ₽. В Москве средний заработок айтишников самый высокий — 191 000 ₽, в Петербурге платят уже немного меньше — 165 000 ₽, в остальных регионах ребята получают 130 000 ₽. 

Уровень зарплат в этот период вырос на 17% по сравнению с первым полугодием 2021 года.

 [Читать статью](https://proglib.io/w/2f4c477e)",3359,5,10,goproglib
2376,2022-02-05 08:54:06+00:00,Разбираемся с принципами работы сборщика мусора Go на практике  https://proglib.io/w/a2985019,5342,0,0,goproglib
2375,2022-02-04 19:11:28+00:00," **koanf **— простая, легковесная и расширяемая альтернатива [viper](https://github.com/knadh/koanf#alternative-to-viper). 

Библиотека поставляется со встроенной поддержкой чтения конфигурации из файлов, флагов командной строки и переменных среды, а также может анализировать JSON, YAML, TOML и Hashicorp HCL.

https://proglib.io/w/76204ecc",4024,7,1,goproglib
2374,2022-02-04 18:00:14+00:00,Разработчик [GoAWK](https://github.com/benhoyt/goawk) прошёлся по перфомансу Go с версии 1.12 до 1.18  https://proglib.io/w/c4b10b80,3631,2,1,goproglib
2372,2022-02-03 19:30:01+00:00,"Кратко о том, что нужно знать о Go 1.18  https://proglib.io/w/4ee3121c",3769,4,1,goproglib
2371,2022-02-03 18:50:15+00:00,"А у вас есть любимые хитрости / трюки / пасхалки Go?

https://proglib.io/w/bda7ed23",3729,3,0,goproglib
2370,2022-02-03 18:04:23+00:00, [Alexey Palazhchenko](https://twitter.com/paaleksey) и [Natalie Pistunovich](https://twitter.com/nataliepis) в очередном эпизоде Go Time обсудили вопросы разработки на основе ИИ в Go.,3672,2,0,goproglib
2369,2022-02-03 15:00:15+00:00,"ВК приглашает на Weekend offer — экспресс-встречу с большими перспективами. 

Как всё пройдёт: 

 До 4 февраля включительно оставьте заявку на сайте. Вам пришлют анкету и предложат рассказать о себе.

 5 февраля в 10:00 познакомитесь с тимлидами, обсудите задачи команды и перспективы. С 12:00 до 20:00 проведут технические собеседования в удобное для вас время.

 6 февраля с 10:00 до 17:00 состоится финальное интервью. Если всё пройдёт успешно, то уже вечером предложат успешным кандидатам выбрать, к какой из девяти команд ВКонтакте присоединиться в роли бэкенд-разработчика. А дальше будете вместе развивать современные сервисы и делать жизнь миллионов пользователей удобнее и интереснее. 

 Ищут специалистов в команды Core Backend, мессенджера, VK Музыки, Единого видео, Клипов, рекомендаций и машинного обучения, стикеров и подарков, ленты и рекомендаций, разработки суперприложения.

Поменяйте работу всего за одни выходные: https://vk.com/backendoffer",3658,4,0,goproglib
2368,2022-02-02 19:07:20+00:00,"Начало работы с дженериками Go: руководство от TutorialEdge.

https://proglib.io/w/50d59594",3785,2,2,goproglib
2367,2022-02-02 18:00:03+00:00,[​](https://telegra.ph/file/df98e2b15a9e60f80f0a1.jpg)Пишем простой DNS-резолвер на Go ** **https://proglib.io/w/cf72861f,5199,0,0,goproglib
2366,2022-02-02 15:02:23+00:00,"Знаем, что многие Go-разработчики сталкивались с Java или имеют знакомых/коллег, которые пишут на этом языке. М.Видео-Эльдорадо сейчас предлагает вакансию для [Middle/Senior Java Developer](https://bit.ly/3uhAUlS). 

В планах втрое увеличить финтех-трайб к концу года. Ищут разработчиков, которые будут с нуля строить это направление в индустрии, проверять гипотезы, запускать новые финансовые инструменты и разрабатывать микросервисы и cloud-native решения.

Если знаете подходящих людей, маякните.",3766,28,0,goproglib
2365,2022-02-02 09:49:23+00:00,"[​](https://telegra.ph/file/80faa60f2c273e540906b.jpg) **Взять отпуск или уволиться: как вернуть мотивацию к работе**

Праздники, зимний авитаминоз и хандра, дедлайны и отвлекающие факторы на удаленке – все это негативно влияет на нашу мотивацию. В этой статье мы поговорим о том, как вернуть рабочий настрой.

https://proglib.io/sh/YWweDCztL4",3289,4,1,goproglib
2364,2022-02-01 19:26:06+00:00,Коллекция пошаговых руководств для изучения Go  https://proglib.io/w/57796624,4243,0,0,goproglib
2363,2022-02-01 14:00:03+00:00,"[​](https://telegra.ph/file/6829c256f88998befea7e.jpg)**Почему получаются плохие абстракции и как этого избежать?**

3 февраля, в этот четверг, в 19.00 МСК **Евгений Тюменцев**, профессионально занимающийся разработкой многопоточных кросс-платформенных приложений на С++, [научит](https://clck.ru/apXpv) вас строить абстракции – один из ключевых навыков для программиста.

**За один час вы узнаете:**

– Что такое абстракция?
– Причины правок кода
– Как выделять абстракции
– Свойства абстракций, полезные при разработке

Познакомьтесь с новым решением построения архитектуры приложений и инструментами для планирования ее будущей системы.

[**Регистрация и подробности по ссылке.**](https://clck.ru/apXpv)",3747,1,0,goproglib
2362,2022-02-01 11:48:07+00:00,"[​](https://telegra.ph/file/57caa3e0fb17e27dbc9ab.jpg)️ Представлена вторая бета-версия Go 1.18

https://proglib.io/w/e50b5c9f",3631,4,2,goproglib
2361,2022-01-31 19:01:53+00:00,Обновили серию головоломок  https://t.me/goproglib/2110,3790,1,0,goproglib
2360,2022-01-31 18:16:30+00:00,"Изменение порядка полей в структуре Go позволяет увеличить скорость и улучшить использование памяти программы ‍️.

https://proglib.io/w/a5630788",3954,4,13,goproglib
2358,2022-01-30 19:37:48+00:00,"#news

Анонс Ent v0.10 

https://proglib.io/w/326e0f47",3775,0,0,goproglib
2356,2022-01-30 17:30:35+00:00,Реализация двенадцати популярных команд Linux на Go  https://proglib.io/w/6d78bb02,3999,10,0,goproglib
2354,2022-01-30 06:22:14+00:00,"Предпосылки портирования TypeScript Type Checker на Go, а не на Rust.

https://proglib.io/w/94c04394",3667,0,0,goproglib
2353,2022-01-29 20:07:51+00:00,"GoLand 2022.1 Early Access Program 

https://proglib.io/w/e0d12bf4",3735,7,1,goproglib
2352,2022-01-29 14:27:44+00:00,"**Почему получаются плохие абстракции и как этого избежать?**

3 февраля в 19.00 МСК **Евгений Тюменцев**, профессионально занимающийся разработкой многопоточных кросс-платформенных приложений на С++, [научит](https://clck.ru/apXpv) вас строить абстракции – один из ключевых навыков для программиста.

**За один час вы узнаете:**

– Что такое абстракция?
– Причины правок кода
– Как выделять абстракции
– Свойства абстракций, полезные при разработке

Познакомьтесь с новым решением построения архитектуры приложений и инструментами для планирования ее будущей системы.

[**Регистрация и подробности по ссылке.**](https://clck.ru/apXpv)",3606,1,0,goproglib
2351,2022-01-29 13:51:44+00:00,"Пошаговая разработка веб-приложения с помощью Go и SQLite:

****[Create a Gin Web API Service](https://www.allhandsontech.com/programming/golang/web-app-sqlite-go/)
****[Connect to our Database](https://www.allhandsontech.com/programming/golang/web-app-sqlite-go-2/)
****[Selecting a Single Record](https://www.allhandsontech.com/programming/golang/web-app-sqlite-go-3/)
****[Inserting and Updating Records](https://www.allhandsontech.com/programming/golang/web-app-sqlite-go-4/)
****[Deleting Records and Sending Options](https://www.allhandsontech.com/programming/golang/web-app-sqlite-go-5/)",4094,2,0,goproglib
2349,2022-01-28 04:30:56+00:00,"#news 

Вышел масштабный релиз TinyGo. С изменениями можно ознакомиться здесь  https://proglib.io/w/9fa44689",3776,10,2,goproglib
2348,2022-01-27 13:56:01+00:00,"#вакансия
**Middle/Senior GoLang developer

**Локация: Удаленка или в. одном из наших офисов в Томске (ул. Никтина 10/1).

Требуемый опыт работы: опыт коммерческой разработки веб-сервисов **в требуемом стэке от 3-х лет.

**Технический стек: GoLang, SQL и NoSQL, Mongo, Docker, Git, Gin, Gorm,  высоконагруженные 
системы.

Требования: 
- уверенное знание GoLang
- уверенные знания SQL и NoSQL СУБД
- опыт работы с MongoDB
- Понимание принципов ООП в разрезе GoLang
- умение работать 
с Docker
- docker-compose
- понимание принципов работы CI/CD.

Заработная плата: **от 200 000 до 400 000 рублей на руки.

**Условия: 
Корпоративная техника при работе из офиса.

Компания: АНО «Национальное образование»— разработчик ПО для различных сфер, разрабатывает 
национальную образовательную платформу, к которой будут подключаться все ВУЗы страны. Мы расширяем команду нашего действующего проекта в сфере разработки образовательной платформы.

Национальная образовательная платформа представляет из себя систему, построенную на микросервисной архитектуре. Над каждым сервисом работает своя команда, в которой есть:
Product Manager
Team Lead
Frontend Devs
Backend Dev
Designer.

**Контактное лицо**: @PiskunovaHelga",3770,2,7,goproglib
2347,2022-01-27 06:00:06+00:00,"Пишем простое приложение для видеочата с помощью [100ms SDK](https://www.100ms.live/) + VueJs3 + Go.

https://proglib.io/w/b2b4b0ed",4136,9,0,goproglib
2346,2022-01-26 18:37:28+00:00,"Серия статей о работе с Kubernetes API, в том числе с использованием Go:

[Kubernetes API Basics - Resources, Kinds, and Objects](https://iximiuz.com/en/posts/kubernetes-api-structure-and-terminology/)
[How To Call Kubernetes API using Simple HTTP Client](https://iximiuz.com/en/posts/kubernetes-api-call-simple-http-client/)
[How To Call Kubernetes API using Go - Types and Common Machinery](https://iximiuz.com/en/posts/kubernetes-api-go-types-and-common-machinery/)",6123,16,0,goproglib
2345,2022-01-26 07:36:07+00:00,Отличное подспорье при работе с таймаутами HTTP-сервера Go  https://proglib.io/w/1fb29c69,3955,4,1,goproglib
2344,2022-01-25 07:51:17+00:00,"**Что нужно уметь специалисту по анализу данных?**

Область Data Science энергично развивается. **Наука о данных** – это не только нейросети, но и классические алгоритмы машинного обучения, да и вообще всё, что связано с вопросами анализа, обработки и представления информации в цифровой форме.

‍Data Scientist работает на пересечении нескольких областей: математики, программирования и бизнес-задач.

[26 января в 19.00](https://proglib.io/w/9015f3c7) МСК Артур Сапрыкин, один из дата сайентистов, разрабатывавших в Мегафон программы, анализирующие речь в форме текстов и аудио, расскажет, чем занимается Data Scientist, и какие **основные навыки **требуются от специалиста по анализу данных. 

**На бесплатном вебинаре вы:**

– Получите представление о профессии и поймете, как двигаться дальше.
– Узнаете про рабочий день специалиста по анализу данных, и с какими задачами он сталкивается ежедневно.

[Регистрация на сайте](https://proglib.io/w/9015f3c7).",3533,0,0,goproglib
2343,2022-01-25 06:31:00+00:00,"Репозиторий, содержащий утилиты для эффективного выполнения операций Win32 IO в Go.  

https://proglib.io/w/bdcf85f7",3592,0,0,goproglib
2342,2022-01-24 15:00:10+00:00,"[​](https://telegra.ph/file/1c8b494cf30c8493d0d36.jpg)**Начни год с карьеры в IT — на Online Ярмарке вакансий NIX!

**В любом из IT-направлений можно стать успешным профи. Осталось только выбрать подходящее направление. А если определился — двигаться дальше! Регистрируйся на наше мероприятие, чтобы узнать больше о популярных IT-профессиях и о том, как быть востребованным специалистом ;)

**Когда**? 29 января в 11:00
**Где**? в Discord и на YouTube-канале NIX 

**Почему стоит принять участие?

**Ты пообщаешься о карьере разработчика с нашими экспертами по языкам программирования PHP, Java, .NET и Golang, разработке под Android и iOS, а также по BA, QA, DevOps, PR и рекрутингу
Посмотришь онлайн-лекции, поучаствуешь в воркшопах и квизах с призами
У тебя будет возможность пройти онлайн-собеседование и получить оффер в NIX

**Для кого мероприятие:

**Студентов и начинающих разработчиков
Опытных IT-специалистов
Всех, кто хочет сменить профессию и попробовать себя в IT

Если и менять свою жизнь, то прямо сейчас! Все просто: [переходи на сайт](https://nix-yarmarka-vakansyi.com/?utm_source=telegram&utm_medium=goproglib&utm_campaign=yarmarka_vakansyi_nix) и регистрируйся на Ярмарку вакансий NIX.",3901,1,0,goproglib
2341,2022-01-24 07:43:12+00:00,"Инженер из Google Seth Vargo освещает некоторые аспекты, в которых есть возможности для улучшения Go.

https://proglib.io/w/05da481e",3803,22,2,goproglib
2340,2022-01-23 07:05:19+00:00," **stats **— инструмент, который предоставляет общие статистические функции для Go.

https://proglib.io/w/26906ff7",4012,0,0,goproglib
2339,2022-01-22 11:00:05+00:00," Руководство по профилированию Go теперь охватывает все встроенные профилировщики.

https://proglib.io/w/1c650106",4323,12,0,goproglib
2338,2022-01-22 07:08:45+00:00,"Разбираемся, как безобидная на первый взгляд операция может замедлить сборку статического сайта hugo на значительное время, и как это исправить.

https://proglib.io/w/cde19085",4008,1,0,goproglib
2337,2022-01-21 13:09:07+00:00,"#vacancy #golang #go #senior #remote

Вакансия: Senior Golang Developer 
ЗП: от 5000$ на руки
Формат работы: удаленка
Занятость: полная
Проект: Rain is a venture-backed fintech with a mission to kill predatory financial products like payday loans. Our first product gives employees instant access to their wages, which solves a major problem for real people (115 million American workers are living paycheck-to-paycheck).
We are looking for a Senior Software Engineer. This position is remote. The candidate will be responsible for managing various areas of our backend platform, including API integrations with 3rd-party vendors and partners.

As a Senior Software Engineer with Rain, you will play a central role as we scale to 1M+ users. You will work with our US based product and engineering teams to implement quickly and contribute in all phases of the development lifecycle. Our ideal candidate is excited to tackle tough technical challenges and looking for opportunities to contribute to our strategic thinking.

Responsibilities:

-Translate business requirements into technical solutions, recommend alternative technical and business approaches, and lead engineering efforts to meet aggressive timelines
-Operational Excellence - monitoring & operation of production services including implementation of adequate resilience and high-availability models to support 24x7 operational availability
-Manage backend API integrations with 3rd-party vendors and partners
-Manage integration of user-facing elements developed by our front-end developers with server side logic
-Build reusable code and libraries for future use
-Optimize Rain application for maximum speed and scalability
-Design and implementation of data storage solutions

Skills And Qualifications:

-7+ years of Software Development experience
-A Bachelor’s degree in Computer Science or equivalent combination of technical education and work experience.
-Proficient knowledge of back-end programming languages such as Go / Golang, Java and C++
-Basic understanding of front-end technologies and platforms, especially React and React Native
-Good understanding of server-side CSS preprocessors
-Solid understanding of REST API design and development with experience building REST APIs
-Experience with API security standards and implementation (OAuth,)
-Good experience with API frameworks
Integration of multiple data sources and databases into one system
-Management of hosting environment, including database administration and scaling an application to support load changes
-Data migration, transformation, and scripting
-Setup and administration of backups
-Creating database schemas that represent and support business processes
Note: Examples of past work will be required as part of the hiring process***

The Rain Instant Pay app provides early wage access for employees at mid to large-sized organizations to improve financial wellness and increase employee productivity.

We offer:

-Employment by contract 
-Competitive salary
-Medical insurance
-Working hours by IST zone
-Partial compensation for language classes
-Corporate and teambuilding events
 
CV can be sent to @dinochka_may",3942,5,2,goproglib
2336,2022-01-21 10:43:24+00:00,"Обработка блокирующих горутин во время выполнения Go — вот наиболее важная и почти невидимая особенность языка по мнению автора [статьи](https://proglib.io/w/70549f45). По вашему мнению, какая наиболее важная функция в Go?",4122,1,0,goproglib
2335,2022-01-20 17:04:05+00:00,"**Простой алгоритм использования SOLID на практике**

Зачем нужны SOLID принципы? Что нужно сделать с множеством сущностей, чтобы код удовлетворял DIP?

Рассказывает Евгений Тюменцев, профессионально занимающийся разработкой многопоточных кросс-платформенных приложений на С++, Директор компании по разработке программного обеспечения «Hello World! Technologies».

https://youtu.be/H2Lk3SQWhnc",3223,1,0,goproglib
2334,2022-01-20 07:32:34+00:00,"«Библиотека программиста» находится в поиске переводчика технических статей и автора оригинальных статей.

Обязанности:
– Письменный перевод с английского на русский язык технических статей (Medium, Dev.to и т. д.)
– Написание оригинальных статей.

Объем:
– от 3 до 10 тыс. знаков с пробелами.

Тематика:
– Мобильная разработка, информационная безопасность, Data Science, бэкенд веб-приложений, фронтенд-разработка, системное программирование, базы данных.

Языки:
– Python, SQL, JavaScript, C#, Java.

Пишите на hello@proglib.io",4012,11,0,goproglib
2333,2022-01-19 05:00:08+00:00,"[​](https://telegra.ph/file/bb76c0ce775875ce0e1f5.jpg)Руководство по использованию библиотеки [Plotly](https://plotly.com/javascript/) и Go для визуализации биржевых данных.

https://proglib.io/w/cccaa3ab",4506,6,0,goproglib
2332,2022-01-18 07:36:07+00:00,"Новый интерфейс ядра Linux **io_uring**: теоретические аспекты и прикладная часть на Go.

[Часть 1](https://habr.com/ru/company/itsoft/blog/589389/)
[Часть 2](https://habr.com/ru/company/itsoft/blog/597745/)",6236,12,8,goproglib
2331,2022-01-17 17:28:35+00:00," **Bintris **— небольшая игра, вдохновленная тетрисом. Цель — правильно перевернуть биты.

Под капотом Go, OpenGL (графика) и OpenAL (звук). Gomobile используется для создания общих библиотек, используемых для сборки под Android.

[Смотреть код](https://proglib.io/w/0751e9b5)",4292,10,0,goproglib
2330,2022-01-17 07:00:05+00:00," **$200 000 за 2000 строк кода: до конца регистрации на**[ Tezos DeFi Hackathon 2022](https://hackathon2022.tezos.org.ua/?utm_source=proglib&utm_medium=goproglib&utm_campaign=2_weeks) **осталось 14 дней

**Это самый крупный блокчейн-хакатон в СНГ. Участники решают челленджи партнеров, получают за это призы и гранты до $1 000 000.

• $200 000 призовой фонд, одна команда забирает до $55 000. 
• Команды Tezos хантят крутых разработчиков, а Tezos Foundation выдает гранты до $1 000 000.
• 28 дней на разработку, помогают опытные технические и командные менторы.

Ворвись в блокчейн-разработку, регистрация закроется через две недели!

 [Зарегистрироваться](https://hackathon2022.tezos.org.ua/?utm_source=proglib&utm_medium=goproglib&utm_campaign=2_weeks) 

[ Узнать детали](https://hackathon2022.tezos.org.ua/?utm_source=proglib&utm_medium=goproglib&utm_campaign=2_weeks) ",4364,1,0,goproglib
2329,2022-01-16 18:38:31+00:00,Команда Go [порадовала](https://proglib.io/w/8be6fce9) туториалами по [дженерикам](https://go.dev/doc/tutorial/generics) и [фаззингу](https://go.dev/doc/tutorial/fuzz).,4833,47,7,goproglib
2328,2022-01-15 16:52:31+00:00,[Библиотека мемов](http://t.me/itmemlib) — наш телеграм-канал с мемами. Подписывайтесь! @itmemlib,4278,7,2,goproglib
2327,2022-01-15 06:00:01+00:00,"Если вы работаете в финтехе, то обратите внимание на **go-financial** (ранее был [пост](https://t.me/goproglib/1441) об этом). Инструмент продолжает развиваться и наполняться новыми функциями, а недавно один из разработчиков написал статью, которая показывает работу с go-financial на примере.

https://proglib.io/w/7f8e0b5c",4342,0,4,goproglib
2326,2022-01-14 06:00:01+00:00,"[​](https://telegra.ph/file/df265fc806d479e630698.jpg)🫒 **Olivia** — open source альтернатива [DialogFlow](https://cloud.google.com/dialogflow/docs), написанная на Go.

https://proglib.io/w/27f48ce9",4308,8,0,goproglib
2325,2022-01-13 06:00:01+00:00,Серия руководств по использованию [**nancy**](https://jcdan3.medium.com/scanning-go-dependencies-for-vulnerabilities-b82db3d56b27)[ для сканирования зависимостей Go на наличие](https://jcdan3.medium.com/scanning-go-dependencies-for-vulnerabilities-b82db3d56b27) [уязвимостей](https://jcdan3.medium.com/scanning-go-dependencies-for-vulnerabilities-b82db3d56b27) и [**gosec**](https://systemweakness.com/scanning-go-source-for-vulnerabilities-5f29773ecc9d)[ для поиска уязвимостей в кодовой базе Go](https://systemweakness.com/scanning-go-source-for-vulnerabilities-5f29773ecc9d).,5741,10,0,goproglib
2324,2022-01-12 11:09:25+00:00,"#golang #php #docker #kubernetes

**Команда Авито ищет крутого бэкенд-разработчика

**Наша команда отвечает за подачу объявлений на Авито. Сотни тысяч пользователей ежедневно нажимают кнопку «Разместить объявление», и тот опыт, который они получат в процессе, во многом зависит от результатов работы нашей команды. В продукте нужно учесть интересы разных типов продавцов: одинаково удобно должно быть и крупному бизнесу, ежедневно продающему новые товары на Авито, и обычному человеку, который приходит к нам раз в полгода. Мы хотим, чтобы на Авито было легко разместить любое объявление — от редкого автомобиля до нового телефона. Нам важно, что пользователь может начать подавать объявление в приложении, а продолжить на десктопе.

Одна из метрик нашего продукта — TTA (time-to-add) — время, затраченное на подачу объявления. Улучшая продукт, мы экономим секунды у одного пользователя и десятки тысяч часов у всех продавцов Авито. Приходите к нам, и вашу работу смогут оценить миллионы человек.

С нами вы будете решать сложные технические задачи, заниматься разработкой и поддержкой высоконагруженных (~100k RPM) микросервисов с использованием современных технологий и языков программирования (Golang, PHP 8, Docker, Kubernetes).

**Мы ожидаем, что вы:
**▪️имеете опыт коммерческой разработки на PHP или Go;
▪️разрабатывали высоконагруженные приложения;
▪️знакомы с шаблонами проектирования и умеете их применять, придерживаетесь принципов SOLID;
▪️знакомы с основными алгоритмами и структурами данных;
▪️умеете писать поддерживаемый и тестируемый код;
▪️способны тщательно планировать и приоритизировать свою работу;
▪️используете в общении убедительные аргументы и конструктивно реагируете на аргументы других.
 
**Не обязательно, но круто если вы:
**▪️знаете SQL, работали с реляционными и нереляционными БД;
▪️работали с Docker/Kubernetes;
▪️разрабатывали распределенные сервисы;
▪️умеете работать с командной строкой;
▪️знаете, как оптимизировать приложение и сделать его быстрее.
 
**Что предстоит делать:
**▪️разрабатывать высокопроизводительные микросервисы на Go и поддерживать код на PHP;
▪️участвовать в проработке архитектурных решений;
▪️работать в кросс-функциональной команде, в тесном взаимодействии с client-side разработчиками;
▪️участвовать в принятии технических решений и планировании процесса разработки;
▪️быть ответственным за крупную часть проекта, над которой работает несколько инженеров;
▪️сопровождать полный цикл жизни продукта от проработки продуктового решения до деплоя кода на сервера;
▪️участвовать в Code Review.
 
**Работа у нас — это:
**▪️возможность реализовать свои идеи в проекте с многомиллионной аудиторией;
▪️команда профессионалов, готовых поддержать ваши инициативы;
▪️помощь с переездом: если вы живёте в другом городе, мы оплатим приезд на интервью и поможем обустроиться в Москве;
▪️красивый и комфортный офис в 2 минутах от метро «Белорусская»: панорамный вид на центр города, места для уединённой работы, зоны отдыха, гамаки и скейтборды. А на время пандемии вы можете работать из дома. Для этого компания предоставляет необходимую технику: ноутбуки, мониторы, модемы;
▪️компенсация расходов на питание;
▪️забота о здоровье: с первого дня работы вы получите страховку со стоматологией, в офисе ведут приём терапевт, психолог и массажист;
▪️прозрачная система бонусов и премий, достойная зарплата — размер обсудим на собеседовании.

**Контакты для связи:
**▪️Телефон: +7 (931) 367-75-19 (Юлия)
▪️Email: yuaasaturova@avito.ru
▪️Подробнее: https://www.avito.ru/vacancies/sx-backend/",4282,10,8,goproglib
2323,2022-01-12 06:00:01+00:00,Уже не первый раз встречаются [обсуждения](https://proglib.io/w/69794010) о переходе с какой-то IDE или популярного редактора кода на Vim + соответствующие плагины. Вы как относитесь к Vim? Что используете для написания кода на работе? А дома?,4187,22,22,goproglib
2322,2022-01-10 06:00:01+00:00,"** revive **— быстрая, настраиваемая, расширяемая и гибкая альтернатива golint.

⭐️ 3182

https://proglib.io/w/0ac9ad2a",4669,5,0,goproglib
2321,2022-01-09 13:58:09+00:00,"Daniel Martí поднял в Твиттере тему относительно тестирования в Go. Может и вы почерпнёте для себя что-то полезное в комментариях.

https://proglib.io/w/5341a33f",4432,4,3,goproglib
2320,2022-01-08 06:00:02+00:00,"Проект, который нацелен сделать фаззинг в Go более доступным. 

https://proglib.io/w/121df317",5147,7,3,goproglib
2319,2022-01-07 14:00:05+00:00,"Репозиторий, который включает более 1000 примеров, упражнений и квизов для изучения Go.

https://proglib.io/w/486afecc",7258,13,1,goproglib
2317,2022-01-07 07:53:23+00:00,"[​](https://telegra.ph/file/6f7d4b660d431491a1abc.jpg)#news

Представлены Go 1.17.6 и 1.16.13  

https://proglib.io/w/b070f030",4133,7,0,goproglib
2316,2022-01-06 10:00:02+00:00,"Решения задач с adventofcode.com на Go, начиная с 2015 года.

https://proglib.io/w/a3bb43f4",4545,8,0,goproglib
2315,2022-01-06 06:00:03+00:00,Пишем простой валидатор JSON-схемы на Go: https://proglib.io/w/dc845de6,4175,8,1,goproglib
2314,2022-01-05 18:30:01+00:00,"Автор Ebiten рассказывает, как ему удалось скомпилировать программы Go в двоичный файл для Nintendo Switch без использования Wasm.

https://proglib.io/w/d515327d",4022,9,0,goproglib
2313,2022-01-05 17:00:10+00:00,"[​](https://telegra.ph/file/954fb8ce02bea0e7782d5.jpg) **lingua-go** — библиотека для определения языка в экосистеме Go на основе длинных и коротких текстов.

⭐ 370

https://proglib.io/w/a7984584",3909,4,0,goproglib
2312,2022-01-05 14:56:25+00:00,"Реализация функционала автореконнекта к RabbitMQ в Go с учетом следующих требований:

Возможность создать общее подключение для консумера и продюсера
Простой и прозрачный пул каналов
Поддержка backoffPolicy
Автоматический реконнект при потере соединения
Поддержка graceful shutdown

https://proglib.io/w/3d545041",5634,2,0,goproglib
2311,2022-01-04 19:00:08+00:00,"Видеозаписи со всех дней конференции Golab 2020, которая проходила в Италии:

[День 1](https://youtube.com/playlist?list=PLGN1AjiJJv0lVSKVWMqAwOZvHMLT1qRUh)
[День 2](https://youtube.com/playlist?list=PLGN1AjiJJv0kcScq6hZ0Y2SwjJmBJ3j4U)
[День 3](https://youtube.com/playlist?list=PLGN1AjiJJv0lDGPYty3vm_OBUDnC9Ne1e)
[День 4](https://youtube.com/playlist?list=PLGN1AjiJJv0ku7rVb757i_dwdFsdXKGZJ)
[День 5](https://youtube.com/playlist?list=PLGN1AjiJJv0kDpyO_anVzv5I4v6Kmxtwz)
[День 6](https://youtube.com/playlist?list=PLGN1AjiJJv0nelnAohIhyPdzpXd0IstM5)",4267,24,0,goproglib
2310,2022-01-04 18:10:56+00:00,Обзор фреймворков для веб-разработки на Go: https://proglib.io/w/8ea9fa89,4311,18,1,goproglib
2309,2022-01-04 06:00:02+00:00,"Статьи из серии небольших рассказов о необычных подводных камнях, которые можно встретить в начале разработки на Go:

[Интерфейсы в Go — как красиво выстрелить себе в ногу](https://habr.com/ru/post/597461/)
[Нарезаем массивы правильно в Go](https://habr.com/ru/post/597521/)
[Инструменты выполнения фоновых задач в Go](https://habr.com/ru/post/661645/)",6728,25,0,goproglib
2308,2022-01-03 12:00:04+00:00,Документацию по **Go Fuzzing **подвезли: https://proglib.io/w/74bc6a03,4373,12,2,goproglib
2307,2022-01-03 09:41:00+00:00," **goimportcycle** — простой инструмент для визуализации циклов импорта в проекте на Go.

⭐ 23

https://proglib.io/w/b6c99e20",4238,8,0,goproglib
2306,2022-01-03 05:00:01+00:00,"Реализация ограничителя скорости HTTP-запросов на Go & Redis для защиты API.

https://proglib.io/w/472fd32b",4414,10,23,goproglib
2305,2022-01-02 18:00:04+00:00,"Игровому движку Ebiten уже больше восьми лет. Сегодня он полностью написан на Go и используется для множества игр, опубликованных как на мобильных платформах, так и на Nintendo Switch. С помощью статьи можно прикоснуться к этой истории.

https://proglib.io/w/75651884",4118,11,2,goproglib
2304,2022-01-02 15:41:06+00:00,"Краткий пример реализации автодополнения командной строки на Cobra и Go для CLI-приложения.

https://proglib.io/w/cac235db",3975,5,0,goproglib
2302,2022-01-02 14:18:00+00:00,Реализация простого балансировщика нагрузки на Go: https://proglib.io/w/765ea4ef,4345,10,7,goproglib
2301,2022-01-01 10:44:00+00:00,"Команда Uber Engineering делится опытом оптимизации Go GC.

https://proglib.io/w/aa22f360",5567,14,0,goproglib
2300,2021-12-31 15:00:06+00:00,"2️⃣0️⃣2️⃣2️⃣
 
Чего только не было в этом году: нашествие нейросетевых алгоритмов и ARM-процессоров, GitHub Copilot и автодополнение кода, сражение с чёрной дырой пандемии и рождение метавселенных — всего и не припомнишь.
 
Под занавес принято подводить итоги. В 2021 году редакция «Библиотеки программиста» выпустила 448 статей, а сайт proglib.io посетили 4.7 миллиона читателей. Суммарное число подписчиков наших сообществ превысило 500 тысяч. Наконец, мы открыли собственный образовательный центр — proglib.academy.
 
Мы сердечно поздравляем всех читателей и членов нашего IT-коммьюнити с Новым годом. Желаем лёгкого кодинга, добра, счастья, здоровья и удачных проектов! Оставайтесь с нами, впереди много интересного! ",3963,28,0,goproglib
2299,2021-12-31 09:07:11+00:00,"[​](https://telegra.ph/file/6e872bef61fe6203caa45.jpg)** Erda Infra **— легковесный фреймворк для создания микросервисов на Go. 

https://proglib.io/w/c3181d98",4046,3,3,goproglib
2298,2021-12-31 06:37:09+00:00,"Александр Ильин из Ozon Tech перешёл с Python на Go и с течением времени об этом не пожалел. Ознакомьтесь с его историей и мыслями относительно выбора между языками.

https://proglib.io/w/cffc7efc",4044,28,8,goproglib
2296,2021-12-30 19:59:01+00:00,"Забавно, что для Daniel Martí Python находится между Go и Bash.",3715,37,15,goproglib
2295,2021-12-30 15:00:11+00:00,"**Быстрый старт во Frontend-разработке: с нуля до первого интернет-магазина!

**На курсе «Библиотеки программиста» [«Основы веб-разработки: принцип работы современного веба»](https://proglib.io/w/a24550bb) вы:

– сверстаете свой первый адаптивный макет с учетом семантики и множество декоративных элементов на HTML и CSS;
– поймете, как с помощью JavaScript разрабатывать пользовательские интерфейсы;
– разберетесь, как JavaScript используется в работе с Backend и создадите свой первый обмен данными сервером;
– углубитесь в более сложную разработку на React.js и напишете свой первый интернет-магазин. 

**Вас ждут:

**– 4 проекта в портфолио после курса;
– изучение HTML, CSS, JavaScript, React – стек технологий, который позволит начать работать в любой компании на любом проекте;
– опция персонального менторства.

Новый год – самый подходящий момент учиться новому. Для наших подписчиков действует скидка 65% до 31 декабря. **Остался один день!

**[Посмотреть тарифы и записаться можно здесь](https://proglib.io/w/a24550bb).",3874,0,0,goproglib
2294,2021-12-30 09:40:43+00:00,"[​](https://telegra.ph/file/405c6068232d34df44bbd.jpg)‍️ **ТОП-11 бесплатных учебных курсов по Go**

Библиотека программиста сделала для вас подборку бесплатных учебных курсов по Golang на русском языке.

https://proglib.io/sh/CE8WBcrmAG",3517,0,2,goproglib
2293,2021-12-29 19:50:31+00:00,Кратко об ошибках и их кастомизации в Go: https://proglib.io/w/3ed87199,4061,0,0,goproglib
2292,2021-12-29 11:30:16+00:00,"Разбираемся, почему модули значительно быстрее `GOPATH` при загрузке зависимостей.

https://proglib.io/w/77234590",4061,0,2,goproglib
2291,2021-12-28 11:45:25+00:00,"Серия статей о реализации Reverse HTTP proxy через WebSocket на Go.

https://proglib.io/w/8fbb9163",5602,0,0,goproglib
2290,2021-12-27 18:45:44+00:00,"[​](https://telegra.ph/file/6a81fd58be92e1ac74052.jpg)На помощь при возникновении ошибки сборки Hugo для x86_64 Linux на Apple Silicon Mac mini пришёл [Zig](https://ziglang.org/). Узнайте, что это за язык такой.

https://proglib.io/w/fe8148b9",3954,0,1,goproglib
2289,2021-12-27 16:03:11+00:00,"Привет! «Библиотека программиста» проводит мини-исследование по теме: **«Чему вы бы хотели научиться в сфере кибербезопасности?»**. 

Как известно, информационная безопасность – это набор технологий, процедур и практик, направленных на предотвращение атак, повреждений и незаконного доступа к сетям, устройствам, программам и данным. Профессионалы в области кибербезопасности защищают компании от утечек данных и прочих угроз. Потребность в экспертах растет с головокружительной скоростью. Чтобы стать хорошим специалистом по кибербезопасности, требуется немало сил и времени.

Предлагаем вам пройти [наш анонимный опрос](https://forms.gle/1j38vbjcunb2ym9b9) об опыте разработчиков в данном направлении. Опрос займет не более 10 минут вашего времени.

[Пройти его](https://forms.gle/1j38vbjcunb2ym9b9) [можно](https://forms.gle/1j38vbjcunb2ym9b9) [по ссылке](https://forms.gle/1j38vbjcunb2ym9b9).",3650,0,0,goproglib
2288,2021-12-27 05:00:07+00:00,"Если объединить структурный поиск по коду через [gogrep](https://github.com/quasilyte/gogrep) и фильтрацию результатов через [perf-heatmap](https://github.com/quasilyte/perf-heatmap), то мы получим profile-guided поиск по коду, который позволяет находить все совпадения по шаблону поиска, а затем показывает только те результаты, что лежат на «горячем» пути исполнения. Разбираемся, что к чему.

https://proglib.io/w/118f9a2b",5010,0,0,goproglib
2287,2021-12-26 19:58:29+00:00,"** **[requests](https://github.com/carlmjohnson/requests): предпосылки создания HTTP-клиента для Go и основные преимущества использования.

https://proglib.io/w/ed143eb2",3920,0,9,goproglib
2286,2021-12-26 11:10:38+00:00,Разбор нескольких подходов к структурированию кода на Go: https://proglib.io/w/c81b1d1f,4193,0,0,goproglib
2285,2021-12-25 18:33:30+00:00,Go concurrency на практике: https://proglib.io/w/c0d95927,4216,0,0,goproglib
2284,2021-12-25 15:00:06+00:00,"Статья о применении функционального подхода при работе с транзакцией SQL в Go.

https://proglib.io/w/3f82d88a",4038,3,2,goproglib
2283,2021-12-25 12:36:54+00:00,"Steve Francia, руководитель  разработки Go в Google, сравнивает Rust и Go не с целью выделить достоинства и недостатки, а с целью показать, как они дополняют и поддерживают друг друга. Также автор статьи дает рекомендации, когда каждый язык является наиболее подходящим.

https://proglib.io/w/c2aa3f25",4000,0,2,goproglib
2282,2021-12-24 11:51:35+00:00,"Молодой язык — поэтому он все еще развивается, отсутствие возможности ручного управления памятью, слишком простой, обработка ошибок не идеальна, не так безопасен, как Rust. Да-да, это все про минусы Go, упомянутые в статье. Что скажете?

https://proglib.io/w/a5f8d506",3996,0,34,goproglib
2281,2021-12-23 15:00:11+00:00,"Инновационные ноутбуки [на базе процессора AMD Ryzen™ 5000-й серии](https://ryzenpromotion.ru/?utm_source=telegram&utm_medium=cpm&utm_campaign=goproglib) - технологичное решение для творческих и амбициозных задач!

Интеллектуальная ​энергоэффективность​ - до 12 часов без подзарядки в режиме многопоточности;

До 8 усовершенствованных​​ ядер - для молниеносной скорости отклика и тихой работы без перегрева в ресурсоёмких приложениях;

Графика Radeon нового поколения - наслаждайтесь каждой деталью изображений в видеочатах и фильмах с разрешением до 4K в режиме HDR!

Узнать больше и приобрести по выгодной цене можно тут ⬇️",3976,0,0,goproglib
2280,2021-12-23 05:00:09+00:00,"[​](https://telegra.ph/file/89502b3b0aee28cab6d16.jpg)**Трек «Go для начинающих» от JetBrains Academy
**
До конца января 2022 года в JetBrains Academy действует бесплатный курс (~22 часа) для изучения Go, в рамках которого вы на примере реальных проектов научитесь:

 Запускать программы Go в терминале
 Работать с примитивными типами и структурами данных
 Работать с форматом данных JSON в Go
 Создавать простой HTTP-сервер и клиент
 Работать с GoLand

https://proglib.io/w/2e8f2bc5",4402,0,10,goproglib
2279,2021-12-22 14:00:10+00:00,"**Забавные, странные и провокационные вопросы/ответы и ситуации на собеседованиях, с которыми вы сталкивались**

От каких ответов вы недоуменно поднимали брови, как ловко уворачивались от провокационных вопросов, а над чем посмеялись и забыли? Поделитесь своими самыми интересными историями, с которыми сталкивались на собеседованиях. 

https://proglib.io/w/a617a55c",3987,1,0,goproglib
2277,2021-12-22 12:00:06+00:00,"Автор образовательного проекта **Go 101** выпустил книги по оптимизации и с различными советами / практиками Go. На сайте бесплатно доступна только часть материалов:

[Go Details & Tips 101](https://go101.org/details-and-tips/101.html)
[Go Optimizations 101](https://go101.org/optimizations/101.html)",5875,0,0,goproglib
2276,2021-12-22 09:00:04+00:00,"Backend разработчик GoLang (Middle/Senior) - Полный рабочий день

Привет! Мы создали современную и быструю социальную сеть для взрослых Friendsonly.me , основанную на модели подписки на контент. На нашем сайте люди зарабатывают учатся и развлекаются.  И нашей команде не хватает тебя! Ищем middle и senior разработчиков.

**Middle - От 180 000 до 300 000 ₽ 
Senior - От 250 000 до 400 000 ₽ 

Описание вакансии
**Цели на проекте:
- Перевод кода с php на golang
- Написание модулей на GoLang (Ядро сайта, платежная система, партнерская  программа, обработчик видео контента, биллинг и другое)
- Интеграция новых модулей в систему (полная замена старого функционала)

**Требования:
**- Опыт разработки на Golang 2+ года.
- Умение писать unit тесты.
- Опыт работы с git, bitbucket и понимание git flow.
- Опыт работы с Jira.

**Стек:
**- Golang, Fiber framework, gRPC
- Postgres, важно умение писать сырые sql запросы.

**Будет плюсом:
**- Опыт работы с docker,  kubernetes.
- Опыт с PHP, Laravel. (Необходимо будет переписывать часть функционала с Laravel)
- Опыт в разработке high-load проектов.
- Понимание принципов работы websockets.

**Условия:
**- Дистанционная работа
- Стабильные выплаты заработной платы 2 раза в месяц
- Оплачиваемый отпуск, больничные, трудоустройство по желанию, возможна работа по договору и оплата на ИП
- Используем максимально перспективные технологии, свободу слова и человеческое отношение;
- Не разводим бюрократию в процессах и не любим плохой код;
- Развиваем людей не только в написании кода, но и в понимании бизнес-задач.
﻿- С 2022 года будет возможность релокации на КИПР

За подробностями можно смело писать @sokolov172",4328,0,4,goproglib
2275,2021-12-21 20:15:11+00:00,"Видеокурс для изучения Go на примере простого CLI-приложения.

 [Смотреть](https://proglib.io/w/5b70b6e0)",5600,0,1,goproglib
2274,2021-12-21 18:00:02+00:00,"Дженерики позволили вдохнуть новую жизнь в старые пет-проекты. [Вот](https://proglib.io/w/23f7a50e), например.

https://proglib.io/w/0fb19584",3962,0,1,goproglib
2273,2021-12-21 15:00:13+00:00,"‍**Канал для поиска сотрудников от VK

**Там размещают вакансии по всем направлениям и командам. Удобный поиск по хештегам и телеграм-контакт рекрутера в каждой вакансии позволит найти подходящую вам.

https://t.me/vkjobs",3861,0,5,goproglib
2272,2021-12-20 20:05:06+00:00,"[​](https://telegra.ph/file/1651c51b7eb794451f51f.jpg) **Резюме мозга программиста**

Предлагаем рассмотреть краткое изложение книги «Мозг программиста», чтобы лучше понять, как программисты работают, думают и ведут себя.

https://proglib.io/sh/IjrZPMyQAp",3939,0,0,goproglib
2271,2021-12-20 19:15:13+00:00,Реализация транспортного протокола [QUIC](https://datatracker.ietf.org/doc/html/rfc9000) на Go: https://proglib.io/w/22f969a6,4201,0,2,goproglib
2270,2021-12-20 11:23:40+00:00,Вся сила `defer` в Go: https://proglib.io/w/8b674332,5254,0,3,goproglib
2269,2021-12-19 19:00:05+00:00,"[​](https://telegra.ph/file/8c566977e4488a0b15d69.jpg) **Почему я повернул экран на 90° и вы тоже должны это сделать**

Почему вы до сих пор не повернули ваш монитор вертикально? Ведь это так удобно и необычно. Или нет? Помогаем сомневающимся и рассказываем тем, кто еще не пробовал сменить ориентацию экрана.

https://proglib.io/sh/yRT5GHO3Uz",3906,0,12,goproglib
2268,2021-12-19 18:08:46+00:00,"‍ Ресурс, который включает ссылки на учебные пособия по многим аспектам Go.

https://proglib.io/w/669a42d2",5373,0,0,goproglib
2267,2021-12-19 14:51:19+00:00," **FerretDB** — open source альтернатива MongoDB, написанная на Go. Ядром является stateless прокси-сервер, который преобразует запросы протокола MongoDB в SQL и использует PostgreSQL в качестве механизма базы данных.

https://proglib.io/w/1a48829e",4378,1,9,goproglib
2266,2021-12-18 19:30:01+00:00,"**LET’S GO ON AWS**

В случае такого объемного и полезного руководства можно продублировать [Go Advent Calendar](https://t.me/goproglib/2241). Оно сочетает изучение Go как языка программирования с несколькими вариантами использования AWS — CDK и Lambda.

https://proglib.io/w/5b8c71e8",4140,1,0,goproglib
2265,2021-12-18 19:05:39+00:00," Если у вас все нормально с английским, обратите внимание на выпуск подкаста **Go Time**, в рамках которого команде Go были заданы интересные вопросы, в том числе о дженериках, Go 2, GitHub Copilot, сборку мусора, текстовые редакторы и многом другом.",3875,0,0,goproglib
2264,2021-12-17 12:14:26+00:00,"Первый опыт работы с дженериками и адаптация библиотеки [optional](https://github.com/markphelps/optional) в соответствии с новыми возможностями.

https://proglib.io/w/b68b7e91",4149,0,5,goproglib
2263,2021-12-17 06:00:07+00:00," **gorgonia** — библиотека, которая помогает облегчить реализацию машинного обучения с помощью Go.

https://proglib.io/w/65d33029",3878,0,4,goproglib
2262,2021-12-16 20:10:11+00:00,"Компания Wallarm [открыла исходные коды](https://lab.wallarm.com/test-your-waf-before-hackers/) GoTestWAF — инструмента для тестирования различных нагрузок и возможностей обхода WAF (Web Application Firewall). Вдруг кто-то работает с Go в сфере ИБ и GoTestWAF окажется полезным ‍️.

https://proglib.io/w/31c7995c",4039,0,2,goproglib
2261,2021-12-16 18:49:25+00:00,"Разработчик на Go делится опытом применения чистой архитектуры и DDD на практике.

https://proglib.io/w/7c3f25fa",4278,0,3,goproglib
2260,2021-12-16 12:55:04+00:00,Live Reloading в Go на практике**: **https://proglib.io/w/513da95c,5223,0,0,goproglib
2259,2021-12-15 19:39:38+00:00,"Серия статей **Go Channel Patterns **по мотивам обучения в Ardan Labs.

https://proglib.io/w/993b26c6",5564,0,0,goproglib
2258,2021-12-15 19:06:39+00:00,"Руководство по работе с [telegram-bot-api](https://github.com/go-telegram-bot-api/telegram-bot-api) на примере разработки простого бота.

https://proglib.io/w/42b66387",4164,0,14,goproglib
2257,2021-12-15 14:24:05+00:00,[​](https://telegra.ph/file/310032be70e0c34868d06.jpg) Встречайте Go 1.18 Beta 1: https://proglib.io/w/e99f221e,3670,0,2,goproglib
2256,2021-12-15 09:00:03+00:00,"Давно мечтаете погрузиться в мир программирования, освоить множество языков и попробовать себя в разных направлениях IT? Тогда присоединяйтесь к бесплатному интенсиву Skillbox, который пройдёт 16–18 декабря в 18:00 по московскому времени!

Подробная программа — здесь: https://clc.to/XcKadA.

Что вас ждёт?

● Введение в профессию. Узнаете, какие специальности есть в IT-сфере, как грамотно составить резюме и подготовиться к собеседованию.

● Знакомство с популярными языками программирования (Python, Java, 1С, Swift) и смежными направлениями (Data Science, frontend-разработкой, разработкой Android- и iOS-приложений).

Спикер интенсива — разработчик с опытом более 17 лет, директор центра SymbioWay Даниил Пилипенко. Он находит IT-специалистов для крупнейших компаний России.

 Всех участников ждут подарки от издательства МИФ. А каждый, кто выполнит практическую работу, получит сертификат на 10 000 рублей на любой курс Skillbox.",3716,0,4,goproglib
2254,2021-12-14 17:19:03+00:00,"Golang митап онлайн 16 декабря в 17:00.
 
Разработчики из МТС поделятся опытом программирования на Go - расскажут, как оперативно находят и фиксят баги, проводят тесты облаков и используют serverless функции.
 
Регистрация и расписание [тут](http://mts-digital.timepad.ru/event/1862538/?utm_source=tg&utm_medium=goproglib)",3741,0,0,goproglib
2253,2021-12-14 16:12:08+00:00,"Ebiten в 2021: статьи, туториалы, готовые проекты, планы на 2022 год и многое другое.

https://proglib.io/w/53af7e4c",3689,0,0,goproglib
2252,2021-12-14 11:18:47+00:00,"#news

Coinbase [объявила](https://blog.coinbase.com/meet-kryptology-coinbases-open-source-cryptography-library-b5f22854f3f7) об открытии исходных кодов криптографической Go-библиотеки [Kryptology](https://github.com/coinbase/kryptology), предлагающей набор криптографических алгоритмов для применения в распределённых системах, в которых шифрование и подтверждение подлинности осуществляется с привлечением нескольких участников.

[Читать подробнее](https://www.opennet.ru/opennews/art.shtml?num=56341)",4038,0,0,goproglib
2251,2021-12-13 20:11:49+00:00,Разработчик из Karuna делится опытом реализации некоторых архитектурных паттернов на Go: [CQRS](https://habr.com/ru/company/karuna/blog/582814/) & [SAGA](https://habr.com/ru/company/karuna/blog/582808/).,4283,1,0,goproglib
2250,2021-12-13 11:59:39+00:00,"Минимальный шаблон проекта на Go + GORM с аутентификацией, который включает следующий функционал:

Login
Logout
Register
User Activation
Resend Activation Email
Forgot Password
Admin Dashboard
Search
Throttling

https://proglib.io/w/0b4f3afb",4321,0,1,goproglib
2249,2021-12-12 19:30:01+00:00,"Пример реализации фасетного поиска с помощью Solr, Vue и Go:

[Репозиторий](https://github.com/stevenferrer/multi-select-facet)
[Статья с кратким описанием](https://stevenferrer.github.io/posts/multi-select-facet-solr-vue-go/)",3922,0,0,goproglib
2248,2021-12-12 19:01:44+00:00,"Простой чек-лист, который можно использовать перед выпуском микросервиса Go в продакшен. 

https://proglib.io/w/9a8b0a18",5327,0,0,goproglib
2247,2021-12-11 18:35:08+00:00,"7 шаблонов кода на Go, которые сделают программу более надежной и эффективной.

https://proglib.io/w/06450474",4511,0,4,goproglib
2246,2021-12-10 19:12:59+00:00,"Друзья, какие у вас планы на новогодние праздники? Поделитесь в комментариях ",3452,0,14,goproglib
2245,2021-12-10 18:50:00+00:00,"Краткое руководство по использованию [GitHub Actions](https://docs.github.com/en/actions) для создания конвейера непрерывной интеграции (CI), который автоматически тестирует и проверяет код на Go.

https://proglib.io/w/e314f585",3965,0,0,goproglib
2244,2021-12-10 18:00:07+00:00,"Смотрите [GopherCon](https://www.gophercon.com/)**? **Сегодня заключительный день и трансляцию можно увидеть [здесь](https://youtu.be/XnPHI6cCL7E). Для тех, кто пропустил, смотрите доступные записи предыдущих дней ([1](https://youtu.be/35eIxI_n5ZM) & [2](https://youtu.be/Gcp2ACyCadA)).",3866,0,0,goproglib
2243,2021-12-10 15:00:06+00:00,"**В Новый год — с новой профессией в IT!

**[**Проверь свои знания на NIX Online Edu Testing

**](https://nix-online-testing.com/?utm_source=telegram&utm_medium=goproglib&utm_campaign=nix_online_testing)Купить подарки, поставить елку. Чего-то не хватает в праздничном списке… Точно! Подготовиться к карьере в IT!
Для этого приглашаем тебя поучаствовать в онлайн-тестировании по одной из 17-ти программ обучения. **Выполни тест и узнай уровень своей подготовки.

Когда: **с 3 по 24 декабря
**Где:** онлайн с любого удобного тебе гаджета

Хочешь освоить самую актуальную профессию в IT? Эксперты NIX помогут тебе.

В Корпоративном центре обучения NIX есть 17 учебных программ. В зависимости от направления ты будешь учиться офлайн в Харькове или онлайн. Ты получишь базовые знания по фронтенд и бэкенд-разработке, по бизнес-анализу и в сфере облачных технологий. После обучения ты сможешь уверенно начать карьеру в IT и попробовать себя на позиции Junior-специалиста в команде NIX!

**Отличный старт для нового года, правда? ;)

**Теперь дело за малым — [переходи по ссылке](https://nix-online-testing.com/?utm_source=telegram&utm_medium=goproglib&utm_campaign=nix_online_testing), выбирай понравившуюся программу обучения и проходи онлайн-тестирование.",3623,1,2,goproglib
2242,2021-12-10 10:14:40+00:00,"**Serialized Roaring Bitmaps** ([Sroar](https://github.com/dgraph-io/sroar)): предпосылки разработки библиотеки на Go, подводные камни и результаты, которых удалось достичь.

https://proglib.io/w/6aff3e2d",3675,0,0,goproglib
2241,2021-12-09 18:57:22+00:00," Следите за [Go Advent Calendar](https://proglib.io/w/b0c6a186)? Будем обновлять статьи в этом посте по мере публикации. На сегодняшний день доступны следующие материалы:

1) [A RESTFul Gopher living in docker](https://levelup.gitconnected.com/a-restful-go-living-in-docker-14f06fdedd28?sk=116f63d1efb2bc23d0fff1fc43e5e7d2)
2) [Implementing Golang Interfaces; Like a Boss](https://levelup.gitconnected.com/implementing-golang-interfaces-like-a-boss-73a0f7757597)
3) [Leveraging Go as a tool](https://medium.com/@cheikhhseck/leveraging-go-as-a-tool-da15873472b7)
4) 
5) [Automate testing of poor network conditions with Shopify's Toxiproxy](https://josephwoodward.co.uk/2021/12/automate-testing-poor-network-conditions-shopifys-toxiproxy)
6) [Golang Job Statistics + job hunting tips December 2021](https://www.golangprojects.com/golang-jobs-market-statistics-2021.html)
7) 
8) [Merkle Trees using Go by Satyarth Ojha, Gra](https://prog-bytes.hashnode.dev/merkle-trees)
9) [Go project layout with Clean architectures and DDD](https://charly3pins.dev/blog/go-project-layout-with-clean-architecures-and-ddd/)
10)   
11) [Hitchhiker’s Guide To Context](https://blog.smantic.dev/posts/context/)
12) 
13) [Homemade CLI Tools](https://www.tegh.net/2021/12/13/homemade-cli-tools/)
14) [Complete Guide to learn using GO on AWS](https://www.go-on-aws.com/)
15) [Use MQTT with the Wio Terminal and TinyGo](https://www.2improveit.eu/blog/2021/11/use-mqtt-with-the-wio-terminal-and-tinygo/)
16) [Are slices passed by reference or by value?](https://simondrake.dev/2021-11-19-are_slices_copied_by_value_or_reference/)
17) [Demystifying HTTP Handlers in Golang](https://medium.com/geekculture/demystifying-http-handlers-in-golang-a363e4222756)",4480,0,0,goproglib
2240,2021-12-09 11:56:17+00:00,"Вам точно понравятся эти 10 причин, присыпанные сарказмом: https://proglib.io/w/2fdca1a6",3875,0,1,goproglib
2239,2021-12-08 19:25:42+00:00,"Реализация согласованного алгоритма хеширования на Go.

https://proglib.io/w/5cb6b969",5208,1,1,goproglib
2238,2021-12-08 15:05:36+00:00,"Всем привет! 
Команда [Get me IT](https://vk.cc/bVrd6g) сделала сервис, который отбирает вакансии по вашим интересам. 
Настройте фильтры за 30 секунд и получайте предложения, отобранные по вашим предпочтениям в @GetMeIT_bot",3793,0,0,goproglib
2237,2021-12-08 13:33:56+00:00,Перевод [статьи](https://towardsdatascience.com/how-to-implement-domain-driven-design-ddd-in-golang-2e2139beb09d) о реализации DDD в Go: https://proglib.io/w/e5d36c17,4217,0,1,goproglib
2236,2021-12-07 19:07:35+00:00,"Кажется, никто так сильно не ждёт дженерики в стабильной версии как автор статьи. Вот его цитата в конце: «I am so happy. I think I will cry».

https://proglib.io/w/5a9e6d46",3764,1,18,goproglib
2233,2021-12-06 19:12:12+00:00,Обзор наиболее популярных ORM для Go на Github: https://proglib.io/w/5ee476f5,3632,0,0,goproglib
2232,2021-12-06 18:00:06+00:00,"Фундаментальное руководство по работе с PostgreSQL в Go с помощью [pgx](https://github.com/jackc/pgx).

https://proglib.io/w/7b071b65",3786,0,0,goproglib
2231,2021-12-06 15:00:14+00:00,"[​](https://telegra.ph/file/3b79e81ea89e2eaaacf17.jpg)**Митап от SberDevices — о виртуальных ассистентах Салют и о том, как на них заработать

**Когда будет прорыв в сфере цифровых помощников? Действительно ли они лучше других инструментов для общения с пользователями? Как заработать на создании приложений для виртуальных ассистентов?

**8 декабря 2021 года в 18:00 команда SberDevices ответит на эти вопросы на онлайн-митапе.

**Руководители технологических команд и опытные разработчики:
—  расскажут о развитии виртуальных ассистентов; 
—  обсудят, как зарабатывать на платформе SmartMarket сегодня и в будущем;
— поделятся лайфхаками разработки мультимодального взаимодействия с виртуальными ассистентами семейства Салют, которые живут в умных девайсах SberDevices.

 Все участники смогут задать вопросы и получить ответы в прямом эфире! 

 **Регистрируйся по** [ссылке

](https://developers.sber.ru/portal/events/meetup-5?utm_campaign=smark_smartmarket_hack-ag_dec2021&utm_source=proglib&utm_medium=inluencers&utm_content=___post_meetup0812_)До встречи на митапе! А пока заходите в приложение Салют и скажите ассистентам Салют: «Давай поболтаем». Две самые современные нейросети покажут вам, что уже сегодня с виртуальными ассистентами можно общаться почти как с живыми людьми ",3499,0,0,goproglib
2230,2021-12-05 19:18:08+00:00,"PHP-разработчик делится впечатлениями о Go после нескольких месяцев знакомства.

https://proglib.io/w/8862f2f1",3765,0,2,goproglib
2229,2021-12-05 14:11:25+00:00,"Тут предложили описанные в статье [функциональные опции](https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis) использовать как замену именованных аргументов из других языков.

https://proglib.io/w/e7d63dca",3749,0,3,goproglib
2228,2021-12-05 10:51:12+00:00,"Mark Litwintschik вначале написал программу для извлечения доменов верхнего уровня (top-level domain, TLD) из 1,27 миллиардов записей на Python, затем на Rust, а теперь на очереди Go. 

https://proglib.io/w/2b3c972d",3704,0,0,goproglib
2227,2021-12-04 14:07:34+00:00, GoLand 2021.3 включил много новых фич. Смотрите сами: https://proglib.io/w/8720d5c7,3702,0,0,goproglib
2224,2021-12-04 11:34:05+00:00,"В 2020 Linux еще держится в топе у Go-разработчиков, интересно будет посмотреть статистику следующего года. А вы на какой ОС работаете?",3420,0,34,goproglib
2223,2021-12-03 19:30:01+00:00," **zinc** — легковесная альтернатива elasticsearch на Go.

https://proglib.io/w/f749e590",3725,0,6,goproglib
2222,2021-12-03 18:05:12+00:00,"8 простых, но полезных хитрых приемов написания кода на Go.

https://proglib.io/w/1e9fa880",3807,0,12,goproglib
2221,2021-12-03 15:00:12+00:00,"[​](https://telegra.ph/file/cb4c859b4d74dcfeb7ab8.jpg)Начните свой путь в Data Science! Присоединяйтесь к прямым трансляциям с 6 по 8 декабря в 21:00 по московскому времени. В роли спикера выступит руководитель направления по исследованию данных в Сбербанке с семилетним опытом в программировании — Анастасия Борнева.

Регистрируйтесь на бесплатный онлайн-интенсив по анализу данных:  https://clc.to/mpH0RA

Чему вы научитесь?
 Находить аномалии, выявлять ложные зависимости и выделять главные факторы в моделях данных.
 Визуализировать и анализировать данные с помощью Python-библиотек.
 Автоматизировать решение бизнес-задач с помощью искусственного интеллекта и машинного обучения.

 Все участники, дошедшие до финала интенсива, получат в подарок электронную книгу Пола Доэрти и Джеймса Уилсона «Человек + машина» издательства МИФ. А каждый, кто сдаст практическую работу, станет обладателем сертификата на 10 000 рублей для поступления на любой курс образовательной платформы Skillbox. 


Присоединяйтесь к прямым эфирам 6–8 декабря в 21:00 по московскому времени!",3472,0,0,goproglib
2220,2021-12-03 11:25:40+00:00,"[​](https://telegra.ph/file/fe19590798a5da87dbc7b.jpg)#news 

 Представлены Go 1.17.4 и 1.16.11: https://proglib.io/w/82dcf19a",3377,0,5,goproglib
2219,2021-12-02 20:46:58+00:00," **Go-structurizr** — библиотека для автоматического создания диаграмм [C4](https://ru.wikipedia.org/wiki/%D0%9C%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C_C4) из кода Go. 

https://proglib.io/w/1efe2340",3642,0,0,goproglib
2217,2021-12-02 20:07:41+00:00," **DevLake** — инструмент, который позволяет объединить множество DevOps-данных в одном удобном, персонализированном и расширяемом месте. В настоящий момент в качетсве источников данных используются Jira, GitLab, Jenkins и GitHub.

https://proglib.io/w/cd841132",15909,0,1,goproglib
2214,2021-12-02 18:26:24+00:00,"Пополняемая серия статей о создании веб-сервиса на Go с нуля:

[Runtime контроллер и Graceful Shutdown](https://proglib.io/w/95c82e6f)
[Backend для апплета](https://proglib.io/w/c0c1f480)",5338,0,0,goproglib
2213,2021-12-01 20:20:36+00:00,"Старший Go-разработчик в «Лаборатории Касперского» подробно рассказывает о поиске узких мест и оптимизации кода на Go.

https://proglib.io/w/b858cca5",3984,0,0,goproglib
2211,2021-12-01 19:47:54+00:00,"[​](https://telegra.ph/file/929d0d53da452f47b7832.jpg)#news 

play.golang.org переехал на [go.dev](https://go.dev/play). Ну и как тут без простенькой задачки? ",3291,0,7,goproglib
2209,2021-12-01 13:38:01+00:00,"Изучаем [Bubble Tea](https://t.me/goproglib/2047) на практике:

[Часть 1](https://youtu.be/j5p5SpqWS8E)
[Часть 2](https://youtu.be/YalT4KKnLao)",3324,0,0,goproglib
2208,2021-12-01 06:00:03+00:00,"Всем привет! 

«Библиотека программиста» находится в поиске менеджера по маркетингу в образовательный проект proglib.academy (направление EdTech).

Мы обучаем всех желающих навыкам в IT-сфере и внедряем навыки программирования в текущей карьере. В нашу команду ищем интернет-маркетолога, который вместе с нами будет расти и развивать проект proglib.academy. 

**Вместе с нами ты будешь:

**– Создавать digital-стратегии в рекламных каналах для бренда proglib.academy с целью привлечения новых учеников как на существующие продукты, так и на новые направления.
– Заниматься медиапланированием и прогнозировать эффективности РК.
– Создавать эффективные связки: продукт-аудитория-посыл и креатив-посадочная страница.
– Тестировать новые аудитории/связки/настройки и форматы рекламы.
– Анализировать привлекаемый трафик и работать с конверсиями до заявки.

**Самое интересное:
**Вы будете сами влиять на свой доход и зарабатывать на результате.
Мы абсолютно открыты к разным идеям и предложениям. Предлагай любую идею или конструктивно критикуй — твое мнение не останется без внимания и может все изменить.

**Немного о важном:** 
Мы ищем сотрудника на полный рабочий день, возможен гибридный формат работы. 

А [откликнуться и узнать подробнее можно здесь](https://hh.ru/vacancy/50078133).",3270,0,0,goproglib
2207,2021-11-30 19:02:03+00:00,"Generic map values <—> Native Go structures

https://proglib.io/w/4da40813",3239,1,0,goproglib
2206,2021-11-30 18:29:36+00:00,"[​](https://telegra.ph/file/b093aa6b13e85aad1db5f.jpg) **5 сложных навыков, которые позволят экспоненциально расти в программировании**

Разберем несколько сложных навыков, которые обязан иметь на вооружении каждый продуктивный программист, желающий быстрого карьерного роста.

https://proglib.io/sh/WEUHOcTkAN",3294,0,4,goproglib
2205,2021-11-30 15:00:13+00:00,"[​](https://telegra.ph/file/eb321812e088748bf259c.jpg)**R&D центр HUAWEI, лаборатория Advanced Software Technology Lab. 

**Приглашает в свою команду системных разработчиков компилятора Go

Инженеры нашей лаборатории работают над различными проектами в области Системного ПО, в частности развитием компилятора и рантайма языка Go. Мы принимаем активное участие в open-source сообществе golang.org и наши изменения регулярно включаются в стандартные инструменты разработки языка Go. Особое внимание уделяем оптимизации производительности.

**Что мы ожидаем от вас?
**• Уверенное знание принципов компьютерной архитектуры и системного ПО
• Уверенные знание языков С/С++ или Go
• Понимание принципов программирования на ассемблере
• Опыт разработки в среде Linux

**Что будет плюсом?
**• Опыт разработки компилятора/линковщика/отладчика и других низкоуровневых инструментов разработки
• Участие в значимых open-source проектах

**Мы предлагаем:
**• Участие в open-source проекте
• ДМС со стоматологией, возможность посещение терапевта в офисе
• Корпоративные мероприятия, йога, беговой клуб, обширная ИТ-библиотека
• Участие в международных конференциях, командировки в Китай (по желанию)

Резюме, вопросы по вакансии: @Yana_YC",3420,0,0,goproglib
2204,2021-11-29 19:56:56+00:00,Обновили серию головоломок  https://t.me/goproglib/2110,3334,0,0,goproglib
2203,2021-11-29 19:19:52+00:00,"Краткое видеоруководство по разработке Serverless приложения на Go с помощью [Serverless Stack](https://serverless-stack.com/).

https://proglib.io/w/eeb936af",3464,0,0,goproglib
2202,2021-11-29 15:14:27+00:00,"**Как математика используется в анализе данных? Какую математику нужно знать аналитику данных для решения продуктовых задач?

**Об этом расскажет в среду, 8 декабря в 19-00 МСК практикующий дата сайентист Артур Сапрыкин, работавший в Мегафоне в сфере обработки естественных языков.

Артур ответит на все вопросы, а также всем участникам будет доступна запись вебинара и презентация спикера.

[Зарегистрироваться](https://proglib.io/w/58509594).",3315,0,0,goproglib
2201,2021-11-29 06:00:05+00:00,6 советов по работе со строками в Go: https://proglib.io/w/0736ddb7,3480,0,0,goproglib
2200,2021-11-28 18:00:06+00:00,Register based calling  https://proglib.io/w/34525bd5,3312,0,1,goproglib
2199,2021-11-28 15:00:05+00:00," **Ergo** — современный IRC-сервер (Internet Relay Chat), написанный на Go.

⭐️ 1382

https://proglib.io/w/6dddb1f2",3372,0,0,goproglib
2198,2021-11-28 12:00:05+00:00,Серия видеоруководств по созданию социальной сети на Go: https://proglib.io/w/5b06fb9d,3507,0,0,goproglib
2197,2021-11-28 09:00:02+00:00,"#вакансия #МТСДиджитал  #golang #Москва #удаленно
Middle+/Senior golang developer
Город: Москва(fulltime/гибрид/удаленка)
З/п: 250 000 – 350 000 руб. gross+20% годовая премия
 
 МТС – одна из крупнейших российских экосистем. На базе основного телеком-бизнеса мы создаем цифровые продукты и сервисы во многих направлениях – от интернета вещей, искусственного интеллекта и больших данных до цифровой медицины и киберспорта, а также активно развиваем свои внутренние продукты.

Мы команда внутреннего travel продукта, которая развивает сервис для командировок сотрудников компании по всей России и зарубеж. Наша миссия – сделать прозрачными и удобными командировки для всех в группе компаний МТС.
 
Наш стек:
Programming Languages: Go, Java, Python;
Database: PostgreSQL, MongoDB, Redis;
Object Storage: Minio;
AuthN: OpenID Connect;
AuthZ: Open Policy Agent;
Network: GRPC, REST;
Continuous Integration & Delivery: GitlabCI, ArgoCD;
Observability: OpenCensus, Jaeger, Prometheus, Grafana, Fluentd, ElasticSearch, Kibana;
Orchestration: Kubernetes;

 Чем предстоит заниматься:
· Разработка серверной части продукта;
· Разработка интеграционного слоя, интеграция с ландшафтом;
· Участие в проектировании архитектуры;
· Участие в пресейле, активное участие в создании продукта;
· Code review, architecture review, refactoring.
 
 От Вас мы ждем:
· Опыт коммерческой backend-разработки на Go от 3-х лет;
· Уверенные навыки работы на nix-системах;
· Умение грамотно пользоваться системой контроля версий (мы используем git);
· Опыт работы SQL/NoSQL хранилищами
· Понимание принципов контейнеризации, опыт работы с Docker;
· Опыт интеграции с API сторонних Web-сервисов;
· Знание английского языка (на уровне чтения документации).

 Мы, в свою очередь предлагаем:
-Стабильную белую заработную плату, премии;
-Возможность работать удаленно из любого региона;
-Хакатоны, митапы, чемпионаты по программированию;
-Дух стартапа (мы одна из самых молодых команд в компании) с ресурсами и технологиями корпорации - лидера телеком рынка;
-Поддержку и открытость к новым идеям - мы команда, в которой каждый может получить помощь и повлиять на результат;
-Люди вокруг тебя - ключевой источник для твоего профессионального развития: разработчики объединяются в гильдии по стеку технологий и интересам, чтобы обмениваться опытом и знакомить другу друга с новыми технологиями;
-Мы разрабатываем по-настоящему нужные и полезные ИТ-продукты - делать что-то в стол не про нас;
-Не нужно думать о разворачивании, так как у нас уже внедрен CI/CD, Kubernetes и есть команда DevOps инженеров, которые всегда придут на помощь;
-Отличный социальный пакет: ДМС со стоматологией, страхование жизни, страхование при поездках за рубеж;
-Хороший отдых — отпуск 28 календарных дней + 3 календарных дня дополнительно ежегодно, а также различные скидки на путешествия от наших партнеров.

За подробностями можно смело писать @EvgeniaSamarina",3641,1,0,goproglib
2195,2021-11-27 17:35:00+00:00,"**GoAWK**: предпосылки создания интерпретатора AWK на Go, принцип работы, подходы к тестированию и улучшению производительности.

https://proglib.io/w/03850d13",3285,0,0,goproglib
2194,2021-11-27 17:10:01+00:00,"Фундаментальные основы анализа безопасности исходного кода проектов на Go.

https://proglib.io/w/ad6d335c",4481,0,0,goproglib
2192,2021-11-26 18:00:06+00:00,"Помните [ту самую серию статей](https://t.me/goproglib/1462) про разработку REST-серверов на Go? Если есть проблемки с языком, серия доступна и на русском:

[Стандартная библиотека](https://habr.com/ru/company/ruvds/blog/559816/)
[Применение маршрутизатора gorilla/mux](https://habr.com/ru/company/ruvds/blog/561108/)
[Использование веб-фреймворка Gin](https://habr.com/ru/company/ruvds/blog/562878/)
[Применение OpenAPI и Swagger](https://habr.com/ru/company/ruvds/blog/564508/)
[Middleware](https://habr.com/ru/company/ruvds/blog/566198/)
[Аутентификация](https://habr.com/ru/company/ruvds/blog/567280/)
[GraphQL](https://habr.com/ru/company/ruvds/blog/568472/)",5859,2,0,goproglib
2191,2021-11-26 15:00:16+00:00,"**Всё будет PHP! **Начните учить язык, на котором работает 78,7% всех сайтов в интернете.

**Полный курс** ""PHP-разработчик"" с сертификатом Хекслета. Обучаем с нуля и до собеседований. 

Оставьте заявку и начните учиться сегодня**:** https://bit.ly/3HTwDK6",3357,0,7,goproglib
2190,2021-11-26 13:45:12+00:00," Senior Golang - разработчик
️ [Emerging Travel Group
](https://www.emergingtravel.com/about/) Удаленно
 до 270 000 рублей net

**ETG** это travel-tech компания, специализирующаяся на бронировании отелей в 220 странах мира. В состав компании входят четыре бренда: российские [Ostrovok.ru](https://ostrovok.ru/?sid=81f4c04e-7977-4859-acea-e06ec95e1568) и [B2B.Ostrovok](https://b2b.ostrovok.ru/?sid=e782495b-4058-4741-ad0c-61ffcd8d6486) и международные [ZenHotels](https://www.zenhotels.com/?sid=8cba8ff7-95aa-4246-ab99-68419e0f28ae) и [RateHawk](https://www.ratehawk.com/lp/ru/).

Ищем сильного** Backend разработчика** в команду метапоисков.

Команда Metasearch занимается интеграциями с метапоисками  и разрабатывает несколько сервисов, включая высоконагруженный сервис поиска. 

**О нашем департаменте разработки:
**Самый технологичный тревел-сервис на планете сам себя не создаст, так что этим занимаемся мы — команда Engineering. Наша власть практически безгранична: мы взаимодействуем со всеми департаментами, развиваем все направления — отели, авиабилеты и трансферы; B2B и В2С; российские и международные; разрабатываем внутренние продукты — CRM, Intranet, Blog, Infrastructure.

При этом находиться в офисе совершенно необязательно — мы нацелены на результат, а не на высиживание определённого количества часов. Ты можешь работать дома, из офиса или выбрать гибридный формат.

Мы увлечены своей работой — проводим хакатоны и открытые демо-встречи, вместе смотрим в офисе важные конференции.

**На этой позиции ты будешь заниматься:
**▫️поддержкой и развитием высоконагруженного API;
выбором технологий и принятием всех технических решений в разработке сервисов команды;
▫️ выполнять технические задачи, связанные с мониторингом и аналитикой API-проекта;
разрабатывать и поддерживать интеграции с внешними и внутренними сервисами;
▫️ участвовать в code review;
▫️оптимизировать существующий код.

**От тебя мы ждём:
**▫️опыт работы с Golang от 2х лет (либо опыт работы с Python в Django от 3х лет + базовые знания Golang и желание в нем развиваться);
▫️опыт работы с СУБД;
▫️ опыт работы с Docker;
▫️ опыт работы с GitLab CI/CD;
▫️ опыт управления небольшой командой и/или наставничества.

**Что мы предлагаем:
**▫️ 100% белая заработная плата;
▫️ комфортный офис в центре Москвы с бесплатным фитнес-залом, зонами отдыха, безлимитным чаем/кофе и питанием;
▫️ гибридный формат работы: удалённо, из офиса или оба варианта;
▫️ гибкий график — мы не требуем в 9:00 быть в сети или в офисе. Можешь начинать работать в комфортное для тебя время;
▫️ обучение: семинары, тренинги, конференции. Если ты сам хочешь выступать на конференциях — поможем всё организовать;
▫️ ДМС;
▫️ корпоративный английский, а также скидки на SkyEng;
▫️ крутые активности с коллегами: киновечера, викторины, тематические вечеринки, ежегодные выезды на природу, игры в футбол/волейбол;
▫️ корпоративные скидки на отели и другие услуги;

__Задать вопросы/ прислать отклик**: **__ @shirikova_alexandra ; a.shirikova@ostrovok.ru",3265,0,0,goproglib
2189,2021-11-26 11:48:53+00:00,"Слишком смело автор статьи развенчивает мифы об исключениях в Go. В комментариях на [Reddit](https://www.reddit.com/r/golang/comments/r2h31i/shorten_your_go_code_by_using_exceptions/) уже .

https://proglib.io/w/620246c2",3256,0,1,goproglib
2188,2021-11-25 19:40:00+00:00,"Статьи из серии, посвящённой созданию эмулятора терминала на Go:

[Understanding The Linux TTY Subsystem](https://ishuah.com/2021/02/04/understanding-the-linux-tty-subsystem/)
[Build A Simple Terminal Emulator In 100 Lines of Golang](https://ishuah.com/2021/03/10/build-a-terminal-emulator-in-100-lines-of-go/)",3657,0,1,goproglib
2187,2021-11-25 18:30:02+00:00,"2 доклада на конференции ITeaConf, связанных с Go:

[Is it time to re-sync](https://proglib.io/w/816b76c4)? Андрей Печкуров, Software Engineer, ScyllaDB/BeerJS
[Опыт запуска криптовалютной платформы на Cosmos SDK](https://proglib.io/w/5908f762), Рената Токтар, Senior Software Engineer, DSR",3440,0,0,goproglib
2186,2021-11-25 16:14:41+00:00,"Пополняемая серия статей о работе с Context в Go:

[Часть 1: WithValue](https://proglib.io/w/a6a79d86)",4798,0,0,goproglib
2185,2021-11-24 19:45:00+00:00,"[​](https://telegra.ph/file/3d36cc0bb99abef4952f2.jpg) **10 лучших каналов по Go (Golang) на YouTube для новичков и профессионалов**

Языки программирования растут как грибы после дождя. Один из них – Go (Golang) и его талисман Gopher. Предлагаем узнать, что эти двое могут предложить разработчикам. Читайте наш обзор лучших тематических каналов на YouTube.

https://proglib.io/sh/m9WG0QAXV3",4037,0,7,goproglib
2184,2021-11-24 18:54:22+00:00,"[​](https://telegra.ph/file/8b7ea46d39ce183cb432c.jpg)** Semverbot** — CLI-инструмент, который позволяет автоматизировать семантическое версионирование.

https://proglib.io/w/4850232e",3513,1,0,goproglib
2183,2021-11-24 18:00:09+00:00,"Видеозаписи выступлений на конференции **GopherCon UK 2021.

**https://proglib.io/w/081a7052",3350,1,0,goproglib
2181,2021-11-23 19:46:34+00:00,"[​](https://telegra.ph/file/6f5de233e3c13c8d71dd5.jpg) **Тест для новичков: какой дистрибутив Linux выбрать?
**
В этом тесте мы собрали 36 популярных дистрибутивов Linux и распределили их в зависимости от потребностей пользователя. Вы просто отвечаете на вопросы, а тест сам подберет список подходящих дистрибутивов для соответствующих целей и уровня подготовки.

https://proglib.io/sh/HBnsVyeUDQ",3102,1,5,goproglib
2180,2021-11-23 19:46:34+00:00,"Есть здесь любители Linux? Мы собрали для вас 36 популярных дистрибутивов и распределили их в зависимости от потребностей. Вы просто отвечаете на вопросы, а тест сам подберет список подходящих дистрибутивов для соответствующих целей и уровня подготовки .",3279,0,2,goproglib
2179,2021-11-23 18:06:36+00:00,"Серия статей о работе с БД в Go:

[An Introduction to using SQL Databases in Go](https://www.alexedwards.net/blog/introduction-to-using-sql-databases-in-go)
[Organising Database Access in Go](https://www.alexedwards.net/blog/organising-database-access)
[Configuring sql.DB for Better Performance](https://www.alexedwards.net/blog/configuring-sqldb)
[How to Manage Database Timeouts and Cancellations in Go](https://www.alexedwards.net/blog/how-to-manage-database-timeouts-and-cancellations-in-go)
[Working with Redis in Go](https://www.alexedwards.net/blog/working-with-redis)",5206,1,0,goproglib
2178,2021-11-23 12:18:56+00:00,"**Доводим распределённые действия до конца с использованием простейшего паттерна Saga**

Иван Стрелков**, **бэкенд-разработчик в Ozon, рассказывает про реализацию паттерна Saga на Go и его плюсы / минусы. 

https://proglib.io/w/b06c48b9",3978,1,0,goproglib
2177,2021-11-23 09:00:03+00:00,"Познакомьтесь с разработкой на Golang и освойте один из востребованных языков программирования на бесплатном онлайн-интенсиве Skillbox: https://clc.to/eaDnkg.

За 3 дня вы:
️ изучите основы языка Golang;
️ научитесь работать с популярными библиотеками;
️ познакомитесь с синтаксисом и основными функциями Golang;
️ создадите многофункционального бота для Telegram и добавите проект в портфолио.

 Спикером интенсива будет Senior Golang Developer с 11-летним опытом в веб-разработке — Валерий Кабисов. Он расскажет, где применять язык Go и развиваться в этой сфере, поделится лайфхаками по разработке.

 Всех участников, дошедших до конца интенсива, ждёт подарок — электронная книга Пола Доэрти и Джеймса Уилсона «Человек + машина». А те, кто выполнит практическую работу, получат сертификаты на 10 000 рублей для обучения на образовательной платформе Skillbox.

Присоединяйтесь к прямым эфирам с 25 по 27 ноября в 19:00 по московскому времени. Будет интересно!",3471,1,0,goproglib
2176,2021-11-22 17:23:47+00:00,"Веб-сокеты в Go: обзор библиотек, подводные камни и вопросы масштабирования.

https://proglib.io/w/94c36344",3806,0,0,goproglib
2175,2021-11-22 11:37:05+00:00,"Незавершенная книга о внутреннем устройстве Go:

[Chapter I: A Primer on Go Assembly](https://github.com/teh-cmc/go-internals/blob/master/chapter1_assembly_primer/README.md)
[Chapter II: Interfaces](https://github.com/teh-cmc/go-internals/blob/master/chapter2_interfaces/README.md)
Chapter |||: Garbage Collector (в стадии разработки)

[Читать полностью](https://proglib.io/w/cd37b8b7)",5271,1,0,goproglib
2174,2021-11-21 19:06:38+00:00,"Запись докладов о Go на DevDay, в рамках которых рассматривались следующие темы:

gqlgen: GraphQL для строгих (Валера Протопопов, TheSoul Publishing)
Viper и Cleanenv для конфигурирования структур vs велосипед (Костя Аносов, Контур)
Дискуссия о Go. Обсуждение плюсов и минусов Go перед остальными языками, почему Go набирает популярность и чего ждать разработчикам Go в будущем

https://proglib.io/w/a22bb025",3642,2,0,goproglib
2172,2021-11-21 13:17:10+00:00,"Советы по подготовке к техническому собеседованию на позицию Go-разработчика.

https://proglib.io/w/254dcac9",3987,0,0,goproglib
2171,2021-11-21 07:11:04+00:00,"[​](https://telegra.ph/file/8c728abe642ddf25e3b6b.jpg)Базовый пример микросервисной архитектуры на Go. 

https://proglib.io/w/c0ca5c65",4152,0,3,goproglib
2170,2021-11-20 19:48:32+00:00,"Пополняемая коллекция практических задач с собеседований, решенных с помощью Go.

https://proglib.io/w/fc582a7a",4084,0,0,goproglib
2169,2021-11-20 18:57:47+00:00,"Type Parameters (generics) и Fuzz Testing: разбор двух наиболее значимых функций следующей версии Go.

https://proglib.io/w/64b97490",3491,0,0,goproglib
2168,2021-11-20 10:01:22+00:00,"На каких малоизвестных (до 10к подписчиков) интересных ютуб-блогеров по программированию, дата-сайенс и кибербезопасности вы подписаны?",2930,0,9,goproglib
2167,2021-11-20 07:25:29+00:00,"Руководство для новичков по разработке HTTP-сервиса на Go с нуля. Часть 1: пишем контроллер runtime и передаем ему управление переходами из одного состояния в другое; пишем хелпер управления ресурсами приложения, с которым можно будет работать атомарно.

https://proglib.io/w/95c82e6f",3915,0,0,goproglib
2166,2021-11-19 20:15:03+00:00,"GoReleaser v1.0.0 

https://proglib.io/w/552aff4b",3317,0,0,goproglib
2165,2021-11-19 19:50:01+00:00,"Go kit — набор инструментов и практик для создания микросервисов на Go. 

https://proglib.io/w/ff0e5ec1",3586,0,0,goproglib
2164,2021-11-19 18:20:25+00:00,"Презентация автора [Ebiten](https://github.com/hajimehoshi/ebiten) Hajime Hoshi на Go Conference 2021 о разработке игр для Nintendo Switch.

https://proglib.io/w/d8375d97",3683,0,0,goproglib
2163,2021-11-19 09:00:01+00:00,"**Как получать лучшие задачи и зарплаты в ИТ?**

Чтобы расти по карьерной лестнице, мало просто быть сильным специалистом. Важно понимать как устроена работа ИТ изнутри, как строится эффективное взаимодействие в команде и как думают ваши коллеги и руководители. Все это вы узнаете на канале [ИТ беседка](https://t.me/ITbesedka).

Здесь собралась команда руководителей с многолетним опытом работы в топовых ИТ-компаниях страны и рассказывает о том, как работает настоящее ИТ. Вы узнаете, как на самом деле стать тимлидом, как должна строиться структура эффективного ИТ-отдела, как наладить процессы и решать конфликты, об Agile, который действительно работает, и многое многое другое. И вся эта информация проверена на практике и сопровождается четкими чеклистами, которые можно начать применять уже сегодня. Хотите быть уверены в своем будущем? Тогда подписывайтесь на [ИТ беседку](https://t.me/ITbesedka)!",3408,0,0,goproglib
2162,2021-11-18 18:32:51+00:00,"Основные антипаттерны и описание правильного пути для завершения работы процесса или программы Go.

https://proglib.io/w/26622567",4924,0,0,goproglib
2161,2021-11-18 11:46:58+00:00,"Структурированное логирование в Go: предпосылки использования формата JSON, обзор библиотек и использование `Zerolog` на практике.

https://proglib.io/w/eb583e10",3567,0,0,goproglib
2160,2021-11-18 06:00:01+00:00,"Golang meetup online

‍**Go Clean Template | Чистая Архитектура и как её готовить** - Непряхин Михаил, Evrone

‍**Система real-time управления предложениями туроператоров** -
Михаил Ремизов, Level.Travel

‍ **Best practices ≠ Rocket science** __- __Илья Новиков, Авито



 25 ноября, начало в 19:00 мск, Четверг 

 **ОНЛАЙН

**[](https://meetups.evrone.com/ruby-meetup-no16-online?utm_source=tg&utm_medium=ITMeeting&utm_campaign=meetup_ruby16) [Регистрация на мероприятие](https://meetups.evrone.com/online-golang-meetup-0?utm_source=tg&utm_medium=goproglib&utm_campaign=evrone_meetup_go)",3663,0,5,goproglib
2159,2021-11-17 20:12:05+00:00,Обновили серию головоломок  https://t.me/goproglib/2110,3315,0,0,goproglib
2158,2021-11-17 19:35:17+00:00,Go Crash Course: https://proglib.io/w/ddebb449,3510,0,0,goproglib
2157,2021-11-17 18:22:02+00:00,"Веб-скрейпинг на Go: теория и реализация с помощью библиотеки Colly.

https://proglib.io/w/709cf77a",3627,0,0,goproglib
2156,2021-11-16 19:20:35+00:00,"Свежие и связанные с ними материалы в блоге Ent:

[Generate a fully-working Go CRUD HTTP API with Ent](https://entgo.io/blog/2021/07/29/generate-a-fully-working-go-crud-http-api-with-ent/)
[Generating OpenAPI Specification with Ent](https://entgo.io/blog/2021/09/10/openapi-generator/)
[Announcing ""entoas"" - An Extension to Automatically Generate OpenAPI Specification Documents from Ent Schemas](https://entgo.io/blog/2021/11/15/announcing-entoas)
 [Sync Changes to External Data Systems using Ent Hooks](https://entgo.io/blog/2021/11/1/sync-to-external-data-systems-using-hooks)
[Announcing entcache - a Cache Driver for Ent](https://entgo.io/blog/2021/10/14/introducing-entcache/)
[Generating Ent Schemas from Existing SQL Databases](https://entgo.io/blog/2021/10/11/generating-ent-schemas-from-existing-sql-databases)
[Extending Ent with the Extension API](https://entgo.io/blog/2021/09/02/ent-extension-api)",3558,0,0,goproglib
2155,2021-11-16 18:00:02+00:00,"После волны негативных комментариев под [данной статьей](https://proglib.io/w/8c2a385d) автор решил продемонстрировать подход к структурированию проектов на Go, которого придерживаются разработчики проекта [SEV-2](https://sev-2.com/). 

https://proglib.io/w/f6ab7561",3479,0,1,goproglib
2153,2021-11-15 19:51:21+00:00,"**«Что делать, когда нечего делать? Попробовать что-нибудь новое!» — **первая фразу **из **случайного руководства по Raspberry Pi

А действительно, почему бы не попробовать что-нибудь новое. В этом поможет серия статей `
`**Raspberry Pi GPIO** **(General Purpose Input Output) in Go and C**:

[Pulse Width Modulation for Dummies](https://youngkin.github.io/post/pulsewidthmodulationraspberrypi/)
[Blinking LED](https://youngkin.github.io/post/sunfoundergpionotesled/)
[RGB LED](https://youngkin.github.io/post/sunfoundergpionotesrgbled/)
[LED Bar Graph](https://youngkin.github.io/post/ledbargraph/)",3509,0,0,goproglib
2152,2021-11-15 18:00:09+00:00,"Руководство по разработке REST API на Go для начинающих:

[Читать](https://proglib.io/w/0ed29ed4)
[Смотреть](https://youtu.be/bFYZrEuEDLE)",4933,0,0,goproglib
2151,2021-11-15 15:00:14+00:00,"**Освой программу обучения **[**Golang+JS Full Stack**](http://nix.digital/5kAMiy) **вместе с NIX!

** Харьков

Технологии Golang востребованы и в простых мобильных приложениях, и в крупных серверных системах. Изучи перспективное IT-направление с экспертами NIX — построй успешную карьеру!! 

Во время обучения ты получишь базовые знания о фронтэнд и бекэнд-разработке и сможешь закрепить их на практике. По окончании обучения этих навыков будет достаточно, чтобы попробовать свои силы на позицию Junior Golang Developer в NIX.

**Чему ты научишься:
**▪️использовать базовые инструменты Golang-разработчика;
основам работы в окружении Linux, а также HTML/CSS;
▪️настраивать web-сервера;
▪️работать с Git и базами данных;
▪️разрабатывать SPA на фреймворке VueJS (от основ до введения во Vuex).

Обрати внимание: старт обучения в конце ноября-начале декабря. Чтобы попасть в группу, **оставь заявку на **[сайте](http://nix.digital/5kAMiy)**.** Мы обязательно с тобой свяжемся и пригласим пройти онлайн-тестирование на программу обучения!",3407,0,0,goproglib
2150,2021-11-15 11:35:46+00:00,"Полезные советы по созданию поддерживаемых проектов Go.

https://proglib.io/w/a6b490dd",3495,0,0,goproglib
2149,2021-11-14 18:00:03+00:00,"Улучшения базовой производительности Go впечатляют. Смотрите сами .

https://proglib.io/w/a08611e0",3445,0,0,goproglib
2148,2021-11-14 15:00:08+00:00,"**Frontend-разработчик с нуля до первого интернет-магазина! 
**[Proglib.academy](https://proglib.io/w/fe798fbb) запустил новый онлайн-курс «Frontend-разработчик».
Сверстаете свой первый адаптивный макет с учетом семантики и множество декоративных элементов на HTML и CSS. Разберетесь как JavaScript используется в работе с backend и создадите свой первый обмен данными с сервером.
По данным HH: медианная зарплата frontend-разработчика: 98 000 — 123 000 рублей в месяц. Присоединяйтесь! 

**Оставьте заявку, чтобы узнать больше о программе и формате курса** https://proglib.io/w/fe798fbb",3355,0,1,goproglib
2147,2021-11-14 09:32:03+00:00,"[​](https://telegra.ph/file/5c88ec8b72716040d3740.jpg) **goworkers **— минимальная и эффективная реализация workerpool в Go с использованием горутин.

https://proglib.io/w/8dd61574",3601,0,0,goproglib
2146,2021-11-13 16:13:19+00:00,"Тред от Daniel Martí о том, почему следует использовать внешние тестовые пакеты (""package foo_test"" в файлах _test.go).

https://proglib.io/w/bd8f5c05",3401,0,0,goproglib
2145,2021-11-13 12:00:04+00:00,"__Copy & paste your crypto code from here instead of Stack Overflow__

Старый добрый репозиторий, который демонстрирует набор базовой криптографии из стандартной библиотеки Go.

⭐️ 1715

https://proglib.io/w/ef38a1ac",3423,0,0,goproglib
2144,2021-11-13 09:05:37+00:00,"Продолжаем издавать курс «Статьи для IT». В прошлых модулях обсудили, как собрать, отредактировать и проиллюстрировать текст. Теперь каждый студент курса может занятно и ясно рассказать о своём проекте, руководствуясь несложными приёмами.

Но подготовить текст мало — надо донести его до читателей. В новом модуле рассказываем о распространении статей: где публиковаться, как формировать сообщество и взаимодействовать с читателями.

Подписывайтесь на курс и прокачивайте личный бренд. Бесплатно для всех авторов и читателей Библиотеки программиста: https://stepik.org/101672",3044,0,0,goproglib
2143,2021-11-12 19:54:30+00:00,"#news 

Новый интерфейс поиска завезли  https://proglib.io/w/f8b442c2",3310,0,1,goproglib
2142,2021-11-12 19:08:38+00:00,"Бесплатный практический курс на русском под названием «**Go как второй язык»**.

https://proglib.io/w/402d908d",3834,0,0,goproglib
2141,2021-11-12 17:55:34+00:00,"Разработка высокопроизводительного движка для 3D-игр на Go по шагам и исключительно по фану. А вдруг кому-то пригодятся наработки и идеи?!

[Репозиторий](https://github.com/bloeys/nmage)
Смотреть на [Twitch](https://www.twitch.tv/bloeys) или [YouTube](https://www.youtube.com/watch?v=ucENU2jP1Mo&list=PL_34VfA5LJ9Vy8yWVTCz8tqcoggzGNRKf)",3612,0,0,goproglib
2140,2021-11-11 18:30:01+00:00,"️**Podlodka Podcast: Golang**

В гостях у ведущих подкаста Алексей Палажченко — программист из Sidero Labs и ведущий подкаста GolangShow.

В выпуске обсуждались многие аспекты Go: история развития, области применения, ключевые фичи, экосистема, дженерики, а также сильные и слабые стороны языка. Алексей погрузил в мир Go, объяснил, почему ""less is exponentially more"" и как это отражается на том, что язык предлагает разработчикам.",3602,0,0,goproglib
2138,2021-11-11 12:00:06+00:00,"Статьи из серии **Advanced Go**:

[Goroutines, the basics](https://pauldigian.hashnode.dev/advanced-go-goroutines-the-basics)
[Loops and goroutines](https://pauldigian.hashnode.dev/advanced-go-loops-and-goroutines)
[Improve your code using Interfaces effectively](https://pauldigian.hashnode.dev/advanced-go-improve-your-code-using-interfaces-effectively)
[Use default value as your advantage, append to nil](https://pauldigian.hashnode.dev/advanced-go-use-default-value-as-your-advantage-append-to-nil)
[Choosing between a constructor and declaring the type](https://pauldigian.hashnode.dev/advanced-go-choosing-between-a-constructor-and-declaring-the-type)
[Make synchronous code asynchronous with context.Context and channels](https://pauldigian.hashnode.dev/advanced-go-make-synchronous-code-asynchronous-with-contextcontext-and-channels)",5899,0,0,goproglib
2137,2021-11-11 08:39:31+00:00,"Пошаговый шестичасовой видеокурс по Go для начинающих от freeCodeCamp. 

https://proglib.io/w/1ec0df36",3933,0,2,goproglib
2136,2021-11-10 20:02:48+00:00,"[​](https://telegra.ph/file/c7e06fa9f273c56518afc.jpg) **color** — простой в использовании пакет для тех, кто хочет добавить в проект немного красок. 

https://proglib.io/w/9be8fd52",3657,0,0,goproglib
2135,2021-11-10 19:09:17+00:00,"Руководство по использованию Go и [Pulumi](https://www.pulumi.com/) для управления облачной инфраструктурой AWS посредством кода.

https://proglib.io/w/39bc8103",3603,0,0,goproglib
2134,2021-11-10 17:37:42+00:00," Сегодня Go отмечает двенадцатую годовщину. Это был богатый событиями год, и сообществу есть что ожидать в следующем году.

https://proglib.io/w/a911f169",3730,0,2,goproglib
2133,2021-11-09 19:50:40+00:00,Реализация [Phoenix LiveView](https://github.com/phoenixframework/phoenix_live_view) на Go: https://proglib.io/w/3f182ae9,3663,0,0,goproglib
2132,2021-11-09 15:00:10+00:00,"Представляем анонс практических интенсивов [от proglib.academy](https://proglib.io/w/37c1dee2)!

22.11 стартуют интенсивы. Вы научитесь: 
Планировать архитектуру ПО и мигрировать с монолита - Микросервисная архитектура;
Правильно выбрать NoSQL БД в зависимости от поставленных задач и уверенно работать с любой из них - NoSql (MongoDB, Redis, Cassandra);
Применять шаблоны проектирования в разработках, понимать SOLID принципы и писать чистый код - Архитектура и шаблоны проектирования.

Успейте оставить заявку и занять место по спец. цене https://proglib.io/w/37c1dee2",3775,0,0,goproglib
2131,2021-11-09 06:00:02+00:00,"[​](https://telegra.ph/file/c7f3ef73984399754f12f.jpg)Какой роутер Go использовать? В статье в развернутом виде представлен ответ на этот вопрос и приведена соответствующая блок-схема.

https://proglib.io/w/aef86a2d",4901,0,0,goproglib
2130,2021-11-08 19:30:01+00:00,"Видеозаписи выступлений на **Go Day 2021**:

 [Using Generics in Go](https://youtu.be/nr8EpUO9jhw)
 [Modern Enterprise Applications](https://youtu.be/5fgG1qZaV4w)
 [Building Better Projects with the Go Editor](https://youtu.be/jMyzsp2E_0U)
 [From Proof of Concept to Production with Go](https://youtu.be/e7PtBOsTpXE)",5053,0,0,goproglib
2129,2021-11-08 18:00:04+00:00,"Руководство для начинающих по работе с наборами геоданных в Go.

https://proglib.io/w/10e5f66e",3587,0,0,goproglib
2128,2021-11-08 15:00:06+00:00,"️ **ITeaConf** бесплатная онлайн конференция на которой будет представлена секция по GO:

‍ **Is it time to re-sync? - Андрей Печкуров - ScyllaDB/BeerJS
**Поговорим о том, как писать быстрые и масштабируемые многопоточные примитивы на Go.

‍ **Опыт запуска криптовалютной платформы на Cosmos SDK - Рената Токтар, DSR
**Выясним, зачем использовать Cosmos SDK при создании собственной криптовалюты и куда бы ещё применить Blockchain.

 Так же на конференции можно посмотреть доклады по: Python, Ruby, Rust, Java, Node.js, .NET, Frontend 

Дата: 14 ноября 
Формат: Онлайн
[Регистрация](https://iteaconf.ru/?utm_source=tg&utm_medium=goproglib&utm_campaign=iteaconf21)",3645,0,0,goproglib
2127,2021-11-07 15:00:06+00:00,"Обработка интерфейса одностраничных приложений (Single-Page application, SPA) с использованием пакета `net/http` в Go.

https://proglib.io/w/56c0721c",3700,0,2,goproglib
2126,2021-11-07 11:00:09+00:00," **Testcontainers-Go** — пакет, который упрощает создание и очистку зависимостей на основе Docker-контейнеров для тестов. 

Простой в использовании API позволяет разработчикам программно определять контейнеры, которые должны запускаться как часть теста, и очищать ресурсы после завершения теста.

⭐️ 1088

https://proglib.io/w/b81bb562",4994,0,2,goproglib
2125,2021-11-07 07:53:43+00:00,"**Network Programming with Go: Code Secure and Reliable Network Services from Scratch **(2021)

**Автор**: Adam Woodbeck

В книге описана теория и практика использования Go для написания безопасного, читаемого и готового к работе сетевого кода. В первых главах вы узнаете основы работы в сети и маршрутизации трафика, затем примените полученные знания на практике.
  
По мере продвижения вы изучите сетевые протоколы более высокого уровня и напишете приложения, которые безопасно взаимодействуют с серверами, клиентами и API-интерфейсами по сети с использованием TLS. 

Кроме того, вы узнаете фундаментальные основы TCP/IP, методы обеспечения надежности связи на уровне сокетов, способы использования обработчиков и middleware, инструменты для включения аутентификации и шифрования в приложения с использованием TLS, методы сериализации данных для хранения или передачи данных, подходы к настройке приложения для работы в облаке и многое другое.",4884,1,0,goproglib
2124,2021-11-06 18:00:03+00:00,"Стартовый набор от Ardan Labs для создания веб-сервисов на Go с использованием возможностей Kubernetes. Проект использует минимальные зависимости, реализует идиоматический код и следует лучшим практикам Go. 

[Репозиторий](https://proglib.io/w/d31298d4) 
[Wiki](https://github.com/ardanlabs/service/wiki)",3998,1,0,goproglib
2123,2021-11-06 15:03:07+00:00,"Привет!

 Выпустили четвёртый модуль курса «Статьи для IT». Новые уроки посвятили иллюстрациям. Рассказываем, как готовить схемы, диаграммы, качественные скриншоты и ясные таблицы. Отдельная глава о том, как иллюстрировать идеи с помощью программного кода.

 Астрологи объявили неделю знаний. Количество студентов курса удвоилось, теперь нас 235. Присоединяйтесь и вы, обучение бесплатное, отвечаем на все комментарии студентов: https://stepik.org/101672",3302,0,0,goproglib
2122,2021-11-06 13:00:06+00:00,"[​](https://telegra.ph/file/cd8193b88622800ec5f5a.jpg)Тред от Daniel Martí о предстоящих изменения, которые стоит ждать в Go 1.18.

https://proglib.io/w/c87e0957",3578,0,0,goproglib
2121,2021-11-06 10:09:18+00:00,"Решаем проблему с интерфейсами в Go под названием **Interface Erasure.

**https://proglib.io/w/b238207c",3668,0,0,goproglib
2119,2021-11-05 18:08:32+00:00,"** go-critic **— линтер для Go на стероидах.

https://proglib.io/w/ca320dba",4999,0,0,goproglib
2118,2021-11-05 09:00:02+00:00,"Теория и практика создания плагина `protoc` для генерации кода Go с помощью `protogen`.

https://proglib.io/w/a2544ea3",3837,0,0,goproglib
2117,2021-11-05 07:10:18+00:00,"#news

Команда Go представила выпуски Go 1.17.3 и 1.16.10, которые включили исправления безопасности в archive/zip and debug/macho (CVE-2021-41772, CVE-2021-41771).

https://proglib.io/w/ae60f2bb",3794,0,0,goproglib
2116,2021-11-04 17:39:50+00:00,"**Network Programming with Go 
**
**Автор**: Jan Newmarch

Перед вами пособие по созданию сетевых приложений с использованием Go. Можно также читать в [онлайне](https://proglib.io/w/cf0cce25).",4586,0,0,goproglib
2115,2021-11-04 09:16:01+00:00,"Современные приложения хранят данные в нескольких системах, особенно это характерно для микросервисных архитектур. [Ent](https://github.com/ent/ent) имеет полезные функции для синхронизации данных с внешними системами при их изменении. Читайте подробности в новой статье блога.

https://proglib.io/w/a8d7a249",4020,0,0,goproglib
2114,2021-11-03 19:30:01+00:00,Практический кейс оптимизации памяти в Go: https://proglib.io/w/78a20a6e,5268,0,0,goproglib
2113,2021-11-03 19:00:08+00:00,[​](https://telegra.ph/file/3faffe3384a3110e0b31e.jpg)Совет по производительности в Go от разработчиков [fasthttp](https://github.com/valyala/fasthttp): https://proglib.io/w/33dd705c,3845,0,0,goproglib
2112,2021-11-03 18:00:04+00:00,"Если вы используете [zap](https://github.com/uber-go/zap) для структурированного ведения журнала, присмотритесь к шаблону [FieldBuilder](https://github.com/ysyesilyurt/zap-fieldbuilder-template), который позволяет избежать многократного повторения однотипных строк в кодовой базе. В статье описаны предпосылки его создания и представлены краткие заметки по использованию.

https://proglib.io/w/a0da1c28",3708,0,3,goproglib
2111,2021-11-03 15:00:13+00:00,"Хотите освоить разработку с нуля и найти первую работу? [proglib.academy](https://proglib.io/w/28ff5f62) создал новый онлайн-курс «Frontend-разработчик»:

Вы получите фундамент, необходимый каждому программисту, и освоите JavaScript — один из самых востребованных языков Фронтенда.
Оставьте заявку на сайте, чтобы узнать больше о программе и формате курса https://proglib.io/w/28ff5f62",3743,0,1,goproglib
2110,2021-11-02 19:41:57+00:00," Еженедельная подборка из пяти интересных головоломок и задач, которые помогут отвлечься от рутины и немного пошевелить извилинами:

[Часть 1](https://proglib.io/p/5-interesnyh-golovolomok-i-zadach-chtoby-otvlechsya-ot-rutiny-i-nemnogo-poshevelit-izvilinami-2021-10-25)
[Часть 2](https://proglib.io/p/5-interesnyh-golovolomok-i-zadach-chtoby-otvlechsya-ot-rutiny-i-nemnogo-poshevelit-izvilinami-2021-11-01)
[Часть 3](https://proglib.io/p/5-interesnyh-golovolomok-i-zadach-chtoby-otvlechsya-ot-rutiny-i-nemnogo-poshevelit-izvilinami-2021-11-08)
[Часть 4](https://proglib.io/p/5-interesnyh-golovolomok-i-zadach-chtoby-otvlechsya-ot-rutiny-i-nemnogo-poshevelit-izvilinami-2021-11-16)
[Часть 5](https://proglib.io/p/5-interesnyh-golovolomok-i-zadach-chtoby-otvlechsya-ot-rutiny-i-nemnogo-poshevelit-izvilinami-vypusk-5-2021-11-22)
[Часть 6](https://proglib.io/p/5-interesnyh-golovolomok-i-zadach-chtoby-otvlechsya-ot-rutiny-i-nemnogo-poshevelit-izvilinami-vypusk-6-2021-11-29)
[Часть 7](https://proglib.io/p/5-interesnyh-golovolomok-i-zadach-chtoby-otvlechsya-ot-rutiny-i-nemnogo-poshevelit-izvilinami-vypusk-7-2021-12-06)
[Часть 8](https://proglib.io/p/5-interesnyh-golovolomok-i-zadach-chtoby-otvlechsya-ot-rutiny-i-nemnogo-poshevelit-izvilinami-vypusk-8)
[Часть 9](https://proglib.io/p/5-interesnyh-golovolomok-i-zadach-chtoby-otvlechsya-ot-rutiny-i-nemnogo-poshevelit-izvilinami-vypusk-9)
[Часть 10](https://proglib.io/p/5-interesnyh-golovolomok-i-zadach-chtoby-otvlechsya-ot-rutiny-i-nemnogo-poshevelit-izvilinami-vypusk-10)
[Часть 11](https://proglib.io/p/5-interesnyh-golovolomok-i-zadach-chtoby-otvlechsya-ot-rutiny-i-nemnogo-poshevelit-izvilinami-vypusk-11)
[Часть 12](https://proglib.io/p/5-interesnyh-golovolomok-i-zadach-chtoby-otvlechsya-ot-rutiny-i-nemnogo-poshevelit-izvilinami-vypusk-12)
[Часть 13](https://proglib.io/p/5-interesnyh-golovolomok-i-zadach-chtoby-otvlechsya-ot-rutiny-i-nemnogo-poshevelit-izvilinami-vypusk-13-2022-01-17)
[Часть 14](https://proglib.io/p/5-interesnyh-golovolomok-i-zadach-chtoby-otvlechsya-ot-rutiny-i-nemnogo-poshevelit-izvilinami-vypusk-14-2022-01-23)
[Часть 15](https://proglib.io/p/5-interesnyh-golovolomok-i-zadach-chtoby-otvlechsya-ot-rutiny-i-nemnogo-poshevelit-izvilinami-vypusk-15-2022-01-31)",4552,0,2,goproglib
2109,2021-11-02 19:11:04+00:00,"[​](https://telegra.ph/file/c9d3cadaddb28aea33675.jpg)Смотрели сериал Тед Лассо? Тут на Go + Lambda написали бот для Twitter, который генерирует цитаты тренера.

https://proglib.io/w/6abf73ad",3945,1,0,goproglib
2108,2021-11-02 18:00:10+00:00,"Примеры кода на Java из 4го издания книги про алгоритмы от Robert Sedgewick и Kevin Wayne переписали на Go.

https://proglib.io/w/bb3d4cc4",3924,0,0,goproglib
2107,2021-11-02 15:00:02+00:00,"VK и Подлодка опубликовали [результаты опроса 630 продакт-менеджеров ](https://podlodka.io/pm)российского рынка. Внутри много интересного: инструменты, успехи и фейлы, навыки и показатели. В числах и с графиками. Отправьте знакомым продактам, им понравится.

В пятёрку самых привлекательных работодателей попала команда Авито. Это интересный кейс: в Авито работа продактов устроена по-особому. Продакт занят исключительно продуктовыми задачами, и команда руководствуется не субъективными мнениями, а только реальными данными. 

Подсмотреть, как организована работа команды Авито, можно на [странице заявки в продакт-менеджеры](https://product.avito.ru/). Будет интересно не только продактам, но и всем, кто организует команды.",3648,0,0,goproglib
2106,2021-11-02 11:10:50+00:00,"#вакансия #go #golang #удаленка #fulltime
Ищу Go developer (удаленный формат работы)
Компания: KALABI
Локация: Москва 
Формат работы: fulltime, удаленка, гибкий график
З/П: 200-300k net. 
Открыто несколько позиций в разных проектах:
-  Система экологического мониторинга для отслеживания состояния конкретных экосистем. 
-Система управления информационной безопасностью, реализующая полный спектр задач от планирования работ и управления рисками кибербезопасности до мониторинга трафика, сбора информации со средств защиты, поиска утечек и обнаружения аномалий. 
 Что потребуется от Вас:
 знание языка Go и сопутствующей экосистемы;
 опыт работы с очередями или брокерами сообщений и СУБД;
  навык использования Git и владение Linux-системами;
 опыт проектирования и разработки приложений с нуля;
 понимание общих концепций программирования (шаблоны проектирования, ООП, модульность и прочее). 
Мы предлагаем:
крутые проекты, возможность
профессионального и карьерного роста в быстро развивающейся и коммерчески успешной компании;
полный рабочий день с гибким графиком, можно работать удаленно;
 оформление по ТК, ДМС со стоматологией (членов семьи можно оформить с большой скидкой);
обучение используемым технологиям, оплачиваемые курсы и возможность участвовать в конференциях;
сложные и необычные задачи (некоторые из задач решаются всего в нескольких компаниях в мире). 
telegram:@faina_kleinman
https://career.habr.com/companies/kalabi",3242,0,0,goproglib
2105,2021-11-02 05:50:16+00:00," Выпустили третий модуль курса «Статьи для IT». Модуль посвящен авторской редактуре. Рассказываем, как выбирать правильные слова, перекраивать предложения и абзацы так, чтобы текст было приятно читать.

 На курс за две недели записалось 120 человек. Не стесняйтесь писать комментарии под степами: и критические, и одобрительные. Начало обсуждения — хороший стимул для других, чтобы включиться в дискуссию. Активность учащихся поможет быстрее запросить у Степика возможность выдавать сертификаты.

Ссылка на курс: https://stepik.org/101672",3113,0,0,goproglib
2104,2021-11-01 19:00:09+00:00,"Статья, в которой описаны эффективные способы написания юнит-тестов для операторов Kubernetes с использованием моков Go.

https://proglib.io/w/bbcc47e7",4722,0,0,goproglib
2103,2021-11-01 17:58:41+00:00,"Преимущества и недостатки использования шаблонов в Go и инструмента [GoTSQL](https://github.com/MigOpsRepos/gotsql) для организации кодовой базы PostgreSQL.

https://proglib.io/w/7bf9cbb8",3443,0,0,goproglib
2102,2021-11-01 12:32:32+00:00,"Go HTTP router: от теории к практике с использованием `net/http`.

https://proglib.io/w/5c885a4c",3586,0,0,goproglib
2101,2021-11-01 09:00:01+00:00,"[​](https://telegra.ph/file/612496758969f1f689717.jpg)**Шарите за строгую типизацию Golang, горутины, управление памятью и другие фишки? Тогда вас с руками оторвут на Hiring Event от Авиасейлс!

**Никаких «мы вам перезвоним» и «напишите код на листочке» — пройдите собеседование и получите оффер всего за 2 дня. Обещают удалённую работу, ДМС, помощь с оплатой спортзала, курсов английского и обучения ваших детей.

А для участия нужно просто:
1. зарегистрироваться на Hiring Event, которая пройдёт с 17 по 19 ноября;
2. выполнить тестовое (сразу придёт на почту);
3. пройти техническое собеседование и собеседование с менеджером.

Узнайте подробнее, почитайте отзывы их разработчиков и зарегистрируйтесь: https://tprg.ru/m0gL",3534,0,0,goproglib
2100,2021-10-31 18:28:18+00:00,"Объяснение концепций, которые делают Go элегантным.

https://proglib.io/w/2c232c0c",3492,0,0,goproglib
2099,2021-10-31 16:49:29+00:00,"Разделение массива или среза на определенное количество фрагментов с помощью Go.

[Статья](https://pauldigian.hashnode.dev/split-a-slice-or-array-in-a-defined-number-of-chunks-in-golang-but-any-language-really) 
[Github Gist](https://gist.github.com/siscia/988bf4523918345a6a8285b32e685e03)",3435,0,0,goproglib
2098,2021-10-31 10:49:24+00:00,"Предпосылки использования и реализация Go Module Proxy.

https://proglib.io/w/0014e142",3420,0,0,goproglib
2097,2021-10-30 18:00:04+00:00,"**Лучшие практики** **тестирования в Go
**
В статье кратко описаны причины выбора того, что тестировать, и некоторые примеры того, как заставить это работать в приложении.

https://proglib.io/w/1964a060",4982,0,0,goproglib
2096,2021-10-30 14:47:32+00:00,"Что делать, если на продакшене возникла проблема с производительностью приложения на Go, но в сборку не были включены инструменты профилирования? Читайте реальную историю из жизни и советы по выходу из ситуации. 

https://proglib.io/w/54b76a6b",4666,0,0,goproglib
2095,2021-10-30 09:00:02+00:00,"Джун или сеньор? Неважно — приглашаем всех JavaScript-разработчиков на конференцию Holy JS  Слушайте лекции от экспертов Газпромбанка и получайте подарки!

 Андрей Журавков, ведущий инженер разработки управления технологий, фронтальных систем розничного бизнеса — о том, как силами небольшой команды делать омниканальную систему

 Надир Жумабаев, главный инженер разработки фронтальных сервисов розничного кредитного конвейера, расскажет о функциональном программировании на JS

 Проходите игры и квизы по JavaScript и получите шанс выиграть:

 Конструкторы LEGO «Международная Космическая Станция» и NASA Apollo Saturn V
 Jenga и беспроводной powerbank
 Мерч Газпромбанка

Для участия в конференции зарегистрируйтесь по ссылке > https://vk.cc/c7okAR",3426,0,2,goproglib
2094,2021-10-30 08:09:05+00:00,"Решаем задачу сортировки графа зависимостей на Go.

https://proglib.io/w/82d5e174",3329,0,0,goproglib
2093,2021-10-29 18:30:01+00:00,"Полный гайд по основам и вариантам использования `go generate`.

https://proglib.io/w/101b1713",4769,0,0,goproglib
2092,2021-10-29 15:00:15+00:00,"На Хабре вышла расшифровка вебинара «Дыры и заборы: безопасность в Kubernetes»: https://habr.com/ru/company/southbridge/blog/584306/

Если эксперты нравятся, имейте в виду: 5–7 ноября они ведут интенсив по безопасности в кубе, на него можно зарегистрироваться со скидкой 50%. Введите промокод SecK8s по ссылке https://slurm.club/3Bl69fZ",3519,0,0,goproglib
2091,2021-10-29 12:00:05+00:00,Работаем со строками в Go: https://proglib.io/w/f563ede1,3633,0,0,goproglib
2090,2021-10-29 08:29:45+00:00,"[​](https://telegra.ph/file/453fc222d6ab0d6c25515.jpg) **go-zero** — веб- и rpc-фреймворк, написанный на Go. Фреймворк поддерживает широкий функционал, включая встроенный инструмент для генерации кода из файлов .api. 

https://proglib.io/w/c0a196df",3714,3,0,goproglib
2089,2021-10-28 18:35:34+00:00,Пакет **faker** в действии: https://proglib.io/w/8a46c345,3674,0,0,goproglib
2088,2021-10-28 15:22:19+00:00,"[​](https://telegra.ph/file/8c4f552907b3126e694d0.jpg) **otp** — библиотека Go для добавления двухфакторной аутентификации с поддержкой генерации одноразоваого пароля по времени (TOTP) и событию (HOTP).

https://proglib.io/w/31aa41b6",3784,0,0,goproglib
2087,2021-10-27 19:00:08+00:00,"Будете участвовать в ежегодном опросе Go-разработчиков?

https://proglib.io/w/81b70778",3590,0,3,goproglib
2086,2021-10-27 18:02:39+00:00,"Дмитрий Колесник, специалист по автоматизированному тестированию в Ozon, рассказывает про инфраструктуру, автоматизацию тестирования и используемые для этого инструменты, а также показывает, какие распространенные ошибки есть в интеграционном тестировании в Go.

https://proglib.io/w/2af9a186",5115,0,0,goproglib
2085,2021-10-27 12:00:05+00:00,"Принципы разработки проектов на Go от [Prysmatic Labs](https://prysmaticlabs.com/) — разработчика ПО для блокчейна [Ethereum](https://ethereum.org/en/eth2/).

https://proglib.io/w/c07772af",5051,0,0,goproglib
2084,2021-10-27 09:00:01+00:00,"Слышали историю о том, как Go ускорил приложения PHP в 40 раз? Можем рассказать, только придется прогуляться. Тут недалеко, но, скорее всего, вам придется задержаться. Есть вероятность, что одной историей вы не ограничитесь и захотите еще ⤵️ 

Больше информации о мощной интеграции Go и PHP здесь: https://t.me/highloadtoday/113

Новости и материалы про IT на канале Highload:
https://t.me/highloadtoday

Узнавайте о главных новостях разработки каждый день. Подписывайтесь на Highload — издание для тех, кто пишет код",3661,0,0,goproglib
2083,2021-10-26 15:00:08+00:00,"Подборка популярных вопросов на собеседовании по основам Go.

https://proglib.io/w/e7500d05",3922,0,0,goproglib
2082,2021-10-26 11:00:06+00:00," **Rclone** __(rsync для облачного хранилища)__ — CLI-инструмент, написанный на Go и предназначенный для управления файлами в облачном хранилище. 

⭐️ 29292

[Репозиторий](https://proglib.io/w/5369dd70)
[Сайт](https://proglib.io/w/1d8f8be9)",3748,0,4,goproglib
2081,2021-10-26 07:40:27+00:00,Основы работы с Mongo-DB в Go: https://proglib.io/w/c2795338,3767,0,0,goproglib
2079,2021-10-25 19:00:05+00:00," Видеотрансляция Podlodka Podcast на тему Go. 

https://proglib.io/w/bf53fb9e",3698,0,0,goproglib
2078,2021-10-25 18:00:04+00:00,"Реализуем кастомный JSON Marshaller на Go и разбираем распространенные ошибки. 

https://proglib.io/w/76aac404",3820,0,0,goproglib
2077,2021-10-25 15:00:02+00:00,[GolangQuiz](https://t.me/golangquiz) - канал на котором публикуются интересные [задачи](https://t.me/golangquiz/348) и [вопросы](https://t.me/golangquiz/547) по Go и их разбор,3500,0,0,goproglib
2076,2021-10-24 19:31:03+00:00,"[​](https://telegra.ph/file/5b7966ae39825fa79ab38.jpg)Реализация алгоритма кэширования **Least Frequently Used (LFU) **на Go.

https://proglib.io/w/8053ac06",3959,0,0,goproglib
2075,2021-10-24 12:00:09+00:00,"Путеводитель по полезным инструментам модульного тестирования с упором на веб-сервисы.

https://proglib.io/w/c1f5e75f",3825,0,0,goproglib
2074,2021-10-24 09:00:03+00:00,"Участвуйте в онлайн-интенсиве! Начните изучать язык программирования 1С и создайте базу для торгового предприятия за 3 дня.

Интенсив подойдёт даже для новичков. Вы узнаете всё о базовых инструментах и начнёте разрабатывать собственные проекты.

Регистрируйтесь:  https://clc.to/aW1iaA.

Что вас ждёт?

 3 дня вебинаров с опытным программистом, который ответит на ваши вопросы о профессии.
 Знакомство с основами языка программирования 1С.
 Общение с участниками и ведущим интенсива в закрытом чате.
 Создание полноценного проекта, который войдёт в портфолио.
 Неограниченный доступ к материалам занятий.

 Все участники интенсива получат подарки от Skillbox и издательства МИФ.

Ждём вас 28–30 октября в 19:00 по московскому времени!",3524,0,4,goproglib
2073,2021-10-23 18:25:05+00:00,Туториал по работе с **defer** в Go для начинающих: https://proglib.io/w/e92e3813,3500,0,0,goproglib
2072,2021-10-23 12:00:06+00:00,"[​](https://telegra.ph/file/20961ed274f67e21773de.jpg)Краткие заметки об использовании инструмента sqlcomm**ent**, предназначенного для анализа производительности базы данных с помощью [Ent](https://entgo.io/) и [Google Sqlcommenter](https://google.github.io/sqlcommenter/spec/).

https://proglib.io/w/23009362",3541,0,0,goproglib
2071,2021-10-23 08:44:36+00:00," **gophernotes** — ядро Go для [Jupyter](http://jupyter.org/) notebooks и [nteract](https://nteract.io/). 

Инструмент позволяет использовать Go в интерактивном режиме в браузере, ноутбуке или десктопном приложении. 

Используйте gophernotes для создания и обмена документами, которые содержат код Go, уравнения, визуализации и пояснительный текст. 

https://proglib.io/w/06d09ee2",3793,0,0,goproglib
2070,2021-10-22 19:00:08+00:00,Простой чек-лист для проекта Go на самом старте: https://proglib.io/w/d4ba179e,3814,0,5,goproglib
2069,2021-10-22 17:54:57+00:00,"Очередной интересный материал в категории «Почему * следует изучать Go»

https://proglib.io/w/2c546f71",3742,0,0,goproglib
2068,2021-10-22 11:29:11+00:00,"Разработка CLI-приложений с помощью встроенных шаблонов Go.

https://proglib.io/w/7f5f8e58",3770,0,0,goproglib
2067,2021-10-22 05:30:18+00:00,"Привет! На связи Библиотека программиста.

Чтобы устроиться на хорошую работу и прокачать личный бренд, нужно уметь доносить мысли и рассказывать о проектах. Не у всех получается с ходу, особенно в тексте.

Неделю назад мы запустили на Степике **бесплатный курс** для всех, кто интересуется написанием статей об информационных технологиях. Уже доступны первые два модуля курса, готовим ещё пять.

 **Про что курс.** Рассказываем, как собирать материал, конструировать внятный текст, делать авторскую редактуру, иллюстрировать и распространять статьи. Всё это с большим количеством примеров, иллюстраций и тестов для самоконтроля.

️ **Цель курса:** научить программистов писать интересные и занятные тексты о собственных проектах и профессиональных интересах. Для прохождения курса опыт написания публикаций  значения не имеет.

Ссылка на курс: https://stepik.org/101672",3218,1,0,goproglib
2066,2021-10-21 19:45:44+00:00,Оптимизация размеров структуры в Go: https://proglib.io/w/24934db3,3776,0,2,goproglib
2065,2021-10-21 18:00:06+00:00,"**A (De)Tour of Go: к**огда не осилил все разделы официальной документации и решил написать своё руководство для начинающих.

https://proglib.io/w/0451a65e",3840,0,0,goproglib
2064,2021-10-21 16:43:00+00:00,Как подружить Go и эмоджи  https://proglib.io/w/e17c7d09,3662,1,5,goproglib
2061,2021-10-20 19:32:02+00:00,"#news 

Кодекс поведения обновился: https://proglib.io/w/08f55f92",3928,0,0,goproglib
2060,2021-10-20 18:43:55+00:00,"Объемное руководство по безопасному использованию Go в вебе.

https://proglib.io/w/0a34a8ea",4017,0,0,goproglib
2058,2021-10-20 09:45:37+00:00,"** captain-githook **— кроссплатформенная настраиваемая утилита Git hook, ориентированная на кодовые базы Go.

https://proglib.io/w/5f038c11",3717,0,1,goproglib
2057,2021-10-19 19:01:39+00:00,"Go-разработчику [Никите Галушко](https://nikgalushko.com/about) надоела прожорливость Goland и он решил полностью перейти на Vim. 

Полученная сборка основана на двух китах: [vim-go](https://github.com/fatih/vim-go) и [coc.nvim](https://github.com/neoclide/coc.nvim), как LSP клиент к [gopls](https://github.com/golang/tools/tree/master/gopls). Vim-go отвечает за сборку проекта, запуск тестов, форматирование кода, отладку, Go Docs. Coc.nvim + gopls отвечают за реализацию «Go to definition», автокомплит, переименование, короче за все то, что из простого редактора делает удобный в использовании инструмент.

https://proglib.io/w/e4eb3231",4115,0,17,goproglib
2056,2021-10-19 18:56:23+00:00,"[​](https://telegra.ph/file/4da34c81c8d4456935e95.jpg) **Всё, что нужно знать начинающему о Git: рассмотрим за 15 минут
**
Распределенная система контроля версий Git – популярный инструмент для координации параллельной работы и управления проектами в мире ИТ. Умение им пользоваться хотя бы на уровне основных команд необходимо даже начинающему разработчику.

https://proglib.io/sh/LdDc0FGSPp",3121,0,0,goproglib
2055,2021-10-19 17:34:40+00:00,"Разработчики [Vitess](https://vitess.io/) запилили свой генератор **Protocol Buffers **для Go. Предпосылки создания и полученные результаты читайте в статье.

https://proglib.io/w/77ae5a0c",4738,0,0,goproglib
2054,2021-10-19 14:11:30+00:00,"[​](https://telegra.ph/file/5b2a6c8b7407da3fdd0dd.mp4) **panicparse** — инструмент, который структурирует и раскрашивает стектрейс паники в Go.

https://proglib.io/w/fd99b58d",3801,0,3,goproglib
2053,2021-10-19 09:00:41+00:00,"Чтобы стать сеньором, ты должен действовать, как сеньор, думать, как он и пить тот же смузи.
 
Ты не знаешь, как он думает и что делает? Не беда. Вот инструкция:
1)  Переходишь по ссылке на страницу курса «Разработчик, или от Мидла до Сеньора» от Слёрм и Райффайзена.
2)    Замечаешь справа красивую надпись «Бесплатно» и отпускаешь мысли о хирургическом столе и почках.
3)    Листаешь вниз, поглядывая, какой это классный курс. Тут тебе и работа с технологиями, и продуктовое мышление, и про командные процессы и коммуникацию. И всё это из уст практикующих сеньоров.
4)    В самом низу ещё раз видишь дату старта (ты же заметил её в начале, да?) — 22 ноября и формат: 5 недель по 2 занятия в неделю. Понимаешь, что тут всё серьёзно. Будет полноценный курс, а не какой-то марафончик.
5)    Регистрируешься. Слёрмик обещает «Никаких рекламных звонков». Слёрмику можно верить.
6)  PROFIT. Останется не забыть узнать про смузи.

Ничего сложного, согласен? 
Тогда погнали. Пункт №1: https://slurm.club/3aM07Kz",3742,1,4,goproglib
2052,2021-10-18 16:01:30+00:00,Настраиваем WSL2 и GoLand в Windows 11: https://proglib.io/w/38cca109,3870,0,4,goproglib
2051,2021-10-18 13:02:41+00:00,"Разработчик из Ситимобил рассказывает основные моменты, на которые следует обращать внимание при работе с MySQL средствами Go: 

- Основы клиент-серверного протокола MySQL, его базовое устройство и принципы работы
- Реализация пула соединений на Go и многое другое

https://proglib.io/w/8fbe4a31",4912,0,0,goproglib
2050,2021-10-18 09:10:24+00:00,"Есть люди, которые недовольны каким-то инструментом, но продолжают им пользоваться из-за отсутствия альтернатив или других причин. 

Другая категория людей берет и переписывает под себя функции, которые не нравятся, или вовсе весь инструмент. Так на свет появился [jira-cli](https://github.com/ankitpokhrel/jira-cli).

Инструмент ещё сырой, но имеет все функции, необходимые для улучшения рабочего процесса с Jira.

[Предпосылки создания инструмента](https://medium.com/@ankitpokhrel/introducing-jira-cli-the-missing-command-line-tool-for-atlassian-jira-fe44982cc1de)",3621,0,3,goproglib
2049,2021-10-17 14:00:49+00:00,"Если вы (вдруг) используете Go для разработки под iOS / Android и используете для этого Cocoa через CGo, то не забудьте включить Cocoa multithreading. Про сюрпризы, которые могут возникнуть в противном случае, читайте [здесь](https://proglib.io/w/7ce23fc1).",3709,0,4,goproglib
2048,2021-10-17 10:01:07+00:00,"Если кому-то интересна тема реализации предметно-ориентированного проектирования в Go, на DOU вышел отличный перевод.

https://proglib.io/w/adf389e3

Если у вас есть проблемы с загрузкой сайта, воспользуйтесь [TOR браузером](https://www.torproject.org/download/).",4200,1,2,goproglib
2047,2021-10-17 06:43:53+00:00,"[​](https://telegra.ph/file/aa24ddb1149b75eb4f0d0.mp4) **Bubble Tea **— фреймворк для создания интерактивных CLI-приложений, основанный на [архитектуре Elm](https://guide.elm-lang.org/architecture/). 

⭐️ 5806

https://proglib.io/w/d4c7caf3",4013,0,1,goproglib
2046,2021-10-16 11:01:30+00:00,"Разработчики [типобезопасного клиента Go для GraphQL](https://github.com/Khan/genqlient) рассказывают о технических проблемах, с которыми они столкнулись при написании инструмента, и о том, как они их решили.

https://proglib.io/w/d0f96f87",3725,0,0,goproglib
2045,2021-10-16 08:01:45+00:00,"Кажется, данное видео бьет все рекорды в номинации «Изучение * за * секунд / минут / часов»: Go за 100 секунд.

https://proglib.io/w/41ae24ed",3744,0,3,goproglib
2044,2021-10-16 06:15:52+00:00,"[​](https://telegra.ph/file/e349619d1b69dd0c07799.jpg)#tip #tools

А вы знали про [GitLive](https://git.live/)? Это расширение для IDE, которое позволяет увидеть проблемы, над которыми сейчас работают ваши коллеги по команде, клонированные ими репозитории, имя текущей ветки каждого разработчика и многое другое.

Расширение совместимо с IntelliJ IDEA (Ultimate, Community, Educational), Android Studio, AppCode, CLion, DataGrip, DataSpell, GoLand, MPS, PhpStorm, PyCharm (Professional, Community, Educational), Rider, RubyMine и VS Code.

[Смотреть демо](https://proglib.io/w/7c51c8d3)",3068,0,0,goproglib
2041,2021-10-15 18:20:29+00:00,"Мнение Роба Пайка по поводу дженериков в новой версии языка.

https://proglib.io/w/7b619568",3430,0,5,goproglib
2038,2021-10-15 12:01:16+00:00,"Используем пакет `time` для выполнения задачи в определенное время в Go.

https://proglib.io/w/cbfe53e7",3467,0,0,goproglib
2037,2021-10-15 09:00:53+00:00,"Думаете, что стать программистом сложно? Только не с обучающим курсом от Skillbox!

Если вы никогда не занимались программированием, курс «Профессия Go-разработчик» станет отличным стартом вашей карьеры!

Под руководством опытных кураторов вы получите базовые знания программирования, поймете принципы работы с операционными системами и обменом данными, научитесь создавать и оптимизировать приложения на языке Go.

Пройдя обучение, вы получите диплом, а лучших студентов пригласят на стажировку в Ozon.

Переходите по ссылке и регистрируйтесь. Первые 3 месяца  обучения бесплатно!▶️ https://clc.to/k3AswQ.",3403,0,12,goproglib
2036,2021-10-14 19:40:12+00:00,"[​](https://telegra.ph/file/a1786b781c52f4001c1b4.jpg)#tip #goland

Если вам необходимо создать отсутствующие типы структур со всеми полями, просто поместите курсор на тип, который еще не определен, но используется.

Затем нажмите __Alt + Enter в Windows / Linux__ или __⌥ + ⏎ в macOS__ и выберите действие __Create type__.

[Источник](https://proglib.io/w/e777c98e)",3354,0,8,goproglib
2035,2021-10-14 19:02:20+00:00,"[​](https://telegra.ph/file/35c14f837bb830013db3a.mp4)Тут на Go запилили крутой инструмент нагрузочного тестирования.

https://proglib.io/w/77268f44",4865,0,6,goproglib
2034,2021-10-14 15:03:19+00:00,"Разработчиком может стать каждый — особенно если есть искренний интерес к профессии. Понять, нравится ли вам программирование, вы сможете на двухнедельном курсе Нетологии [«Старт в программировании»](https://netolo.gy/g69).

За 9 занятий вы  полностью погрузитесь в задачи программиста, обучитесь основам JavaScript, CSS, HTML и напишете код для своей первой программы — игры, которая мотивирует подходить стратегически к планированию жизни. 

Погрузитесь в мир программирования. 

Зарегистрироваться на курс: https://netolo.gy/g69",3408,0,0,goproglib
2033,2021-10-14 11:36:11+00:00,"Подборка популярных вопросов и ответов с собеседований по основам Go.

https://proglib.io/w/bde6efc9",5230,0,1,goproglib
2032,2021-10-13 19:02:30+00:00,#tip,3377,0,1,goproglib
2031,2021-10-13 18:01:39+00:00,"Краткое руководство по использованию GoReleaser и разбор некоторых подводных камней, которые могут возникнуть в ходе использования.

https://proglib.io/w/87a1baca",3433,0,0,goproglib
2030,2021-10-13 15:03:34+00:00,"Привет, Username! Приглашаем тебя на новый хакатон Цифрового Прорыва на тему ""Транспорт и логистика""!

Для тебя мы подготовили крутецкие кейсы от Росатома, Ростелекома, Транспортных инноваций Москвы, международного аэропорта Шереметьево, Accenture и др.! 

Участвовать можно онлайн из любой точки России, либо в специальных оффлайн-коворкингах (см. список доступных на сайте). 

Успей собрать команду 3-5 человек (или присоединиться к имеющимся), выбрать кейс и побороться за призовой фонд до 4.500.000 руб.  

Регистрируйся прямо сейчас: https://proglib.io/w/62c74971",3398,0,1,goproglib
2029,2021-10-13 11:54:24+00:00," **ko** — простой инструмент для создания и развёртывания приложений Go в Kubernetes.

https://proglib.io/w/284d06f9",4775,0,0,goproglib
2027,2021-10-12 19:16:43+00:00,[История](https://medium.com/zendesk-engineering/hunting-down-a-c-memory-leak-in-a-go-program-2d08b24b617d) инженеров из Zendesk о поиске утечки памяти C в программе на Go.,3397,0,0,goproglib
2026,2021-10-12 18:09:30+00:00,"Несколько идей от Three Dots Labs о том, как сделать Enum’ы в Go более безопасными.

https://proglib.io/w/0a6021c7",3428,0,0,goproglib
2025,2021-10-12 15:02:47+00:00,"Октябрь богат на дни рождения IT-компаний. Буквально пару дней назад мы поздравляли ВК и Дурова, а сегодня хотелось бы рассказать про 15-летие компании AGIMA. 

Ребята занимаются разработкой сайтов, мобильных приложений и аналитикой. Мы часто используем продукты, разработанные ими, и сами об этом не знаем: АльфаСтрахование, Пятерочка, O'STIN и др. 14 октября они будут отмечать день рождения и приглашают разработчиков, продактов и тех, кто занимается развитием цифровых продуктов, на праздник. Будет больше 1000 человек из IT-индустрии.

Гостей ждет крутая программа:
- jazz band,
- мощнейший сет от DJ Ginzburg,
- потрясающие Filatov & Karas,
- коктейль-бар,
- нетворкинг-зоны.

Вход бесплатный, но нужно [зарегистрироваться](https://a15.agima.ru/?utm_source=TG&utm_medium=prolib&utm_campaign=hb_agima) на сайте и получить приглашение.",3567,0,2,goproglib
2024,2021-10-12 11:51:17+00:00,"**Go Tooling in Action** — местами устаревший, но полезный воркшоп, посвященный инструментам, которые разработчики на Go используют в повседневной жизни.

[1: Управление исходным кодом](https://github.com/campoy/go-tooling-workshop/blob/master/1-source-code/README.md)
[2: Создание артефактов из кода](https://github.com/campoy/go-tooling-workshop/blob/master/2-building-artifacts/README.md)
[3: Динамический анализ программы](https://github.com/campoy/go-tooling-workshop/blob/master/3-dynamic-analysis/README.md)",4888,0,0,goproglib
2023,2021-10-11 19:27:42+00:00,"**Рейтинг зарплат от RealHR: сколько получали digital-специалисты во втором квартале 2021

**Зарплаты растут, по крайней мере, в Москве. Читайте очередной отчёт RealHR по диджитал-индустрии.",3402,0,2,goproglib
2022,2021-10-11 19:00:54+00:00,"[3 вещи](https://proglib.io/w/7891fce0), которые нужны Go прямо сейчас, больше, чем дженерики. Естественно, это субъективное мнение автора, которое уже [побудило много споров](https://news.ycombinator.com/item?id=28742509). Поделитесь мнением, какую фичу лично вы добавили бы языку прямо сейчас?",3705,0,9,goproglib
2020,2021-10-11 11:59:34+00:00,"**Ultimate Go Notebook **(2021)

**Авторы**: William Kennedy и Hoanh An

Книга представляет собой своего рода блокнот с полезными записями к курсу Ultimate Go от Ardan Labs, но если вы не проходили данный курс, в любом случае книга имеет огромную ценность. 

Как заявляют авторы, она охватывает более сложные темы, которых сегодня нет в других книгах. Из материалов книги вы узнаете, как писать более идиоматичный и производительный код с упором на инженерные решения.",4879,0,8,goproglib
2019,2021-10-10 19:11:26+00:00,"**Почему Options Pattern отлично подходит для обеспечения безопасности**

Запись доклада Дмитрия Котика на OWASP AppSec Days Developer Security Summit 2021, в рамках которого он демонстрирует три преимущества безопасности Options Pattern для инициализации объекта на примерах Go. Он также предлагает и объясняет небольшое, но значительное улучшение шаблона, которое еще больше повысит безопасность.

https://proglib.io/w/0d3aba8b",4001,0,0,goproglib
2018,2021-10-10 11:53:27+00:00,Пакеты [ast](https://pkg.go.dev/golang.org/x/tools/go/ast) и [astutil](https://pkg.go.dev/golang.org/x/tools/go/ast/astutil) **в **действии: https://proglib.io/w/dc5f1741,3800,0,0,goproglib
2017,2021-10-09 18:59:42+00:00,Реализация [Wappalyzer](https://github.com/AliasIO/Wappalyzer) на Go: https://proglib.io/w/a50b1fb3,3877,0,7,goproglib
2016,2021-10-09 11:23:50+00:00,"Коллекция фрагментов, иллюстрирующая общие HTTP-ответы для веб-приложений Go.

https://proglib.io/w/10c63550",4012,0,0,goproglib
2015,2021-10-09 05:22:16+00:00,"Подборка библиотек для веб-парсинга и обработки данных на Go.

https://proglib.io/w/5e6c71c3",4054,0,0,goproglib
2013,2021-10-08 13:03:18+00:00,"**Here we Go: получи оффер от Ozon в команду, которую выберешь ты.**

**Почему стоит попробовать:**
▪️ Интервью длится всего 1 час — фактически, можно получить оффер за один день в выходной (23-24 октября). 
▪️ Вы сами выбираете тимлидов, с которыми захотите пообщаться — 24 проекта на выбор. 

**Локация:** Формат работы в Ozon — гибрид или полная удаленка.

**Стек:** GO, Kubernetes, Kafka. 

**Что делать:** Проектировать, разрабатывать и внедрять новые микросервисы в продуктах, которыми пользуются миллионы людей по всей России.

Ссылка: https://your.gms.tech/v/la2EJu2R?tg=apply&s=tg",3871,0,1,goproglib
2012,2021-10-08 11:01:48+00:00,"Репозиторий, который включает общие шаблоны конкурентности в Go.

https://proglib.io/w/7a2babef",4259,0,0,goproglib
2011,2021-10-08 07:35:30+00:00,"** gosq **— **Go** **S**imple **Q**uery builder. Перед вами инструмент, который предоставляет механизм синтаксического анализа для построения SQL-запросов на основе шаблонов для Go.

Он ориентирован на простоту и предоставляет синтаксис для вставки произвольной части условного запроса.

- [Статья, в которой описаны предпосылки создания инструмента](https://proglib.io/w/a0ebd15a)
- [Репозиторий](https://github.com/sanggonlee/gosq)",4966,0,0,goproglib
2010,2021-10-07 16:32:19+00:00,"Автор статьи выделяет любимые функции Scala и объясняет, почему Go выигрывает.

https://proglib.io/w/2cdc5612",3703,0,4,goproglib
2009,2021-10-07 07:21:33+00:00,"[​](https://telegra.ph/file/03503dec782c4fe307fa4.jpg)#tip

Чтение из закрытого канала вернет значения, которые были отправлены перед закрытием. После того, как все значения будут прочитаны, дальнейшие чтения не будут блокироваться и вернут нулевое значение типа канала. Чтобы узнать, закрыт ли канал, можно использовать синтаксис с несколькими значениями.",3744,0,4,goproglib
2008,2021-10-06 18:01:21+00:00," **Go-app** — пакет для создания [прогрессивных веб-приложений](https://ru.m.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D0%B3%D1%80%D0%B5%D1%81%D1%81%D0%B8%D0%B2%D0%BD%D0%BE%D0%B5_%D0%B2%D0%B5%D0%B1-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5) с помощью Go и Wasm.

https://proglib.io/w/8d4a997c",3866,0,0,goproglib
2006,2021-10-06 14:18:14+00:00,"Mat Ryer, технический директор в Grafana, рассказывает, что с годами подход к написанию HTTP-сервисов с помощью Go сильно изменился. Вот его текущий стиль . 

https://proglib.io/w/ba8d3f1a",5279,0,2,goproglib
2005,2021-10-05 19:01:38+00:00," **Minify** — пакет минификаторов (удаляют ненужные символы), написанный на Go. 

Пакет предоставляет минификаторы для HTML5, CSS3, JS, JSON, SVG и XML, а также интерфейс для реализации любого другого минификатора.

https://proglib.io/w/dab1b054",3812,0,0,goproglib
2004,2021-10-05 17:11:14+00:00,"[​](https://r3---sn-4g5ednsy.googlevideo.com/videoplayback?expire=1633475304&ei=iIZcYcW4Fs-31gKjmp24CA&ip=171.234.38.128&id=o-ABv66deQefvZsvn0lfFbJNfZfEfG1O8PYFDeNLjRpEEI&itag=136&aitags=133%2C134%2C135%2C136%2C160%2C242%2C243%2C244%2C247%2C278&source=youtube&requiressl=yes&vprv=1&mime=video%2Fmp4&ns=doxFXa33B9wTPoJruoDPjYYG&gir=yes&clen=240229&otfp=1&dur=14.999&lmt=1621784381536649&keepalive=yes&fexp=24001373,24007246&c=WEB&txp=6216224&n=n-fOAeqXlCxbY7Jq&sparams=expire%2Cei%2Cip%2Cid%2Caitags%2Csource%2Crequiressl%2Cvprv%2Cmime%2Cns%2Cgir%2Cclen%2Cotfp%2Cdur%2Clmt&sig=AOq0QJ8wRAIgI-4nCRJ1VuGXS7rrcd3HI4t3yza9-E-ONI96o_3Dyd0CIBh5VySmhSFx1ovXHrkTFMT1itIXjiCTuFFNaPHu3Lbl&rm=sn-8pxuuxa-i5ols7s,sn-8pxuuxa-i5o6d7z&req_id=f63ffecb9c5ba3ee&ipbypass=yes&redirect_counter=3&cm2rm=sn-i3bdd7s&cms_redirect=yes&mh=3m&mip=194.87.92.68&mm=34&mn=sn-4g5ednsy&ms=ltu&mt=1633450336&mv=u&mvi=3&pl=22&lsparams=ipbypass,mh,mip,mm,mn,ms,mv,mvi,pl&lsig=AG3C_xAwRgIhAPdDLJVKBM529hBEEJUrn_BpV-1BnWrDLNFWp4CMag4lAiEA8-h-CN2Fl6a6ss9_GMhWqWCHmJa3Pan_uI9idGS9nbc%3D)#tip 

Если вам нужно добавить ключи к существующим типам структур с помощью Goland, теперь вы можете сделать это быстрее, используя специальную функцию __Add key to tags feature__.

Alt + Enter в Windows / Linux или ⌥ + ⏎ в macOS .",3830,0,0,goproglib
2003,2021-10-05 16:58:04+00:00,"Обновили серию статей о практическом предметно-ориентированном дизайне (Domain-Driven Design, DDD) в Go новыми материалами  https://t.me/goproglib/1949",3972,0,0,goproglib
2002,2021-10-04 19:30:42+00:00,"Выпущена 3-я версия [Centrifugo](https://github.com/centrifugal/centrifugo) — сервера сообщений в реальном времени. 

Сервер держит постоянные соединения от пользователей приложения и предоставляет API для моментальной рассылки какого-либо уведомления активным пользователям, подписанным на канал уведомления. 

Можно использовать для создания чатов, ""живых"" комментариев, multiplayer игр, стримить данные и метрики (например, быстро меняющиеся курсы валют).

https://proglib.io/w/0ce976f7",4250,0,0,goproglib
2001,2021-10-04 18:02:12+00:00,"Что будет, если применить концепцию [Дао](https://ru.wikipedia.org/wiki/%D0%94%D0%B0%D0%BE) к разработке на Go? 

https://proglib.io/w/eaeb9ceb",3610,0,0,goproglib
1999,2021-10-04 07:03:58+00:00,"Перевод статьи о сборке собственного RPM-пакета, содержащего простую программу на Go.

https://proglib.io/w/0469029c",3948,0,0,goproglib
1998,2021-10-03 18:30:17+00:00,"Руководство по использованию пакета `text` для управления переводами в приложении Go.

https://proglib.io/w/549e4e64",3875,0,0,goproglib
1997,2021-10-03 16:38:24+00:00,"Несколько полезных советов по обработке ошибок в Go.

https://proglib.io/w/068162ba",3904,0,0,goproglib
1996,2021-10-03 09:14:06+00:00,"[​](https://telegra.ph/file/902a0c591eb39b51ef833.jpg) **echo** — высокопроизводительный минималистичный веб-фреймворк Go.

⭐️ 20798

https://proglib.io/w/067e35be",3873,0,6,goproglib
1995,2021-10-02 17:30:19+00:00,"**Выполнение шелл-кода с помощью Go**

Из трансляции от Black Hills Information Security (BHIS) вы узнаете об использовании Go для создания вредоносных программ со встроенным шелл-кодом. Напомним, что информация приводится исключительно в учебных целях. 

https://proglib.io/w/4836eae3",5460,0,0,goproglib
1994,2021-10-02 15:14:28+00:00,"[​](https://video.twimg.com/tweet_video/FAiPcMYWEAMQlrz.mp4)#news 

Доступен GoLand 2021.3 EAP #2: https://proglib.io/w/2cf242f5",3559,0,0,goproglib
1993,2021-10-02 14:02:21+00:00,TinyGo в действии: https://proglib.io/w/74867d32,3580,0,0,goproglib
1992,2021-10-01 15:02:05+00:00,"То чувство, когда сначала необходимо представить не сам инструмент, а предшествующее исследование. 

На международной конференции Computer Aided Verification исследователи из Швейцарии и Нидерландов [представили](https://proglib.io/w/3aa50f47) инструмент Gobra — автоматизированный модульный верификатор для программ Go, основанный на инфраструктуре верификации Viper. Исследование однозначно стоит прочтения.

Gobra проверяет безопасность памяти, безопасность при сбоях, свободу от гонки данных и спецификации, предоставленные пользователем. В качестве входных данных он принимает программу Go, аннотированную такими утверждениями, как предварительные и постусловия, а также инварианты цикла. 

Верификация осуществляется путем кодирования аннотированных программ на промежуточном языке верификации Viper, а затем применив существующий верификатор на основе задачи выполнимости формул в теориях (англ. satisfiability modulo theories, SMT). В случае сбоя проверки Gobra сообщает на уровне программы Go, какие утверждения он не может проверить.

https://proglib.io/w/e15bfdf3",3868,0,1,goproglib
1991,2021-10-01 11:49:12+00:00,"#cheatsheet

**Шпаргалка по Data Science в Go**

Автор видит в Go будущее Data Science. Ну что ж, заявление может и громкое, но шпаргалка вышла годная.",4091,0,1,goproglib
1990,2021-10-01 09:25:09+00:00,"А вы знали, что Go на текущий момент [активно используется злоумышленниками для написания малвари](https://proglib.io/w/2ee489c5)? 

Это все к чему? 

Как вы относитест к тому, чтобы разбавлять контент канала материалами, связанными с информационной безопасностью? Начнем с видеоруководства от 
Kaspersky Tech по реверсу малвари на Go, которая использовалась в атаке SolarWinds:

- [Часть 1](https://youtu.be/_cL-OwU9pFQ)
- [Часть 2](https://youtu.be/YRqTrq11ebg)",3943,0,20,goproglib
1989,2021-09-30 19:36:30+00:00,"Разбор архитектуры реального проекта на Go от Максима Жашкевича (не реклама).

https://proglib.io/w/9cd58901",4553,0,9,goproglib
1988,2021-09-30 17:16:15+00:00,"**Hands-on Go Programming: Learn Google’s Golang Programming, Data Structures, Error Handling and Concurrency** (2021)

**Авторы**: Sachchidanand Singh, Prithvipal Singh 

Книга представляет собой простое для понимания руководство, которое поможет познакомиться с основами и расширенными концепциями Go.

Материалы книги начинаются с основных понятий, касающихся типов данных, констант, переменных и операторов. Продвигаясь вперед, авторы исследуют и показывают на примерах и иллюстрациях использование функций, потоков управления, массивов, фрагментов и структур. Затем вы узнаете о методах и более сложных аспектах вроде интерфейсов, указателей, конкурентности и обработки ошибок.",4475,0,0,goproglib
1987,2021-09-30 14:00:19+00:00,"#вакансия #go #golang #удаленка #fulltime
Ищу **Go** developer (удаленный формат работы)
**Компания**: KALABI
**Локация**: Москва 
**Формат работы**: fulltime, удаленка, гибкий график
**З/П**: 150-250k net. 
 **Что потребуется от Вас:
**️ знание языка Go и сопутствующей экосистемы;
️ опыт работы с очередями или брокерами сообщений и СУБД;
️  навык использования Git и владение Linux-системами;
️ опыт проектирования и разработки приложений с нуля;
️ понимание общих концепций программирования (шаблоны проектирования, ООП, модульность и прочее). 
**Мы предлагаем**:
крутые проекты, возможность
профессионального и карьерного роста в быстро развивающейся и коммерчески успешной компании;
полный рабочий день с гибким графиком, можно работать удаленно;
 оформление по ТК, ДМС со стоматологией (членов семьи можно оформить с большой скидкой);
обучение используемым технологиям, оплачиваемые курсы и возможность участвовать в конференциях;
сложные и необычные задачи (некоторые из задач решаются всего в нескольких компаниях в мире). 
telegram:@faina_kleinman",3595,0,0,goproglib
1986,2021-09-30 06:43:54+00:00,"Руководство по работе с [prest](https://proglib.io/w/bf24dfcc) (PostgreSQL REST) — инструментом для быстрого и простого доступа к содержимому базы данных Postgres через REST.

https://proglib.io/w/8f2347af",3926,0,4,goproglib
1982,2021-09-29 18:45:50+00:00,"#funny

Как вам такие идеи для подарка гоферу?",3673,0,6,goproglib
1981,2021-09-29 12:49:14+00:00," **resty** — простой HTTP & REST клиент для Go.

⭐️ 4946

https://proglib.io/w/c5feb428",3767,0,2,goproglib
1979,2021-09-28 18:01:10+00:00,"Автор статьи утверждает, что те, кто говорят «Rust — это то, чем должен был быть Go», в корне не понимают оба языка, решаемые этими языками проблемы и парадигмы разработки, к которым они стремятся.

https://proglib.io/w/0bd6a39f",3761,0,5,goproglib
1978,2021-09-28 15:02:22+00:00,"Присоединяйся к [онлайн-лекциям](https://youtu.be/DrBlI9RQAKU) от наших Golang-экспертов:

**Golang. Хватить говорить — пора кодить.** 
__Тарас Серегин, Golang Lead
__Самое время изучить Golang! Узнай о преимуществах этого языка программирования по сравнению с другими языками Backend’a и какое будущее у этого направления.

**JWT-авторизация, особенности и best practices. **__Александр Бричак, Golang Developer
__Эксперт расскажет о типичных задачах, которые приходится решать в проектах, и какие трудности могут возникать при использовании JWT. Разберем подходы к решению таких задач, как Logout, «Only one active device» и автоматический логаут, а также обсудим вопросы безопасности.

**Все онлайн-лекции проходят в рамках NIX Hiring Month. 
**А это значит, что у тебя будет возможность познакомиться с техническими экспертами и пройти экспресс-собеседование по интересному тебе направлению в IT!

Прошедшие лекции ты можешь посмотреть в записи на нашем канале. 
Узнать больше о мероприятии и пройти регистрацию ты можешь [тут](https://clc.to/niRa1Q) ⬅️",3765,0,0,goproglib
1977,2021-09-28 11:28:59+00:00,Интеграционные тесты Go + MySQL**: **https://proglib.io/w/ed5a0c2a,3772,0,0,goproglib
1976,2021-09-28 06:00:54+00:00,"Статья Ильи Зобенко из Mail.ru Group о безопасной интеграции с помощью паттерна **Circuit Breaker** в Go.

https://proglib.io/w/7b109bce",5075,0,0,goproglib
1975,2021-09-27 18:34:23+00:00,Вкратце о Concurrency & Parallelism в Go: https://proglib.io/w/88052fee,4013,0,0,goproglib
1974,2021-09-27 17:35:40+00:00,"#tip 

Напоминалочка от Daniel Martí. Подробности [здесь](https://proglib.io/w/e9ebb19d).",3749,0,2,goproglib
1973,2021-09-27 11:24:36+00:00," **gop** (GoPlus, Go+) — язык со статической типизацией, который полностью совместим с Go и разработан для STEM (Science, Technology, Engineering, Mathematics) и data science.

[Репозиторий](https://proglib.io/w/31a531c1)
[Сайт](https://proglib.io/w/b3ad7152)",4260,0,3,goproglib
1972,2021-09-26 19:03:12+00:00,"Учиться чему-либо бывает непросто: многие откладывают обучение, не могут выделить на него время, теряются в количестве информации или, наоборот, не могут найти актуальные источники. 

Команда «Библиотеки программиста» хотела бы исследовать вопрос для дальнейшего развития проекта и посему просим вас выделить пару минут своего времени на гугл форму.

https://forms.gle/qVJEULRbbHTJTzYr6",3314,0,0,goproglib
1971,2021-09-26 15:01:19+00:00,"Аналог [play.golang.org](https://play.golang.org/), который полностью работает в браузере посредством компиляции [goscript](https://github.com/oxfeeefeee/goscript) в WASM. 

[Попробовать](https://go-playground-wasm.vercel.app/)
[Посмотреть](https://github.com/zackradisic/go-playground-wasm/) [исходные](https://github.com/zackradisic/go-playground-wasm/) [коды](https://github.com/zackradisic/go-playground-wasm/)",3676,0,0,goproglib
1970,2021-09-26 11:01:05+00:00," **sftpgo** — полнофункциональный и настраиваемый SFTP-сервер с дополнительной поддержкой FTP/S и WebDAV. 

Инструмент поддерживает локальную файловую систему, зашифрованную локальную файловую систему, S3 (совместимое) объектное хранилище, Google Cloud Storage, Azure Blob Storage и SFTP, а полный функционал не влезет в ограничения по длине поста. 

⭐️ 2962

https://proglib.io/w/9ddbec38",3684,0,1,goproglib
1969,2021-09-26 08:12:28+00:00,"Пишем простое приложение для демонстрации использования `Handle`, `Handler`, `HandleFunc` и `HandlerFunc`.

https://proglib.io/w/d23b7a0f",4823,0,0,goproglib
1968,2021-09-25 18:27:11+00:00,https://github.com/golang/go/commit/6e81f78c0f1653ea140e6c8d008700ddad1fa0a5,3521,0,4,goproglib
1967,2021-09-25 14:00:43+00:00," **GoSublime** — IDE-подобный плагин для [Sublime Text 3](http://www.sublimetext.com/), обеспечивающий автозавершение кода, интеграцию с большинством инструментов разработки и многое другое.

⭐️ 3414

https://proglib.io/w/59d0e905",3615,0,0,goproglib
1966,2021-09-25 11:01:13+00:00,"Интересный материал о применении современных шаблонов конкурентности Go к конвейерам данных.

https://proglib.io/w/3fabad70",3826,0,0,goproglib
1964,2021-09-25 08:00:16+00:00,"28 сентября в 19:00 на youtube-канале Podlodka пройдет митап для бэкенд-разработчиков PHP & GO «Как выжить при быстром росте». Ребята из быстрорастущих стартапов России и Европы Qonversion, Bolt (главный конкурент Uber в Европе), Ситимобил и Vivid Money а также Google поделятся, с какими сложностями они столкнулись при экстремальном и неожиданном росте до сотен миллионов пользователей, и как они с этим справились — технически и организационно. [Регистрируйтесь](https://lu.ma/rapid-growth), чтобы получить ссылку на трансляцию.",3663,0,0,goproglib
1963,2021-09-24 19:30:21+00:00," **go-quartz** — простой планировщик на Go.

⭐ 334

https://proglib.io/w/e8cb9a62",3698,0,0,goproglib
1962,2021-09-24 18:27:56+00:00,"[​](https://media.proglib.io/posts/2021/09/21/3bb7899606e12ec5e245e7da2f34c10e.jpg) **ТОП-10 книг об ИТ не только для айтишников**

Подборка литературы для желающих познакомиться с миром технологий. Эти книги подойдут не только практикующим программистам, но и тем, кто интересуется самой динамично развивающейся отраслью.

https://proglib.io/sh/VhXqOxKuNC",3571,0,0,goproglib
1961,2021-09-24 15:02:15+00:00,"**«Лаборатория Касперского» ищет крутых разработчиков **[**Golang**](https://kas.pr/wcc3) **в команду.
**
Мы ждем целеустремленных специалистов с глубоким техническим бекграундом. Если вы:
- понимаете специфику высоконагруженных, многопоточных, распределенных систем;
- мастерски владеете Rust, Go, C++;
- разбираетесь в архитектуре ядра Linux, а также CPU и DRAM,
то смело подавайте заявку на открытые вакансии: 

**1. Golang Developer (SIEM KUMA)** — разработка и развитие компонентов системы на языке Go.
**2. Go Developer (Kaspersky Security Centre) **— адаптация open-source решений для нужд платформы, проведение качественного ревью кода, написание интеграционных и функциональных автотестов на C#.
**3. Developer Go **— разработка распределенных систем хранения данных и бизнес-логики приложений, а также проведение ревью кода, развертывание и поддержка системы.

Переходите по [ссылке](https://kas.pr/wcc3), чтобы ознакомиться с подробной информацией о вакансиях и присоединиться к команде лучших экспертов.",3845,0,2,goproglib
1960,2021-09-24 11:51:26+00:00,"Mario Carrion, архитектор программного обеспечения и ведущий инженер, делится бесценным опытом разработки на Go в своих видеоуроках:

- [Шаблоны конкурентности](https://m.youtube.com/playlist?list=PL7yAAGMOat_Fhj_px_DzNzTsXs-mRwv1t)
- [Архитектура ПО в Go](https://m.youtube.com/playlist?list=PL7yAAGMOat_GCd12Lrv_evJ3Zhv1dl8B-)
- [Изучение Go](https://m.youtube.com/playlist?list=PL7yAAGMOat_F7bOImcjx4ZnCtfyNEqzCy)
- [Тестирование](https://m.youtube.com/playlist?list=PL7yAAGMOat_HSeW4zF0uRL9EaHadE4ZZq)
- [Микросервисы](https://m.youtube.com/playlist?list=PL7yAAGMOat_Fn8sAXIk0WyBfK_sT1pohu)
- [Инструменты и пакеты](https://m.youtube.com/playlist?list=PL7yAAGMOat_HEEOvH99agDs_5g51A0Ls3)",6147,0,10,goproglib
1959,2021-09-23 18:54:26+00:00,"Видеозаписи докладов с ивента **GoDevNet **на тему **Tiny Go Technology & Hardware**.

https://proglib.io/w/0e1d871b",3780,0,0,goproglib
1958,2021-09-23 14:01:20+00:00,"**Принудительное закрытие TCP-соединения в Go**

В статье разобраны два способа закрытия TCP-сессий: традиционное закрытие по умолчанию и принудительное закрытие с использованием метода `SetLinger()`.

https://proglib.io/w/3863ac9d",5044,0,0,goproglib
1957,2021-09-23 12:01:34+00:00,"[​](https://telegra.ph/file/91be33bceb2ae499973b0.jpg)`go get` в Go 1.17.1 — всё. Подробнее о причинах таких изменений и работе с новыми командами читайте в статье.

https://proglib.io/w/0e695cbb",3973,0,0,goproglib
1956,2021-09-23 09:00:36+00:00,"Ozon приглашает Goразработчиков уровня middle+ на “Here we Go”. Приходи и получи привлекательный оффер в команду, которую выберешь ты!

Что будет?
 Познакомишься с тимлидами и задашь вопросы
 Сам выберешь команду и пройдешь собеседование
 Получишь оффер от Ozon в тот же день

Присоединяйся к ведущей команде Go-разработчиков — оставляй заявку до 4 октября на сайте https://bit.ly/3FZ30pv",3861,0,0,goproglib
1955,2021-09-22 18:41:05+00:00,"10 характерных особенностей, которые, по мнению автора, отличают Go от других языков.

https://proglib.io/w/4236297d",3860,0,4,goproglib
1954,2021-09-22 09:01:16+00:00,"#news

Выпущена новая версия **tinygo**: добавлена поддержка Go 1.17, исправлено множество ошибок компилятора и добавлена поддержка нескольких новых плат.

https://proglib.io/w/c51cf50a",3717,0,0,goproglib
1953,2021-09-22 06:08:14+00:00," **OpenTelemetry-Go **— реализация OpenTelemetry на Go. OpenTelemetry предоставляет набор API, SDK и инструментов для создания и управления данными телеметрии (трассировка, метрика и журналы).

⭐️ 1753

https://proglib.io/w/48133c0d",3719,0,10,goproglib
1952,2021-09-21 19:18:08+00:00,"#tip

Используйте `os.ExpandEnv` для раскрытия переменные среды в строке.",3751,0,3,goproglib
1951,2021-09-21 17:59:43+00:00,"[​](https://telegra.ph/file/42e59432f7a540508ba3a.jpg)Валерий Поздяев, Go-разработчик из команды Billing API SDK в компании Netcracker, рассказывает о том, как сделать конфигурационные файлы версионируемыми с инструментами Kubernetes.

https://proglib.io/w/e1700410",3812,0,0,goproglib
1950,2021-09-21 15:02:10+00:00,"«Лаборатория Касперского» открывает набор на [стажировку SafeBoard](https://safeboard.kaspersky.ru/?utm_source=seed&utm_medium=telegram&utm_campaign=safeboard&utm_term=goproglib). Это отличная возможность для студентов любых курсов прокачать скиллы и начать карьеру в IT еще до окончания вуза.

Коротко о главном:

**Стажировка проходит** в нашем московском офисе и длится год.

Стажировка оплачивается
А еще стажерам ежемесячно компенсируют расходы на питание, предоставляют бесплатный unlim-доступ к спортзалу и ко всем открытым мероприятиям.

**Удобно совмещать с учебой
**Гибкий график: от 20 часов в неделю. Можно и больше, если есть желание и возможность.

**Набор открыт по направлениям:
**
- Анализ вредоносного ПО;
- Разработка (C++); 
- Разработка (C#); 
- Системное администрирование; 
- Системный анализ; 
- Тестирование (C#, ручное); 
- DevOps; 
- Технические тренинги (TechEdu).

**По итогам стажировки лучшие получат приглашение на работу!**

Узнать больше о стажировке и подать заявку на участие можно по [ссылке](https://safeboard.kaspersky.ru/?utm_source=seed&utm_medium=telegram&utm_campaign=safeboard&utm_term=goproglib)",3822,1,0,goproglib
1949,2021-09-21 12:56:05+00:00,"Автор серии статей потратил годы на понимание и практическое применение подхода Domain-Driven Design (DDD) в Go, а теперь рассказывает нам:

- [Value Object](https://levelup.gitconnected.com/practical-ddd-in-golang-value-object-4fc97bcad70)
- [Entity](https://levelup.gitconnected.com/practical-ddd-in-golang-entity-40d32bdad2a3)
- [Domain Service](https://levelup.gitconnected.com/practical-ddd-in-golang-domain-service-4418a1650274)
- [Domain Event](https://levelup.gitconnected.com/practical-ddd-in-golang-domain-event-de02ad492989)
- [Module](https://levelup.gitconnected.com/practical-ddd-in-golang-module-51edf4c319ec)
- [Aggregate](https://levelup.gitconnected.com/practical-ddd-in-golang-aggregate-de13f561e629)
- [Factory](https://levelup.gitconnected.com/practical-ddd-in-golang-factory-5ba135df6362)
- [Repository](https://levelup.gitconnected.com/practical-ddd-in-golang-repository-d308c9d79ba7)",6068,1,0,goproglib
1948,2021-09-20 18:46:08+00:00,"Live code на Go от Агентства цифровых технологий.

https://proglib.io/w/31f85507",3971,0,0,goproglib
1947,2021-09-20 14:55:42+00:00," **encore** — платформа, предназначенная для упрощения облачной разработки на Go. 

https://proglib.io/w/23bb8b62",3999,0,0,goproglib
1946,2021-09-20 11:38:04+00:00,"Практические уроки по Go от Maximilien Andile из Франции, которые выглядят как достойная альтернатива «A Tour of Go». Автор позиционирует себя как самоучка, пишет код с 12 лет. Больше и добавить нечего.

https://proglib.io/w/e6a9f54a",5174,0,4,goproglib
1945,2021-09-19 15:01:17+00:00,"**Разработчик!** Любишь ли ты ловить девопса, чтобы он нашел, почему микросервис не заводится? А что, если ты сможешь сам тестировать и выкатывать свой микросервис в продакшен?

**1 октября начинается бесплатная Вечерняя Школа Kubernetes для разработчиков.

**Будет полноценная теория курса «Kubernetes для разработчиков» и практические задания в облаке MCS. Знания, полученные в Вечерней Школе, помогут разработчикам говорить на одном языке с девопсами и самостоятельно работать в кластере. Меньше созвонов и отладки, больше интересной работы.

Подробности и регистрация: https://slurm.club/3k7cXIt",3933,0,0,goproglib
1944,2021-09-19 14:00:25+00:00,"[​](https://telegra.ph/file/884469f940789f371cdd3.jpg)Простое объяснение того, как все компоненты **шаблона Concurrency Worker Pool** работают вместе для одновременной обработки пакета заданий.

https://proglib.io/w/c8301461",3971,0,0,goproglib
1943,2021-09-19 09:01:21+00:00,"#tip

Подстановка строк с помощью шаблонов в Go без использования сторонних библиотек.

[Источник](https://proglib.io/w/8c92c72a)",3539,0,0,goproglib
1942,2021-09-19 06:01:15+00:00,"Простое практическое руководство для новичков, которые не знают о веб-разработке и хотят научиться писать веб-приложения на Go. Материал не самый свежий, но отлично подходит для старта в вебе без использования фреймворков.

[Читать](https://proglib.io/w/5fb61b27)
[Смотреть](https://proglib.io/w/7c12216b)",3655,0,0,goproglib
1941,2021-09-18 14:30:08+00:00,"Запись вебинара, на котором освещались вопросы использования функции отладчика, рефакторинга и редактирования в GoLand.

https://proglib.io/w/f30e37a9",4698,0,0,goproglib
1940,2021-09-18 11:22:53+00:00,"[​](https://telegra.ph/file/d9a32f077f1b173a916a3.jpg) **kompose **— инструмент для перехода от локальной разработки Docker к управлению приложением с помощью Kubernetes. Инструмент преобразует `docker-compose.yaml` в манифест ресурсов Kubernetes

https://proglib.io/w/889e1029",3798,0,0,goproglib
1939,2021-09-18 07:49:08+00:00,"**Go'ing Insane** — серия статей, в которой автор убеждает, что для некоторых людей работа с Go является постоянной борьбой с глупыми ограничениями.

Некоторые недостатки Go будут устранены в будущем, но автор сосредоточился на том, каково использовать язык сегодня.

К слову, автор серии является разработчиком  [lazygit](https://github.com/jesseduffield/lazygit) и [lazydocker](https://github.com/jesseduffield/lazydocker).

- [Бесконечная обработка ошибок](https://jesseduffield.com/Gos-Shortcomings-1/) + [бонус](https://jesseduffield.com/Questionable-Questionmarks/) 
- [Частичная](https://jesseduffield.com/Gos-Shortcomings-2/) [конфиденциальность](https://jesseduffield.com/Gos-Shortcomings-2/)
- [Несовершенные интерфейсы](https://jesseduffield.com/Gos-Shortcomings-3/)",3768,0,0,goproglib
1938,2021-09-17 18:00:55+00:00,"**Простое объяснение указателей в Go**: что они собой представляют, зачем нужны и на что обращать внимание при их использовании.

https://proglib.io/w/e00b1118",3870,0,0,goproglib
1937,2021-09-17 16:45:34+00:00,"[​](https://telegra.ph/file/c79f8a8244fc14e45d04e.jpg) **5 лучших инструментов управления проектами, о которых вы могли не знать**

В старые времена для собрания по планированию спринта требовалась только доска, маркер и стикеры. В наши дни появились цифровые инструменты, которые делают планирование более эффективным, а спринт – более успешным.

https://proglib.io/sh/lvB3EpG7hz",2987,0,0,goproglib
1936,2021-09-17 11:47:11+00:00,"Серия статей о пути к мастерству в тестировании с примерами на Go и немного на Java:

- [Часть 1](https://medium.com/geekculture/the-way-to-testing-mastery-32aee760804b)
- [Часть 2](https://medium.com/geekculture/the-way-to-testing-mastery-part-2-reloaded-b6dc1360ba89)
- [Часть 3](https://medium.com/geekculture/the-way-to-testing-mastery-part-3-revolutions-fe90af7ab98d)",4996,0,0,goproglib
1935,2021-09-16 18:35:35+00:00,"**Gui with Gio**

Руководство по разработке GUI-приложений с помощью Gio.

https://proglib.io/w/9c462e86",3723,0,89,goproglib
1934,2021-09-16 15:03:23+00:00,"Привет, Username! Приглашаем тебя на новый LifeTech-хакатон Цифрового Прорыва!

Для тебя мы подготовили крутецкие кейсы от Росатома, ДОМ.РФ, Департамента информационных технологий города Москвы, Транспортных инноваций Москвы! 

Участвовать можно онлайн из любой точки России, либо в специальных оффлайн-коворкингах (см. список доступных на сайте). 

Успей собрать команду 3-5 человек (или присоединиться к имеющимся), выбрать кейс и побороться за призовой фонд до 4.500.000 руб.  

Регистрируйся прямо сейчас: https://proglib.io/w/fd7b71a8",3499,0,0,goproglib
1933,2021-09-16 14:02:10+00:00,Объяснение некоторых концепций ООП в Go: [инкапсуляция](https://sagarsonwane230797.medium.com/understanding-encapsulation-in-go-ac575813c3ad) & [полиморфизм](https://sagarsonwane230797.medium.com/understanding-polymorphism-in-go-d704944e9816).,4899,0,0,goproglib
1932,2021-09-16 12:01:17+00:00,"Ещё один поток мыслей о том, почему Go захватывает индустрию программного обеспечения.

https://proglib.io/w/308ae971",3540,0,7,goproglib
1931,2021-09-16 05:52:39+00:00,"**Brooks, Wirth и Go**

Fredrik Holmqvist, инженер-программист из Швеции, описывает краткую историю языков программирования и хвалит Golang.

https://proglib.io/w/56234672",3201,0,0,goproglib
1930,2021-09-15 19:29:47+00:00,"C# -> Python -> Go -> счастье

https://proglib.io/w/40133371",3714,0,0,goproglib
1929,2021-09-15 18:04:16+00:00," **gron** — утилита, которая облегчает работу с JSON из командной строки.

Данные в формате JSON легко загружать и сохранять в своих программах, а вот через терминал работать с сериализованными объектами далеко не так просто. Автор gron решил исправить это, сделав так, чтобы по файлам в JSON можно было искать с помощью `grep`, сравнивать их через `diff` и так далее.

⭐ 9946

[Репозиторий](https://proglib.io/w/a4536c06)
[Статья на](https://proglib.io/w/753bb876) [«Хакере»](https://xakep.ru/advert/)",3658,0,0,goproglib
1928,2021-09-15 15:02:55+00:00,"Думаете, что стать программистом сложно? Только не с обучающим курсом от Skillbox!

Если вы никогда не занимались программированием, курс «Профессия Go-разработчик» станет отличным стартом вашей карьеры!

Под руководством опытных кураторов вы получите базовые знания программирования, поймете принципы работы с операционными системами и обменом данными, научитесь создавать и оптимизировать приложения на языке Go.

Пройдя обучение, вы получите диплом, а лучших студентов пригласят на стажировку в Ozon.

Переходите по ссылке и регистрируйтесь. Первые 3 месяца  обучения бесплатно!▶️ https://clc.to/s9nrMA.",3581,0,3,goproglib
1927,2021-09-15 11:28:58+00:00,"Пример реализации микросервиса на Go + REST + gRPC в соответствии с принципами паттерна BFF (Back-end for Front-end).

https://proglib.io/w/9848c4c5",4342,0,0,goproglib
1926,2021-09-14 19:13:15+00:00,"Статья, которая расскажет о различиях между стеком и кучей в программе Go, значении статистики `allocs/op` и некоторых способах исследования использования памяти.

https://proglib.io/w/9543209f",4263,0,0,goproglib
1924,2021-09-14 18:05:18+00:00,"Много полезной инфографики по Go, которая может вас удивить. 

https://proglib.io/w/23df93bd",3831,0,3,goproglib
1923,2021-09-14 15:08:32+00:00,"Самое время начать карьеру в IT-сфере! Участвуйте в бесплатном интенсиве с 16 по 18 сентября в 19:00 по московскому времени. Обучитесь новой профессии — 1С-разработчик. 

Регистрируйтесь:  https://clc.to/A7pl8w.

‍ Познакомитесь с платформой 1С и её основными объектами. Создадите базу для торгового предприятия и на её примере поймёте, что 1С — это легко.

 К концу интенсива подготовите проект, который станет первым кейсом в вашем портфолио разработчика.

 Каждый участник интенсива, который выполнит домашнюю работу, получит сертификат на 5 000 рублей на оплату любого курса Skillbox. А ещё электронную книгу «Век живи — век учись» издательства МИФ.",3496,0,5,goproglib
1922,2021-09-14 11:23:51+00:00,"**Кодогенерация в Go на примере маршалинга и анмаршалинга интерфейсных типов данных**

В статье представлен пример сохранения в JSON списка интерфейсов и нескольких типов, удовлетворяющих этому интерфейсу, и последующего восстановления из JSON-а этого списка.

https://proglib.io/w/7f245b4f",4968,0,0,goproglib
1921,2021-09-13 18:23:06+00:00," Тот случай, когда сложно выделить конкретное видео или плейлист. Ловите годный канал с видеоуроками для изучения Go.

https://proglib.io/w/5e71d3a5",3779,0,0,goproglib
1920,2021-09-13 15:56:03+00:00,"[​](https://telegra.ph/file/9c0706d718d0f73ce0bec.jpg) **Поздравляем с Днём программиста!**

В 256-й день года профессиональный праздник отмечают люди, без которых любой компьютер остался бы грудой мертвого железа.

Сфера ИТ динамично развивается, поэтому программистам нужно не только очень много знать, но и постоянно учиться.

Коллектив издания поздравляет читателей с праздником! В этот день мы хотим пожелать вам адекватных заказчиков и успехов в освоении постоянно меняющейся профессии. Пусть ваш код всегда работает как задумано, а «Библиотека программиста» постарается вам в этом помочь, публикуя интересные статьи.

**Успехов в работе и оставайтесь с нами!**",3206,0,2,goproglib
1919,2021-09-13 06:01:45+00:00,"Простое и понятное объяснение основ работы DNS + пример простого DNS-сервера на Go.

https://proglib.io/w/4a9cf212",5354,0,0,goproglib
1918,2021-09-12 19:11:34+00:00,"Практическое руководство по профилированию, трассировке и другим методам observability в Go. Кстати, данная тема неплохо раскрыта в [докладе Михаила Кабищева](https://youtu.be/dGcI1OsDCio) на GopherCon Russia 2020.

https://proglib.io/w/4d0f8d74",4290,0,0,goproglib
1917,2021-09-12 17:14:40+00:00,"[​](https://telegra.ph/file/a5d96d9416f2a9a4ac23c.jpg) **ini** — пакет для манипуляции с ini-файлами. 

⭐ 2631

https://proglib.io/w/326d5ee4",3474,0,0,goproglib
1916,2021-09-12 09:01:47+00:00,"Простой пример реализации Server-Sent Events (SSE) на Go.

https://proglib.io/w/e80029dc",3766,0,0,goproglib
1915,2021-09-11 16:01:58+00:00," **gizmo **— набор инструментов для микросервисов от The New York Times.

https://proglib.io/w/61eeb785",3710,0,1,goproglib
1914,2021-09-11 12:31:11+00:00,"История о том, как неопределенное поведение часового пояса в Go парализовало команду опытных разработчиков на некоторое время.

https://proglib.io/w/c133bac8",3624,0,0,goproglib
1913,2021-09-11 09:00:20+00:00,"**Приходи на бесплатный курс «Golang разработчик» от CloudMTS, изучи новый язык за 3 месяца и получи оффер!

Для поступления нужно немного опыта
**Полгода коммерческой разработки на любом языке достаточно, чтобы пройти испытания и получить оффер по результатам курса.

**Решайте реальные продуктовые задачи во время обучения
**За 3 месяца вы узнаете, как использовать Golang и окружение для решения инфраструктурных проблем и задач. Он легкий для входа, безопасный и быстрый в разработке.

**Курс написан командой опытных инженеров CloudMTS 
**CloudMTS – это облачный провайдер с собственными магистральными каналами связи. Команда проектирует инфраструктурные службы облака и строит биллинг. Вся разработка ведётся на Golang. 

**Получи оффер сразу после окончания обучения
**После успешного окончания курса вас ждет собеседование с CloudMTS, к которому вы подготовитесь на курсе.


Регистрируйся на курс!
http://teta.mts.ru/golang?utm_source=telegram&utm_medium=post&utm_campaign=golang&utm_content=goproglib",3847,0,2,goproglib
1912,2021-09-11 07:59:39+00:00,Пишем карточную игру на Go по шагам: https://proglib.io/w/11f0a51f,3605,0,0,goproglib
1911,2021-09-10 19:26:12+00:00,"#news 

Выпущены версии Go 1.17.1 и Go 1.16.8, которые исправили проблемы в безопасности.

https://proglib.io/w/a780c750",3680,0,0,goproglib
1910,2021-09-10 18:08:45+00:00,**http.Server** в Go на максималках: https://proglib.io/w/280e52fd,5072,0,0,goproglib
1909,2021-09-10 11:51:49+00:00,"#news

Инструмент [ent](https://t.me/goproglib/1134), который изначально был создан и сопровождался в Facebook, присоединился к [Linux Foundation](https://training.linuxfoundation.org/training/course-catalog/?utm_content=inline-mention).

[Читать подробнее](https://proglib.io/w/e263b429)",3745,0,0,goproglib
1908,2021-09-09 19:05:13+00:00,"Тут топят за использование [sqlc](https://github.com/kyleconroy/sqlc) / [pgx](https://github.com/jackc/pgx) в связке Postgres + Go.

https://proglib.io/w/07558b9d",3794,0,0,goproglib
1906,2021-09-09 13:24:46+00:00,"[​](https://telegra.ph/file/4107297d493badb56c226.jpg)#вакансия #Luxoft  
**Вакансия Regular/Senior Golang Developer
Формат работы:** Remote Russia
**З/п:** 320 000 – 400 000 RUB Gross  

В проект крупного ритейлера Люксофт ищет кандидата на роль Regular/Senior Golang Developer,  который поможет строить новую платформу для управления ценами.

**Обязанности: 
**На позиции в Searching вам предстоит:
— Разрабатывать комплексное решение для управления различными инструментами для регуляции цен в рамках компании
— Интегрироваться с различными партнерскими UI для управления ценами и купонами
— Помогать коллегам из отдела Data & Analytics решать задачу автоматизации управления ценообразованием

На позиции в Search & Navigation вам предстоит:
— Разрабатывать систему ранжирования товаров в рамках каталога
— Работать с комплексной системой поиска позволяющей нам понимать какие атрибуты и категории хотел посмотреть пользователь
— Внедрять модели машинного обучения в различные точки навигации в рамках сайта и приложения, от меню до фильтров на каталоге

 
**Требования:
**— Опыт коммерческой разработки бэкенда от 3-х лет;
— Опыт разработки на Golang;
— Опыт работы с многопоточностью / асинхронностью;
— Опыт работы с SQL базами данных;
— Умение проектировать API сервисов;
Опыт работы с нереляционными базами данных (Redis / Aerospike / MongoDB);
— Опыт работы с RabbitMQ / Kafka;
— Плюсом будет опыт разработки на Python и на РНР

**Условия:
**— Официальное трудоустройство
— Расширенный социальный пакет
— Профессиональное обучение
— Корпоративные скидки
— Гибкий график работы
— Возможность удаленной работы
— Участие в конференциях, митапах и подкастах
 
Подробностями с удовольствием поделится Мария @Mari_Luxoft и читайте на [сайте](http://career.luxoft.com/job/regular-senior-golang-developer/288274/?utm_source=telegram&utm_campaign=202109_b2e_job-opportunities-ru-proglub)",3359,1,1,goproglib
1905,2021-09-09 09:01:11+00:00,"Разбираем различные методы сортировки с помощью пакета `sort`.

https://proglib.io/w/a112aa80",3813,0,0,goproglib
1904,2021-09-09 05:01:04+00:00,"Сравнение Go и Python на примере простого CLI-приложения.

https://proglib.io/w/48f0283a",4969,0,0,goproglib
1903,2021-09-08 18:54:07+00:00,"‍ **restic** — быстрый, безопасный и эффективный инструмент резервного копирования, который позволяет хранить копии как локально, так и на:

- [sftp server](https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#sftp)
- [HTTP REST server](https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#rest-server)
- [AWS S3](https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#amazon-s3) 
- [OpenStack Swift](https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#openstack-swift)
- [BackBlaze B2](https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#backblaze-b2)
- [Microsoft Azure Blob Storage](https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#microsoft-azure-blob-storage)
- [Google Cloud Storage](https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#google-cloud-storage)
- многих других сервисах через [rclone](https://rclone.org/) [Backend](https://restic.readthedocs.io/en/latest/030_preparing_a_new_repo.html#other-services-via-rclone)

⭐️ 13533

https://proglib.io/w/50171778",4276,0,0,goproglib
1902,2021-09-08 09:00:34+00:00,"**Learning Go: An Idiomatic Approach to Real-World Go Programming**

**Автор**: Jon Bodner

Это практическое руководство предоставляет базовые знания, необходимые для написания понятного и идиоматичного кода на Go.

Независимо от уровня опыта, вы научитесь думать как разработчик Go. Автор представляет шаблоны проектирования, принятые опытными разработчиками Go, и исследует причины их использования.",6463,3,4,goproglib
1901,2021-09-08 05:00:08+00:00,"Да будет холивар. Вы что думаете по поводу топика? 

https://proglib.io/w/f08cc802",4026,1,15,goproglib
1900,2021-09-07 15:02:05+00:00,"Материал о том, как динамически внедрять зависимости в структуру. Описанный подход можно использовать для инициализации приложения в целом, а также для загрузки конфигурации и других служб.

https://proglib.io/w/76a97e85",4100,0,1,goproglib
1899,2021-09-07 11:53:08+00:00,"Реализуем микросервис на основе шаблона [CQRS](https://microservices.io/patterns/data/cqrs.html) с использованием Go, Kafka, gRPC и других хайповых инструментов.

https://proglib.io/w/6b4e0130",4473,0,0,goproglib
1898,2021-09-07 09:17:02+00:00,"Вокруг поиска первой работы в IT много вопросов и проблем: большой конкурс на позицию junior, провалы на собеседованиях, глобальная незаинтересованность рынка в джунах, особенно если им больше 30. Мы, издание «Библиотека программиста», решили провести опрос среди всех, кто когда-либо искал первую работу в IT-сфере, чтобы понять кто, каким образом и с какой эффективностью (не) справляется с этой задачей. Опрос займет около 3 минут, результаты опубликуем на сайте proglib.io ориентировочно 19 сентября.

https://forms.gle/kuFeTtoHhKQW2Ekc8",3269,0,0,goproglib
1897,2021-09-07 06:07:37+00:00,"[​](https://telegra.ph/file/86717e73eeae0db268b12.jpg) **Пишем мессенджер на Go за час: 7 простых шагов от эхо-сервера к асинхронному обмену сообщениями**

Авторы большинства статей по сокетным соединениям в примерах ограничиваются реализацией эхо-сервера. Давайте разовьем эту тему и за 7 простых шагов сделаем вместе консольный мессенджер сообщений.

https://proglib.io/sh/EZSxagJs53",3256,0,0,goproglib
1896,2021-09-06 18:00:55+00:00,"После прочтения популярной книги о шаблонах проектирования [Head First Design Patterns](https://wickedlysmart.com/head-first-design-patterns/), в которой примеры представлены на языке Java, автор статей приступил к реализации шаблонов на Go:

- [Стратегия](https://srinjoysantra.medium.com/strategy-pattern-in-golang-5d6f9cab475a) (Strategy)
- [Наблюдатель](https://srinjoysantra.medium.com/observer-pattern-in-go-aebbe83785b5) (Observer)
- [Декоратор](https://srinjoysantra.medium.com/decorator-pattern-in-golang-a831ecae0d38) (Decorator)",5121,0,5,goproglib
1895,2021-09-06 14:39:22+00:00,"**Проходишь курсы по Python, но по итогу у тебя шаблонное резюме и нет проекта, который можешь показать работодателю?**

HR устали рассматривать однотипные резюме –– хочется представить свой проект и знания, достаточные для начала карьеры. 

Специально для тех, кто устал от теории и хочет начать создавать **реальные продукты** Proglib Academy подготовил курс «Основы программирования на Python».

Мы учли все:
После завершения курса у вас будет проект. И не один, а целых два в портфолио, но если будете выполнять все практические задания, то 4
Ваших знаний будет достаточно, чтобы встать на позицию Junior и начать карьеру
Наши кураторы всегда смогут оказать поддержку и никогда не оставят вас без ответа
Образование стало доступным, поэтому курс доступен от 1916 руб/мес 

Эксклюзивный промокод подписчикам канала GO на скидку 15% только до 11 сентября. Подробнее о курсе можно узнать [здесь](https://proglib.io/w/19a8a470)

И ключевое, –– войти в IT быстрее с Proglib Academy",3521,0,4,goproglib
1894,2021-09-06 12:46:37+00:00,"Советы по эффективному тестированию в Go.

https://proglib.io/w/5fd9a36e",4535,0,0,goproglib
1893,2021-09-06 09:33:55+00:00,"[​](https://telegra.ph/file/719c5f0ebfea3c4fd388e.jpg) **db** — библиотека, которая обеспечивает слой доступа к данным (Data Access Layer) для Go и предоставляет независимые инструменты для работы с различными источниками данных, такими как:

- PostgreSQL
- MySQL
- MSSQL
- CockroachDB
- MongoDB
- QL
- SQLite

https://proglib.io/w/d2d0006b",3564,0,1,goproglib
1892,2021-09-05 15:01:47+00:00,Видеозаписи двух докладов с митапа GoSheffield: https://proglib.io/w/231d5474,3444,0,0,goproglib
1891,2021-09-05 12:00:38+00:00,"В статье описано, как правильно закрыть соединение и завершить текущий процесс в вашем приложении на Go. Этот термин еще называется постепенным завершением работы.

https://proglib.io/w/eb381bcd",4751,1,0,goproglib
1890,2021-09-05 08:21:12+00:00,"Руководство по выпуску игры**, **созданной с помощью библиотеки Ebiten, в Steam.

https://proglib.io/w/210d7373",3424,0,0,goproglib
1889,2021-09-04 18:30:03+00:00,"Серия статей о разработке блога с помощью Go, Gin, MySQL и Docker.

https://proglib.io/w/874b792c",3656,0,0,goproglib
1888,2021-09-04 15:02:12+00:00,"[​](https://telegra.ph/file/545540e05081762950f97.jpg) **easegress** — универсальная система оркестрации трафика, которая помогает повысить доступность и стабильность, а также может улучшить производительность без изменения кода.

⭐ 3 727

https://proglib.io/w/40958e8e",4491,0,0,goproglib
1887,2021-09-04 12:00:55+00:00,"Eli Bendersky ранее писал [серию статей](https://eli.thegreenplace.net/tag/plugins) о проектировании и реализации плагинов в различных языках программирования, а сейчас очередь дошла до Go.

https://proglib.io/w/70bba938",4283,0,0,goproglib
1886,2021-09-04 09:02:33+00:00,"Представьте, что ваш знакомый/коллега/родственник попросил у вас совета, как стать программистом?

**Поделитесь вашим мнением, что бы вы ему ответили:**
https://forms.gle/7YZ2rxnyBWsnMqYD7

Лучшие ответы опубликуем в отдельной подборке!",2860,0,1,goproglib
1885,2021-09-03 19:31:11+00:00,"**GOSAMPLES** — еще один полезный ресурс в копилку источников для изучения Go на практике. На сайте собраны фрагменты кода Go, позволяющие решать повседневные задачи.

https://proglib.io/w/b9e21e30",4057,0,0,goproglib
1884,2021-09-03 18:00:56+00:00,Уверенный гайд по интерфейсам в Go: https://proglib.io/w/4b4d7385,3600,0,0,goproglib
1883,2021-09-03 15:01:19+00:00,"**Старт второго потока курса «CI/CD на примере Gitlab CI» от Слёрм.

**За 5 недель освоим путь от простого пайплана до настройки сложных вариантов CI/CD. Поможем понять, как работать с CI/CD. Научим автоматизировать процесс интеграции и поставки, ускорять цикл разработки с минимальными рисками. 

Ответим на вопросы:
Что такое CI/CD
Какие проблемы решает CI/CD
Какие преимущества и недостатки есть у Gitlab Cl
Как интегрируется Gitlab CI и Kubernetes
Что такое Gitops и где его применять
Как лучше всего строить пайплайны

Раз в неделю кураторы разбирают кейсы и практические задания студентов, кроме этого будет две встречи со спикером. В конце курса будет IT-поединок️.

Прочитать подробнее про курс и начать учиться уже с 9 сентября: https://slurm.club/3t8TIBw",3363,0,0,goproglib
1880,2021-09-03 08:13:38+00:00," **analytics** — простой инструмент аналитики, ключевой особенностью которого является конфиденциальность.

Он не хранит Cookies, забывает пользователя через 24 часа, отслеживает уникальные просмотры страниц, не нарушая конфиденциальности пользователя, а также он прост в настройке, поддерживает несколько БД и многое другое.

https://proglib.io/w/8ea823b0",3417,0,0,goproglib
1879,2021-09-02 19:06:35+00:00,"Слайды с выступления Daniel Martí на GolangSheffield: Quality of life improvements in Go.

https://proglib.io/w/d9092147",4536,0,0,goproglib
1878,2021-09-02 13:00:38+00:00,"Упрощенная реализация блокчейна на Go по мотивам следующих статей:

- [Basic Prototype](https://jeiwan.net/posts/building-blockchain-in-go-part-1/)
- [Proof-of-Work](https://jeiwan.net/posts/building-blockchain-in-go-part-2/)
- [Persistence and CLI](https://jeiwan.net/posts/building-blockchain-in-go-part-3/)
- [Transactions 1](https://jeiwan.net/posts/building-blockchain-in-go-part-4/)
- [Addresses](https://jeiwan.net/posts/building-blockchain-in-go-part-5/)
- [Transactions 2](https://jeiwan.net/posts/building-blockchain-in-go-part-6/)
- [Network](https://jeiwan.net/posts/building-blockchain-in-go-part-7/)

https://proglib.io/w/1a2dd9fd",4014,0,0,goproglib
1875,2021-09-01 17:12:15+00:00,"Репозитории, включающие подборки ресурсов, связанных с безопасностью Go:

- [By guardrailsio](https://proglib.io/w/ba7e2595)
- [By Binject](https://proglib.io/w/87aeb162)",4823,0,0,goproglib
1874,2021-09-01 12:00:24+00:00,"`sync.Once` в Go может быть более полезен, чем вы думаете: https://proglib.io/w/3c3b30f6",5825,0,0,goproglib
1873,2021-09-01 06:01:02+00:00,"[​](https://telegra.ph/file/4722570f5a85a113a7123.jpg) **cast **— инструмент для безопасного и простого перехода от одного типа к другому в Go.

При работе с динамическими данными в Go часто возникает необходимость преобразовать данные из одного типа в другой. 

Cast выходит за рамки простого использования утверждения типа (хотя и использует его, когда это возможно), чтобы предоставить простую и удобную библиотеку.

⭐ 1703

https://proglib.io/w/393f4955",4415,0,2,goproglib
1872,2021-08-31 19:14:23+00:00,Сжатие изображений с помощью Go и [bimg](https://github.com/h2non/bimg): https://proglib.io/w/3467f6a5,3727,0,1,goproglib
1871,2021-08-31 15:01:22+00:00,"По результатам всемирного опроса Stack Overflow 2020 язык программирования Python входит в тройку самых любимых технологий в среде разработчиков. Так что если вы только собираетесь научиться кодить, Python отлично подходит на роль первого языка программирования.

Специально для новичков мы подготовили курс, в котором обучаем основам программирования на Python с нуля до уровня Junior за 30 занятий. Вы научитесь не только программировать, но и сделаете несколько практических проектов — в частности, ботов для Telegram и Instagram. Преподаватели лично проверят ваши домашние задания и дадут полезные советы, так что вы точно во всём разберётесь.

Старт потока 15 сентября. Эксклюзивный промокод подписчикам канала GO на скидку 15% только до 6 сентября.

Информация о преподавателях, полная учебная программа и запись на курс [здесь](https://proglib.io/w/00230528)",3707,0,4,goproglib
1870,2021-08-31 11:45:17+00:00,Чему бы вы хотели научиться?,3471,0,29,goproglib
1869,2021-08-31 06:00:52+00:00,Короткие заметки о юнит-тестах на Go: https://proglib.io/w/039bdcf8,5099,0,0,goproglib
1868,2021-08-30 19:15:15+00:00,"[Автор](https://twitter.com/joncalhoun) образовательных площадок (gophercises.com & algorithmswithgo.com) и участник Go Time Podcast выпускает отличные видеоуроки по веб-разработке на Go с примерами:

- [Часть 1](https://proglib.io/w/46802ff9)
- [Часть 2](https://proglib.io/w/f33c718f)",3996,0,2,goproglib
1867,2021-08-30 11:33:55+00:00,"Вакансия, в которой есть место магии: **GoLang Developer в Mercuryo 

**Наша команда умеет превращать магическое в доступное: мы создаем финансовые сервисы нового поколения, в которых объединяем фиат и криптовалюты для миллионов пользователей. Хочешь получить доступ к особым знаниям о финтехе? Присоединяйся к нам!

Это мэтч, если ты:
 Разрабатываешь на GoLang больше 2 лет: unit-тесты, pprof, dlv;
 Пишешь микросервисы и понимаешь микросервисную архитектуру;
 Имеешь опыт промышленной разработки с MySQL (InnoDB, MyISAM) и PostgreSQL;
 Хочешь узнать больше о крипте и blockchain-технологиях.

Взамен предлагаем зп 180 000₽ — 300 000₽, возможность работать из любой точки мира, +6 дней к оплачиваемому отпуску и повышение по грейду, как только ты будешь к этому готов.

Откликайся на вакансию [тут](https://mercuryo-career.ru/job/golang?utm_source=ml&utm_medium=telegram&utm_campaign=golang&utm_content=golanglibrary) или присылай резюме прямо нам в Telegram — [@HRMercuryo](https://telegram.me/HRMercuryo) ",3662,0,0,goproglib
1866,2021-08-30 11:27:47+00:00,"Обзор преимуществ использования связки AWS Lambda + Go.

https://proglib.io/w/9aa23ae7",4793,1,0,goproglib
1865,2021-08-29 19:13:02+00:00," **air** — инструмент для живой перезагрузки приложений Go.

Автор инструмента при разработке веб-приложений с помощью Go и Gin заметил отсутствие функции live-reloading, а гибкости инструмента [fresh](https://github.com/gravityblast/fresh) было недостаточно. Так родился **air**.

⭐️ 7k

https://proglib.io/w/0105a82a",4139,2,1,goproglib
1864,2021-08-29 13:26:22+00:00,Практика работы с пакетом `Go` `fmt`: https://proglib.io/w/42e4f5a8,3845,0,6,goproglib
1863,2021-08-28 08:12:42+00:00,"**Build Systems With Go: Everything a Gopher must know **(2021)

**Автор**: Juan M. Tirado

Во втором издании книги значительно обновился контент, расширились объяснения, появилась новая глава о Cgo и многое другое.

Книга предлагает читателю полное объяснение наиболее полезных аспектов языка Go и того, как их использовать с существующими инструментами из экосистемы Go. 

Не останавливайтесь на основах, двигайтесь вперед и узнайте, как создавать системы с RESTful API, обменом сообщениями gRPC, middleware, базами данных SQL / noSQL, потоковой передачей данных и многим другим.",5868,1,2,goproglib
1862,2021-08-27 19:13:28+00:00,Изучаем Go Fiber на примерах: https://proglib.io/w/3f09605b,4005,0,0,goproglib
1860,2021-08-27 05:30:15+00:00,"**Как выполнить мягкое удаление с помощью MongoDB и Go**

Фантомное или мягкое удаление (Soft deletion) — подход по работе с данными, когда данные не удаляются из хранилища, а просто помечаются как удаленные. Из руководства вы узнаете, как реализовать мягкое удаление с помощью MongoDB и Go.

https://proglib.io/w/f611dfa6",3685,0,0,goproglib
1859,2021-08-26 19:18:30+00:00," **kafka-go **— библиотека, которая предоставляет API-интерфейсы для взаимодействия с Kafka, концепций зеркалирования и реализации интерфейсов стандартной библиотеки Go. Как заявляют разработчики, kafka-go обходит конкурентов по многим параметрам. Вы какой библиотекой пользуетесь?

⭐️ 3807

https://proglib.io/w/1606484d",3666,1,3,goproglib
1858,2021-08-26 15:02:23+00:00,"Прояви свои таланты в «цифре»! 

Регистрируйся на самый масштабный конкурс для IT-специалистов в России — «Цифровой Прорыв» 2021! ️

Тебя ждут 8 тематических хакатонов по направлениям: EdTech, EnergoMach, Healthcare, Creative Industries, Vehicles, Fintech и пр.  

Крутые кейсовые задания от ведущих российских компаний: Mail.ru Group, Росатом, Ростелеком,  и многих других. ‍

Прожарка Hard и Soft skills на самой мощной образовательной программе. 

Призовой фонд — 55 000 000 рублей. 

Присоединяйся к главному IT-движению и стань частью цифрового будущего России! 
Регистрируйся: https://proglib.io/w/ecbeca45",3507,0,0,goproglib
1857,2021-08-26 06:23:02+00:00,"Обзор IDE и инструментов для разработки на Go.

https://proglib.io/w/04612cca",3610,0,1,goproglib
1856,2021-08-25 19:15:03+00:00,Учимся отлаживать Go в Vim: https://proglib.io/w/b9f29f0d,4651,0,4,goproglib
1855,2021-08-25 18:00:57+00:00," **gokart** — инструмент статического анализа для Go, который находит уязвимости исходного кода с помощью SSA (Single static assignment form). 

Он способен отслеживать источник переменных и аргументов функций для определения безопасности источников ввода, что снижает количество ложных срабатываний по сравнению с другими сканерами безопасности Go. 

https://proglib.io/w/cd9daf76",3710,0,0,goproglib
1854,2021-08-25 15:01:46+00:00,"Ищем лучших из лучших в Авито 

Мощных [iOS-разработчика](http://clc.to/Kd8zAw) и [Senior Android-разработчика](http://clc.to/OQzoCw) в юнит Mobile Architecture, чтобы вместе создавать гибкую расширяемую архитектуру мобильных приложений.

И классных [фронтендеров](http://clc.am/DqIy4w) в юнит Performance.

Что мы предлагаем:
 • интересные и важные задачи в большом проекте;
 • достойную зарплату и кучу бенефитов;
 • обучение за счёт компании;
 • крутейший офис в центре города.

Откликнуться на вакансии можно по ссылкам ⬆️",3457,0,3,goproglib
1853,2021-08-24 18:01:14+00:00,Доклады с конференции GoLab 2021: https://proglib.io/w/57aef922,5197,0,0,goproglib
1851,2021-08-24 10:13:59+00:00,"Как карты Go хранят свои значения и ключи.

https://proglib.io/w/20934025",4866,0,12,goproglib
1850,2021-08-23 15:01:26+00:00,"Всем привет! 
Мы сделали сервис, который отбирает вакансии по вашим интересам. 
Настройте личные фильтры: локация, точный технологический стек, и, конечно, не забудьте о деньгах. 

Все самые подходящие предложения рынка – в @GetMeIT_bot",3648,0,2,goproglib
1849,2021-08-23 07:22:55+00:00,Основы работы с `go.mod` / `go.sum`: https://proglib.io/w/19b325dd,3893,0,2,goproglib
1847,2021-08-22 05:19:53+00:00,"** wails **— инструмент, предназначенный для создания десктопных приложений с помощью Go и различных веб-технологий.

Он позволяет упростить задачу создания, компиляции и объединения проектов. Остается только проявить творческий подход.

[Репо](https://proglib.io/w/c60ade90)
[Официальная документация](https://wails.app/)",3639,0,16,goproglib
1845,2021-08-21 09:01:20+00:00,"[​](https://telegra.ph/file/b59a894da4670a42b1f91.jpg)Серия видеоуроков, в которой демонстрируются базовые основы создания игр на Go.

https://proglib.io/w/309d5b73",3510,0,2,goproglib
1844,2021-08-21 06:13:33+00:00,"**Есть опыт и знания в IT, которыми Вы** **хотите поделиться?**

**Станьте автором технических статей вместе с Proglib** **и получайте достойное вознаграждение!**
 
Библиотека программиста приглашает к сотрудничеству внештатных авторов, 
которые хотят поделиться знаниями, пропиарить свой авторский блог или просто заработать. 
Мы предлагаем удаленную работу, гибкий график, возможность зарабатывать до 12к за статью и выплаты 2 раза в месяц. 
Мы не ограничиваем в количестве статей.
Постоянным авторам предусмотрены премии за лояльность. 

Интересующие направления для написания статей:
• DevOps
• Блокчейн
• Информационная безопасность
• Дизайн интерфейсов (UX/UI)
• Ruby on Rails
• Rust
• Python
• C/C++/C#
• Java
• Go разработка
• Разработка игр
• Android-разработка
• iOS-разработка
• Системная аналитика
• Тестирование ПО
• Виртуальная реальность
• 1С
• Business Intelligence
• Интернет вещей
• Системы и сети
• Data Science, BigData и Machine Learning
• IT Management

Оставьте заявку на https://job.proglib.io/ и мы свяжемся с вами!",3077,0,0,goproglib
1843,2021-08-20 18:15:07+00:00,Серия коротких руководств про [использование](https://proglib.io/w/7e47837b) [каналов в Go](https://proglib.io/w/7e47837b) и [обработку](https://proglib.io/w/c3e19ed6) [ошибок в каналах](https://proglib.io/w/c3e19ed6).,4718,0,0,goproglib
1842,2021-08-20 15:13:12+00:00,"**Хочешь наконец заинтересовать своего ребенка программированием? **

Совсем скоро начнется новый учебный год, и Proglib Academy запускает курсы для детей.

Спикеры наших курсов — опытные преподаватели, имеющие многолетний опыт обучения детей информатике и программированию.

Подача материала в простой и игровой форме: как и в реальной жизни, в обучении используются командные механики.

Итог обучения — работающие игра/мобильное приложение, которое можно будет посмотреть у себя на устройстве!

Оставляйте заявки на курсы:

1. [Основы логики и программирования (6-7 лет)](https://proglib.io/w/feb991b7)
2. [Разработка игр на Unity (10-12 лет)](https://proglib.io/w/1f2d7127)
3. [Мобильная разработка на Kotlin (14-17)](https://proglib.io/w/b0b44df4)",3477,0,0,goproglib
1841,2021-08-20 07:03:21+00:00,"Если вы всегда хотите быть в курсе книжных новинок, обновлений и другой полезной информации, касающейся вашего языка или области программирования, вы можете начать читать один из наших каналов, где мы каждый день публикуем учебные материалы для разработчиков разного уровня.

Библиотека IT мемов:
@itmemlib
Полезные материалы по всему, что может быть интересно любому программисту: @proglibrary
Библиотека хакера: @hackproglib
CC++: @cppproglib
PHP: @phpproglib
Frontend: @frontendproglib
Python: @pyproglib
Mobile: @mobileproglib
Data Science: @dsproglib
Java: @javaproglib
C#: @csharpproglib
Библиотека devops'а: @devopsslib
Библиотека тестировщика: @testerlib
Книги для программистов: @progbook

Если вы хотите быть в курсе последних событий в мире разработки, подписывайтесь на нашего бота @event_listener_bot. Там можно настроить бота под себя: указать интересующие города и темы.

Кстати, «Библиотека программиста» отобрала для вас лучшие на российском рынке труда предложения по разным направлениям: Python, C/C++, Java, JavaScript, PHP, Data Science, Quality Assurance, DevOps и другим непонятным аббревиатурам и сокращениям.

Здесь вы получите актуальную информацию первыми:

@pydevjob 
@jsdevjob
@csharpdevjob
@javadevjob
@datajob
@phpdevjob
@godevjob
@mobiledevjob
@cppdevjob
@testerrjob
@devopssjob",3650,0,0,goproglib
1839,2021-08-19 15:02:04+00:00,"Приглашаем системных инженеров Middle+ принять участие в EPAM DevOps Hiring Weeks и стать частью команды EPAM!
Мы ценим ваше время, и эта одна из причин проведения мероприятия – не нужно долго ждать решения. Пройдите интервью и получите оффер за 48 часов! Если вы примите оффер до 12 сентября включительно, то плюсом к быстрому офферу вы получите welcome-бонус в зависимости от вашего опыта: 
 Middle – 150 000 рублей; 
 Senior – 225 000 рублей;
 Lead – 300 000 рублей. 

 Кого мы ждем: системных инженеров Middle + (от 2-х лет опыта). 
Как подать заявку: заполните форму и выберите удобный слот для проведения онлайн-интервью с 30 августа по 12 сентября 2021: https://epa.ms/devops-hw-september-proglib",3717,0,2,goproglib
1838,2021-08-18 16:54:54+00:00,"Изучаем WebAssembly с нуля и пишем небольшой проект на Go, используя данную технологию.

https://proglib.io/w/a20c1e80",4034,0,2,goproglib
1836,2021-08-17 18:01:25+00:00,"Создаем систему аналитики просмотра страниц с помощью Kafka, Go, Postgres и GraphQL за 5 шагов.

https://proglib.io/w/9fd1f6f3",4069,0,1,goproglib
1835,2021-08-17 15:02:46+00:00,"[​](https://telegra.ph/file/8be799107c7f198b9e52f.jpg)Научитесь создавать приложения и программы с помощью языка программирования Golang! Пройдите трёхдневный онлайн-интенсив по Go-разработке и создайте чат-бота для Telegram с нуля: https://clc.am/KDOCxg

 Изучите основы языка, познакомитесь с синтаксисом и основными функциями Golang, научитесь работать с популярными библиотеками.


 Создадите Telegram-бота по отслеживанию криптовалютного портфеля пользователя с ежечасной нотификацией и добавите его себе в портфолио.

 Поймёте, где применять язык Go и насколько востребована профессия Go-разработчика.

 Пообщаетесь с другими участниками в прямом эфире и получите обратную связь от преподавателя интенсива, разработчика с 11-летним опытом работы — Валерия Кабисова.

 Участвуйте и получите подарок! Если дойдёте до конца интенсива, электронная книга Шона Эйкора «Большой потенциал» будет вашей. А если выполните простое домашнее задание — подарим сертификат на 15 000 рублей на любой курс Skillbox!

Регистрируйтесь и присоединяйтесь к бесплатному онлайн-интенсиву 19–21 августа в 19:00 по московскому времени.",3676,0,0,goproglib
1834,2021-08-17 12:07:23+00:00,"#news 

Разработчики языка [представали Go 1.17](https://proglib.io/w/8ee0abf2) . Новый выпуск показал значительное повышение производительности и содержит много полезных фич, с полым списком которых можно ознакомиться [здесь](https://proglib.io/w/c09427fa).",3702,0,0,goproglib
1833,2021-08-16 05:53:52+00:00,"Серия статей о создании микросервисов с помощью Go.

https://proglib.io/w/7c525354",5572,0,3,goproglib
1832,2021-08-15 11:58:00+00:00,"Tyler Bui-Palsulich (работает в Google над Go и Google Cloud) в своем материале рассматривает процесс обнаружения и устранения утечки памяти, а также описывает способы исправления похожих проблем в кодовой базе Go от Google и кейсы улучшения имеющихся библиотек для недопущения подобных проблем в будущем.

https://proglib.io/w/6d2f0ab8",4038,0,0,goproglib
1831,2021-08-14 16:29:07+00:00,"Статья о том, что такое Register-based calling convention в новой версии языка, в чем отличие от старого соглашения о вызовах и какое влияние будет оказано на прикладную Go разработку.

https://proglib.io/w/eb5bf8e1",4102,0,1,goproglib
1830,2021-08-13 18:01:45+00:00,"Общие антипаттерны в веб-приложениях на Go и советы по их недопущению. 

https://proglib.io/w/82bfe3a2",5700,0,0,goproglib
1828,2021-08-12 06:01:09+00:00,"**GoingWithGo** — это информационный бюллетень об использовании Go в реальных проектах по разработке программного обеспечения. 

В отличие от других информационных бюллетеней и сайтов о Go, этот не носит технического характера — он фокусируется на людях и их опыте. 

Большая часть принятия определенного технологического стека заключается в использовании чужого опыта работы с ним. Это та часть, о которой идет речь в этом информационном бюллетене.

https://proglib.io/w/c092909f",4029,0,0,goproglib
1827,2021-08-11 18:01:13+00:00," **gorse **— это система рекомендаций с открытым исходным кодом, которую можно легко внедрить в широкий спектр онлайн-сервисов. 

Вы импортируете элементы, пользователей и данные взаимодействия в Gorse, а система автоматически обучает модели для выработки рекомендаций каждому пользователю. 

Для демонстрации работоспособности можете посмотреть [данную](https://github.com/zhenghaoz/gitrec) рекомендательную систему в стиле TikTok для GitHub-репозиториев.

[Репо](https://proglib.io/w/27b291bb)
[Сайт](https://proglib.io/w/fd9483cb)",3998,0,0,goproglib
1825,2021-08-10 13:50:52+00:00,"Перевод статьи, описывающей процесс восстановления или прекращения работы программы на Go после возникновения паники.

https://proglib.io/w/ceaf0443",4272,0,0,goproglib
1824,2021-08-09 13:35:14+00:00,"Разбор и реализация упрощенной версии алгоритма поиска строки Бойера-Мура с помощью Go.

https://proglib.io/w/0cc7f97f",4149,0,0,goproglib
1823,2021-08-08 15:36:47+00:00,"**Создание высокодоступного оператора Kubernetes с помощью Go**

В статье рассматривается процесс создания [оператора Kubernetes](https://github.com/mmontes11/echoperator) с использованием библиотеки [client-go](https://github.com/kubernetes/client-go), адаптации для достижения высокой доступности и деплоя в кластере Kubernetes.

https://proglib.io/w/4233f14c",5397,0,0,goproglib
1822,2021-08-07 06:30:53+00:00,Закулисье работы функции `len()` в Go**: **https://proglib.io/w/d15df38c,5288,0,0,goproglib
1821,2021-08-06 18:53:22+00:00,[​](https://telegra.ph/file/c4070d401aee5e7fe6c63.jpg)Представлены релизы Go 1.16.7 и Go 1.15.15: https://proglib.io/w/81f29f88,3901,0,0,goproglib
1820,2021-08-06 13:35:35+00:00,"#вакансия #удалённо #job #fulltime #remote #golang

Senior Backend developer

Доход: От 3500 USD - 5000 USD.
Full time, удалёнка + возможность работать в офисе:
Санкт-Петербург, Москва, Ульяновск, Обнинск, Калуга, Казань, Харьков, Минск, Гомель.

**О компании:
**Американская компания Xim Inc.
https://ximxim.com
очень ищет Senior Backend developer  
Ссылка на проект Rain https://rain.us

**What is the opportunity?

**__We are looking for a Backend Software Engineer that must have some Golang experience. This position is remote. The candidate will be responsible for managing various areas of our backend platform, including API integrations with 3rd-party vendors and partners.
As a Senior Software Engineer with Rain, you will play a central role as we scale to 1M+ users. You will work with our US based product and engineering teams to implement quickly and contribute in all phases of the development lifecycle. Our ideal candidate is excited to tackle tough technical challenges and looking for opportunities to contribute to our strategic thinking.

__**What will you do?

**Translate business requirements into technical solutions, recommend alternative technical and business approaches, and lead engineering efforts to meet aggressive timelines
Operational Excellence - monitoring & operation of production services including implementation of adequate resilience and high-availability models to support 24x7 operational availability
Manage backend API integrations with 3rd-party vendors and partners
Manage integration of user-facing elements developed by our front-end developers with server side logic
Build reusable code and libraries for future use
Optimize Rain application for maximum speed and scalability
Design and implementation of data storage solutions

**What do you need to succeed?
**Fluent English
Proficient knowledge of back-end programming languages, Go / Golang is a MUST.
Basic understanding of front-end technologies and platforms, especially React and React Native
Good understanding of server-side CSS preprocessors
Solid understanding of REST API design and development with experience building REST APIs
Experience with API security standards and implementation (OAuth,)
Good experience with API frameworks
Integration of multiple data sources and databases into one system
Management of hosting environment, including database administration and scaling an application to support load changes
Data migration, transformation, and scripting
Setup and administration of backups
Creating database schemas that represent and support business processes

**We offer:
**Work for the USA compony
Remote work
Official employment
️Flexible working hours
Medical insurance
Paid vacation days
Partial compensation for English classes

**Отклики и рекомендации направляйте**, пожалуйста, сюда 

Контакты: @VBHRIT",3951,0,5,goproglib
1818,2021-08-06 12:19:33+00:00,"Вчерашний митап Golang Online, проводимый Технострим Mail.Ru Group, уже можно посмотреть:

 [Видеозапись выступлений](https://proglib.io/w/369f113e)
 [Презентации](https://proglib.io/w/77daa3ec)",4969,0,0,goproglib
1817,2021-08-05 18:28:35+00:00,"Примеры приложений и кода на Go, написанные для Google Cloud.

https://proglib.io/w/e81b90f4",4078,0,1,goproglib
1816,2021-08-05 09:01:49+00:00,"Разбор тестовых заданий по Go с конференции PHDays.

https://proglib.io/w/b27fd354",4088,0,0,goproglib
1815,2021-08-05 06:18:24+00:00,"Привет! На связи Библиотека программиста. Мы проводим двустороннее исследование, которое поможет программистам и компаниям легче находить друг друга. Хотим, чтобы HR-специалисты знали о реальных ожиданиях специалистов из IT. В анонимной форме многие вещи изложить проще, чем на собеседовании. 

Если ты программист, пройди опрос в гугл-форме (займет около 5 минут): https://forms.gle/rA6zUm5Q5XSNzEdN8

Для HR мы подготовили вторую часть опроса в гугл-форме (займет около 5 минут): https://forms.gle/w5tStDYABNL9phz26. 

Участники опроса получат доступ к результатам исследования.",3424,0,0,goproglib
1814,2021-08-04 18:17:03+00:00,"Разбираем механизмы управления памятью и принципы работы сборщика мусора в Go.

https://proglib.io/w/1052d4cb",4531,0,0,goproglib
1813,2021-08-03 18:25:30+00:00,"**Go Developer Roadmap 2021**

[Читать подробнее](https://github.com/Alikhll/golang-developer-roadmap/blob/master/i18n/ru-RU/ReadMe-ru-RU.md)",8225,0,2,goproglib
1812,2021-08-02 11:48:58+00:00,"**Захват видео в реальном времени с помощью Go**

В статье рассматривается способ получения доступа к драйверам видеоустройств с помощью Video for Linux API (или V4L2) и стандартных библиотек Go (без Cgo) для захвата видео и потоковой передачи в реальном времени.

https://proglib.io/w/6700b1b9",4668,0,0,goproglib
1811,2021-08-01 10:52:32+00:00,"Немного Data Science в Go: сколько вы должны дать чаевых таксисту в процентах?

Решение  https://proglib.io/w/8aa1f777",4088,0,3,goproglib
1810,2021-07-31 09:13:53+00:00,"** goalive **— простой инструмент для мониторинга работоспособности эндпоинтов.

В случае возникновения проблем, например, кодов состояния HTTP! = 2xx или проблем с подключением, уведомления можно отправлять через Discord, Telegram или Slack.

https://proglib.io/w/f240b5d0",4552,0,5,goproglib
1809,2021-07-31 07:16:31+00:00,"Обсуждение с Reddit: Как вы прокачиваете свои скиллы в программировании на Go.

https://proglib.io/w/761fef18",3887,0,0,goproglib
1808,2021-07-30 15:01:20+00:00,"Go-разработчики, считаные дни до конца приёма заявок на Hiring Day в Авито 

Пройдите онлайн-тест до 3 августа. Участников с лучшими результатами пригласят на Zoom-собеседование и в тот же день предложат оффер.

Откликнуться ️ clc.to/3nKM5Q",4214,0,5,goproglib
1807,2021-07-30 11:44:18+00:00,"Aurélie Vache, Cloud Developer / DevRel в [Stack Labs](http://stack-labs.com/), обьясняет фундаментальные Основы Go на примерах:

- [Введение](https://dev.to/aurelievache/learning-go-by-examples-introduction-448n)
- [Создание сервера HTTP REST API](https://dev.to/aurelievache/learning-go-by-examples-part-2-create-an-http-rest-api-server-in-go-1cdm)
- [Создание приложения CLI на Go](https://dev.to/aurelievache/learning-go-by-examples-part-3-create-a-cli-app-in-go-1h43)
- [Создание бота для Discord](https://dev.to/aurelievache/learning-go-by-examples-part-4-create-a-bot-for-discord-in-go-43cf)
- [Создание игры Game Boy Advance](https://dev.to/aurelievache/learning-go-by-examples-part-5-create-a-game-boy-advance-gba-game-in-go-5944)
- [Создание приложения gRPC](https://dev.to/aurelievache/learning-go-by-examples-part-6-create-a-grpc-app-in-go-2ja3)
- [Создание кросплатформенного GUI/Desktop приложения](https://proglib.io/w/fb4987f3)
- [Автоматическая кросс-компиляция и выпуск приложения](https://proglib.io/w/5666b258)",4170,0,0,goproglib
1806,2021-07-30 11:13:37+00:00,"[​](https://www.jetbrains.com/lp/devecosystem-2021/static/5_years_line_chart@2x-b70a5ae8f3b436fd99da38b6fde858c7.png) **Опубликованы результаты ежегодного опроса от JetBrains, посвященного экосистеме разработки

**В отчете представлена информация о современных тенденциях в IT-отрасли, а также интересные факты об инструментах, технологиях, языках программирования и других аспектах мира разработки.

https://proglib.io/w/089dd2ce",3392,0,0,goproglib
1805,2021-07-29 19:02:19+00:00,"Интересная мини-серия статей, в которой проводится обзор и рефакторинг кода:

- [Рефакторинг для лучшей тестируемости](https://proglib.io/w/863c5f24)
- [Извлечение бизнес-логики](https://proglib.io/w/cc8799f4)",4928,0,0,goproglib
1803,2021-07-28 17:29:58+00:00,"Объяснение причин неготовности Go для корпоративных систем.

https://proglib.io/w/a661f4ee",3665,0,38,goproglib
1802,2021-07-27 18:01:15+00:00,"Разбираем пример реализации pipeline с помощью Go.

https://proglib.io/w/ce010c7b",3936,0,0,goproglib
1800,2021-07-26 18:00:48+00:00,"Обзор способов доступа к СУБД PostgreSQL с помощью Go.

https://proglib.io/w/e5ece94f",4882,0,1,goproglib
1799,2021-07-26 15:01:25+00:00,"Хотите стать востребованным программистом? Ещё не определились с направлением? Регистрируйтесь и выберите специальность себе по душе!

 Познакомитесь с введением в программирование, веб-вёрсткой и профессией Go-разработчика.

 Научитесь работать с макетами и форматировать код, освоите адаптивную вёрстку.

 Узнаете о профессии тестировщика — одной из самых востребованных в сфере IT, где не нужен опыт программирования.

 Поймёте, кто такой 1С-разработчик и как разрабатывать прикладные решения для автоматизации бизнес-процессов.

 Автоматически получите доступ к выбранному направлению при регистрации.

Не упустите шанс! Подробнее по ссылке: https://clc.am/zYT7OQ
Не упустите шанс — жмите [«Подробнее»](https://clc.am/zYT7OQ)!",3651,0,0,goproglib
1798,2021-07-25 06:00:11+00:00,"Принцип работы и кейс использования `sync.Map` в Go.

https://proglib.io/w/cba99869",5047,0,0,goproglib
1797,2021-07-24 06:00:41+00:00,"** watermill **— библиотека, предназначенная для создания событийно-ориентированных приложений на Go и реализации эффективной работы с потоками сообщений. 

Вы можете использовать обычные реализации pub / sub, такие как Kafka или RabbitMQ, а также HTTP или MySQL binlog, если это соответствует вашему варианту использования.

⭐️ 3053

https://proglib.io/w/3f6b9e7c",4270,0,4,goproglib
1796,2021-07-23 06:30:56+00:00,"Вводная статья, охватывающая основы, необходимые для старта в разработке на Go.

https://proglib.io/w/748e27df",5385,0,6,goproglib
1795,2021-07-22 06:00:11+00:00,Простой для понимания учебник по разработке веб-приложений без использования фреймворков. Можно [читать онлайн](https://thewhitetulip.gitbook.io/bo/) или [смотреть видеоуроки](https://www.youtube.com/playlist?list=PL41psiCma00wgiTKkAZwJiwtLTdcyEyc4).,4697,0,0,goproglib
1794,2021-07-21 12:00:33+00:00,"Самые популярные языки программирования по данным общедоступных GitHub-репозиториев. Интересно наблюдать, как Go набирал обороты и уверенно занял 4ю позицию.

https://proglib.io/w/89b38f93",3959,0,0,goproglib
1788,2021-07-21 06:00:44+00:00," **statsviz** — инструмент, реализующий мгновенную визуализацию статистики выполнения вашего приложения Go (GC, MemStats и т. д.) в режиме реального времени.

⭐ 1399

https://proglib.io/w/7c26573e",5084,0,0,goproglib
1787,2021-07-20 19:01:02+00:00,"Руководство по использованию пакета `encoding/binary` для кодирования двоичного файла в соответствии с настраиваемым форматом.

https://proglib.io/w/1a6fb67e",3536,1,0,goproglib
1785,2021-07-20 12:14:39+00:00,"[​](https://telegra.ph/file/defa781359c687fdc026d.jpg) **43 ресурса для изучения Golang в 2021 году: сайты, блоги, сообщества, курсы, каналы и книги**

Язык Go не самый распространенный, но, определенно, один из наиболее востребованных у работодателей. Читайте актуальную подборку ресурсов для его изучения: в ней есть все необходимое, включая свежие книги на английском языке.

https://proglib.io/sh/VPvAT3Mb5D",4297,0,1,goproglib
1783,2021-07-19 18:33:49+00:00,"Разбираемся с тем, что делает Go «под капотом», чтобы сделать обработку текста Unicode + Emoji, беспроблемной.

https://proglib.io/w/c3148c36",3600,0,0,goproglib
1782,2021-07-19 06:00:32+00:00,"[​](https://telegra.ph/file/a431e2e47f9d6eb63ff21.jpg) **Взаимодействие MySQL и Go: подводные камни автоматической кодогенерации**

Большинство статей про использование MySQL в Golang повторяет примеры из официального руководства. Реальная разработка далека от простых примеров: из-за строгой типизации часто возникают проблемы. Разбираемся с их решением, если вам необходимо создать много однотипных функций.

https://proglib.io/sh/so7DrgfGJz",4817,0,0,goproglib
1781,2021-07-18 09:01:13+00:00,"[​](https://telegra.ph/file/144090ef98ae5f0e957b6.jpg)#tip

Когда вам нужно объединить строки в Go, подумайте о типе `bytes.Buffer`. Это действительно удобно и довольно эффективно.",3685,0,8,goproglib
1780,2021-07-18 07:12:58+00:00,"[​](https://telegra.ph/file/fbd9c0f6920ef44fa90b2.jpg) **mkcert** — простой инструмент для создания локальных доверенных сертификатов с любыми именами.

Использование сертификатов от реальных центров сертификации (ЦС) для разработки может быть опасным или невозможным (для хостов, подобных example.test, localhost или 127.0.0.1), а самоподписанные сертификаты вызывают ошибки доверия. Лучшее решение — управление собственным центром сертификации, но обычно оно требует сложных команд, специальных знаний и ручных действий.

Инструмент **mkcert** автоматически создает и устанавливает локальный центр сертификации в корневом хранилище системы и генерирует локально доверенные сертификаты, при этом он не настраивает серверы автоматически для использования сертификатов, это зависит от вас.

https://proglib.io/w/dbb9cb5e",3333,0,1,goproglib
1779,2021-07-17 16:53:50+00:00,"[​](https://telegra.ph/file/a91324ad3195913f60304.jpg)Пишем приложение на Go в соответсвии с принципами чистой архитектуры. Используемые технологии: Go + Gin, AWS: Lambda, API Gateway с настраиваемым авторизатором, DynamoDB.

https://proglib.io/w/250aa806",4255,0,1,goproglib
1778,2021-07-17 05:30:09+00:00,"[​](https://telegra.ph/file/32aa1820ea562000bc6ef.jpg) **json-iterator** — высокопроизводительная, на 100% совместимая замена `encoding/json`.`

`⭐️ 9523`

`https://proglib.io/w/5f80da12",3954,0,5,goproglib
1777,2021-07-16 19:07:04+00:00,"Практика написания кодогенераторов в Go и оптимизации работы над микросервисами с помощью создания инструмента для генерации шаблонного кода. 

https://proglib.io/w/85cde260",4175,0,0,goproglib
1776,2021-07-16 15:54:56+00:00,"Выпущены следующие версии языка: 

-[ ](https://groups.google.com/g/golang-dev/c/5LJ2V7rd-Ag/m/YGLHVBZ6AAAJ)[Go 1.16.6 и 1.15.14](https://groups.google.com/g/golang-dev/c/5LJ2V7rd-Ag/m/YGLHVBZ6AAAJ) 
- [Go 1.17 Release Candidate 1](https://groups.google.com/g/golang-announce/c/gJE7OtHlRbM/m/21x8zAR-AAAJ)",3610,0,3,goproglib
1775,2021-07-15 07:02:38+00:00,"**Когда написал свой собственный инструмент, чтобы понять, как работает более сложный инструмент**

Сэм Льюис решил написать свой собственный инструмент VPN на Go, чтобы узнать, как работают Mesh VPN. 

Full-Mesh (или P2P) VPN используют для обеспечения защищённой связи между удаленными офисами, серверами и многим другим. Обычные VPN, вроде OpenVPN или PPTP, пропускают весь трафик через центральный сервер, а Full-Mesh соединяются непосредственно с нодами, зачастую пробивая NAT.

https://proglib.io/w/e3780563",4361,1,3,goproglib
1774,2021-07-14 18:10:33+00:00,"**Илья Богданов**, ведущий инженер в команде веб-разработки компании **ispring**, рассказывает про настройку стандартной библиотеки Go так, чтобы избежать неожиданных ошибок в production.

https://proglib.io/w/1f9a76fb",5261,0,0,goproglib
1771,2021-07-13 06:00:54+00:00,"[​](https://telegra.ph/file/ef8e55974de2a5766acb5.jpg) **Самоучитель для начинающих: как освоить Go с нуля за 30 минут?
**
Важнейшей ценностью для создателей Go была простота. Код на этом языке легко писать, легко читать и в результате – проще поддерживать. В кратком руководстве мы окунемся в основы Go за полчаса.

https://proglib.io/sh/3SFMJdYA9m",4371,0,0,goproglib
1770,2021-07-12 11:55:19+00:00,"**Автоматизация тестов на Go + Allure**

Татьяна Куликова из Vivid Money рассказывает об автоматизации тестирования на Go с помощью Allure, а также делится проблемами, с которыми столкнулась.

Статья будет полезна тем, кто впервые столкнулся с Go, кому интересно взаимодействие с Go в тестировании, а также тем, кто не знает, с чего начать.

https://proglib.io/w/3642b379",4142,0,0,goproglib
1769,2021-07-11 18:29:20+00:00,"Руководство по развертыванию gRPC / gRPC Web API в бессерверной среде Google Cloud.

https://proglib.io/w/973e3e2a",3909,0,0,goproglib
1768,2021-07-11 09:35:08+00:00,[​](https://telegra.ph/file/df1b887088b41cd1da589.jpg)Краткий обзор использования `iota` в Go,3907,0,0,goproglib
1767,2021-07-10 18:46:13+00:00,"Несколько полезных команд для запуска в проектах Go.

https://proglib.io/w/bb732199",4077,0,0,goproglib
1766,2021-07-10 09:58:36+00:00,"[​](https://telegra.ph/file/d5d87bdb129870bb427e9.jpg)#tip 

Функция `SplitHostPort` пакета `net` может использоваться для получения адреса хоста и номера порта **IPv4** / **IPv6**.",3792,0,7,goproglib
1765,2021-07-09 13:52:26+00:00,Пишем аналог [Ngrok](https://ngrok.com/) на Go: https://proglib.io/w/be2f0658,5037,0,0,goproglib
1764,2021-07-08 19:01:26+00:00,"[​](https://telegra.ph/file/cbce3dd125297a11cccef.jpg) **rony **— быстрый и масштабируемый фреймворк RPC, позволяющий легко создавать кластерные службы.

https://proglib.io/w/6bdc9a9d",4043,0,0,goproglib
1763,2021-07-08 15:01:48+00:00,"Думаете, что стать программистом сложно? Только не с обучающим курсом от Skillbox!

Если вы никогда не занимались программированием, курс «Профессия Go-разработчик» станет отличным стартом вашей карьеры!

Под руководством опытных кураторов вы получите базовые знания программирования, поймете принципы работы с операционными системами и обменом данными, научитесь создавать и оптимизировать приложения на языке Go.

Пройдя обучение, вы получите диплом, а лучших студентов пригласят на стажировку в Ozon.

Переходите по ссылке и регистрируйтесь. Первые 3 месяца  обучения бесплатно!▶️ https://clc.am/MtzrMA.",3938,0,1,goproglib
1762,2021-07-08 11:39:05+00:00,"Пишем интерактивное CLI-приложение с помощью **Go, Cobra и promptui.

**https://proglib.io/w/c699adb8",4846,0,0,goproglib
1760,2021-07-07 18:01:38+00:00,"[​](https://telegra.ph/file/bdc89c7ba463d3a2fa190.jpg)  **ebiten** — это игровая библиотека с открытым исходным кодом для Go. 

Простой API Ebiten позволяет быстро и легко разрабатывать 2D-игры, которые можно развертывать на нескольких платформах.

На данный момент библиотека быстро развиваются и постоянно обновляется, а недавно разработчики объявили о поддержке [Nintendo Switch](https://proglib.io/w/29d68b05). 

⭐️ 4733

[Репо](https://proglib.io/w/5612f212)
[Сайт](https://proglib.io/w/0fc96cf6)",3841,0,0,goproglib
1759,2021-07-07 15:01:08+00:00,"Продолжаем следить за конкурсами с денежными призами. «Цифровой прорыв» совместно с Mail.Ru Group запускают IT-чемпионат по ML, AI и Data Science. Есть три задачи:

- Модель прогноза средних цен и объемов потребления товаров (ФНС России и Росстат)
- ИИ для поиска самолетов на снимках местности при проведении поисково-спасательных операций (Росавиация)
- ИИ для распознавания категории предмета музейного фонда (Минкультуры России)

Как видите, задачи практичные и важные, на решение дается целый месяц — с 14 июля по 14 августа. В каждой из трех задач есть 25 призовых мест, за первое место дают 100 тыс. ₽. Регистрация и  подробности здесь: https://proglib.io/w/29e7f01f",3624,0,0,goproglib
1758,2021-07-06 14:50:04+00:00,"Если Spotify, то только **spotify-cli ** ** .

**https://proglib.io/w/cf24b43f",4262,0,0,goproglib
1757,2021-07-05 17:16:21+00:00,"Видеозаписи докладов с майской конференции **GopherCon Europe**.

https://proglib.io/w/8d6f444b",4070,0,0,goproglib
1756,2021-07-04 07:01:10+00:00,"**Обработка сигналов Unix в Golang**

**Сигнал в операционных системах семейства Unix** — это асинхронное уведомление процесса о каком-либо событии, один из основных способов взаимодействия между процессами. В статье рассматривается процесс обработки сигналов Unix с помощью пакета `os/signal`.

https://proglib.io/w/8b4f8c0c",5508,0,0,goproglib
1755,2021-07-03 11:34:23+00:00,"**Знакомимся с шаблоном конвейерной обработки в Go** (часть 1)

Идея шаблона в том, что вы можете разбить логический функционал на этапы. Каждый этап выполняет свою собственную обработку и передает вывод на следующий этап для обработки. Вы можете изменять этапы независимо друг от друга, ограничивать количество этапов и т. д.

https://proglib.io/w/d1782531",4165,0,1,goproglib
1754,2021-07-02 19:02:23+00:00,"Интересное интервью с основателем [Pion](https://twitter.com/_pion) (набор проектов WebRTC на основе Go) Шоном Дюбуа.

https://proglib.io/w/45ebe912",4067,0,0,goproglib
1753,2021-07-02 15:28:51+00:00,"Три кейса с примерами, которые позволят писать эффективные приложения на Go.

https://proglib.io/w/1094164f",5074,0,5,goproglib
1750,2021-07-01 16:15:32+00:00,"Руководство по реализации базовой HTTP-аутентификации в Go.

https://proglib.io/w/af0ff15c",4976,0,0,goproglib
1749,2021-06-30 17:17:45+00:00,"[​](https://d33wubrfki0l68.cloudfront.net/6db5c291388cac57c5b06197bf1e91ea1a7854eb/a18ca/author/gonum-numerical-packages/avatar_hu33264c3421bfcf805f7b358683ee5338_68723_270x270_fill_lanczos_center_2.png) **gonum** — это обширный набор пакетов, предназначенных для упрощения разработки математических алгоритмов.

⭐️ 4971

[Репо](https://proglib.io/w/320ad576)
[Сайт](https://proglib.io/w/bdd241fe)",3905,0,4,goproglib
1748,2021-06-30 11:34:57+00:00,"[​](https://telegra.ph/file/641a0610d5bbe5a42ff75.jpg)Кругом только и слышно, что об искусственном интеллекте, машинном обучении, Data Science... Но как начинаешь разбираться, нужна серьёзная математическая подготовка на уровне вуза. Мы пригласили опытных преподавателей МГУ помочь нашим читателям подготовиться к карьере дата сайентиста.

В наборе всё, что нужно: мат. анализ, линейная алгебра, комбинаторика, теория вероятностей и мат. статистика. Кстати, именно такой багаж знаний требуют от абитуриентов ШАД. Каждая тема сопровождается подготовительными материалами, лекциями и практическими заданиями. Всё это с обратной связью кураторов и преподавателей.

Полная программа курса и прочая информация здесь: [https://proglib.io/w/79f5506f](https://proglib.io/w/79f5506f) 
**Специально для наших подписчиков скидка 15% по промокоду GO
**Поспешите, осталось всего 9 мест.",3679,0,0,goproglib
1747,2021-06-29 11:31:54+00:00,Кураторский список воркшопов по Go: https://proglib.io/w/3500b700,3951,0,0,goproglib
1746,2021-06-28 17:00:28+00:00,Советы по уменьшению распределения памяти в Go: https://proglib.io/w/e28e52ea,3833,0,1,goproglib
1745,2021-06-27 09:56:56+00:00,"В Go доступно множество инструментов для обеспечения качества кода, и они могут быть напрямую включены в ваш редактор или IDE.

Существуют определенные шаги, которые можно выполнить, независимо от того, где написан ваш код. Они сделают код чистым, читабельным и поддерживаемым, что так важно при работе в команде и ведении долгосрочного проекта.

https://proglib.io/w/8260874a",4290,0,0,goproglib
1744,2021-06-26 10:43:48+00:00,"[Go Language Collective](https://stackoverflow.com/collectives/go) —
официальный канал Q&A по языку Go от Google. О целях и преимуществах Go Collective читайте в статье.

https://proglib.io/w/0e867029",3755,0,0,goproglib
1743,2021-06-25 13:01:19+00:00,"**История о том, как разработчики Vagrant переходили на кодовую базу Go с Ruby**

Vagrant — свободное и открытое программное обеспечение для создания и конфигурирования виртуальной среды разработки. Теперь Vagrant будет поддерживать не только старые среды разработчиков, но и новые рабочие процессы, среды и экосистемы разработки. О текущем состоянии и планах разработки Vagrant читайте в статье.

https://proglib.io/w/08dd87dc",4070,0,0,goproglib
1742,2021-06-25 09:49:26+00:00,"[​](https://telegra.ph/file/700fee3f1c7c9ec55c880.jpg)Хотите освоить GO на уровне middle? Ozon приглашает миддлов с опытом разработки от 2-х лет на бесплатный курс ""Быстрый переход на Go"".

Совсем недавно ребята выпустили первый поток, небольшой отчет об этом у них в аккаунте @goschoolozon. Сейчас новоиспеченные go-разработчики проходят собеседования и получают офферы от Ozon. 

Ozon на этом не останавливается и активно ведет набор на 2-й поток школы GO!

Всего за 1 месяц  под руководством опытных наставников вы освоите GO.
Научитесь разрабатывать highload-сервисы, познакомитесь с микросервисной архитектурой и лучшими практиками работы с хранилищами данных. 

Обучение бесплатно, проходит онлайн. После успешного окончания курса получите не только знания и навыки, но и оффер от Ozon.

Прием заявок до 9 июля: https://ozon.ru/t/H41vP",3857,0,4,goproglib
1741,2021-06-25 05:01:37+00:00,"[​](https://github.com/six-ddc/plow/blob/main/demo.gif?raw=true) **plow** — это высокопроизводительный инструмент для тестирования HTTP(S) с веб-интерфейсом в реальном времени и возможностью отображения в терминале.

https://proglib.io/w/bd2d8bbd",4074,0,0,goproglib
1737,2021-06-24 15:01:54+00:00,"Golang — это простой, быстрый и удобный язык программирования, с помощью которого можно писать сложные программы. Познакомьтесь с Go-разработкой на практике и освойте один из востребованных языков на бесплатном онлайн-интенсиве 28–30 июня! Начало — в 21:00 по московскому времени.

Регистрируйтесь по ссылке: https://clc.am/u4M8EQ.


За 3 дня вы:

 изучите основы языка Golang;
 научитесь работать с популярными библиотеками;
 познакомитесь с синтаксисом и основными функциями Golang;
 создадите многофункционального бота для Telegram и добавите проект в портфолио.

Практические занятия будет вести Валерий Кабисов — Senior Golang Developer с 11-летним опытом в веб-разработке.
 
 Дойдите до конца интенсива и получите в подарок электронную книгу Шона Эйкора «Большой потенциал». А если выполните домашнее задание — сертификат на 15 000 рублей на любой курс Skillbox!",3539,0,0,goproglib
1736,2021-06-23 16:59:35+00:00,"[​](https://telegra.ph/file/426d821cac7aaa455623c.jpg)Лонгрид про автоматизацию подачи показаний счетчика с помощью Go + C на программной стороне и следующего железа:
 
- [Счетчик тепла](https://www.diehl.com/metering/en/products-services/thermal-energy-metering-/thermal-energy-metering-product/sharky-774-compact/71466/) с поддержкой M-Bus
- [Raspberry Pi 2](https://www.raspberrypi.org/products/raspberry-pi-2-model-b/) с установленной [Raspberry Pi OS](https://www.raspberrypi.org/software/operating-systems/#raspberry-pi-os-32-bit)
- M-Bus master устройство
- Wi-Fi реле Sonoff s20

https://proglib.io/w/7c71dea3",3646,0,0,goproglib
1735,2021-06-22 19:11:21+00:00,"[​](https://telegra.ph/file/caf33d97f49da7155e5d9.jpg)Учимся автоматически выпускать двоичные файлы Go с помощью Github Actions.

https://proglib.io/w/3b358ebc",4656,0,2,goproglib
1730,2021-06-21 15:01:24+00:00,"Пройдите курс и через 4 месяца вы сможете выдвинуть свою кандидатуру на позицию middle-разработчика! 
⠀
Во время обучения вы: 
получите практику разработки микросервисной архитектуры приложения;
освоите оптимизацию запросов к базам данных;
научитесь использовать фреймворк Django для миграций;
узнаете, как правильно анализировать ошибки;
сможете собирать метрики с сервиса для оценки его работы.

Обучение проходит онлайн в удобное для вас время, достаточно выделять 3–5 часов в неделю. При помощи опытных наставников вы разработаете три самостоятельных проекта:
 поисковый движок;
 управление аккаунтами;
 хранение и мониторинг данных. 

Итогом вашей работы на курсе станет большое приложение — аналог IMDb, которое вы напишете вместе с командой..
Регистрируйтесь по ссылке: https://clc.am/uFDz4Q",3248,0,7,goproglib
1729,2021-06-21 13:27:06+00:00,"Руководство по работе с [go-feature-flag](https://github.com/thomaspoignant/go-feature-flag) — модулем, предназначеннным для простого управления вашими флагами, которые, в свою очередь, предназначены для помощи командам разработки в изменении поведения системы без изменения кода. Иными словами, флаги функций, помогают быстро, но безопасно предоставлять пользователям новые функции. 

Если вы не знакомы с концепцией флагов функций (переключателей функций), смело начинайте [с данной статьи](https://www.martinfowler.com/articles/feature-toggles.html).

https://proglib.io/w/f61d2f35",4455,0,0,goproglib
1728,2021-06-20 19:23:14+00:00,У популярного веб-фреймворка [Gin](https://proglib.io/w/ce98a541) новый логотип ,3607,0,7,goproglib
1727,2021-06-20 17:34:09+00:00,"**Go In 5 Minutes** — это серия не самых новых, но полезных скринкастов по Go на практике.

https://proglib.io/w/a18ee3dc",3884,0,0,goproglib
1726,2021-06-19 12:27:16+00:00,"Встраивание приложений Vue.js в Go с помощью `embed`.

https://proglib.io/w/c49cb146",4116,0,0,goproglib
1724,2021-06-18 18:00:23+00:00,Практика работы с Redis в Go: https://proglib.io/w/2dbfd7d6,4753,0,1,goproglib
1722,2021-06-18 12:59:00+00:00,"Javad Rajabzade, инженер-программист в Mawson inc, делится стратегией управления проектами в Go.

https://proglib.io/w/6693137c",3455,0,0,goproglib
1721,2021-06-18 11:53:55+00:00,"Привет! Проводим исследование, чтобы помочь программистам быстрее находить вакансии, релевантные их навыкам и запросам.

Присоединяйтесь — опрос займет не более 5 мин:  https://proglib.io/w/fa68107d
Заинтересованным участникам вышлем ссылку на результаты.",2964,0,0,goproglib
1720,2021-06-17 18:34:49+00:00,"[​](https://telegra.ph/file/23257ef15675f41d7bdd9.jpg) **firebolt** — фреймворк для потоковой обработки событий и приложений конвейера данных.

Firebolt поддерживается DigitalOcean, где впервые использовался в конвейере журналирования (см. прикрепленную схему). 

Фреймворк предназначен для решения ряда проблем, которые являются общими для приложений конвейера данных, работающих в режиме, близком к реальному времени. Он упрощает запуск кластерного приложения, которое предсказуемо масштабируется для обработки больших объемов данных.

https://proglib.io/w/bb1e6abb",3601,0,0,goproglib
1716,2021-06-16 14:08:20+00:00,"Пишем десктопное Tray / GUI приложение на Go 1.16+.

https://proglib.io/w/d819dea8",3590,0,0,goproglib
1715,2021-06-16 09:43:15+00:00,"#вакансия #работа #job #Петербург #Go #офис #частичнаяудаленка 

**Middle Go разработчик

Компания: **[Selectel](https://selectel.ru/) 
**Заработная плата:** от 140 000 руб. на руки
**Занятость:** полная
**Формат:** офис, возможна частичная удаленка

**Проект:** IAM (Identity and Access Management) – система управления жизненным циклом учетных записей, ролями и доступами к различным сервисам/апишкам в компании.
**Основные задачи**: разрабатывать IAM, участвовать в обсуждении технических этапов для интеграции и взаимодействия сервисов соседних отделов, ревьюить код коллег, тесно работать с проектировщиками, тестировщиками и фронтами.
**Стек:** Golang, Python от 3, MySQL/PostgreSQL.
**Будет плюсом - **Опыт работы с Keycloak и/или Openstack Keystone, понимание концепций DevOps, CI/CD.

**Почему Selectel: 
**• Белая зарплата, официальное оформление
• Годовая премия по результатам работы
• Бесплатные обеды, ДМС + стоматология, 50% оплата абонемента в фитнес-клуб, ежемесячная надбавка за некурение, регулярные спортивные мероприятия (турниры по пейнтболу, картингу, «Гонка героев», киберспорт, футбол, волейбол, баскетбол)
• Возможность участия в конференциях, полный доступ в онлайн-библиотеку, корпоративный английский и испанский
• Гибкое начало рабочего дня (до 12:00)
• Офис в 10 мин. пешком от ст. м. Московские ворота, своя авто- и велопарковка

Подробное описание вакансии [тут

](https://selectel.ru/careers/all/vacancy/44774021/)Присылайте резюме на @ev_molchanova или molchanova.e@selectel.ru",3404,0,0,goproglib
1714,2021-06-15 19:16:08+00:00,Практика использования `go:embed` в GoLand: https://proglib.io/w/e6c89211,3519,0,0,goproglib
1713,2021-06-15 05:38:07+00:00,"Сборник гайдлайнов по дизайну и проектированию CLI-интерфейсов.

https://proglib.io/w/5bf9e54f",3178,0,1,goproglib
1712,2021-06-14 14:51:46+00:00,"#tip 

Go 1.17 поддерживает комментарий о том, что модуль устарел.

В файл `go.mod` необходимо добавить строку «//Deprecated: комментарий». Например:

go.mod
----
`//Deprecated: Используйте https://github.com/… вместо него`
----

Сообщение об устаревшем модуле будет отображаться при извлечении с помощью `go get`.",3661,0,43,goproglib
1711,2021-06-14 09:00:17+00:00,"Мобильная разработка — интересное и перспективное направление для профессионального развития в сфере IT. Приходите на бесплатный интенсив — познакомьтесь с востребованной профессией и создайте своё первое приложение, работающее на Android и iOS. 

Регистрируйтесь по ссылке: ️ https://clc.am/HAIZXw

За 3 дня вы:

️ познакомитесь с кросс-платформенной разработкой в сфере IT; 
️ разберётесь в специфике мобильной разработки; 
️ начнёте работать с фреймворком Flutter;
️ напишете приложение;
️ научитесь парсить данные и визуализировать результат.


 Вашим наставником будет Денис Александров — ведущий разработчик Arcadia. Под его руководством вы создадите своё первое приложение и поработаете над ошибками. 

 Все, кто дойдёт до финиша, получат в подарок электронную книгу Кей Петерсон и Дэвида Колба «Век живи — век учись». А те, кто сдаст все домашние задания, — сертификат на 15 000 рублей для поступления на любой курс образовательной платформы Skillbox!",3639,0,1,goproglib
1710,2021-06-14 06:00:25+00:00,"Описание некоторых малоизвестных особенностей и функций Go, о которых вы можете не знать.

https://proglib.io/w/2b92f246",5029,0,1,goproglib
1709,2021-06-13 07:01:01+00:00,"** task** — это инструмент запуска / сборки задач, который является достойной альтернативой [GNU Make](https://www.gnu.org/software/make/). 

Вот только некоторые преимущества: 

- простая конфигурация и установка;
- поддержка зависимостей между задачами;
- режим просмотра;
- пропуск заданий, когда файл не был изменен;
- доступность для CI;
- кроссплатформенность и многое другое.  

⭐️ 3448

https://proglib.io/w/c7f4426c",3673,0,0,goproglib
1708,2021-06-12 13:16:40+00:00,"[​](https://telegra.ph/file/84e08faebd970e0e14643.jpg)#tip 

В пакете `exec` есть тип `ExitError`, который можно использовать для поиска кода завершения команды.",3723,0,6,goproglib
1706,2021-06-11 11:22:06+00:00,"**Excelize **— библиотека, предоставляющая набор функций, которые позволяют записывать и читать файлы XLSX / XLSM / XLTM / XLTX. 

Библиотека поддерживает сложные компоненты за счет высокой совместимости и предоставляет API для создания или чтения данных с листа с огромными объемами данных. Для этой библиотеки требуется Go >= 1.15.

⭐️ 8828

https://proglib.io/w/dcfc0cbf",3950,1,4,goproglib
1705,2021-06-10 19:00:57+00:00,"Есть здесь Node.js-разработчики? Если думаете в сторону Go, то обратите внимание на шпаргалку по языку .

https://proglib.io/w/d114e158",3962,0,2,goproglib
1704,2021-06-10 17:35:48+00:00,"[​](https://telegra.ph/file/34e220b6fb1ebb59327f2.jpg)#news 

А вот и версия Go 1.17 Beta 1 релизнулась: https://proglib.io/w/6e67303d",3770,0,2,goproglib
1703,2021-06-10 14:57:00+00:00,"**«Библиотека программиста» ищет продюсера онлайн-курсов

**Нам требуется специалист с опытом запуска курсов от 1 года и широким кругозором в IT (высшее образование в IT будет плюсом). В обязанности продюсера будет входить развитие направление онлайн-курсов по Data Science, Frontend, Backend, Mobile, DevOps, QA, IoT и IT для не айтишников. Мы предлагаем фиксированный оклад 80 000 рублей и премии в размере 10% выручки от продаж. Офис компании находится в 10 минутах пешком от м. Таганская (Москва). Должность предполагает полную занятость с возможностью частично удаленного формата работы. 

Подробное описание вакансии читайте на [сайте](https://proglib.io/vacancies/prodyuser-onlayn-kursov-biblioteka-programmista-2021-06-10).",3610,0,0,goproglib
1702,2021-06-09 16:45:44+00:00,"Иван Стрелков, бэкенд-разработчик в Ozon, рассказывает небольшую историю проблемы, вызванную неправильной настройкой пула соединений в Go.

https://proglib.io/w/f94c0444",5233,0,2,goproglib
1701,2021-06-09 06:22:30+00:00,Go 1.16.5 и 1.15.13 релизнулись: https://proglib.io/w/0ffd54a9,3852,0,0,goproglib
1700,2021-06-08 19:05:49+00:00,"Разбираем фундаментальные основы Go на практике.

 [Смотреть](https://proglib.io/w/7a64aca9)",3885,0,0,goproglib
1699,2021-06-08 15:01:50+00:00,"Прояви свои цифровые таланты на новом хакатоне Цифрового Прорыва по теме ""Медицина, здравоохранение, наука"".

Регистрируйся сейчас по ссылке: https://proglib.io/w/8d9fced6
⠀
18 - 20 июня у тебя будет шанс:
⠀
 Разработать решение для Ростелекома, СБЕР AI, Университета Лобачевского & EPAM, iHerb, Правительства ЯНАО, МИАЦ и других.
 Познакомиться с признанными экспертами IT-отрасли.
 Поучаствовать онлайн или на оффлайн-хакаточках в Москве, Санкт-Петербурге, Нижнем Новгороде, Волгограде, Саратове, Новороссийске, Курске, Черкесске, Дубне и др.
 Выиграть хакатон и попасть в финал конкурса.
⠀
Общий призовой фонд до 4,5 млн. ₽, по 3 призовых места на каждый из 6 кейсов.

Приглашаем программистов, дизайнеров, аналитиков, тестировщиков, продактов, питчеров и других желающих развиваться в IT. Актуально как для новичков, так и для профи!
⠀
Участвуй в главном хакатоне июня 2021 года!",3782,0,5,goproglib
1698,2021-06-07 06:00:19+00:00,"Разбираем преимущества и практические кейсы использования Go.

https://proglib.io/w/fe055208",4053,0,0,goproglib
1697,2021-06-06 07:21:47+00:00,"Разбираемся с подключением нескольких версий Go в свой проект.

https://proglib.io/w/a3923f73",4003,0,0,goproglib
1696,2021-06-05 08:38:48+00:00,"**Go-sqlmock** — sql mock драйвер для проверки взаимодействия с базой данных. Цель инструмента заключается в имитации любого поведения драйвера sql в тестах без необходимости реального подключения к базе данных. Это помогает поддерживать правильный рабочий процесс TDD.

https://proglib.io/w/5b221d02

[Небольшая статейка](https://proglib.io/w/34e62415) на русском о работе с go-sqlmock.",4250,0,4,goproglib
1695,2021-06-04 12:00:41+00:00,"[​](https://telegra.ph/file/2e8e21ca855207bb12e8b.jpg) **Исключения в Go – это легко?**

В Go (Golang) нет специального механизма обработки исключений, и создатели языка не собираются его добавлять. Попробуем разобраться, хорошо это или плохо и как лучше разрешать проблемные ситуации в приложениях.

https://proglib.io/sh/Z183Oncbwg",5132,0,5,goproglib
1694,2021-06-04 07:00:21+00:00,"#news 

GoLand 2021.2 EAP [уже открыта](https://proglib.io/w/f59eeaf1). Ознакомиться с дорожной картой можно [здесь](https://proglib.io/w/ad47c19d).",3888,0,31,goproglib
1693,2021-06-03 05:57:03+00:00,"Разбираемся на практике с тем, как правильно использовать ключевое слово `defer` в Go.

https://proglib.io/w/919c57c2",5141,0,0,goproglib
1692,2021-06-02 10:01:39+00:00,"[Pre-Commit-GoLang](https://proglib.io/w/9c685fb5) — репозиторий, включающий набор git pre-commit хуков для Golang с поддержкой модулей.

К слову сказать, в версии 0.8.3 [появилась](https://github.com/TekWizely/pre-commit-golang/releases/tag/v0.8.3) поддержка линтера revive, а [здесь](https://dev.to/s0xzwasd/configure-revive-go-linter-in-goland-2ggl) можно почитать про настройку revive в GoLand.",5147,0,0,goproglib
1691,2021-06-01 19:46:43+00:00,#humor,3905,0,64,goproglib
1690,2021-06-01 18:01:06+00:00,"Расшифровка доклада Дениса Исаева на GopherCon Russia 2019 о линтерах в Go.

https://proglib.io/w/b3e3a372",4898,0,0,goproglib
1688,2021-05-31 18:47:48+00:00,"[​](https://telegra.ph/file/29b7137ac85fd1653122c.jpg)#tip 

Пакет `http` имеет полезную вспомогательную функцию `Error`, которую можно использовать для ответа на запрос с указанным сообщением об ошибке и кодом HTTP.",3758,0,29,goproglib
1687,2021-05-31 07:02:39+00:00,"Шпаргалка по инструментам для повышения производительности Go.

https://proglib.io/w/662b9991",4959,0,0,goproglib
1685,2021-05-30 18:01:23+00:00,"Noti — инструмент, предназначенный для отслеживания процесса и запуска уведомлений.

https://proglib.io/w/a46790a6",3663,0,0,goproglib
1684,2021-05-30 15:01:43+00:00,"«Лаборатория Касперского» открывает набор на стажировку SafeBoard. Это отличная возможность бодро начать карьеру в IT еще до окончания вуза  — успей [подать заявку](https://kas.pr/1f8v).

Главное о стажировке: 
• Проходит в московском офисе и открыта для студентов любых ВУЗов и курсов;  
• Совместима с учебой — гибкий график 20 часов в неделю. Можно и больше, если есть желание и возможность: до 35 часов — в учебное время, до 40 часов — летом. 
• Длится год;
• Оплачивается (а еще стажерам ежемесячно компенсируют расходы на питание, предоставляют бесплатный unlim-доступ к спортзалу и ко всем открытым мероприятиям).

Набор ведется на направления:
• Разработка (С++);
• Разработка (C#/Python/Go);
• Разработка (Scala/Java/Python/Go);
• Тестирование (Python/ручное);
• Системный анализ;
• Системное администрирование;
• Mobile;
• Data Science;
• Анализ вредоносного ПО;
• Пентест.

Лучшие участники получат приглашение на работу.

Подать заявку: https://kas.pr/iuh5",3806,0,10,goproglib
1683,2021-05-30 08:01:23+00:00,"10 заповедей для Go-разработчиков от преподавателя и автора книг [Джона Арундела](https://bitfieldconsulting.com/about).

https://proglib.io/w/7bddfae7",3838,0,0,goproglib
1682,2021-05-29 09:53:33+00:00,"Зачем в вашем веб-приложении может понадобиться отменить запрос к базе данных? На ум приходят два сценария:

1. Когда запрос выполняется намного дольше, чем ожидалось. 
2. Когда клиент неожиданно уходит до завершения запроса.

О том, как управлять тайм-аутом базы данных, как отменить запросы к базе данных в веб-приложении, о каких поведенческих особенностях и крайних случаях важно знать, расскажет статья.

https://proglib.io/w/83344de1",3859,0,0,goproglib
1680,2021-05-28 11:53:12+00:00,"Использование определенного языка в многочисленных проектах в течение длительного периода времени позволяет делать ошибки, исправлять их, осознавать, что это все еще не лучший способ реализации, исправлять их снова и в целом становиться лучше.

Автор статьи в течение нескольких лет работал с Go и в статье как раз обсуждает некоторые из ошибок и уроки, которые он извлек, пытаясь исправить их в будущих проектах.

https://proglib.io/w/98fe31e0",3804,0,0,goproglib
1679,2021-05-27 18:27:30+00:00,"**Будущее функционального программирования в Go 1.18 с дженериками**

[Ожидается](https://blog.golang.org/generics-proposal), что с выходом Go 1.18 в начале 2022 года в язык будут добавлены дженерики, которые позволят реализовать на Go новые виды решений функционального программирования.

Автор статьи освещает вопросы функционального программировании, делает обзор современного ландшафта функционального программирования на Go и рассказывает о функциях, запланированных в Go 1.18, и о том, как они могут обеспечить функциональное программирование.

https://proglib.io/w/0b1bbf28",3799,0,0,goproglib
1678,2021-05-27 06:42:27+00:00,"Пришло время подвести итоги конкурса на лучший контент #proglib_contest. Искренне благодарим всех, кто принял активное участие, без вашей поддержки конкурс бы не получился.

Победителем канала @goproglib становится автор поста  — барабанная дробь  — https://t.me/goproglib/1666.

Победитель определен по количеству лайков под постом среди других конкурсных сообщений. За победный пост автор получает 20 000 ₽. В ближайшее время мы свяжемся с победителем и отправим приз — оставайтесь на связи.

Спасибо, что читаете нас! ",3729,0,0,goproglib
1677,2021-05-26 10:06:26+00:00,"**Pogreb **— пакет, реализующий встроенное key-value хранилище, предназначенное для рабочих нагрузок с большим количеством операций чтения.

756 ⭐️

https://proglib.io/w/d47329b6",3903,0,23,goproglib
1676,2021-05-25 12:00:33+00:00,"Знакомство с `errgroup` — пакетом, обеспечивающим синхронизацию, обработку ошибок и отмену контекста для групп горутин, работающих над подзадачами.

Другими словами, вы можете использовать этот пакет в сценариях, где обычно используется `sync.WaitGroup`, но он также заботится о передаче контекста подзадачам и автоматической обработке ошибок.

https://proglib.io/w/ff9dc3d2",3828,1,0,goproglib
1673,2021-05-24 07:01:55+00:00,"**Go-getter **— это библиотека, предназначенная для загрузки файлов или каталогов из различных источников с использованием URL-адреса в качестве основной формы ввода.

Библиотека позволяет загружать файлы из различных источников (пути к файлам, Git, HTTP, Mercurial и т. д.) с использованием одной строки в качестве входных данных. Это избавляет разработчика от необходимости знать, как выполнять загрузку из различных источников.

https://proglib.io/w/0370f589",3858,0,2,goproglib
1672,2021-05-23 18:43:36+00:00,"Практика обнаружения утечек горутин с помощью Semgrep — open source инструмента статического анализа, который использует определяемые пользователем шаблоны для поиска проблем в коде.

https://proglib.io/w/8b2bb9ce",4793,0,0,goproglib
1671,2021-05-23 15:01:29+00:00,"ВТБ ищет специалиста на поцизицю — Сlient Journey Expert 
Банк взамен гарантирует конкурентную зарплату, топовую мед.страховку и постоянное профессиональное обучение.
Что нужно делать?
•  формировать общее видение продукта, строить аналитику;
•  исследовать рынок и оцифровывать потребности клиентов;
•  предлагать улучшения бизнес-процессов;
•  знать все современные методы исследования рынка;
•  иметь навыки работы с аналитическими инструментами (Visio, Business Studio, Miro)
Подробное описание вакансии – по ссылке: https://www.vtbcareer.com/vacancy/789085/.",3625,0,0,goproglib
1670,2021-05-23 09:46:44+00:00,"[​](https://telegra.ph/file/f8d8df40b114324cd17f9.jpg) **Параллельное программирование в Go
**
Изучаем основы параллельного программирования в Go, а также пытаемся разобраться на примерах, почему конкурентность в Go – это не совсем параллелизм.

https://proglib.io/sh/OQI6kqYltE",5061,0,0,goproglib
1669,2021-05-22 19:32:46+00:00,"Подходит к концу эпический конкурс на самый интересный контент в телеграм-каналах Библиотеки программиста. Посты собирают всё больше откликов — спасибо за ваши старания!

У всех, кто хотел поучаствовать, остался последний шанс побороться за 20 000 ₽ в каждом из каналов: @progbook, @proglibrary, @pyproglib, @frontendproglib, @javaproglib, @dsproglib, @phpproglib, @cppproglib, @mobileproglib, @goproglib, @csharpproglib, @devopsslib, @testerlib, @hackproglib. Общий призовой фонд 280 000 ₽.

**До полуночи примем последние посты** — в некоторых каналах шансы на победу всё ещё высокие. Лайфхак: эти каналы нетрудно вычислить по хэштегу #proglib_contest .

**Напоминаем, как участвовать**: пишем анонс до 700 знаков к любой актуальной айтишной статье 2020-21 годов или рецензию книги для @progbook. Отправляем получившийся текст и название канала боту @proglib_contest_bot. Чей  пост в канале наберёт больше откликов, тот и выиграл. 

Через три дня подведем итоги и огласим список победителей. Юридическая информация: https://proglib.io/best-post-contest.",3524,0,0,goproglib
1668,2021-05-22 18:01:13+00:00,"[​](https://telegra.ph/file/e96efe743fc6f5bcb55cf.jpg)#proglib_contest 

**Как работает пул буферов: реализация на Go**

Bruno Calza, бразильский инженер-программист в Arquivei, глубоко погрузился в изучение того, как базы данных эффективно перемещают данные на диск и с него.

В данной статье он начинает с обзора того, как данные структурированы на диске, затем объясняет принцип работы диспетчера пула буферов и представляет реализацию на Go.

https://proglib.io/w/6c1f98f8",3707,0,0,goproglib
1667,2021-05-22 15:43:38+00:00,"[​](https://telegra.ph/file/d389cc37dcbcae634d29b.jpg)**#proglib_contest**

**10 лучших книг по Go**

Книги по языку Go с лучшими оценками читателей. Расставлены в порядке возрастания сложности, обобщены указанные читателями преимущества и недостатки.

https://proglib.io/w/7be51898",3980,0,0,goproglib
1666,2021-05-22 06:31:30+00:00,"[​](https://telegra.ph/file/8bd05ec74329244c4b27e.jpg)#proglib_contest

**Go-Callvis** — это инструмент, помогающий визуализировать график вызовов программы Go с помощью интерактивного представления. 

Цель инструмента заключается в предоставлении разработчикам визуального обзора программы Go с использованием данных из графа вызовов и его отношений с пакетами и типами. Это особенно полезно в больших проектах с высокой сложностью кода или когда вы просто пытаетесь понять чужой код.

https://proglib.io/w/3be4aba8",4051,0,0,goproglib
1665,2021-05-21 14:58:07+00:00,"Подробное руководство по работе с датой и временем в Go.

https://proglib.io/w/32d48492",4785,0,0,goproglib
1663,2021-05-20 19:16:29+00:00,"[​](https://telegra.ph/file/a330bff6a865edf88ea42.mp4)#tip

В VSCode есть команда, позволяющая генерировать модульные тесты для файла Go. К нему можно получить доступ, используя «Cmd + Shift + P» и набрав «Generate Unit Tests For File». Для работы данной функции требуется наличие пакета [gotests](https://proglib.io/w/086da426).",4309,0,6,goproglib
1662,2021-05-20 17:16:12+00:00,"[Juan Christian](https://dev.to/hotpotatoc), 17-летний индонезийский программист-самоучка, написал клон Twitter с помощью Go + Vue 3 + Vite + TailwindCSS + PostgreSQL + Redis. Проект разработан исключительно в образовательных целях и включает лишь основные компоненты Twitter. Как вам?

https://proglib.io/w/1ec97fb2",3975,0,0,goproglib
1661,2021-05-19 16:02:03+00:00,"Базовое введение в работу с типом поля `Oneof` в `Protobuf`.

https://proglib.io/w/5988bb09",3855,0,0,goproglib
1660,2021-05-18 19:23:12+00:00,"**Gomponents** — это компоненты представления, написанные на чистом Go. Они преобразуются в HTML 5 и упрощают создание компонентов многократного использования. Таким образом, вы можете сосредоточиться на создании своего приложения, а не изучать еще один язык шаблонов.

https://proglib.io/w/7fcc768e",3988,0,3,goproglib
1658,2021-05-17 22:20:49+00:00,"Мы тут с ребятами думаем запустить курс в виде зум и/или оффлайн-встреч, часть курса запишем с топовыми психологами, поэтому если вам интересно, ответьте на 3 вопроса в нашей форме (оринтировочно это займет 2-3 минуты) 
https://forms.gle/nBJxwf9pFbYw3mNm9

**В форме нет обязательных вопросов.**",3709,0,0,goproglib
1657,2021-05-17 10:00:31+00:00,"Перевод статьи про применение пакета `atomic` в Go для решения конфликтов при блокировках.

https://proglib.io/w/1cc1f769",4989,0,1,goproglib
1656,2021-05-17 07:01:29+00:00,"[​](https://telegra.ph/file/641a0610d5bbe5a42ff75.jpg)Кругом только и слышно, что об искусственном интеллекте, машинном обучении, Data Science... Но как начинаешь разбираться, нужна серьёзная математическая подготовка на уровне вуза. Мы пригласили опытных преподавателей МГУ помочь нашим читателям подготовиться к карьере дата сайентиста.

В наборе всё, что нужно: мат. анализ, линейная алгебра, комбинаторика, теория вероятностей и мат. статистика. Кстати, именно такой багаж знаний требуют от абитуриентов ШАД. Каждая тема сопровождается подготовительными материалами, лекциями и практическими заданиями. Всё это с обратной связью кураторов и преподавателей.

Полная программа курса и прочая информация здесь: [https://proglib.io/w/79f5506f](https://proglib.io/w/79f5506f) 
**Специально для наших подписчиков скидка 15% по промокоду GO
**Поспешите, осталось всего 9 мест.",3598,0,0,goproglib
1655,2021-05-16 08:01:51+00:00,"**Go with the domain: Building modern business software in Go** (2021)

**Авторы**: Robert Lasczak, Miłosz Smółka

Книга от Three Dots Labs в основном включает материалы из [серии статей](https://t.me/goproglib/1553), посвященные созданию программного обеспечения для бизнеса и адаптированные под удобный книжный формат.

Для кого эта книга?

В большей степени для тех, кто имеет базовые знания Go и уже работал над некоторыми проектами. В идеале вы ищете шаблоны, которые помогут вам разрабатывать современные приложения.

Большинство идей в этой книге воплощаются в приложениях со сложными бизнес-сценариями. Некоторые из них имеют смысл в более простых случаях, а некоторые будут выглядеть слишком сложными, если их использовать в небольших проектах. Постарайтесь проявить прагматичность и выбрать лучший инструмент для работы.",5964,0,0,goproglib
1654,2021-05-15 12:15:23+00:00,Закулисье работы с модулями в Go: https://proglib.io/w/6233d39e,3663,0,1,goproglib
1653,2021-05-15 07:35:23+00:00,"Продлеваем на неделю конкурс #proglib_contest на самый интересный контент в телеграм-каналах Библиотеки программиста.

**Почему?** Мы выделили большой призовой фонд и хотим разыграть его среди активных читателей. Но пока мало кто успел поучаствовать. Смекалистые подписчики уже поняли: шансы выиграть очень высоки. За лучший пост в любом из телеграм-каналов Библиотеки программиста автор поста получит 20 000 ₽.

Каналов 14 штук, названия говорят сами за себя: @progbook, @proglibrary, @pyproglib, @frontendproglib, @javaproglib, @dsproglib, @phpproglib, @cppproglib, @mobileproglib, @goproglib, @csharpproglib, @devopsslib, @testerlib, @hackproglib. Таким образом, призовой фонд составляет 280 000 ₽.

**Очень простые условия**:
1) Найдите интересную и актуальную статью, вышедшую в 2020-21 годах, и напишите к ней анонс объемом до 700 знаков. Для @progbook можно написать рецензию на книгу.
2) Пришлите текст анонса и название целевого канала нашему боту @proglib_contest_bot.

Выиграет тот, чей пост в канале наберёт больше лайков/охватов/кликов по ссылкам. Юридическая информация: https://proglib.io/best-post-contest.",3174,0,0,goproglib
1652,2021-05-14 16:20:37+00:00,"**Go-cloud: Go Cloud Development Kit (Go CDK)** — **это **комплект разработки облачных приложений на Go, позволяющий беспрепятственно развертывать облачные приложения в любой комбинации облачных провайдеров. 

Он делает это, предоставляя стабильные идиоматические интерфейсы для общих целей, таких как хранилище и базы данных.

https://proglib.io/w/94065a0b",3564,0,0,goproglib
1651,2021-05-14 09:01:41+00:00,"[​](https://telegra.ph/file/3a3a491098030c4bd6965.jpg)**Есть опыт и знания в IT, которыми Вы хотите поделиться?**

Станьте автором технических статей вместе с Proglib и получайте достойное вознаграждение!
 
Библиотека программиста приглашает к сотрудничеству внештатных авторов, 
которые хотят поделиться знаниями, пропиарить свой авторский блог или просто заработать. 
Мы предлагаем удаленную работу, гибкий график, возможность зарабатывать до 12к за статью и выплаты 2 раза в месяц. 
Мы не ограничиваем в количестве статей.
Постоянным авторам предусмотрены премии за лояльность. 

Интересующие направления для написания статей:

• Data Science, BigData и Machine Learning 
• Блокчейн 
• DevOps 
• Информационная и Кибербезопасность 
• Ruby on Rails 
• C / C++/ C# 
• Python 
• Java 
• Go разработка 
• Разработка игр 
• Android-разработка 
• iOS-разработка 
• Системная и бизнес аналитика 
• Тестирование ПО 
• Виртуальная реальность 
• 1С 
• Business Intelligence 
• Интернет вещей 
• Системы и сети 
• IT Management

Оставьте заявку на https://proglib.io/w/de2fccec и мы свяжемся с вами!",3450,0,1,goproglib
1649,2021-05-13 19:15:34+00:00,"#tip

Простой однострочник для запуска файлового сервера в текущем каталоге из интерфейса командной строки с помощью Go и [goexec](https://proglib.io/w/72f730ca)**.**

`goexec 'http.ListenAndServe(`:9080`, http.FileServer(http.Dir(`.`)))'`",3379,0,5,goproglib
1648,2021-05-13 17:34:47+00:00,"**Мини-курс по созданию компьютерных сетей на прикладном уровне от CryptoFun [ IT ]

**Первые несколько видеоуроков являются теоретическими, но при этом сопровождаются практикой на Go / C без привлечения сторонних библиотек и фреймворков. Затем следует практика с использованием фреймворка, разработанного автором видеоуроков.

- [Многоранговая](https://m.youtube.com/watch?v=evEcFUNp0fs&list=PLd-kTafWJCJMIrr7bBAaGTS053vhFcpnK&index=1)
- [Фреймворк gopeer (beta) ](https://m.youtube.com/watch?v=W38vr4ULgk4&list=PLd-kTafWJCJMIrr7bBAaGTS053vhFcpnK&index=2)
- [Одноранговая](https://m.youtube.com/watch?v=U_FekUI6xh0&list=PLd-kTafWJCJMIrr7bBAaGTS053vhFcpnK&index=3)
- [Разработка скрытых сетей](https://m.youtube.com/watch?v=x9zloO5gw2o&list=PLd-kTafWJCJMIrr7bBAaGTS053vhFcpnK&index=4)
- [HTTP сервер на чистом Си ](https://m.youtube.com/watch?v=E-V7xFsa-jw&list=PLd-kTafWJCJMIrr7bBAaGTS053vhFcpnK&index=5)
- [Криптовалюта с нуля](https://m.youtube.com/watch?v=mp3I1HtEKfU&list=PLd-kTafWJCJMIrr7bBAaGTS053vhFcpnK&index=6)

- [Разработка скрытых сетей](https://m.youtube.com/watch?v=rfAqGVnBzPQ&list=PLd-kTafWJCJMIrr7bBAaGTS053vhFcpnK&index=7)
- [Ядро (написание фреймворка](https://m.youtube.com/watch?v=rfAqGVnBzPQ&list=PLd-kTafWJCJMIrr7bBAaGTS053vhFcpnK&index=7))
- [Сервис электронной почты ](https://m.youtube.com/watch?v=5yhG1l6VWFo&list=PLd-kTafWJCJMIrr7bBAaGTS053vhFcpnK&index=8)
- [Разработка скрытых сетей ](https://m.youtube.com/watch?v=sI62idNVYQg&list=PLd-kTafWJCJMIrr7bBAaGTS053vhFcpnK&index=9)
- [Теория строения скрытых систем](https://m.youtube.com/watch?v=sI62idNVYQg&list=PLd-kTafWJCJMIrr7bBAaGTS053vhFcpnK&index=9)
- [HES приложение](https://m.youtube.com/watch?v=fCymnf6Ecfo&list=PLd-kTafWJCJMIrr7bBAaGTS053vhFcpnK&index=10) 
- [Абсолютная анонимность](https://m.youtube.com/watch?v=FmNgDeigoTg&list=PLd-kTafWJCJMIrr7bBAaGTS053vhFcpnK&index=11)",2936,0,2,goproglib
1646,2021-05-13 06:00:42+00:00,"#vacancy #mnogodeneg 

Для нашего проекта, который https://proglib.io, требуется опытный PHP-разработчик.

**Задачи**
- Доработка и улучшение функционала движка proglib.io;
- Развитие дополнительных сервисов(например, чат-боты в Telegram), позволяющих прокачивать сообщество вокруг Proglib;

**Требования**
- Знание php >= 7.3 и всех его возможностей;
- Опыт работы с mysql, навыки написания sql запросов;
- Опыт работы с nosql базами данных;
- Умение работать с кэшированием;
- Написание кода по современным стандартам разработки: статические анализаторы, метрики (phpmetrics, dephpend, deptrac), вменяемый code style;
- Опыт работы с очередями (кролик, beanstalkd), понимание принципа работы очередей: ретраи, стратегии обработки проваленных сообщений, таймауты и так далее;
- Умение писать надежный код, устойчивый к различным воздействиям: невалидные данные, неожиданные сбои и так далее;
- Знание паттернов проектирования и паттернов разработки: circuit breaker, outbox, message bus и другие;
- Быть в курсе за внедрение зависимостей, контейнер внедрения зависимостей, миддлвары, хуки, сериалайзеры данных, как все это работает вообще и во фреймворках в частности;
- Опыт написания тестов и желание их писать;
- Опыт работы с Symfony или отсутствие опыта работы с Yii, Codeigniter, Bitrix, WP будет плюсом.

**Условия**
- Стабильно растущий проект;
- Уютный офис на Таганке, возможность несколько дней работать на удаленке;
- Корпоративное питание;
- Весёлый дружелюбный коллектив и неформальная обстановка;
- Гибкий график, отсутствие дресс-кода;
- Лояльное руководство и возможность посещать профильные мероприятия за счёт компании;
- **Зарплата: 150-200 тыс. рублей**.

Для связи можно писать в телеграм: @theasder.",3621,0,5,goproglib
1645,2021-05-12 17:41:53+00:00,"Функциональные возможности и практические кейсы работы с пакетом `context` в Go.

https://proglib.io/w/b11c969c",3606,0,0,goproglib
1644,2021-05-12 05:56:22+00:00,"**Продолжаем** **конкурс на самый интересный контент в телеграм-каналах Proglib!
Призовой фонд — 280 тысяч рублей.** **Срок окончания конкурса — 15 мая**

Автор лучшего поста в отдельно взятом канале получает 20 тысяч рублей.
Мы упростили конкурс — теперь вам достаточно **найти интересную и актуальную статью 2020-2021 года**, написать к ней небольшой анонс (до 700 знаков) и прислать нам, тем не менее ваши идеи по другим форматам только добавляют + в общий зачет. Авторство можем указать по вашему желанию. В канале @progbook предлагаем отправлять рецензии на новые книги и старые актуальные.

**Полный список каналов:
**https://t.me/progbook
https://t.me/proglibrary
https://t.me/pyproglib
https://t.me/frontendproglib
https://t.me/javaproglib
https://t.me/dsproglib
https://t.me/phpproglib
https://t.me/cppproglib
https://t.me/mobileproglib
https://t.me/goproglib
https://t.me/csharpproglib
https://t.me/devopsslib
https://t.me/testerlib
https://t.me/hackproglib

Все посты будут с лайками и дизлайками и хэштегом #proglib_contest. Ссылки мы будем прогонять через наш сокращатель, будут браться в расчет лайки, дизлайки, охваты, клики по ссылкам. Чем больше лайков/охватов/кликов по ссылкам в публикации, тем больше шансов стать победителем в конкурсе. Присылайте посты боту @proglib_contest_bot с указанием, на какой канал идет публикация. [Юридическая информация здесь](https://proglib.io/best-post-contest).",10386,0,0,goproglib
1643,2021-05-11 18:16:24+00:00,"Шиджу Варгезе (архитектор консалтинговых решений, автор двух книг и наставник по языку Go в Индии) делится шестилетним опытом и некоторыми рекомендациями. 

Получился довольно качественный лонгрид, который освещает общие темы и практические кейсы работы с Go, поэтому пользу в данном материале найдут для себя как новички, так и профи.

https://proglib.io/w/9be53152",5064,0,0,goproglib
1641,2021-05-10 14:30:16+00:00,"#news 

Выпущены версии Go 1.16.4 и 1.15.12, которые включили исправление в соответствии с [новой политикой безопасности](https://proglib.io/w/7e4fbd4c).

Новые версии устраняют проблему, из-за которой `ReadRequest` и `ReadResponse` в `net/http` могут вызвать неустранимую панику при чтении очень большого заголовка (более 7 МБ на 64-разрядных архитектурах или более 4 МБ на 32-разрядных).

https://proglib.io/w/5009443f",3621,0,1,goproglib
1640,2021-05-10 11:01:32+00:00,"#proglib_contest

**Go Embed

**С релизом Go-1.16 среди прочих улучшений мы получили пакет под названием `embed`. В этом посте перечислены различные способы использования Go Embed для ускоренного создания приложений.

https://proglib.io/w/18787dc5",3730,0,0,goproglib
1639,2021-05-10 07:00:19+00:00,"**Результаты опроса разработчиков Go в 2020 году:
**
** **Сокращённая версия, в которой упор сделан на более конкретные вопросы, касающиеся разработки в облаке. [Читать](https://proglib.io/w/61de2baf)
 Полная версия. [Читать](https://proglib.io/w/60c32a46)",3467,0,0,goproglib
1638,2021-05-09 07:01:15+00:00,[​](https://telegra.ph/file/d81fc5aef548b2889302f.jpg)Небольшая шпаргалка по модулям Go: https://proglib.io/w/6febe42c,3844,0,0,goproglib
1637,2021-05-08 08:37:28+00:00,"Если вы любите математику и Go, вам — [сюда](https://proglib.io/w/0d9c150d). В статье рассматриваются решения задач с помощью моделирования методом Монте-Карло, а также практика использования метода Монте-Карло для поиска ответов на определенные проблемы.",3889,0,0,goproglib
1636,2021-05-07 12:00:11+00:00,"Учимся работать с пакетом `present`, предназначенным для составления презентаций. У него есть свои ограничения, такие как формат слайдов и иногда сложное позиционирование изображений, но в целом это полезный пакет, которого может быть достаточно для быстрого предоставления информации членам своей команды, владельцам продукта или руководству. Они же так это любят .

https://proglib.io/w/e14e0cd0",3880,0,2,goproglib
1635,2021-05-07 09:00:24+00:00,"Как освоить язык Java с нуля и овладеть техниками белого хакинга? Присоединяйся к онлайн-интенсиву Skillbox, который пройдёт с 10 по 12 мая в 19:00 по московскому времени!

Успей зарегистрироваться:  https://clc.am/GZrgbg

Что тебя ждёт?

 Мы установим среду разработки и рассмотрим, что представляет собой программирование на самом деле.
 Практические занятия, на которых ты сам напишешь программу для мониторинга рабочего стола.
 Общение с опытным программистом, который уже более 15 лет работает в сфере Java и веб-разработки, — Даниилом Пилипенко. Он ответит на твои вопросы о профессии разработчика и поделится полезными лайфхаками.

Сделай первый шаг к перспективной IT-профессии!",3534,0,4,goproglib
1634,2021-05-06 10:30:27+00:00,"**Go Programming Language For Dummies** (2021)

**Автор**: Wei-Meng Lee

Книга охватывает многие аспекты Go — от базового синтаксиса и написания функций до организации данных, создания пакетов и взаимодействия с API. 

Каждая глава книги разработана так, чтобы быть независимой, поэтому вы можете погрузиться в интересующий материал в любом месте. 

Вы узнаете, как работает Go и начнёте писать программы / модули, установите и внедрите самые мощные сторонние пакеты Go, научитесь использовать Go вместе с веб-сервисами и базами данных MySQL, организовывать свою кодовую базу, использовать Go для структурирования данных и многое другое. 

С помощью книги вы можете присоединиться к растущему числу разработчиков, использующих Go для создания решений 21 века.",4868,0,4,goproglib
1633,2021-05-06 08:44:01+00:00,Автор предыдущего [поста](https://t.me/goproglib/1632) подкрепил ссылки на источники,3442,0,0,goproglib
1632,2021-05-06 07:29:05+00:00,"#proglib_contest 

GO LEARN GO

Модный популярный язык? Быстрый и эффективный? От Google? — Встречайте Go!

[GO BY EXAMPLE](https://proglib.io/w/8409107b) 
Примеры кода с пояснениями — от Hello World до HTTP-сервера.

[GO BY VIDEO](https://proglib.io/w/1ec0df36)
Пошаговое погружение в переменные, структуры данных и основные библиотеки Go.

[GO BY TOUR](https://proglib.io/w/68cad252)
Интерактивный тур, где ты будешь узнавать теорию и сразу же писать код.

[GO BY BOOK](https://proglib.io/w/2a0b1c2b)
Книга, которая не только отвечает на твои вопросы про Go, но и задает свои (если ты не знаешь ответы, то сможешь посмотреть их там же).

Мало? [GO DOCUMENTATION](https://proglib.io/w/cedd1461) для тебя. А еще это open-source язык. Все есть в гите. Заходи, смотри, разбирайся, предлагай улучшения. 

GO GO GO!!!",4238,0,0,goproglib
1631,2021-05-05 12:00:13+00:00,"**Продолжаем** **конкурс на самый интересный контент в телеграм-каналах Proglib!
Призовой фонд — 280 тысяч рублей.** **Срок окончания конкурса — 15 мая**

Автор лучшего поста в отдельно взятом канале получает 20 тысяч рублей.
Мы упростили конкурс — теперь вам достаточно **найти интересную и актуальную статью 2020-2021 года**, написать к ней небольшой анонс (до 700 знаков) и прислать нам, тем не менее ваши идеи по другим форматам только добавляют + в общий зачет. Авторство можем указать по вашему желанию. В канале @progbook предлагаем отправлять рецензии на новые книги и старые актуальные.

**Полный список каналов:
**https://t.me/progbook
https://t.me/proglibrary
https://t.me/pyproglib
https://t.me/frontendproglib
https://t.me/javaproglib
https://t.me/dsproglib
https://t.me/phpproglib
https://t.me/cppproglib
https://t.me/mobileproglib
https://t.me/goproglib
https://t.me/csharpproglib
https://t.me/devopsslib
https://t.me/testerlib
https://t.me/hackproglib

Все посты будут с лайками и дизлайками и хэштегом #proglib_contest. Ссылки мы будем прогонять через наш сокращатель, будут браться в расчет лайки, дизлайки, охваты, клики по ссылкам. Чем больше лайков/охватов/кликов по ссылкам в публикации, тем больше шансов стать победителем в конкурсе. Присылайте посты боту @proglib_contest_bot с указанием, на какой канал идет публикация. [Юридическая информация здесь](https://proglib.io/best-post-contest).",3416,0,0,goproglib
1630,2021-05-05 07:00:57+00:00,"**Elasticsearch в Go: руководство разработчика

**Go имеет официальную библиотеку Elasticsearch, которая упрощает разработчикам Go программную работу с данными, хранящимися в Elasticsearch. В статье описан процесс создания простого приложения, которое позволяет добавлять данные и выполнять поиск в Elasticsearch с помощью Go. 

https://proglib.io/w/e976179e",5229,0,1,goproglib
1629,2021-05-04 18:00:23+00:00,"Пишем и деплоим телеграм-бота с помощью Go и AWS Lambda.

https://proglib.io/w/886f62fb",3738,0,0,goproglib
1627,2021-05-04 07:02:04+00:00,Видеозаписи докладов с GopherCon Russia 2021: https://proglib.io/w/0ce0b342,3616,0,0,goproglib
1626,2021-05-03 16:01:28+00:00,"Крупнейший сервис Телеграм-аналитики TGStat проводит исследование аудитории Телеграма. Опрос анонимный, занимает не больше пяти-семи минут, почти везде просто клики по вариантам ответа. В результате статистика по каналам станет точнее, а жизнь — проще. Давайте поможем: https://tgstat.ru/research",3447,0,2,goproglib
1625,2021-05-03 12:00:53+00:00,"Один из способов ускорить Python заключается в том, чтобы ~~переписать все на другом языке~~ переписать медленный код на другом языке и вызвать этот код из Python. В качестве другого языка автором статьи был выбран Go. В своём материале Kevin Chung описал практическую сторону линковки Go к программе на языке Python, а также описал достоинства и недостатки такого подхода.

https://proglib.io/w/596032a0",4878,0,4,goproglib
1624,2021-05-03 07:00:10+00:00,"«__Отладка в два раза сложнее, чем написание кода с самого начала. Следовательно, если вы напишете код настолько умно, насколько это возможно, вы по определению недостаточно умны, чтобы его отлаживать__», — 

отмечает Брайан Керниган, канадский учёный в области компьютерных технологий, соавтор руководства «Язык программирования Си». Соавтор языка AWK. В соавторстве с Робом Пайком написал также известные книги «Практика программирования» и «UNIX. Программное окружение». Согласны с ним?",17365,0,6,goproglib
1623,2021-05-02 07:00:20+00:00,"Авторы бесплатного [курса по созданию веб-приложения на Go](https://t.me/goproglib/1603) дополнили его следующими материалами по работе с MySQL:

- Установка MySQL для веб-приложения на Golang
- Установка MySQL драйвера для работы в Golang
- Создание пула подключений к MySQL в Go
- Проектирование модели в Go
- Выполнение SQL запросов в Golang
- Выводим запись из базы данных по её ID из URL
- Вывод последних записей из базы данных
- SQL Транзакции через Golang",3817,0,0,goproglib
1622,2021-05-01 13:44:22+00:00,"Про оптимизацию компоновщика, поддержку Apple M1 и новый пакет [embed](https://golang.org/doc/go1.16#library-embed) уже все знают. Давайте разберёмся с остальными глобальными изменениями Go 1.16:

️ **Новые системы модулей**. По умолчанию теперь [требуется](https://golang.org/doc/go1.16#modules) использование новой системы модулей с интегрированной поддержкой версионирования, которая пришла на смену средствам управления зависимостями на основе GOPATH. Переменная окружения GO111MODULE теперь выставлена в значение ""on"" по умолчанию и режим модулей используется независимо от присутствия файла go.mod в рабочем или родительском каталоге. В новом режиме сборочные команды, такие как ""go build"" и ""go test"", не изменяют содержимое go.mod и go.sum, а команда ""go install"" обрабатывает аргументы с указанием версии (""go install example.com/cmd@v1.0.0""). Для возвращения старого поведение следует изменить GO111MODULE на значение ""auto"". 
️ **Добавлена поддержка inline-развёртывания. **В компиляторе добавлена поддержка inline-развёртывания функций с сокращённым определением циклов ""for"", методом значений ([method values](https://golang.org/ref/spec#Method_values)) и конструкциями 'type switch'.
️**Прекращена поддержка режима компиляции x87** (GO386=387). Поддержка процессоров без инструкций SSE2 теперь доступна через программный режим ""GO386=softfloat"".

[Источник](https://proglib.io/w/412f14f4)",3607,0,0,goproglib
1621,2021-05-01 07:40:17+00:00,"Russ Cox не смог пройти мимо, когда начал замечать разговоры вроде «вы не используете [стандартный макет проекта Go](https://github.com/golang-standards/project-layout)». 

Он инициировал конструктивное [обсуждение](https://github.com/golang-standards/project-layout/issues/117), итогом которого должна стать «официальная» [документация для макета проекта](https://github.com/golang/go/issues/45861) на Go.

Как вы считаете, текущий неофициальный макет отражает ту структуру, которая должна быть у проекта на Go? И вообще, вы придерживаетесь какого-то макета или каждый раз все по-новому?",3741,0,1,goproglib
1620,2021-04-30 18:05:37+00:00,"Разработчик из IVI [делится](https://proglib.io/w/611e7e8b) практическими кейсами написания unit-тестов к приложениям на Go:

️Использование интерфейсов при разработке
️Используование генераторов моков
️Перехват логирования
️Подсчет покрытия кода тестами
️Подсчет покрытия при тестировании приложения как черного ящика

В конце статьи приводится несколько полезных статей о тестировании в Go: 
- [Unit-тестирование в Go с помощью интерфейсов](https://habr.com/ru/post/520278/)
- [5 продвинутых техник тестирования на Go](https://habr.com/ru/company/otus/blog/452772/)
- [Golang тестирование за пределами gotour](https://habr.com/ru/post/425025/)",5429,0,0,goproglib
1619,2021-04-29 18:01:24+00:00,"Вы профи в своём деле? Мы хорошо за это заплатим. Ищем экспертов для проведения мероприятия в Москве 22 и 23 мая. Темы следующие: 

- Архитектура программного обеспечения
- Подходы к решению алгоритмических задач с собеседований Google и Яндекс
- Базы данных: модели, миграции, тестирование
- Практикум по рефакторингу

За один день платим от 20 до 30 тыс. ₽ (в зависимости от опыта и вовлеченности). Отклики с резюме кидайте сюда: @proglib_expert_bot",3627,0,0,goproglib
1618,2021-04-29 12:01:32+00:00,"[Недавно](https://t.me/goproglib/1603) мы разбирали тему создания веб-приложений на Go. Сегодня продолжим данную тему, но уже в видеоформате:

- Введение в язык Go - [Смотреть](https://youtu.be/OcWMQPPOq-0)
- Отслеживание URL адресов - [Смотреть](https://youtu.be/c6lBYNqrxRk)
- Создание структур (модели данных) - [Смотреть](https://youtu.be/n18K8kCaXyg)
- Работа с HTML шаблонами - [Смотреть](https://youtu.be/p9rBjSXopsw)
- Подключение MySQL - [Смотреть](https://youtu.be/UE2y_3onSeY)
- Новостной сайт. Главные настройки - [Смотреть](https://youtu.be/NDZQ8p7Ywic)
- Добавление данных через сайт - [Смотреть](https://youtu.be/IcEKRmzcXdU)
- Динамические страницы - [Смотреть](https://youtu.be/1Euvaa2ZTKo)
- Публикация на сервер - [Смотреть](https://youtu.be/sy7toh7U04o)",4024,1,0,goproglib
1617,2021-04-29 09:00:18+00:00," **Какие IT каналы в Telegram читаем мы? **

Сегодня представляем вашему вниманию 5 каналов, которые действительно этого заслуживают. Подписывайтесь на наших друзей: 

[CodeCamp](https://t.me/joinchat/-L7mlcPUHQowNmRi) —  **Мастхэв** канал для любого IT-специалиста: лучшие книги, полезные сервисы и отборные видеоуроки.

[@bugfeature](https://t.me/joinchat/myDy4aorfUlkYjAy) — Подлинный канал [""Не баг, а фича""](https://t.me/joinchat/myDy4aorfUlkYjAy), который раскрывает секреты социальных сетей, уязвимости приложений, а так же рассказывает об этичном хакинге, анонимности в сети и личной безопасности в интернете.

[@front_end_dev](https://t.me/joinchat/_skGd7Kru4oyZTI6) – Актуальные материалы для веб-разработчика: статьи, туториалы, инструменты, фишки ЯП и лучшие практики.

@S_E_Book — Самая редкая и актуальная литература в сети, для ИТ специалистов любого уровня и направления, которая публикуется еще до момента выхода в официальных источниках.

[GIT](https://t.me/joinchat/Q8TiZ0HjwNU1N2Fi) — Канал, где Вы найдете уникальные онлайн-сервисы и инструменты на все случаи жизни.",3650,0,0,goproglib
1616,2021-04-28 17:15:04+00:00,"Практическое руководство для начинающих по дженерикам в Go.

https://proglib.io/w/0d0e3603",3888,0,1,goproglib
1615,2021-04-28 07:02:04+00:00,"За последнее время интерес к NFT-токенам стремительно увеличивается. Вы наверное слышали о таких крупных сделках, как картина Бенкси, портрет Сноудена или токен Нурмагомедова? Кажется, мода на цифровое искусство только набирает обороты, а тут кто первый, тот и выиграл. 
 
Являясь медиа об IT, «Библиотека программиста» просто не могла пройти мимо тренда и решила внести свой вклад в развитие блокчейн-технологий и цифрового искусства. Любой желающий может приобрести первую статью на сайте ([proglib.io](http://proglib.io/)), которая имеет более 470 000 просмотров. 
Цена лота от 1 Ethereum, торги продлятся 3 недели. 
Узнать больше можно по ссылке: https://proglib.io/w/874152a9",3611,0,0,goproglib
1614,2021-04-27 17:31:26+00:00,"Статья описывает практические аспекты работы с **goleak** — инструментом, нацеленным на интеграцию с модульными тестами. Этот пакет отслеживает наличие утечек горутин в текущем тестируемом фрагменте кода.

https://proglib.io/w/29adfed9",3857,0,0,goproglib
1613,2021-04-26 18:06:27+00:00,"**Tunny** — это библиотека, предназначенная для создания и управления пулом горутин. С помощью синхронного API она позволяет ограничить работу, исходящую от любого количества горутин.

https://proglib.io/w/b6979099",3720,0,2,goproglib
1612,2021-04-26 15:01:33+00:00,"[​](https://telegra.ph/file/fa711cad6d8d4d4b960b1.jpg)Вы наверняка заметили, что мы регулярно проводим опросы, чтобы соответствовать вашим запросам и интересам. Знаем, что нас читают не только новички – многие подписчики уже стали миддлами и даже сеньорами. Если чувствуете, что переросли middle-уровень, пора задуматься о создании собственного полноценного проекта – не на одни выходные.

Для такой задачи нужно широкое видение процесса разработки и архитектуры информационных систем. На одной интуиции можно набить шишек, а книжки по таким вопросам достаточно быстро устаревают. Обратите внимание на страницу курса Архитектор ИТ https://proglib.io/w/52694778

На странице можно почерпнуть сведения о том, какие знания нужны, и составить собственную программу-максимум. Или сэкономить время и воспользоваться учебным планом GeekBrains – благо уже есть площадка с контентом, приглашенные эксперты-практики и 4 курсовых проекта с поддержкой крупных компаний.",3583,0,0,goproglib
1611,2021-04-25 19:00:46+00:00,"**Продолжаем** **конкурс на самый интересный контент в телеграм-каналах Proglib!
Призовой фонд — 280 тысяч рублей.** **Срок окончания конкурса — 15 мая**

Автор лучшего поста в отдельно взятом канале получает 20 тысяч рублей.
Мы упростили конкурс — теперь вам достаточно **найти интересную и актуальную статью 2020-2021 года**, написать к ней небольшой анонс (до 700 знаков) и прислать нам, тем не менее ваши идеи по другим форматам только добавляют + в общий зачет. Авторство можем указать по вашему желанию. В канале @progbook предлагаем отправлять рецензии на новые книги и старые актуальные.

**Полный список каналов:
**https://t.me/progbook
https://t.me/proglibrary
https://t.me/pyproglib
https://t.me/frontendproglib
https://t.me/javaproglib
https://t.me/dsproglib
https://t.me/phpproglib
https://t.me/cppproglib
https://t.me/mobileproglib
https://t.me/goproglib
https://t.me/csharpproglib
https://t.me/devopsslib
https://t.me/testerlib
https://t.me/hackproglib

Все посты будут с лайками и дизлайками и хэштегом #proglib_contest. Ссылки мы будем прогонять через наш сокращатель, будут браться в расчет лайки, дизлайки, охваты, клики по ссылкам. Чем больше лайков/охватов/кликов по ссылкам в публикации, тем больше шансов стать победителем в конкурсе. Присылайте посты боту @proglib_contest_bot с указанием, на какой канал идет публикация. [Юридическая информация здесь](https://proglib.io/best-post-contest).",3694,0,0,goproglib
1610,2021-04-25 12:01:25+00:00,"Philipp Tanlak делится опытом использования Go для создания веб-интерфейсов. По его словам, использование связки пакетов `html/template` и `embed` (представлен в Go 1.16) вместо других веб-фреймворков, позволяет сосредоточиться на макете и не вносить ненужную сложность.

https://proglib.io/w/2807d0ef",3743,0,0,goproglib
1608,2021-04-24 15:01:17+00:00,"Data scientist входит в тройку лучших профессий 2020 года в США. В России эта специальность только набирает обороты, поэтому сейчас самое время начать осваивать перспективную специальность на бесплатном онлайн-интенсиве, который пройдёт с 26 по 28 апреля в 19:00 по московскому времени!
Регистрируйтесь:  https://clc.am/ll4iHA. 

Что вас ждёт на занятиях?
 Примерите на себя роль data scientist, поработаете с основными инструментами профессии.
 Визуализируете данные.
 Построите формулы и выявите зависимости на Python.
 Изучите техники исследования данных и разберёте реальные задачи.
 Создадите проект, который наверняка оценят потенциальные работодатели.

 Преподаватель: ведущий исследователь данных Сбербанка с шестилетним опытом в программировании — Анастасия Борнева. 

 Все участники, сдавшие домашнее задание, получат сертификат на 15 000 рублей для поступления на любой курс Skillbox!",3502,0,0,goproglib
1607,2021-04-24 10:17:20+00:00,"**Практика написания модульных тестов**

Модульные тесты важны для разработчиков, потому что позволяют продемонстрировать правильность написанного кода. Что еще более важно, модульные тесты позволяют обновлять базу кода с уверенностью, что мы ничего не сломали. 

Однако, стремясь получить 100% покрытие кода, мы часто пишем тесты для логики, для которой, возможно, у нас нет бизнес-тестирования. Автор статьи утверждает, что создание фиктивных абстракций базы данных для написания модульных тестов — это почти всегда плохая идея.

https://proglib.io/w/117cff40",4884,0,0,goproglib
1606,2021-04-23 18:01:03+00:00,"Извлекаем данные из файла журнала объемом 16 ГБ за 25 секунд с помощью Go.

https://proglib.io/w/3f7c0a7f",5240,0,3,goproglib
1603,2021-04-22 17:49:15+00:00,"**Создание веб-приложения на Go

**Серия уроков проведёт вас по этапам создания сайта на Go. После ознакомления с материалами вы сможете создать небольшую **CMS на Go** и запустить свой сайт в интернете.

https://proglib.io/w/be810e29",4709,0,0,goproglib
1601,2021-04-21 19:26:49+00:00,"**Arch-Go** — это инструмент тестирования, который проверяет соответствие проекта Go архитектурным рекомендациям. В статье представлены основы использования данного инструмента для проверки ваших проектов.

https://proglib.io/w/3cfb68c7",5305,0,0,goproglib
1600,2021-04-21 18:23:52+00:00,"#fun

Тем временем на официальном сайте Golang [обнаружено](https://proglib.io/w/29f3c8ac) руководство по дизайну гоферов ",3920,0,5,goproglib
1599,2021-04-21 07:02:15+00:00,"Библиотека программиста планирует организовать серию офлайн-мероприятий. 
Мы создали опрос, чтобы учесть пожелания и интересы подписчиков, а также какие темы наиболее интересны. Опрос займет не более 3-х минут и пройти его можно [тут](https://docs.google.com/forms/d/e/1FAIpQLSfU3OK8tGeiJzr_GeDpGoYxV72VgiDAPHrGpCY8EEZf56QbtQ/viewform).",3570,0,1,goproglib
1598,2021-04-20 18:49:17+00:00,Описание нововведений GoLand 2021.1 на русском: https://proglib.io/w/d682f55d,3691,0,0,goproglib
1597,2021-04-20 15:02:14+00:00,"**Страховой Дом ВСК **перестраивает свой бизнес и переводит его в digital.

Для тех, кто в ближайшее время присоединится к ИТ-команде ВСК, это шанс получить уникальный опыт: **выстроить новую технологическую компанию**.

Возможности быстрого карьерного и профессионального роста прилагаются!",3478,0,0,goproglib
1596,2021-04-20 09:01:25+00:00,"**Grate **— это нативный пакет Go для извлечения табличных данных (поддерживаются .xls, .xlsx, .csv, .tsv). Пакет в первую очередь фокусируется на скорости и стабильности, т. к. не пытается анализировать диаграммы, рисунки или другие типы контента.

https://proglib.io/w/a3dea1dd",3537,0,4,goproglib
1595,2021-04-20 06:01:01+00:00,"**Есть опыт и знания в IT, которыми Вы** **хотите поделиться ?**

**Станьте автором технических статей вместе с Proglib** **и получайте достойное вознаграждение!**
 
Библиотека программиста приглашает к сотрудничеству внештатных авторов, 
которые хотят поделиться знаниями, пропиарить свой авторский блог или просто заработать. 
Мы предлагаем удаленную работу, гибкий график, возможность зарабатывать до 12к за статью и выплаты 2 раза в месяц. 
Мы не ограничиваем в количестве статей.
Постоянным авторам предусмотрены премии за лояльность. 

Интересующие направления для написания статей:
• DevOps
• Блокчейн
• Информационная безопасность
• Ruby on Rails
• C/ C++/ C#
• Java
• Go разработка
• Разработка игр
• Android-разработка
• iOS-разработка
• Системная аналитика
• Тестирование ПО
• Виртуальная реальность
• 1С
• Business Intelligence
• Интернет вещей
• Системы и сети
• IT Management

Оставьте заявку на https://proglib.io/w/de2fccec и мы свяжемся с вами!",3467,0,0,goproglib
1594,2021-04-19 18:56:06+00:00,"Пишем линтер, который рассчитает цикломатическую сложность кода Go.

https://proglib.io/w/dd8c672f",3524,0,0,goproglib
1593,2021-04-19 15:01:50+00:00,"Прояви свои таланты в «цифре» и стань частью цифрового будущего! 

Регистрируйся на самый масштабный конкурс для IT-специалистов в России — «Цифровой Прорыв» 2021! ️

В этом году мы приготовили для тебя: 8 крутых хакатонов, актуальные кейсы, топовых экспертов, атмосферную IT-тусовку и нетворкинг. Призовой фонд — 55 млн руб! ‍

Участвовать могут новички, любители и профи из любой точки России! 

 Все подробности и регистрация в одном клике от тебя по ссылке: [https://leadersofdigital.ru/](https://leadersofdigital.ru/?utm_source=goproglib)",3509,0,0,goproglib
1592,2021-04-19 07:01:03+00:00,Серия статей про разработку blockchain на Go: https://proglib.io/w/0767a35e,3962,0,1,goproglib
1590,2021-04-18 10:33:51+00:00,"История и предпосылки перехода с Python и C++ на Go в команде Google Site Reliability Engineering (SRE). 

https://proglib.io/w/6693c361",3750,0,0,goproglib
1589,2021-04-17 20:24:01+00:00,"[​](https://github.com/adonovan/spaghetti/raw/main/screenshot.png)**Spaghetti** — это интерактивный веб-инструмент, который помогает понять зависимости программы Go, а также изучить и оценить различные возможные меры по устранению зависимостей.

Он отображает полные зависимости исходных пакетов, организованные в виде дерева на основе структуры каталогов пространства имен пакет / модуль.

https://proglib.io/w/23bb0ab8",5360,0,0,goproglib
1588,2021-04-16 18:42:09+00:00,"[Разбираемся](https://proglib.io/w/52f38704) с примитивом синхронизации `sync.Cond` в Go. Более подробно примитивы синхронизации описаны в данной [статье](https://proglib.io/w/f882dfcd) **(**входит в [серию о проблемах многопоточности, параллелизме и concurrency](https://t.me/goproglib/834), опубликованную ранее**).**",5140,0,0,goproglib
1586,2021-04-15 18:16:03+00:00,"**Объявляем конкурс на самый интересный контент в телеграм-каналах Proglib!
Призовой фонд — 280 тысяч рублей.
**Автор лучшего поста в отдельно взятом канале получает 20 тысяч рублей.
В каналах по языкам программирования, data science и мобильной разработке интересно увидеть топовые материалы по этим темам, в канале @progbook топовые рецензии на книги, в @proglibrary материалы по общим темам: проектирование, базы данных, linux, алгоритмы и структуры данных. Поощряются интерактивные форматы — авторские тесты, квизы, функционал которых встроен в Telegram, гифки, шпаргалки, неочевидные фишки.

**Полный список каналов:
**https://t.me/progbook 
https://t.me/proglibrary
https://t.me/pyproglib
https://t.me/frontendproglib
https://t.me/javaproglib
https://t.me/dsproglib
https://t.me/phpproglib
https://t.me/cppproglib
https://t.me/mobileproglib
https://t.me/goproglib
https://t.me/csharpproglib
https://t.me/devopsslib
https://t.me/testerlib
https://t.me/hackproglib

Все посты будут с лайками и дизлайками и хэштегом #proglib_contest. Ссылки мы будем прогонять через наш сокращатель, будут браться в расчет лайки, дизлайки, охваты, клики по ссылкам. Чем больше лайков/охватов/кликов по ссылкам в публикации, тем больше шансов статьи победителем в конкурсе. Присылайте посты боту @proglib_contest_bot с указанием канала, на который идет публикация. [Юридическая информация здесь](https://proglib.io/best-post-contest).",4167,0,1,goproglib
1585,2021-04-15 11:19:04+00:00,"Обзор лучших практик для написания REST API на Go.

https://proglib.io/w/59d162f2",5782,0,15,goproglib
1584,2021-04-15 07:00:35+00:00,"[​](https://telegra.ph/file/aaec0fd0b1b27871b0530.jpg)Устал и хочется расслабиться? 
Подписывайся на наш канал «[Библиотека IT мемов](https://t.me/itmemlib)», где ежедневно мы публикуем годные авторские IT-мемы.",3684,0,0,goproglib
1583,2021-04-14 18:00:53+00:00,"**Go-cmp **— пакет, предназначенный для сравнения значений Go в процессе тестирования. Этот пакет призван стать более мощной и безопасной альтернативой `reflect.DeepEqual` для сравнения двух семантически равных значений.

В [статье и видео](https://proglib.io/w/f8d8d7bc) представлены преимущества go-cmp относительно других, а также описано немного практики. 

[Репозиторий](https://github.com/google/go-cmp)",3730,0,6,goproglib
1582,2021-04-14 15:01:42+00:00,"[​](https://telegra.ph/file/358f8bda151418765aafa.jpg)️**Ищете работу или мечтаете поменять профессию?**

**Полезная информация для вас.** За интересными вакансиями следите на профильном канале @pravkiforyou. 

Этот канал публикует вакансии с тех пор, как по телеграму ходили динозавры . Там сразу все условия и прямые контакты работодателей, без посредников. 

**Молодых перспективных специалистов легче найти в телеграме**, а подписаться на вакансии тут: https://t.me/pravkiforyou",3512,0,0,goproglib
1581,2021-04-14 07:01:06+00:00,"[​](https://telegra.ph/file/9538c9e1d0f80d6428a22.jpg)Перевод довольно противоречивой [статьи](https://t.me/goproglib/1558) (судя по вашим оценкам) об антипаттернах в Go [подъехал](https://proglib.io/w/ace7dc76).

И все-таки что вы думаете о данных антипаттернах? Отнесли бы их в данную категорию?",4711,0,3,goproglib
1580,2021-04-13 12:00:36+00:00,"AWS CDK (Cloud Development Kit) для Golang теперь выпущен официально. Данная платформа позволяет определять ресурсы для облачных приложений, используя привычные языки программирования.

С помощью статьи разберемся с основами создания и развертывания стеков AWS CDK с использованием Go, а также с тем, как инициализировать новое приложение AWS CDK.

https://proglib.io/w/5f5f877f",4763,0,0,goproglib
1579,2021-04-13 07:01:55+00:00,"[​](https://telegra.ph/file/edf370cf23655ab7142c3.jpg)#tip 

`go test` имеет флаг `-run`, который принимает в качестве аргумента регулярное выражение. Будут запускаться только те тесты, которые соответствуют регулярному выражению.

`go test -run Hello` запускает только те тесты, которые соответствуют `Hello`, например, `TestHello`.",3610,0,0,goproglib
1578,2021-04-12 16:43:58+00:00,"Стартовый комплект для разработки Go API с использованием Postgres, Chi Router и sqlx.

https://proglib.io/w/97ad5b09",4843,0,2,goproglib
1577,2021-04-12 09:00:12+00:00,"Пройди обучение и попади на стажировку в WildBerries!

Хочешь стать IT-специалистом крупной компании? Тогда обучающий курс «Профессия Go-разработчик» для тебя! 

За год обучения ты:
получишь базовые знания программирования;
пройдёшь обучение от ведущих разработчиков WildBerries;
научишься разрабатывать и тестировать приложения на Golang;
освоишь принципы работы с алгоритмами поиска и сортировки;
научишься взаимодействовать с файловой системой. 

Программа обучения разработана в партнёрстве с международным e-commerce-проектом WildBerries. Выпускники, успешно окончившие курс, смогут пройти собеседование и попасть на стажировку в компанию. Регистрируйся пока есть скидки до 60% на обучение! 


Переходи по ссылке и регистрируйся. Первые 3 месяца  обучения бесплатно!▶️ https://clc.am/-O9gvg",3691,0,0,goproglib
1576,2021-04-11 08:37:20+00:00,"#news

Недавно произошёл релиз **govim v0.0.34 **— плагина для разработки на Go для Vim8. С изменениями можно ознакомиться [здесь](https://proglib.io/w/8ec37986). А что вы используете для написания кода?",3631,0,7,goproglib
1575,2021-04-10 18:00:58+00:00,"[​](https://telegra.ph/file/837282961a0decc4641c2.jpg) **Golang против Python: какой язык программирования выбрать?**

В этой статье попытаемся сравнить Python и Golang по различным характеристикам. Посмотрим, какой из этих языков стоит предпочесть новичку, только собирающемуся заняться программированием профессионально.

https://proglib.io/sh/ZHMvVuw5Ty",3740,0,3,goproglib
1573,2021-04-10 09:24:20+00:00,"[​](https://telegra.ph/file/502a42710dc470911d54b.jpg)#tip

Команда `go version binary-file` может использоваться для поиска версии Go, с помощью которой был создан двоичный файл.",3468,0,0,goproglib
1572,2021-04-09 18:52:14+00:00,"**Pterm **— это модуль Go, предназначенный для создания красивого вывода на терминал. Разработчики заявляют, что PTerm работает с максимально возможным количеством операционных систем и терминалов.

Модель использует [цветовую схему ANSI](https://en.wikipedia.org/wiki/ANSI_escape_code#3/4_bit), которая широко используется терминалами для обеспечения согласованности цветов в различных темах терминала. Если этого недостаточно, PTerm можно использовать для доступа к полной цветовой схеме RGB (16 миллионов цветов) в терминалах, которые поддерживают `TrueColor`.

https://proglib.io/w/6f3213f5",3689,0,0,goproglib
1571,2021-04-09 15:01:36+00:00,"Go - отличный язык чтобы расширить или сменить свой технологический стек.

**Приглашаем вас на открытый урок по Go от senior-разработчика.

**На уроке вы: поймете, когда и чем вам будет полезен Go и нужен ли он вам вообще. И конечно расширите свой кругозор, что всегда полезно для разработчика.

**А также:
**— Узнаете зачем вообще нужен Go, о его применимости и востребованности
— Поймете, когда и для чего стоит использовать Go
— Поймете в каких задачах и как именно Go лучше всего использовать
— Узнаете о возможностях языка и его особенностях
— Освоите синтаксис языка и разберетесь со структурой кода
— Научитесь создавать простые микросервисы на Go

[Подробнее!](https://bothelp.thinknetica.com/2?utm_source=telegram&utm_medium=paid&utm_campaign=golang_0421&utm_content=cppproglib)",3655,0,1,goproglib
1570,2021-04-09 11:41:02+00:00,"[​](https://telegra.ph/file/610d80a3ee5aa4002ca6c.jpg)Что нового представил Microsoft? 

https://proglib.io/w/3def3fe4",3449,0,3,goproglib
1569,2021-04-08 09:46:36+00:00,"Как бы вы показали эволюцию программиста на Go?

https://proglib.io/w/b3dc6f52",3882,1,2,goproglib
1567,2021-04-06 12:00:30+00:00,"Базовое введение в работу серверов и клиентов HTTPS в Go с использованием TLS.

https://proglib.io/w/9e3e3ee4",5500,0,1,goproglib
1566,2021-04-06 07:01:43+00:00,"Примерно 1 раз в две недели выпускаются [незначительные исправления Go 1.16](https://golang.org/doc/devel/release.html#go1.16.minor): 

- [Go 1.16.2](https://github.com/golang/go/issues?q=milestone%3AGo1.16.2+label%3ACherryPickApproved) (2021/03/11)
- [Go 1.16.3](https://github.com/golang/go/issues?q=milestone%3AGo1.16.3+label%3ACherryPickApproved) (2021/04/01)",4154,0,2,goproglib
1565,2021-04-05 17:01:29+00:00,"**Простое правило для лучших ошибок**

В статье рассмотрено простое правило для написания сообщений об ошибках с примерами на Go. Автор утверждает, что данное правило позволит распространять появляющиеся ошибки вверх вместе со всем необходимым для отладки проблем, но при этом они не содержат тонны посторонней или повторяющейся информации.

https://proglib.io/w/1b1550c9",5376,0,0,goproglib
1564,2021-04-04 09:01:23+00:00,"**Pulumi** — это open source IaC-платформа, позволяющая посредством кода управлять всей облачной инфраструктурой. С помощью Pulumi и Go можно с легкостью автоматизировать современную инфраструктуру, поэтому давайте узнаем, как это сделать быстро и эффективно.

https://proglib.io/w/60e96163",5456,0,0,goproglib
1563,2021-04-03 14:34:42+00:00,"Bill Mill в своей [статье](https://proglib.io/w/102448ab) рассказывает о том, как разработал набор инструментов на Go, который помогает ему быстро проверить какую-либо идею или продемонстрировать определенный функционал. Получился некий [скелет приложения Golang](https://proglib.io/w/7c31a027).",4206,0,0,goproglib
1562,2021-04-02 17:56:08+00:00,"**Черновой вариант базы данных уязвимостей Go**

Представлен документ, содержащий записи об известных уязвимостях импортируемых (неосновных) пакетов Go в общедоступных модулях, которые будет включать база данных. Данная база данных должна предоставить разработчикам Go надежный способ оповещения об известных недостатках безопасности, влияющих на их приложения.

https://proglib.io/w/d94002bd",5711,0,0,goproglib
1561,2021-04-02 08:35:07+00:00,Хотите больше мемов от пикчера Библиотеки программиста? Подписывайтесь: @itmemlib,3891,0,0,goproglib
1560,2021-04-01 10:00:38+00:00,"Серия статей про использование языков Go и Python, и различные методы связи между ними:

- [gRPC](https://www.ardanlabs.com/blog/2020/06/python-go-grpc.html)
- [Расширение Python с помощью Go](https://www.ardanlabs.com/blog/2020/07/extending-python-with-go.html)
- [Упаковка кода](https://www.ardanlabs.com/blog/2020/08/packaging-python-code.html)
- [Использование Python в памяти](https://www.ardanlabs.com/blog/2020/09/using-python-memory.html)",4381,0,0,goproglib
1558,2021-03-31 18:30:11+00:00,Разбираем общие антипаттерны в Go: https://proglib.io/w/20e9ed6d,5134,0,0,goproglib
1557,2021-03-31 15:26:52+00:00,"**Ищем парфюмера в проект Сбера** ️

Да, и такое бывает! У продуктов Сбера появится свой аромат, и ты можешь стать счастливчиком, который поможет нам это осуществить. Читай условия по [ссылке](https://proglib.io/w/a54622bf) и подписывайся на наш [канал](https://proglib.io/w/8e86c244) — там регулярно появляются интересные вакансии.",3677,0,0,goproglib
1556,2021-03-31 15:26:46+00:00,"**Мы ищем парфюмера!**﻿️ 

Нам нужен крутой парфюмер или эвалюатор, который подарит продуктам Сбера новое измерение — аромат  В обязанности войдёт создание уникального запаха, контроль производства и участие в продвижении парфюма в качестве эксперта.

**Что мы ждём от кандидата:
**опыт работы от 3 лет,
профильное образование (в идеале — ISIPCA),
знание протоколов IFRA,
желание придумывать и запускать ароматы для разных сервисов экосистемы Сбера.

Взамен мы предложим зарплату выше рынка, гибкий график с возможностью работать на удалёнке и, конечно, нестандартные и интересные задачи.

Откликайся на вакансию по [ссылке](http://sber.me/?p=W1112)!",2906,0,0,goproglib
1555,2021-03-31 06:15:04+00:00,"[​](https://telegra.ph/file/d1076f3efff9803d5de08.jpg)**️ На пике технологий: эксперты Microsoft, Сбер и МТС рассказали о гибридных облаках

**Предлагаем вниманию читателей небольшой обзор самых крутых открытий с прошедшей недавно онлайн-конференции Microsoft Hybrid Cloud Forum.

https://proglib.io/w/3def3fe4",3773,0,0,goproglib
1554,2021-03-30 16:35:09+00:00,"[​](https://camo.githubusercontent.com/ca902777237d973aa809085e371df2a869cecdce5cfcc26f3b3b096d747ad9e8/68747470733a2f2f676f6672616d652e6f72672f646f776e6c6f61642f6174746163686d656e74732f313131343131392f617263682e706e67)**GoFrame** — это модульная и высокопроизводительная платформа, предназначенная для разработки корпоративных приложений на Go.

https://proglib.io/w/e0c8d6eb",3948,0,0,goproglib
1553,2021-03-29 17:50:36+00:00,"Объемная [серия статей](https://proglib.io/w/b2992f82) про разработку современного приложения на Go, которое легко поддерживать и с которым интересно работать в долгосрочной перспективе. 

Сначала описывается процесс создания бессерверного приложения с помощью Google Cloud Run и Firebase, затем проводится рефакторинг кода.",4001,0,0,goproglib
1552,2021-03-28 14:01:09+00:00,"Ищете работу в ИТ и устали ежедневно просматривать десятки сайтов? Подписывайтесь в Telegram на наши каналы с вакансиями! 

«Библиотека программиста» отобрала для вас лучшие на российском рынке труда предложения по разным направлениям: Go, Python, C#/C/C++, Java, JavaScript, PHP, Data Science, Quality Assurance, DevOps, мобильной разработке и другим непонятным аббревиатурам и сокращениям.

Здесь вы получите актуальную информацию первыми:

@pydevjob 
@jsdevjob
@csharpdevjob
@javadevjob
@datajob
@phpdevjob
@godevjob
@mobiledevjob
@cppdevjob
@testerrjob
@devopssjob

Узнавайте о самых интересных вакансиях без лишних телодвижений!",3935,0,0,goproglib
1551,2021-03-28 12:46:39+00:00,"**5 советов по тестированию на Go**

Автор статьи делится собственным опытом в тестировании на Go, а также перечисляет полезные библиотеки и ресурсы. В начале статьи приводятся не менее полезные материалы о тестировании, в частности запись в [блоге Povilas Versockas](https://povilasv.me/go-advanced-testing-tips-tricks/) и на [сайте hackernoon](https://hackernoon.com/5-advanced-go-testing-techniques-7199b686b6c1).

https://proglib.io/w/b2a620ea",3811,0,0,goproglib
1550,2021-03-28 09:00:23+00:00,"**Онлайн-интенсив «Docker: from zero to hero»** завершился месяц назад. 2 дня отборной практики круто прокачали ребят. Теперь они могут смело работать с контейнерами, знают все тонкости их использования с разными языками, в состоянии обойти ограничения DockerHub и ещё много чего полезного.

Средняя оценка каждого дня — 9/10. Поэтому мы решили не ограничивать информацию одним интенсивом и подготовили записи с него, чтобы учиться Докеру можно было в любое время или не дожидаясь следующего потока. Они в хорошем качестве, удобно разбиты на темы, сохраняют всю практику и живую атмосферу интенсива и при этом их можно поставить на паузу и проходить в удобном темпе.

Стоимость — 10 000 рублей, можно в рассрочку.
Посмотреть программу и записаться: https://slurm.club/2PsZKgx",3526,0,0,goproglib
1549,2021-03-27 12:02:32+00:00,"Автор статьи проделал большую работу и собрал различные аспекты разработки на Go, которые могут удивить новых разработчиков и, возможно, пролить свет на необычные особенности Go. Он также надеется, что это сэкономит читателю много времени на поиск информации и отладку и, возможно, предотвратит некоторые дорогостоящие ошибки.

https://proglib.io/w/fdf275f7",5160,0,0,goproglib
1548,2021-03-27 09:00:16+00:00,"**Как выстроена инфраструктурная разработка у крупного IT-провайдера?**

Всем привет! 31 марта в 16:00 пройдет Selectel Dev Talks от команды @SelectelNews. Программа:

— Кейс бесшовной миграции старого бэкенда сервиса Vscale на новый.

__— __Как запретить спам и не запретить самое важное: о работе над самописным сервисом по выявлению спама, который находит нежелательные рассылки незаметно для пользователей.

__— __Бэкенд VMware или еще одна история о распиливании монолита: о трудностях создания нового бэкенда «Облака на базе VMware».

— Сессия вопросов и ответов от Ивана Романько, директора по разработке и сопровождению сервисов в Selectel.

Участие бесплатное, регистрируйтесь по ссылке:

 https://slc.tl/SxA3U",3416,0,0,goproglib
1547,2021-03-26 18:00:59+00:00,"Автор статьи делится мнением о том, что не так с типичными DDD-примерами на Go, а также демонстрирует собственную ORM для реализации персистентности доменных сущностей.

https://proglib.io/w/7d16cdea",3807,0,0,goproglib
1546,2021-03-26 15:01:52+00:00,"Что объединяет Apple, Netflix, Huawei и Instragram? Не только миллиарды запросов, петабайты данных и пользователи по всему миру. Все эти компании используют распределённую NoSQL базу данных Apache Cassandra.

**Уже в эту субботу 27.03 стартует однодневная онлайн-конференция Cassandra Day Russia 2021**. Опытные NoSQL специалисты расскажут о возможностях одной из самых мощных баз данных современности и поделятся практическим опытом управления СУБД Cassandra.

Конференция будет состоять из двух параллельных потоков:
— Воркшопы для тех, кто только начинает или планирует работу с Cassandra;
— Доклады для опытных специалистов. 

Время проведения: 27 марта, 10:00—17:00 (UTC+3)
Также всех участников конференции ждут подарки от организаторов.
Все подробности и запись по ссылке: https://proglib.io/w/48f7b72f",3701,0,0,goproglib
1543,2021-03-24 18:22:47+00:00,"Полезный материал про распространенные проблемы с настройками сетевых пакетов Go по умолчанию.

https://proglib.io/w/65a77b60",3770,0,0,goproglib
1542,2021-03-24 14:15:04+00:00,"**Будь готов! Мы запускаем Telegram-канал «Карьера в Сбере»! 

**Прямо здесь ты будешь получать только самую свежую информацию:

️ актуальные вакансии для IT-специалистов и Data-people
 свежие новости о технологиях
️ рекомендации и советы от HR-экспертов Сбера
 реальные истории IT-специалистов Сбера
 анонсы важных событий и обучающих курсов

 [Присоединяйся к каналу](https://t.me/careersber) «Карьера в Сбере» и будь в курсе!",3652,0,0,goproglib
1541,2021-03-24 09:00:30+00:00,"Вы уже являетесь разработчиком, но хотите освоить Golang, чтобы расширить или сменить свой технологический стек?

Предлагаем пройти наш курс ""Разработка на GO"" 
- старт 19 апреля.
- продолжительность 9 недель

Цель курса: Освоить язык Go и его экосистему, научить создавать сервисы на нем, показать лучшие подходы и практики, подготовить участников к работе в реальных проектах.

На курсе вы:
Освоите язык Go на уровне junior+/middle-разработчика и будете способны использовать его в реальных проектах

а также...",3568,0,0,goproglib
1540,2021-03-23 19:00:48+00:00,Описание экосистемы Go: https://proglib.io/w/d23e3c11,3727,0,0,goproglib
1538,2021-03-22 18:32:22+00:00,"[​](https://telegra.ph/file/93601f8a0a4bf829bc1e5.jpg)**В серии статей рассматривается процесс разработки сервиса подписания для инфраструктуры портала Госуслуг на C и Go:**

- [Часть 1](https://proglib.io/w/3594e46d). Статья посвящена Go-части сервиса, в которую входит конфигурирование, тестирование, ресты, файловый менеджер и планировщик. Иными словами, все то, что происходит до передачи данных в С-часть для подписания и верификации. 
- [Часть 2](https://proglib.io/w/b4d0dc56). Во второй части рассмотрены CGo-прослойка и C-часть, в которой происходит подписание и верификация данных, а также описаны самые важные оптимизации, ради которых создавался данный сервис.",3953,0,0,goproglib
1537,2021-03-22 06:16:25+00:00,"Интересные размышления о том, почему язык Go стал стандартом для DevOps-инженеров.

https://proglib.io/w/90c3da69",3802,0,0,goproglib
1536,2021-03-21 09:57:37+00:00,"**Автоматическое обнаружение и исправление ошибок конкурентности в программных системах Go**

Эмпирические исследования, проводимые авторами данного документа показали, что ошибки конкурентности, особенно связанные с неправильным использованием каналов, широко распространены в Go. Эти ошибки серьезно повредили надежность конкурентных систем Go. 

Для борьбы с ошибками конкурентности Go, вызванными неправильным использованием каналов, в документе предлагается использование статической системы обнаружения ошибок конкурентности `GCatch` и автоматической системы исправления ошибок конкурентности `GFix`.",4893,0,0,goproglib
1535,2021-03-20 07:02:13+00:00,"[​](https://telegra.ph/file/328fb502ed530c5df8ab9.jpg)**Срок службы HTTP-запроса на сервере Go**

Автор статьи описывает маршрут, по которому типичный HTTP-запрос проходит через сервер Go, затрагивая маршрутизаторы,  промежуточное программное обеспечение (middleware) и другие связанные вопросы, такие как параллелизм.

https://proglib.io/w/d3a58a73",5589,0,0,goproglib
1534,2021-03-19 19:00:52+00:00,"**Go-password **— библиотека, реализующая генерацию случайных паролей. Для дополнительной случайности используются crypto / rand.

https://proglib.io/w/6d15b245",3977,0,0,goproglib
1533,2021-03-19 17:15:26+00:00,"[​](https://telegra.ph/file/3c6b289e983f2989b30c8.jpg)#tip 

Простой однострочник для запуска программы на Go с помощью Docker без установки Go в системе. Команда запустит main.go из текущего каталога и выведет результат.",4040,0,0,goproglib
1532,2021-03-19 07:01:18+00:00,"Подписывайтесь на наш новый канал @devopsslib и получайте полезные материалы по всему, что может быть интересно DevOps-специалисту.",3723,0,0,goproglib
1531,2021-03-18 18:37:27+00:00,О функциях первого класса в Go: https://proglib.io/w/fc6e7bee,3902,0,0,goproglib
1530,2021-03-18 16:59:05+00:00,Разработчики языка выпустили Go 1.16.1 и Go 1.15.9: https://proglib.io/w/417e350d,3764,0,0,goproglib
1528,2021-03-18 07:01:17+00:00,"**Зачем нужна математика? **

Из лекции аспиранта ВМК МГУ вы узнаете основные кейсы применения математики в индустриальных задачах.

https://proglib.io/w/ae566036",3641,0,0,goproglib
1527,2021-03-17 11:28:57+00:00,Гайд по переменным окружения в Go: https://proglib.io/w/47cd6c65,5130,0,0,goproglib
1526,2021-03-16 17:30:02+00:00,"**Внедрение зависимостей в Go**

В статье описано о DI в целом, о существующих DI-проектах, а также об их преимуществах и недостатках. 

https://proglib.io/w/e6280b03",5250,2,0,goproglib
1525,2021-03-16 12:01:06+00:00,"Go-разработчик с нуля всего за год!

Нравится программирование, но не можешь разобраться во всем самостоятельно? Мы поможем освоить новую профессию и расскажем, как найти высокооплачиваемую работу после обучения!
Переходи по ссылке и регистрируйся ▶️ https://clc.am/kp4-1A 

На курсе «Профессия Go-разработчик» ты получишь базовые знания программирования, а также подробное обучение по работе с Golang. Пройдя обучающий курс, ты создашь крутое портфолио и сможешь претендовать на должность junior-программиста.
Регистрируйся пока есть скидки до 60% на обучение!",3789,0,0,goproglib
1524,2021-03-15 14:02:45+00:00,"Читайте интервью с **Java-тимлидом** компании Dino Systems. Вы узнаете из первых рук, легко ли пройти путь от джуна до профессионала высокого класса и какие препятствия могут на нем встретиться.

https://proglib.io/sh/VLBFeGyvWu",3881,0,0,goproglib
1522,2021-03-15 08:12:29+00:00,"[​](https://github.com/nakabonne/ali/raw/master/images/demo.gif)**Ali** — инструмент тестирования нагрузки, способный выполнять анализ в режиме реального времени.

https://proglib.io/w/d19f5838",6141,0,0,goproglib
1521,2021-03-14 10:01:00+00:00,Сравниваем производительность `map` и `switch` в Go: https://proglib.io/w/60f513d2,4906,0,0,goproglib
1520,2021-03-14 08:24:42+00:00,Подписывайтесь на наш Instagram и узнавайте полезную информацию первыми: instagram.com/proglibrary,4535,0,0,goproglib
1519,2021-03-13 08:00:32+00:00,Автор статьи делится опытом организации структур в проектах на Go: https://proglib.io/w/b2f5174a,5191,0,0,goproglib
1518,2021-03-12 06:43:40+00:00,"Короткие советы по работе с ошибками в обработчиках HTTP.

https://proglib.io/w/411a64f7",6278,0,0,goproglib
1517,2021-03-11 07:35:50+00:00,"Нещадин Иван из Авито рассказывает про оптимизацию микросервиса на Go. 

https://proglib.io/w/7e7a6022",6241,0,0,goproglib
1516,2021-03-10 10:07:03+00:00,"6 шагов на пути к изучению Go и созданию надежного портфолио.

https://proglib.io/w/269bdbc4",4628,0,0,goproglib
1515,2021-03-09 08:00:17+00:00,Практика на Go в режиме live-кода от comerc (#кодеротбога): https://proglib.io/w/eff02ea0,4484,0,0,goproglib
1514,2021-03-08 19:03:14+00:00,"[​](https://telegra.ph/file/23fc129ab2304dd794bfc.jpg)**Хотите освоить Data Science и не можете выбрать специализацию? Разберитесь с математической базой!

10 марта с 19:00 до 20:30** «Библиотека программиста» проводит бесплатный вебинар **«Какие разделы математики в каких областях Data Science используются?»** 
Потратив всего два академических часа (одну вузовскую «пару»), вы получите представление о существующих внутри отрасли профессиях и сможете понять, в каком объеме нужно овладеть математикой для получения работы мечты.

Занятие проведет преподаватель курсов МГУ Кирилл Герасимов, автор более 15 научных публикаций. Он расскажет о практических примерах применения математических методов в Data Science и ответит на вопросы участников.

Зарегистрироваться можно [тут](https://proglib.io/w/49488fb3)",4541,0,0,goproglib
1513,2021-03-08 07:00:15+00:00,"Подборка руководств для изучения Go от Microsoft, из которых вы узнаете: 

- основные инструменты, необходимые для написания первых строк кода; 
- основные типы данных в Go; 
- как использовать потоки управления в Go; 
- как обрабатывать ошибки; 
- как использовать методы и интерфейсы; 
- как работает параллелизм в Go. 

Последний модуль подразумевает написание и тестирование программы.

https://proglib.io/w/ada69343",4720,0,0,goproglib
1512,2021-03-07 06:21:11+00:00,"**Cloud Native Go: Building Reliable Services in Unreliable Environments (2021)

Автор: **Matthew A. Titmus

Что общего у Docker, Kubernetes и Prometheus? Все эти облачные технологии написаны на языке программирования Go. В этой практической книге показано, как использовать сильные стороны Go для разработки масштабируемых и отказоустойчивых облачных сервисов, даже в непредсказуемой среде. 

Вы изучите состав и построение этих приложений, от низкоуровневых функций Go до шаблонов проектирования среднего уровня и до архитектурных соображений высокого уровня.",6180,0,0,goproglib
1511,2021-03-06 06:26:55+00:00,"**Автономный сервер блога на Go 1.16**

Новый пакет `embed` в Go 1.16 предлагает возможность встраивать файлы непосредственно в двоичный файл Go. Используем эту возможность для создания веб-сервера, распространяемого как статический двоичный файл, со всеми встроенными в него ресурсами.

https://proglib.io/w/cddd5174",4910,0,0,goproglib
1510,2021-03-05 08:46:39+00:00,"Серия статей **How to Golang**:

- [Самый простой способ встроить статические файлы в двоичный файл в вашем приложении Golang](https://dev.to/koddr/the-easiest-way-to-embed-static-files-into-a-binary-file-in-your-golang-app-no-external-dependencies-43pc)
- [Пишем конфиг для веб-приложения Go ](https://dev.to/koddr/let-s-write-config-for-your-golang-web-app-on-right-way-yaml-5ggp)
- [Как обновить кеш версий вашего пакета в pkg.go.dev](https://dev.to/koddr/how-to-update-version-s-cache-of-your-package-in-pkg-go-dev-39ij)
- [Как развернуть приложение Go в любой системе GNU / Linux, но без Docker](https://dev.to/koddr/how-to-deploy-golang-application-on-any-gnu-linux-system-but-without-docker-59m1)
- [Мощный интерфейс командной строки для создания готового к продакшн проекта с автоматизацией бэкэнда, внешнего интерфейса и развертывания](https://dev.to/koddr/a-powerful-cli-for-create-a-new-production-ready-project-with-backend-frontend-and-deploy-automation-3e2c)
- [Что нового и особенного в Create Go App CLI v1.7.0](https://dev.to/koddr/what-s-new-and-special-in-create-go-app-cli-v1-7-0-m09)
- [Работа с RabbitMQ в Go на примерах](https://dev.to/koddr/working-with-rabbitmq-in-golang-by-examples-2dcn)
- [Asynq: простая, надежная и эффективная распределенная очередь задач для вашего следующего проекта на Go](https://dev.to/koddr/asynq-simple-reliable-efficient-distributed-task-queue-for-your-next-go-project-4jhg)
- [Простой способ перевести ваше приложение на Go](https://dev.to/koddr/an-easy-way-to-translate-your-golang-application-5ege)
- [Релиз проекта Create Go App v2.0.0](https://dev.to/koddr/the-create-go-app-project-has-grown-to-v2-but-is-still-easier-better-faster-stronger-575j)
- [Как сделать понятные и красивые сообщения об ошибках от бэка Go к фронту](https://proglib.io/w/d26b99d4)
- [Оптимизация запросов PostgreSQL](https://dev.to/koddr/postgresql-query-optimization-for-gophers-it-s-much-easier-than-it-sounds-24nf)
- [Полезные инструменты Go](https://dev.to/koddr/helpful-golang-tools-to-make-your-code-great-again-3739)",6260,0,0,goproglib
1509,2021-03-04 18:08:28+00:00,Короткие советы по именованию: https://proglib.io/w/495d477d,4449,0,0,goproglib
1507,2021-03-04 15:47:13+00:00,"**Сегодня с 19:00 до 20:30 «Библиотека программиста» проводит бесплатный вебинар «Зачем нужна математика?»**. Вы узнаете, почему математику называют царицей наук, чем дискретная математика отличается от непрерывной и с чем едят матанализ. 

Аспирант факультета ВМК МГУ Дмитрий Емельянов расскажет вам о применении абстрактной науки в реальной жизни и в сфере высоких технологий, а потом ответит на вопросы участников.

Подключиться [тут](https://youtu.be/ocDrfgTkjXg)",10785,0,0,goproglib
1506,2021-03-03 16:42:49+00:00,"Пополняемая серия статей про разработку клиента Telegram на Go:

- [Часть 1: парсим схему](https://proglib.io/w/a02a852e)
- [Часть 2: бинарный протокол](https://proglib.io/w/b7b5566c)",4717,0,0,goproglib
1505,2021-03-02 18:39:23+00:00,"Статья о том, как быстро создать микросервис на Go в Kubernetes с помощью Telepresence: https://proglib.io/w/3d829a33",5440,0,0,goproglib
1504,2021-03-01 18:30:18+00:00,"Хотите освоить сложную ИТ-специальность, но не знаете с чего начать? Начните с самого сложного!

**4 марта с 19:00 до 20:30 «Библиотека программиста» проводит бесплатный вебинар «Зачем нужна математика?»**. Вы узнаете, почему математику называют царицей наук, чем дискретная математика отличается от непрерывной и с чем едят матанализ. 

Аспирант факультета ВМК МГУ Дмитрий Емельянов расскажет вам о применении абстрактной науки в реальной жизни и в сфере высоких технологий, а потом ответит на вопросы участников.

Зарегистрироваться можно [тут](https://proglib.io/w/72b10a5f)",3936,0,0,goproglib
1503,2021-03-01 14:11:23+00:00,"Мы создали каналы, посвящённые [тестированию](https://t.me/testerlib) и [devops’у](https://t.me/devopsslib). Подписывайтесь, будет интересно.",3251,0,0,goproglib
1502,2021-03-01 07:02:40+00:00,"**Руководство для начинающих по разумным абстракциям с использованием Golang**

В статье демонстрируется простая и понятная структура веб-сервера Golang, который автор использует для всех своих проектов, с особым акцентом на том, как реализовать абстракции.

https://proglib.io/w/ddbd8b85",4261,0,0,goproglib
1501,2021-02-28 07:02:02+00:00,"**50 оттенков Go**

Разбираем распространённые ловушки, подводные камни и ошибки для разработчиков на Go.

https://proglib.io/w/f374b429",5683,0,0,goproglib
1500,2021-02-27 07:49:11+00:00,"«У Go хоть и простой синтаксис, но делать полезные вещи на нем не всегда просто» — примерно так описывает язык автор [статьи](https://proglib.io/w/3864b554), которая вызвала бурное обсуждение на различных форумах.",3989,0,0,goproglib
1498,2021-02-26 09:00:23+00:00,Введение в интерфейсы Go: https://proglib.io/w/2ceadde3,3802,0,0,goproglib
1497,2021-02-26 06:00:22+00:00,"️ **Через 7 часов закрывается регистрация на онлайн-хакатон по разработке децентрализованных финансовых протоколов на Tezos**

Сооснователь и ранний архитектор Tezos Артур Брайтман записал видеоприглашение: «Одна из наших первоочередных задач — это привлечь на Tezos DeFi-активы. Экосистема растет и приветствует новые идеи. Приходите на хакатон и становитесь частью сообщества».

Онлайн-хакатон пройдет с 26 по 28 февраля. Регистрация заканчивается 26 февраля в 16:00 по Москве. Призовой фонд составит $25 000, максимальная награда — $12 000. Участники смогут продолжить разработку идей с хакатона при грантовой поддержке Tezos Foundation.

 [Детали и регистрация](https://hackathon.tezos.org.ua/?utm_source=proglib&utm_medium=2goproglib) ",3748,0,0,goproglib
1494,2021-02-25 15:01:08+00:00," **Какие еще IT-каналы стоит читать в Telegram? Подписывайтесь на наших друзей:**

[CodeCamp](https://t.me/campcode) —  **мастхэв** канал для любого IT-специалиста: полезные сервисы, лайфхаки, подборки книг и видеоуроков.

[Эксплойт](https://t.me/exploitex) — секреты безопасности в сети, хакерские трюки и полезные сервисы для айтишников и не только.

[UniLecs](https://t.me/unilecs) — задачи, головоломки, книги и другие радости программиста.

[GIT](https://t.me/gitservices) — это сборник инструментов для ИТ специалиста и не только.

@sitodel — авторы канала бесплатно обучают необходимым навыкам создания сайтов и делятся полезными инструментами для веб-разработки.",3747,0,0,goproglib
1493,2021-02-25 08:39:02+00:00,"Ускоренный курс по изучению gRPC и его интеграции с вашими приложениями на Go.

https://proglib.io/w/7624b298",5578,0,0,goproglib
1489,2021-02-24 08:26:38+00:00,"Перевод статьи, в которой демонстрируются интересные аспекты ручного управления памятью в Go, а также одновременное выполнение операций над памятью в Go и C++.

https://proglib.io/w/6a6706f0",4156,0,0,goproglib
1488,2021-02-23 08:00:08+00:00,"Если вы используете Vim в качестве основного редактора или планируете переход на него, вам точно будут интересны подходы к использованию сниппетов данного редактора с ловкостью ковбоя  . Сниппеты на Go прилагаются.

https://proglib.io/w/9a1889c4",3958,0,0,goproglib
1487,2021-02-22 08:00:27+00:00,"Короткий мануал по работе с PostgreSQL в Go с помощью пакета database/sql и решению основных проблем. 

https://proglib.io/w/9d5b92f8",5363,0,0,goproglib
1486,2021-02-21 18:04:30+00:00,"**Go Time** — еженедельный подкаст с разнообразными обсуждениями всего сообщества Go от [Changelog Media](https://changelog.com/). Обязательно обратите внимание на данный подкаст, т. к. среди приглашенных часто появляются ребята из команды Golang.

Так, в 165м выпуске гостем стал Michael Knyszek, который рассказал о том, что происходит, когда программа заканчивается. Как очищаются дескрипторы файлов? Когда запускаются отложенные функции, а когда они полностью пропускаются? Есть ли способ остановить все запущенные горутины?",3893,0,0,goproglib
1485,2021-02-20 18:00:56+00:00,"[​](https://telegra.ph/file/3a709889c282fa3a208cf.jpg)8 рекомендаций по обеспечению безопасности для Go-разработчиков.

https://proglib.io/w/d61ac5e3",4184,0,0,goproglib
1484,2021-02-20 15:01:03+00:00," Tezos приглашает на [хакатон](https://hackathon.tezos.org.ua/?utm_source=proglib&utm_medium=goproglib) по разработке децентрализованных финансовых приложений с максимальным призом $12 000 

Онлайн-хакатон пройдет с 26 по 28 февраля. [Регистрация](https://hackathon.tezos.org.ua/?utm_source=proglib&utm_medium=goproglib) заканчивается 26 февраля в 16:00 по Москве. Призовой фонд составит $25 000. Участвовать могут индивидуальные разработчики и команды.

После хакатона участники смогут продолжить разработку идей при грантовой поддержке Tezos Foundation.

Победителей познакомят с ключевыми организациями в экосистеме: TQ Tezos, Tezos Foundation и Tezos Commons. А еще о призерах напишут в глобальных сообществах Tezos на 130 000 подписчиков.

‍ [Хакатонить!](https://hackathon.tezos.org.ua/?utm_source=proglib&utm_medium=goproglib)

️‍️ [Узнать детали](https://hackathon.tezos.org.ua/?utm_source=proglib&utm_medium=goproglib)",3702,0,0,goproglib
1483,2021-02-19 10:26:56+00:00,"**Интересная статья об отладке с помощью Go: «Когда решение прямо перед вами»**

Делится опытом Рауль Джордан, работающий над протоколом блокчейна Ethereum.

https://proglib.io/w/a57bd385",5059,0,0,goproglib
1482,2021-02-18 18:24:18+00:00,Интересный подход к организации структуры проекта на Go: https://proglib.io/w/08f791ab,3987,0,0,goproglib
1480,2021-02-17 19:00:44+00:00,"Чек-лист для публикации приложения на Go в GitHub.

https://proglib.io/w/7d80596c",5324,0,0,goproglib
1479,2021-02-17 17:30:25+00:00,Полгода и новая версия языка. Встречайте Go 1.16: https://proglib.io/w/8fe6fe87,3571,0,0,goproglib
1478,2021-02-17 15:55:01+00:00,"**Через 5 минут начинаем конфу, заходите:

**https://www.joinclubhouse.com/event/PD4bY4da",3525,0,0,goproglib
1476,2021-02-17 15:12:07+00:00,"PROGLIB IN DA HOUSE

А если быть точнее, в ClubHouse

Что это такое? Простыми словами, это живые подкасты, в которых каждый может высказать свою точку зрения, делиться мыслями, участвовать в дискуссиях и просто слушать

Приложение хорошо тем, что позволяет сформировать круг людей, имеющих похожие интересы. У вас есть возможность познакомиться с новыми людьми, которые имеют схожие с вами цели и стремления

Вчера мы протестировали приложение, а уже сегодня готовы провести общую беседу в 19:00 на тему: «Что такое ClubHouse и как его использовать айтишнику»

Хотите поучаствовать? Переходите в [наш чат](https://t.me/joinchat/WDa5MSWELuBaPB-Y). Вся информация также будет [тут.](https://t.me/proglibhouse)",3754,0,0,goproglib
1475,2021-02-17 14:09:27+00:00,"Нам в команду rhino-digital.com требуется программист.

Что делать:
Разработка и развитие продукта на базе Golang (апи), Yii2 (админка) с нуля
Внедрение новых архитектур разработки, к примеру Domain-Driven Design или TDD;

Какими навыками нужно обладать:
Опыт разработки от 2 лет, а также опыт работы в команде;
Умение работать с синтаксисом и фишками PHP 7.4 и выше (например, оператор “Космического корабля”, ""preload"");
Умение разрабатывать сервисы для golang, наличие подтвержденных проектов на Go желательно при работе с микротранакциями;
Свободно дирижировать принципами MVC и ООП;
Опыт работы с Докером и кубернетесом;
Умение выстраивать логику множественных взаимосвязей внутри проекта для учета микротранзакций во времени;
Базы данных: mysql, clickhouse, mongoDB;
Опыт работы с kafka и(или) rabbitmq;

Большим плюсом будет:
1. Websockets;
2. angular;
3. Опыт работы с партнерскими системами;

ЗП:
Обсуждаем на собеседовании или в лс;

Остальные условия:
- полная удаленка;
- график 5/2 с 10 до 19 по МСК (с часом на перерыв);
- оплачиваемые переработки;

Если заинтересовало:
Пиши сюда @villaintretenmerth или @fekby",3589,0,0,goproglib
1473,2021-02-16 18:04:28+00:00,"[**Rqlite**](https://proglib.io/w/8d6eb0bb) — это легкая распределенная реляционная база данных, построенная на SQLite и написанная на Go. 

Она предоставляет вам функциональность надежной, отказоустойчивой реплицированной реляционной базы данных с очень простой установкой, развертыванием и эксплуатацией. Недавно кстати [состоялся релиз версии 5.10.0](https://proglib.io/w/6bb4cd9c), который включал ряд ключевых изменений и не обошелся без проблем, связанных с утечкой памяти (в [5.10.1](https://github.com/rqlite/rqlite/releases/tag/v5.10.1) данную проблему пофиксили).",3789,0,0,goproglib
1471,2021-02-15 18:04:15+00:00,"[​](https://telegra.ph/file/f8c34d26cf3e57349c0c1.jpg)Такое представление может помочь думать о конкурентности как о конвейере. Каждый рабочий (горутина) выполняет задание, затем отправляет результат по сборочной линии (каналу).",3715,0,0,goproglib
1469,2021-02-14 09:36:18+00:00,"[​](https://telegra.ph/file/70a74bc2da3e60626bb4e.jpg)**Gofakeit** — инструмент, представляющий собой генератор случайных поддельных данных на Go. Может стать отличным подспорьем для индивидуальных нужд тестирования.

https://proglib.io/w/17530a2f",4643,0,0,goproglib
1468,2021-02-13 09:27:10+00:00,"Архитектура тестирования микросервисов: как ввести несколько видов тестов в проект на Go.

https://proglib.io/w/89e81336",5778,0,0,goproglib
1467,2021-02-12 18:10:52+00:00,"На канале уже упоминались данные ресурсы, но стоит напомнить, т. к. они постоянно обновляются и развиваются. Вы увидите решения базовых задач на Go, полезные учебные пособия, объяснения различных концепций с примерами кода, а также основы веб-разработки.

- [Gowebexamples](https://proglib.io/w/40e11be5) 
- [Golangprograms](https://proglib.io/w/442ebdc4)",4324,0,0,goproglib
1466,2021-02-11 19:00:46+00:00,"Уважаемые гоферы, сегодня важный день! Предложение по дженерикам принято официально. 

https://proglib.io/w/373ad2b9",4977,0,0,goproglib
1464,2021-02-11 16:30:31+00:00," Вот ещё один способ заработать и узнать про новую технологию. Через полчаса Tezos Ukraine начинают онлайн-воркшоп по смарт-контрактам – за решение практического задания и дельные вопросы дают по 500 XTZ (≈ $1900). Воркшоп ведет Михаил Дегтярев – блокчейн-разработчик с трехлетним опытом из компании Attic Lab.

`Tezos` – блокчейн-платформа с поддержкой смарт-контрактов, токенов и децентрализованных приложений. В сравнении с Ethereum код смарт-контрактов на Tezos верифицируем, скорость транзакций выше (40 tx/sec), а комиссии в сотни раз ниже, чем в сети Ethereum.

**Формат**: прямая трансляция на [YouTube
](https://bit.ly/2MIr7lL)**Медиапартнер**: ForkLog, крупнейшее медиа о блокчейн-технологиях на русском.
**Когда**: через 30 минут. [Присоединяйтесь к трансляции](https://bit.ly/2MIr7lL) или добавляйте мероприятие в [календарь](https://bit.ly/3qcICZO)",4333,0,0,goproglib
1463,2021-02-10 16:29:49+00:00,"Любителям сериала «Ход королевы» (The Queen's Gambit) и языка Go посвящается: портирование шахматного движка [sunfish](https://github.com/thomasahle/sunfish) на Go.

https://proglib.io/w/07995fb4",4622,0,0,goproglib
1462,2021-02-09 16:58:45+00:00,"Серия статей про написание REST-серверов на Go с использованием различных подходов:

- [Стандартная библиотека](https://eli.thegreenplace.net/2021/rest-servers-in-go-part-1-standard-library/)
- [Использование пакета маршрутизатора](https://eli.thegreenplace.net/2021/rest-servers-in-go-part-2-using-a-router-package/)
- [Использование веб-фреймворка](https://eli.thegreenplace.net/2021/rest-servers-in-go-part-3-using-a-web-framework/)
- [Использование OpenAPI и Swagger](https://eli.thegreenplace.net/2021/rest-servers-in-go-part-4-using-openapi-and-swagger/)
- [Moddleware](https://eli.thegreenplace.net/2021/rest-servers-in-go-part-5-middleware/)
- [Аутентификация](https://eli.thegreenplace.net/2021/rest-servers-in-go-part-6-authentication/)
- [GraphQL](https://eli.thegreenplace.net/2021/rest-servers-in-go-part-7-graphql/)",5867,0,0,goproglib
1461,2021-02-08 18:28:59+00:00,Пишем простые инструменты моделирования на Go с помощью базовых навыков программирования и генератора случайных чисел: https://proglib.io/w/6a804779,4656,0,0,goproglib
1459,2021-02-07 13:05:59+00:00,"Опытный разработчик на Go, в частности в разработке CLI-приложений, раскритиковал  [данную](https://eryb.space/2020/05/27/diving-into-go-by-building-a-cli-application.html) [работу](https://eryb.space/2020/05/27/diving-into-go-by-building-a-cli-application.html) и продемонстрировал более эффективную архитектуру CLI-приложения на Go. 

https://proglib.io/w/df814d04",5520,0,0,goproglib
1458,2021-02-06 10:06:38+00:00,"Автор статьи считает, что самый эффективный способ оценки навыков разработчика — разбор его кода. Вы согласны с этим? Так вот, он собрал популярные задачи на собеседованиях и представил решения к ним. Ознакомиться можно по [ссылке](https://proglib.io/w/88183a75).",4894,0,0,goproglib
1457,2021-02-05 17:05:03+00:00,"[​](https://telegra.ph/file/ef4df2765e1ae867c63c6.jpg)Тут JetBrains опубликовала результаты опроса **The state of Go**. Краткие выводы:

 Китай имеет самый большой коэффициент Go-разработчиков (16%), затем идет Япония, Россия , Украина, Великобритания, Канада, США и другие  
 Go занимает 10е место в общем рейтинге
 Веб-сервисы являются наиболее популярной областью использования Go
 Программисты на Go работают в основном в сфере ИТ-услуг, за ней следуют финансы и финтех, облачные вычисления / платформы и другие отрасли
 Go Modules — самый популярный менеджер пакетов среди разработчиков Go
 Самые популярные маршрутизаторы — gorilla / mux и stdlib.
 Веб-фреймворк Gin набирает популярность
 Доля разработчиков, использующих встроенное тестирование, упала, в то время как использование других платформ тестирования немного выросло

[Ознакомиться](https://proglib.io/w/842412fb) с материалами статьи.",4207,0,0,goproglib
1456,2021-02-04 17:55:08+00:00,"Релиз Go 1.16 включил много интересных обновлений, но одними из самых ожидаемых дополнений стандартной библиотеки Go являются пакеты `io/fs` и `testing/testfs`. Разбираемся, что к чему.

https://proglib.io/w/9b6126a1",4054,0,0,goproglib
1455,2021-02-03 17:07:13+00:00,"В GoLand 2021.1 завезли много новых и полезных возможностей, в частности: 

 Улучшена работа с JSON таким образом, что теперь намного проще создавать теги JSON и XML для всех экспортированных полей в структуре
 Добавлен рефакторинг __Rename__ в файл go.mod, который позволяет безопасно присвоить модулю новое имя без необходимости выполнять поиск и замену в дереве проекта для замены старого имени модуля
 Добавлено меню быстрого доступа
 Добавлено автозавершение кода на основе машинного обучения и многое другое 

Программа раннего доступа доступна уже сейчас. [Узнать подробности](https://proglib.io/w/de0b1ca1).",4181,0,0,goproglib
1454,2021-02-03 10:31:08+00:00,"[​](https://telegra.ph/file/1d3ec76ed31dbdaa3772e.mp4)#вакансия #GO #node.js #Казань #backend 
 
Ты профессионал в разработке и мечтаешь, чтобы твой код помогал миллионам людей? 
 
Компания: ПАО «Совкомбанк» 
Локация: Казань 
Формат: микс (офис+удаленка), на удаленке точно будем до лета 
Зарплатная вилка: 70.000 - 150.000к 
 
Мы в команде E-Commerce Совкомбанка разрабатываем нагруженные проекты со сложным бэком, насыщенные бизнес-логикой. Каждый день мы делаем наши интернет-заявки удобными, быстрыми и надёжными. И, конечно, идей и задач у нас больше, чем мы сейчас можем реализовать. 
Нужна твоя помощь! 
 
Что мы делаем: 
пишем нагруженные сервисы на Golang + Node.js 
используем MongoDB, MySQL (MariaDB), стек EFK, Docker/Kubernetes 
 интегрируемся с различными системами по REST API и openAPI 
 
Что нужно от тебя: 
 уже не менее года писать качественный код на Go, Node.js 
 любить пробовать новое, отслеживать и применять полезные новшества, 
 постоянно думать о производительности и безопасности кода. 
 
Что мы предлагаем: 
развитие крупных нагруженных проектов (бэкэнда и API), 
удобный график работы, включающий удаленку, 
 крутой офис с зонами отдыха, фруктами и напитками, 
 обучение и конференции, 
 конкурентную зарплату и премии за проекты, 
 увесистый соцпакет (ДМС, фитнес, образование, спецусловия на любые банковские продукты (ипотека, авто, кредиты, карты) 
 
Чего у нас нет: 
легаси-кода и дресс-кода, 
лишних менеджеров и начальников, 
рутины и необходимости поддерживать старые системы. 
 
Скорее [присоединяйся](https://proglib.io/vacancies/golang-backend-developer-pao-sovkombank-2021-02-03)  
 
Контакты: IT HR «Совкомбанк» 
Алеся Калинская
@luckypony95",4903,0,0,goproglib
1452,2021-02-02 08:02:56+00:00,"Недавно релизнулся популярный отладчик Delve 1.6.0. Журнал изменений [здесь](https://proglib.io/w/a8d1cdfe).

Если вы не работали с ним, предлагаем ознакомиться с [данным видео](https://proglib.io/w/87f2b2a3), которое научит: 
- легко отлаживать и проверять программы на Go с помощью инструмента командной строки delve debugger; 
- просматривать, добавлять и изменять точки останова в программе на Go; 
- перемещаться по программе строка за строкой или через точки останова;
- проверять значения переменных, функций и выражений.",3784,0,0,goproglib
1451,2021-02-01 18:14:54+00:00,"Плейлист, который позволит погрузиться в следующие аспекты стандартной библиотеки Go:

- io.TeeReader Example
- io.Writer Interface
- Go (Golang) Maps Tutorial
- io.Reader Interface
- http RoundTripper Explained
- Context Tutorial
- JSON Encoding Tutorial
- REST API Example [Without Framework]

https://proglib.io/w/275fc1fd",5408,0,0,goproglib
1450,2021-01-31 18:40:05+00:00,"О некоторых проблемах освобождения ресурсов в Go и методах их решения с помощью инструмента [kdone](https://proglib.io/w/e5f5ffcb).

https://proglib.io/w/efaaab28",3850,0,0,goproglib
1449,2021-01-31 16:55:51+00:00,"**Какие медиа Вы читаете?**

Пройдите короткий опрос и получите **промокод 5% на все курсы Библиотеки программиста**! 

https://docs.google.com/forms/d/e/1FAIpQLSd3389cZTNhrnifV_5JaQuKVXzUFykk74Y-pK7jVioqlrV3lQ/viewform

Опрос займет всего пару минут",3647,0,0,goproglib
1448,2021-01-30 18:09:43+00:00,"**Nonsequential and Distributed Programming with Go**
Synchronization of Concurrent Processes: Communication - Cooperation - Competition (2021)

**Автор**: Christian Maurer

Книга знакомит с непоследовательным и распределенным программированием на Go. В ней систематически представлены основные концепции синхронизации и взаимодействия конкурентных процессов.

Алгоритмы сформулированы на языке Go, который можно использовать для выражения множества концепций синхронизации. Благодаря простому синтаксису Go также предлагает то преимущество, что читатели без предварительных знаний могут следовать основным концепциям.",5347,0,0,goproglib
1447,2021-01-29 19:00:16+00:00,[​](https://telegra.ph/file/51bc952f6e41b4cf942b5.jpg)#humor,3986,0,0,goproglib
1446,2021-01-29 14:38:00+00:00,"Выпущен Go 1.16 Release Candidate 1: https://proglib.io/w/939ac3ac

[Примечания к выпуску](https://tip.golang.org/doc/go1.16)",3698,0,0,goproglib
1445,2021-01-28 18:33:45+00:00,"Обзор 20ти полезных пакетов Go, которые помогут усовершенствовать ваши приложения и сэкономить время.

https://proglib.io/w/3cfe6be1",4252,0,0,goproglib
1444,2021-01-28 16:02:59+00:00,"Google исправила критическую уязвимость удаленного выполнения кода (RCE) в Go.

CVE-2021-3115, в основном затрагивает пользователей Windows, выполняющих команду `go get`, из-за поведения по умолчанию при поиске PATH в Windows.

[Подробности](https://proglib.io/w/46bb1d5f)",3641,0,0,goproglib
1443,2021-01-28 09:00:16+00:00,"Интенсив по Docker для разработчиков без «капитанской теории». Отправляемся 25 февраля.

На 2 дня оставим за бортом всё то, о чём и так все знают и погрузимся в глубины крутейшей практики. Вы запустите сайт в контейнере, соберёте несколько контейнеров в рабочую систему, запустите готовый pipeline в Gitlab, рассмотрите подводные камни использования stateful и Docker и научитесь обходить ограничения DockerHub. Помимо этого расскажем об особенностях использования контейнеров с ruby, php, python, go, java, c#, c++  и работе Docker в облаках.

Интересно? А ведь это ещё не всё! Почитать всю программу (там много вкусного) и посмотреть реальные примеры практических заданий [можно на сайте](https://slurm.io/docker-intensive?utm_source=tg&utm_medium=social&utm_campaign=docker_intensive&utm_content=post_28_01_2021&utm_term=goproglib).

Йо-хо-хо, морские волки! На абордаж!",3638,0,0,goproglib
1442,2021-01-27 08:00:24+00:00,Кратко о востребованности Go-разработчиков от Хабр Карьеры: https://proglib.io/w/b220eb1d,3832,0,0,goproglib
1441,2021-01-26 18:01:51+00:00,"[​](https://telegra.ph/file/35ade5d745b2b46054131.jpg)Ребята из [Razorpay](https://razorpay.com/) реализовали аналог Python-библиотеки [numpy-financial](https://github.com/numpy/numpy-financial) на Go и включили в нее создание графика амортизации. На данный момент в приоритетном порядке перенесены только 4 функции, но работа идет полным ходом. Отлично подойдет для сферы финтех.

https://proglib.io/w/a1ce9982",3930,0,0,goproglib
1440,2021-01-25 08:00:07+00:00,"Почему пакеты Go так отличаются от других языков? Это потому, что их надо рассматривать как слои, а не группы.

https://proglib.io/w/de74b266",4142,0,0,goproglib
1439,2021-01-24 07:01:42+00:00,Мэт Райер на dotGo 2017 с докладом «Искусство тестирования»: https://proglib.io/w/34f1552a,4089,0,0,goproglib
1438,2021-01-23 06:59:26+00:00,"Евгений Радионов, бэкенд-разработчик на Go, делится опытом настройки продвинутого полнотекстового поиска с использованием ElasticSearch и рассказывает, как интегрировать его в приложение на Go так, чтобы это было удобно поддерживать и расширять.

https://proglib.io/w/8e240968",4692,0,0,goproglib
1437,2021-01-22 18:00:51+00:00,"Краткий список изменений, которых стоит ожидать в Golang 1.17: https://proglib.io/w/a04b3037",3753,0,0,goproglib
1435,2021-01-21 11:49:20+00:00,Команда разработчиков языка выпустила версии Go 1.15.7 и Go 1.14.14 для решения нескольких недавно обнаруженных проблем безопасности: https://proglib.io/w/2215f6bc,3662,0,0,goproglib
1434,2021-01-20 16:52:56+00:00,Ускоряем работу с Go и SQLite с помощью пула соединений и подготовленных операторов: https://proglib.io/w/a491a1db,4899,0,0,goproglib
1433,2021-01-20 09:00:11+00:00,"Как Go-разработчику дорасти до мидла и выше? У нас есть ответ!
⠀
Уже знакомы с Golang или другим языком программирования, хотите знать, как развиваться дальше? Онлайн-курс «Go-разработчик PRO» поможет вам повысить уровень владения языком и добиться новых высот в профессии!
⠀
За 8 месяцев вы научитесь:
- разрабатывать веб-приложения с микросервисной архитектурой;
- работать с многопоточностью и конкурентностью;
- использовать алгоритмы и паттерны;
- уменьшать время отклика от сервера;
- работать с сетевыми протоколами;
- проектировать приложения и API;
- разворачивать приложения на Go в Docker;
- понимать принципы взаимодействия приложений на Go с операционными системами *nix.
⠀
По окончании курса вас ждёт дипломный проект, который дополнит портфолио. Вы самостоятельно создадите сервис для получения данных о маршрутах с функциями рендеринга через OSRM, сохранения и отдачи данных пользователю. 
⠀
Записывайтесь сейчас: https://clc.am/xlWxKg и получите скидку до 60%!",3828,0,0,goproglib
1432,2021-01-19 19:20:20+00:00,"**Structslop** — инструмент, который исследует и рекомендует оптимальное расположение полей структуры. Это поможет уменьшить объем оперативной памяти и сделать код более эффективным.

[Подробное описание](https://proglib.io/w/d0bbf033)
[Репозиторий](https://github.com/orijtech/structslop)",4998,0,0,goproglib
1430,2021-01-19 11:50:11+00:00,Пакет `ioutil` будет исключен из версии Go 1.16: https://proglib.io/w/5bf111d1,3717,0,0,goproglib
1429,2021-01-18 07:00:25+00:00,"Статья, в которой показан процесс преобразования старого статического сайта в современный динамический с помощью Buffalo (экосистема веб-разработки на Go).

https://proglib.io/w/a876ac01",4101,0,0,goproglib
1428,2021-01-17 15:28:16+00:00,"**Gta** — инструмент от DigitalOcean, который позволяет найти пакеты, зависимости которых изменились. 

Во время сборки или непрерывной интеграции вам не придется собирать каждый пакет, поскольку вы будете знать, какие пакеты (и зависимости) изменились.

[Статья с описанием](https://proglib.io/w/53a7cbe1) 
[Репозиторий](https://github.com/digitalocean/gta)",5235,0,0,goproglib
1427,2021-01-16 11:34:50+00:00,"**Concurrency in Go 
Tools and Techniques for Developers** (2017)

**Автор**: Katherine Cox-Buday

Эта практическая книга демонстрирует лучшие практики и шаблоны, которые помогут вам включить конкурентность в свои системы.

Автор шаг за шагом проведет вас через этот процесс. Вы поймете, как Go выбирает моделирование конкурентности, какие проблемы возникают из этой модели и как вы можете составлять примитивы в этой модели для решения проблем. Изучите навыки и инструменты, необходимые для уверенного написания и реализации конкурентных систем любого размера.

Книга позволит вам:
- Понять, как Go решает фундаментальные проблемы, которые затрудняют правильное выполнение конкурентности.
- Узнать о ключевых различиях между параллелизмом и конкурентностью.
- Сформировать шаблоны с этими примитивами для написания поддерживаемого конкурентного кода.
- Составить из шаблонов серию приемов, которые позволят писать большие распределенные системы.
- Изучить синтаксис примитивов синхронизации памяти Go и многое другое.",6511,0,0,goproglib
1426,2021-01-15 17:00:53+00:00,"Не совсем актуальный по дате, но актуальный по практической значимости материал о том, как рефакторинг помог ускорить программу на Go в 23 раза.

https://proglib.io/w/3f4c6e82",4226,0,0,goproglib
1425,2021-01-15 15:13:14+00:00,"[​](https://telegra.ph/file/8a6c9b72ba6434f9cc2c0.jpg)#humor 

JSON Statham",4320,0,0,goproglib
1424,2021-01-14 18:12:20+00:00,"[​](https://telegra.ph/file/908614e9a18fbc8324b58.jpg)Шпаргалка по работе со срезами в Go.

https://proglib.io/w/ba1a955f",4764,0,0,goproglib
1423,2021-01-13 17:42:52+00:00,Структурируем CLI-проект на Go: https://proglib.io/w/1ea7928d,5444,0,0,goproglib
1422,2021-01-12 16:54:04+00:00,Пишем простую IoT-систему на Go: https://proglib.io/w/bbff0050,4366,0,0,goproglib
1421,2021-01-11 07:00:20+00:00,"**Dateparse **— инструмент, предназначенный для работы с разными форматами дат. С помощью сканера для чтения байтов и конечного автомата для поиска формата он позволяет анализировать множество строк даты, не зная заранее формата. 

https://proglib.io/w/3b5a55fa",4547,0,0,goproglib
1420,2021-01-10 10:08:22+00:00,"Практика работы с картами в Golang:

- [Карты Go: объявление и инициализация](https://bitfieldconsulting.com/golang/map-declaring-initializing)
- [Типы карт в Go](https://bitfieldconsulting.com/golang/map-types)
- [Хранение и получение значений карты](https://bitfieldconsulting.com/golang/storing-retrieving-map-values)
- [Определение наличия ключа карты](https://bitfieldconsulting.com/golang/map-key-exists)
- [Итерация по карте](https://bitfieldconsulting.com/golang/map-iteration)
- [map[string]interface{} в Go](https://bitfieldconsulting.com/golang/map-string-interface)
- [Часто задаваемые вопросы о картах Go](https://bitfieldconsulting.com/golang/map-faq)",5548,0,0,goproglib
1419,2021-01-09 07:52:04+00:00,"Доклад Jaana Dogan на GopherCon 2020 о том, как Go генерирует машинный код. Узнав больше об отладке генерации кода в Go, вы можете понять работу компилятора или проверить, что входит в ваши двоичные файлы.

https://proglib.io/w/810708ae",4266,0,0,goproglib
1418,2021-01-08 10:20:03+00:00,Основы Golang в одной статье: https://proglib.io/w/a3840387,5470,0,0,goproglib
1417,2021-01-07 07:37:44+00:00,"**Kong** — синтаксический анализатор командной строки для Go.

Kong стремится поддерживать произвольно сложные структуры командной строки с минимальными усилиями разработчика, для чего командная строка выражается в виде типов Go со структурой и тегами.

https://proglib.io/w/b001ee71",4024,0,0,goproglib
1416,2021-01-06 08:22:51+00:00,Достоинства и недостатки Golang глазами Java-разработчика: https://proglib.io/w/4b6bffde,3908,0,0,goproglib
1415,2021-01-05 10:17:45+00:00," **Последовательности и прогрессии**

Первое занятие нашего интенсива по математике доступно онлайн! Мы рассмотрели основные понятия о последовательностях и прогрессиях и разобрали несколько ключевых примеров.

https://youtu.be/OjQ75pKKhIw

Пройти весь курс: https://proglib.io/w/9b8b3daa",3852,0,0,goproglib
1414,2021-01-05 07:47:29+00:00,[​](https://telegra.ph/file/b9245d866f4bd77a6fe2b.jpg)Пример реализации чистой архитектуры в проектах на Go: https://proglib.io/w/be39f8ef,4155,0,0,goproglib
1412,2021-01-04 15:37:09+00:00,"У рыбака есть удочка, у программиста — алгоритмы, у дата сайентиста — математика. Но не всем математика книг и курсов по Data Science даётся легко, приходится вспоминать школьные азы: логарифмы, прогрессии, тригонометрию.

Есть мнение, что всё машинное обучение сводится к fit-predict с настройками модели «из коробки». Но модели без математики — это не коробки, а чёрные ящики. Математика — та рентгеновская оптика, которая позволяет в эти ящики заглянуть и выбрать из них нужный. Без неё остаётся копировать чужой код и что-то в нём менять  на свой страх и риск — не аналитик, а генератор случайных предсказаний.

Главное правило: никогда не поздно учиться. Даже самому простому. Даже тому, что все вокруг как будто бы понимают. Если сконцентрироваться на задаче, обязательно добьёшься успеха. Понимая это, мы запускаем онлайн-марафон «Базовая математика для Data Science». Этот интенсив поможет в сжатые сроки закрыть пробелы в школьных знаниях и начать свой путь в анализе данных.

**Записаться на марафон**: https://proglib.io/w/105a5fd5

Специально для подписчиков канала промокод **goproglib** на 10% до 05.01 18:00",4028,0,0,goproglib
1411,2021-01-04 08:50:49+00:00,"[​](https://telegra.ph/file/462dd090a0eb2e398bf05.jpg)Как разработчик Golang вы, вероятно, сталкивались с циклами импорта. Golang не допускает циклов импорта, выдавая ошибку компиляции при обнаружении цикла импорта в коде. В статье автор разбирается, как происходит цикл импорта и как с ними бороться.

https://proglib.io/w/406fcd6c",4991,0,0,goproglib
1408,2021-01-03 07:00:17+00:00,"Продолжение [Backend мастер-класса](https://t.me/goproglib/1375):

- [Добавление таблицы пользователей с уникальными ограничениями и ограничениями внешнего ключа в PostgreSQL](https://dev.to/techschoolguru/add-users-table-with-unique-foreign-key-constraints-in-postgresql-1i29)
- [Как правильно обрабатывать ошибки БД в Golang](https://dev.to/techschoolguru/how-to-handle-db-errors-in-golang-correctly-11ek)",5118,0,0,goproglib
1407,2021-01-02 15:00:31+00:00,"[​](https://telegra.ph/file/6fb5ca9648a93197b0853.jpg)**Тест: насколько хорошо вы помните школьную математику?**

В ладах ли вы с математикой? Вот несколько не самых сложных задач, главное в которых — проверить математическую интуицию и смекалку. Все задачи снабжены пояснениями и ответами.

https://proglib.io/w/bb7a38ed",3795,0,0,goproglib
1406,2021-01-02 10:22:19+00:00,Подробное описание нововведений GoLand 2020.3: https://proglib.io/w/7828074c,3682,0,0,goproglib
1405,2021-01-02 08:09:37+00:00,"[​](https://telegra.ph/file/7ac2334ff61a927d51734.jpg)#humor 

«Это легко. Поверьте мне».",3339,0,0,goproglib
1404,2021-01-01 16:31:54+00:00,"Пишем шаблон аутентификации с нуля, используя Go, GoFiber и PostgreSQL:

- [Реализация сервера с PostgreSQL](https://dev.to/mdfaizan7/create-a-server-with-postgresql-in-go-part-1-3-of-go-authentication-series-3127)
- [Настройка маршрута SignUp](https://dev.to/mdfaizan7/creating-jwt-s-and-signup-route-part-2-3-of-go-authentication-series-5339) 
- [Реализация маршрута входа и частных маршрутов с обновлением токенов](https://dev.to/mdfaizan7/creating-login-and-private-routes-with-refreshing-tokens-part-3-3-of-go-authentication-series-2n0c)",5251,0,0,goproglib
1403,2020-12-31 16:01:07+00:00,"2️⃣0️⃣2️⃣1️⃣

Через несколько часов в Москве пробьют куранты, а нам пора подвести итоги и поздравить читателей с наступающими праздниками.

Уходящий год был непростым, и это не дежурная фраза. Кто-то перенес болезнь легко, другим повезло меньше – 2020-й оказался богатым на печальные новости. Пандемия ввела экономику в ступор, но из-за локдаунов и перевода сотрудников на удаленку цифровые технологии востребованы как никогда. Развиваются интернет-торговля и облачные вычисления, бьет рекорды аудитория стриминговых сервисов… всего не перечислишь.

Потребность в кадрах растет, потому есть работа и для нас. В 2020 году «Библиотека программиста» опубликовала 386 статей, 445 мероприятий и 198 вакансий. По данным Яндекс.Метрики, на сайте побывало почти 4 миллиона читателей – мы довольны таким результатом.

Коллектив издания поздравляет читателей с Новым годом! Желаем вам здоровья, благополучия и успехов в освоении профессии. Чтобы вы не скучали на каникулах, с 5 января мы запускаем математический онлайн-марафон.

Удачи и оставайтесь с нами!",3389,0,0,goproglib
1402,2020-12-31 07:01:43+00:00,"**Результаты **[ежегодного опроса от JetBrains](https://proglib.io/w/42425cbb) **для разработчиков, которые выбрали Go в качестве одного из трех основных языков программирования**

Итак, три наиболее распространенных варианта использования Go — это веб-сайты, утилиты и ИТ-инфраструктура.

DevOps и разработка инфраструктуры — одни из самых популярных применений Go. Поэтому неудивительно, что 80% разработчиков Go участвуют в этой деятельности, причем 36% из них считают это одной из своих ключевых обязанностей, в то время как только 57% разработчиков в целом связывают себя с разработкой инфраструктуры.

Разработчики Go — активные пользователи Docker, т. к. 84% утверждают, что активно работают с ним.

Что касается тенденций развития, то они очевидны, ведь язык ежедневно совершенствует как группа разработчиков, так и сообщество. С трендами Golang на 2021, а также с рынком, масштабом и прогнозами языка можно ознакомиться в [статье](https://proglib.io/w/553aec48).",3494,0,0,goproglib
1401,2020-12-30 17:05:29+00:00,"Интересный материал о том, как группа разработчиков микросервиса рекомендаций платформы Medium перешла на Go с Node.js.  

https://proglib.io/w/a433d89d",3500,0,0,goproglib
1398,2020-12-29 12:44:04+00:00,"**Зачем в науке о данных элементарная математика?

**С 5 января «Библиотека программиста» запускает онлайн-марафон по школьной математике для Data Science. Затея может показаться странной: зачем простые формулы людям, решающим задачи на стыке различных дисциплин? Чтобы подтянуть базу, им скорее подойдет многомесячный курс со сложной теорией и зубодробительной практикой.

Закончил обучение, и вперед — к новым свершениям. Увы, не всегда выходит. Часто студенты не могут усвоить материал, несмотря на усилия преподавателей.

Почему?

Математический гений решает сложную задачу интуитивно, а у простого смертного это не получается. Школьный курс многие из нас проходили давно и мимо — при отсутствии нужного субстрата продвинутые знания некуда сеять. 

Для осваивающих науку о данных новичков мы запускаем образовательную программу совместно с квалифицированными школьными педагогами. Они помогут вам получить простые знания, без которых нельзя освоить сложные.

Записаться на марафон можно на нашем сайте.

https://proglib.io/w/91e9b91b",3890,0,0,goproglib
1397,2020-12-29 08:00:15+00:00,"**Go в качестве языка сценариев в Linux

**Интересный материал с пояснением предпосылок и практики использования Golang для написания сценариев в Linux.

https://proglib.io/w/dfbfb54f",3958,0,0,goproglib
1396,2020-12-28 18:14:10+00:00,Подборка коротких руководств для изучения Golang: https://proglib.io/w/3d4ce2a3,3682,0,0,goproglib
1393,2020-12-27 08:31:32+00:00,"[​](https://telegra.ph/file/d3db6a766e42f5b65f43c.jpg) **Параллелизм в Golang и WorkerPool [Часть 2]**

В первой статье мы строили Worker Pool для оптимизации производительности. Во второй части мы создадим надежное решение для работы со структурами параллелизма.

https://proglib.io/sh/UFqt7PBRdj",5643,0,0,goproglib
1392,2020-12-26 11:00:46+00:00,"#cheatsheet

Шпаргалка по форматированию в Go",5313,0,0,goproglib
1391,2020-12-26 07:01:51+00:00,"**28 декабря в 19:00 по мск проходит вводный урок** **""Базовая математика для Data Science"" cовместно с Proglib**

Начало карьеры в Data Science и программировании лежит в познаниях математики. В школе закладывается фундамент дальнейших знаний. Поэтому предлагаем начать карьеру Data Science с короткого марафона, позволяющего в сжатые сроки вспомнить базу школьной математики. 

На бесплатном вводном занятии поговорим о числовой последовательности и регрессиях.

Регистрация по ссылке: https://proglib.io/w/6dcc7afc
либо подпишитесь на telegram: https://t.me/joinchat/AAAAAFNrJZHGP24KPuWw6w

Кто с нами?",3728,0,0,goproglib
1390,2020-12-25 19:10:07+00:00,Практика работы с JWT (JSON Web Token) на Go в рамках реализации простого RESTful API: https://proglib.io/w/249c68d5,4216,0,0,goproglib
1388,2020-12-25 16:52:02+00:00,"**40 лучших курсов по математике для программистов

**Программистам нужно развивать логическое мышление и сообразительность, поэтому мы подобрали для вас 40 лучших курсов по математике.

https://proglib.io/p/best-math-courses",3949,0,0,goproglib
1387,2020-12-24 17:58:33+00:00,"[​](https://telegra.ph/file/220b67036770041f21dfd.jpg) **Параллелизм в Golang и WorkerPool [Часть 1]**

В современных языках программирования параллелизм стал безусловной потребностью. В этой статье речь пойдет об устройстве и использовании concurrency в Go.

https://proglib.io/sh/zJTZmnO5Ky",4070,0,0,goproglib
1386,2020-12-24 09:00:08+00:00,"Подарите сертификат сотруднику, другу, коллеге на обучение в одном из самых крупных онлайн-университетов в России. На выбор более 250 курсов по программированию, менеджменту, дизайну и маркетингу.
 
Как это работает? 

— вы покупаете подарочный сертификат номиналом от 10 000 рублей;
— дарите его сотруднику, другу, коллеге;
— человек выбирает курс, который соответствует номиналу сертификата, и изучает его.

Важно: 
Стоимость сертификата на 20% меньше номинала. Например, сертификат номиналом 50 000 рублей будет стоить вам 40 000 рублей. 
Сертификат нужно активировать в течение года после покупки.

Чтобы посмотреть список курсов, узнать больше или оставить заявку, переходите по ссылке: https://clc.am/lN4NqA  либо звоните по номеру телефона:+74952910751",3466,0,0,goproglib
1385,2020-12-23 16:11:08+00:00,Подборка видеозаписей выступлений с GopherCon Russia 2020 [March](https://youtube.com/playlist?list=PLJTW0ZQ22rrFwoMuJdyIhtryfyJYghrvd) / [August](https://youtube.com/playlist?list=PLJTW0ZQ22rrEtvqbz0rxhNQTm0bkJV4Nb).,3640,0,0,goproglib
1384,2020-12-22 17:39:46+00:00,"[Тезисно](https://proglib.io/w/d73cf5f3) о результатах, достигнутых командой разработки Go к одиннадцатой годовщине выпуска языка, а также о перспективах, часть из которых уже реализовано в бете Go 1.16. Также ознакомьтесь с интересным [мнением](https://utcc.utoronto.ca/~cks/space/blog/programming/GoModulesOnlyFuture) о модулях Go.",3466,0,0,goproglib
1382,2020-12-21 18:03:45+00:00,"Объемный материал о популярных инструментах и подходах для организации иерархии зависимостей в Go, с их преимуществами и недостатками.

https://proglib.io/w/a7f8348e",4785,0,0,goproglib
1381,2020-12-21 09:00:12+00:00,"Go-разработчик с нуля всего за год!

Нравится программирование, но не можешь разобраться во всем самостоятельно? Мы поможем освоить новую профессию и расскажем, как найти высокооплачиваемую работу после обучения!
Переходи по ссылке и регистрируйся ▶️ https://clc.am/UWxHyQ 

На курсе «Профессия Go-разработчик» ты получишь базовые знания программирования, а также подробное обучение по работе с Golang. Пройдя обучающий курс, ты создашь крутое портфолио и сможешь претендовать на должность junior-программиста.
Регистрируйся пока есть скидки до 60% на обучение!",3417,0,0,goproglib
1380,2020-12-20 16:49:51+00:00,"«**Go действительно стал языком облачной инфраструктуры**» — Роб Пайк

Текст интервью с Робом Пайком о карьере, охватывающей четыре десятилетия, эволюции Go за последние десять лет и о будущем языка.

https://proglib.io/w/ce625dee",3654,0,0,goproglib
1379,2020-12-19 13:41:24+00:00,Изучаем 8 разных подходов к HTTP-маршрутизации в Go: https://proglib.io/w/fe6a1bcb,5163,0,0,goproglib
1378,2020-12-18 18:47:12+00:00,"[​](https://telegra.ph/file/d91ac37f93a3872f90815.jpg)#tip

Используйте метод `Swap` в пакете `sort` для того, чтобы поменять местами элементы среза.",3587,0,0,goproglib
1377,2020-12-18 07:02:18+00:00,Немного новостей: [выпущена первая бета Go 1.16](https://golangtutorial.dev/news/go-beta-1.16-released/) и [исправлена уязвимость в пакете golang.org/x/crypto/ssh](https://golangtutorial.dev/news/fix-in-crypto-package/).,3540,0,0,goproglib
1376,2020-12-17 07:01:44+00:00,"Очередная интересная подборка статей, упражнений, курсов, бесед и видео по обучению Go, разбитых по уровням и технологиям: https://proglib.io/w/482fc86a",5208,0,0,goproglib
1375,2020-12-16 18:00:27+00:00,"**Продолжение Backend мастер-класса** ([ч. 1](https://t.me/goproglib/1224) и [ч. 2](https://t.me/goproglib/1297))

Напомним, что в рамках мастер-класса постепенно создавался простой банковский проект.

– [Mock DB для тестирования HTTP API в Go и достижения 100% покрытия](https://dev.to/techschoolguru/mock-db-for-testing-http-api-in-go-and-achieve-100-coverage-4pa9)
– [Внедрение](https://dev.to/techschoolguru/implement-transfer-money-api-with-a-custom-params-validator-in-go-2op2) [API](https://dev.to/techschoolguru/implement-transfer-money-api-with-a-custom-params-validator-in-go-2op2) [для](https://dev.to/techschoolguru/implement-transfer-money-api-with-a-custom-params-validator-in-go-2op2) [перевода денег с помощью настраиваемого валидатора параметров в Go](https://dev.to/techschoolguru/implement-transfer-money-api-with-a-custom-params-validator-in-go-2op2)",4717,0,0,goproglib
1374,2020-12-16 15:27:56+00:00,"[​](https://telegra.ph/file/e4c48b2c68f50db7c1cf4.jpg)#pentest #tools 

**Nuclei** — многофункциональный инструмент для настраиваемого целевого сканирования на основе шаблонов, предлагающий широкие возможности расширения и простоту использования.

Предположим, вы исследуете безопасность определенной организации и встречаете на сетевом периметре Jira. Какие ваши действия? Вы смотрите версию, подбираете соответствующие версии эксплойтов и т. д. 

Nuclei автоматизирует вашу работу и позволяет запустить готовый workflow, который сделает все за вас. 

https://proglib.io/w/ad197421",3314,0,0,goproglib
1372,2020-12-16 15:26:43+00:00,"Пример крутого расширяемого инструмента на Go, который позволяет автоматизировать задачи по тестированию на проникновение ",3057,0,0,goproglib
1371,2020-12-16 09:00:15+00:00,"2020 бросил вызов каждому человеку, бизнесу, государству. Впереди 2021 год и новые изменения. Как отбросить страх перед глобальными вызовами? Получить новый импульс? QIWI и Магнит объединились, чтобы напомнить о важной роли технологий в трансформации каждого из нас, а также в развитии бизнеса и общества.

17 декабря в 16:00 состоится бесплатный онлайн митап #MGNTQIWI «Новый мир: как технологии влияют на человека и общество» с участием Евгения Кузнецова – футуролога, руководителя московского отделения Университета Сингулярности, генерального директора ООО «Орбита Капитал Партнерз». Евгений расскажет, как оставаться на гребне цифровой волны, не отставать от трендов и справляться с вызовами технологической эпохи.

Регистрируйтесь по ссылке https://mgntqiwi.ru и присоединяйтесь к бесплатной лекции и Q&A сессии 17 декабря в 16:00.
ИЗМЕНЕНИЯ – вот о чем пойдет речь в рамках митапа. Трансформируется все, а значит, нужно и нам. 
Давайте меняться вместе!",3562,0,0,goproglib
1370,2020-12-15 12:00:16+00:00,Разбираемся с анонимными структурами в Go: https://proglib.io/w/d849dde6,3540,0,0,goproglib
1369,2020-12-15 09:00:13+00:00,"Unreal Engine 4 — один из самых популярных игровых движков. Если знаешь его интерфейс и инструменты, тебе открыты классные перспективы в геймдеве 
 
На бесплатном онлайн-интенсиве ты сможешь познакомиться с этой платформой и создать свою первую игру всего за 3 вечера, даже если никогда не программировал!
 
Регистрация по ссылке: ▶️ https://clc.am/KtfENA.
 
Что будет полезного?
 Знакомство с базовыми возможностями UE4. 
 Разработка шутера от первого лица. 
 Создание главного персонажа, его противников и оружия.
 Настройка сцены, камеры, освещения и звукового оформления.
 Изучение 3D-моделей, анимации и искусственного интеллекта.
 Регистрируйся и подключайся к прямым эфирам с 17 по 19 декабря в 21:00 по московскому времени.",3414,0,0,goproglib
1368,2020-12-14 18:00:34+00:00,"Старая добрая статья, в которой автор представил визуализацию общих шаблонов параллелизма в Go: https://proglib.io/w/9f522841",3529,0,0,goproglib
1366,2020-12-14 09:01:24+00:00,"[​](https://telegra.ph/file/3cf16cc99212dc8397755.jpg)#tip 

`Ticker` должен быть остановлен с помощью метода `stop`, в противном случае произойдет утечка памяти.",3404,0,0,goproglib
1364,2020-12-13 08:00:33+00:00,Практическая реализация паттерна Репозиторий на Go: https://proglib.io/w/9fccbd78,3576,0,0,goproglib
1363,2020-12-12 08:29:45+00:00,"Статья, из которой вы узнаете, как контролировать видимость разрабатываемого пакета на Go, а также как защитить части вашего кода, которые должны использоваться только внутри вашего пакета. 

https://proglib.io/w/46520f52",3472,0,0,goproglib
1361,2020-12-11 11:02:11+00:00,Подборка советов по оптимизации размера Go-бинарника: https://proglib.io/w/bf33c4c6,3481,0,0,goproglib
1360,2020-12-10 12:00:35+00:00,"Первые шаги к началу тестирования кода на Go с помощью встроенного пакета тестирования.

https://proglib.io/w/1c838ac8",4542,0,0,goproglib
1359,2020-12-10 09:00:04+00:00,"Курс для middle- и senior-разработчиков, которые хотят стать тимлидами
 
Новичком быть просто: все новое и интересное, море информации, но как быть уже прокаченным девелоперам? Мы тоже задавали себе этот вопрос и просто точечно обучали наших разработчиков, делая их мощными тимлидами.
В нашем понимании тимлид — это не просто крутой программист, но и тот, кто умеет аккумулировать свои знания, обучать команду и выстраивать работу в ней, понимает продукт и работает от бизнес-целей. Тут важны и hard, и soft skills, и эмоциональный интеллект. Поэтому мы собрали весь свой 14-летний опыт работы над сложными сервисами и высоконагруженными сайтами и создали 6-ти месячный курс именно тех, кто хочет вырасти и систематизировать свои знания. Договорились с Geekbrains, и теперь именно там можно пройти обучение. Второй поток стартует уже совсем скоро — 24 декабря, а тут должен быть призыв к действию, поэтому просто записывайтесь на курс: https://proglib.io/w/cd50f385
 
На связи была команда AGIMA!",3279,0,0,goproglib
1358,2020-12-10 05:56:25+00:00,"[​](https://telegra.ph/file/00c38c09b5d05248b049f.jpg)#tip 

Спецификатор формата ""`%+v`"" может использоваться для вывода имен полей структуры вместе со значениями.",3246,0,0,goproglib
1357,2020-12-09 18:25:48+00:00,"Подборка полезных ссылок, фреймворков, библиотек и инструментов Go, которая поддерживается в актуальном состоянии (в этом процессе может принять участие каждый из вас): https://proglib.io/w/31a8ea9e",3583,0,0,goproglib
1356,2020-12-09 09:00:14+00:00,"Хочешь откликнуться на вакансию, не выходя из приложения?
Тогда тебе сюда  [Golang | Jooby.dev

Удобный](https://t.me/golang_job) поиск работы
[Удобный](https://t.me/golang_job) постинг вакансий
[Удобный](https://t.me/golang_job) сервис

С любовью [️](https://t.me/golang_job), от команды Jooby.dev",3219,0,0,goproglib
1355,2020-12-08 18:30:03+00:00,"[​](https://telegra.ph/file/597dda5693b4c4e8b2b37.jpg)#tip 

Флаг `0` может использоваться в спецификаторе формата для дополнения чисел ведущими нулями.",3282,0,0,goproglib
1353,2020-12-08 07:02:07+00:00,"Цикл свежих статей на русском про [операции над датой и временем](https://proglib.io/w/74869118), а также [работу с файловой системой](https://proglib.io/w/0a2bd0c0) в Go.",4356,0,0,goproglib
1352,2020-12-07 08:00:15+00:00,"Перевод статьи о нюансах, которые необходимо учитывать при сохранении опций в JSON и их анмаршалинге в Go: https://proglib.io/w/b8945eb7",4427,0,0,goproglib
1351,2020-12-06 08:23:41+00:00,Пошаговое руководство по написанию игрового движка на Go: https://proglib.io/w/040de736,3796,0,0,goproglib
1350,2020-12-05 18:35:38+00:00,"[​](https://telegra.ph/file/cd6bbb4a3237346ff5c8d.jpg)#tip 

`tparse` поддерживает отображение `n` самых медленных тестов с помощью флага `-slow`.",3454,0,0,goproglib
1349,2020-12-05 08:00:16+00:00,"Релиз `go1.15.6` включил исправления для компилятора, компоновщика, среды выполнения, команды go и пакета io. Читать [подробнее](https://proglib.io/w/87bc547b).",3393,0,0,goproglib
1348,2020-12-04 18:45:04+00:00,"[​](https://telegra.ph/file/86c36e06d12834eee4ead.jpg)**Spago** — библиотека машинного обучения, предназначенная для поддержки соответствующих архитектур нейронных сетей в задачах обработки естественного языка.

https://proglib.io/w/882fe0b5",3456,0,0,goproglib
1346,2020-12-04 13:00:49+00:00,"Интересуешься компьютерными науками, но не знаешь с чего начать? Выясни, какой ты ИТ-котик!

Пройди короткий профориентационный тест и получи скидку в 5000 рублей на курсы GeekBrains для фанатов информационных технологий. В качестве бонуса после тестирования станет доступна подробная карта ИТ-профессий и список учебных материалов для будущих айтишников. 

Приходи учиться в GeekBrains! 
Онлайн-академия предлагает отличные курсы для студентов любого возраста. Опытные преподаватели помогут погрузиться в профессию или подготовиться к поступлению в вуз.

Пройти бесплатное тестирование можно на сайте: https://mrqz.me/geekschool",3206,0,0,goproglib
1345,2020-12-04 07:31:31+00:00,В свежем релизе GoLand много новых и полезных фич . Ознакомиться: https://proglib.io/w/038c285e,3261,0,0,goproglib
1344,2020-12-03 18:42:11+00:00,"[​](https://telegra.ph/file/a154c1d48676ed60d77ae.jpg)#tip 

Можно преобразовать одну структуру в другую, если они обе имеют одинаковые базовые типы. Это работает, даже если у них разные структурные теги.",3512,0,0,goproglib
1343,2020-12-02 18:02:10+00:00,"Разработка блога на Go с помощью Micro: начало работы.

https://proglib.io/w/75565d59",3604,0,0,goproglib
1342,2020-12-01 08:00:22+00:00,"[Интересное обсуждение на Reddit](https://proglib.io/w/02a9f850), касаемое структурирования большого веб-приложения на Go. 

Вот несколько ссылок, которые предложили члены сообщества:
- [GopherCon 2018: Kat Zien - How Do You Structure Your Go Apps](https://youtu.be/oL6JBUk6tj0)
- [project-layout](https://github.com/golang-standards/project-layout) (Standard Go Project Layout)
- [go-webapp-example ](https://github.com/OFFLINE-GmbH/go-webapp-example)**(**Example web application written in Go**)**",4485,0,0,goproglib
1341,2020-11-30 18:30:06+00:00,"[​](https://telegra.ph/file/818b54add4d2730b8dd41.jpg)#tip 

В пакете `net` есть функция `LookupPort`, с помощью которой можно определить номер порта для сети и сервиса.",3794,0,0,goproglib
1340,2020-11-30 15:30:14+00:00,"Декабрьский интенсив по SRE 

**Формат:** онлайн-интенсив (Zoom, записи занятий, git, стенды для практики, техподдержка и помощь спикеров).

На интенсиве разбираем SRE-подход к разработке и эксплуатации высоконагруженного сайта:
️будем настраивать и поддерживать сайт из нескольких микросервисов. 
️сформулируем показатели SLO, SLI, SLA, разработаем архитектуру и инфраструктуру, соберем, протестируем и задеплоим сайт, настроим мониторинг и алертинг. 
️определим причины ухудшения SLO, разберем устойчивость, error budget, практику тестирования, управление прерываниями и операционной нагрузкой.
️проработаем порядок действий в случае аварии.
️примем решения по дальнейшему предотвращению инцидентов.

Дата интенсива: 11–13 декабря 2020

Программа и регистрация на сайте - https://slurm.club/34O0stS",3492,0,0,goproglib
1339,2020-11-29 08:00:22+00:00,"Полезные заметки относительно некоторых лучших практик, параллелизма, памяти и многого другого в Go.

https://proglib.io/w/fce3b1f4",5261,0,0,goproglib
1338,2020-11-28 11:45:31+00:00,Руководство по подключению к брокеру сообщений RabbitMQ с помощью Go: https://proglib.io/w/59dc04b0,4975,0,0,goproglib
1337,2020-11-28 06:25:55+00:00,"[​](https://telegra.ph/file/e31f1962bca925fb52dbf.jpg)#tip 

Если функция `init` доступна в пакете, то она вызывается автоматически, когда вы импортируете этот пакет в свой проект на Go. 

Читать [подробнее](https://proglib.io/w/d4a1a071).",3552,0,0,goproglib
1336,2020-11-27 08:00:56+00:00,"Обширное введение в Golang в виде технической статьи для тех, кто работает или работал с другими языками программирования. 

https://proglib.io/w/d7d8cbdd",3573,0,0,goproglib
1335,2020-11-26 10:08:52+00:00,"[​](https://telegra.ph/file/557a35d9a50fd89ca8966.jpg)Текстовое описание доклада Александра Емелина на конференции Golang Conf 2019 о масштабировании WebSocket-соединения на Go (презентация [приводилась](https://t.me/goproglib/810) ранее на канале), в рамках которого идет речь как про детали, касающиеся Go, так и вообще про работу с большим количеством постоянных соединений.

https://proglib.io/w/92ad1b2f",4793,0,0,goproglib
1334,2020-11-26 07:39:29+00:00,Изучаем Golang и веб-фреймворк Fiber на примере разработки REST API для TODO приложения: https://proglib.io/w/40d85217,4023,0,0,goproglib
1333,2020-11-25 11:01:03+00:00," **Линейная алгебра для начинающих с примерами. Лекция преподавателя МГУ

**Линейная алгебра: матрицы и операции над ними. Системы линейных уравнений — исследование и решение, метод Гаусса, геометрический подход.

https://youtu.be/ojJG1Kjy8tM

Пройти весь курс: https://proglib.io/w/d2fe2770",3595,0,0,goproglib
1332,2020-11-25 08:00:23+00:00,"[​](https://telegra.ph/file/1e1c62b824358e81cf8e8.jpg)#tip

Используйте пакеты `google.golang.org/grpc/status` и `google.golang.org/grpc/codes` для возврата пользовательских кодов ошибок клиентам gRPC.",3402,0,0,goproglib
1331,2020-11-24 08:24:31+00:00,"[​](https://telegra.ph/file/24a073c04438514e3772f.mp4)**Gosivy** — инструмент, предназначенный для визуализации метрик процессов Go.

Графики отображаются прямо в вашем терминале, независимо от того, где инструмент запущен. Это поможет понять, как ваше приложение потребляет ресурсы.

https://proglib.io/w/37513083",4684,0,0,goproglib
1330,2020-11-23 18:10:24+00:00,"Отрывок из подкаста Go Time, в котором обсуждаются причины перехода в GitHub CLI с Ruby на Go: https://proglib.io/w/3960f718",3318,0,0,goproglib
1329,2020-11-23 15:01:41+00:00,"Как научиться правильно разрабатывать и запускать приложения в K8s? Есть несколько путей, но, пожалуй, самый быстрый  — это пройти трёхдневный онлайн-интенсив «Kubernetes для разработчиков» от Слёрм.

Чем ещё хорош этот путь?
– Материал курса основан на практическом опыте. Учим тому, что делаем на своих проектах.
– Никаких админских штучек и историй про обслуживание кластера. Только инструментарий и знания, которые требуются разработчикам.
– Никто не уйдёт без результата. Спикеры и техподдержка помогут каждому студенту справиться с заданиями.

Интенсив стартует 3 марта. Сейчас можно записаться по минимальной цене – 20 000 рублей. 

[Посмотреть программу и подать заявку.](https://slurm.io/kubernetes-for-developers?utm_source=tg&utm_medium=social&utm_campaign=k8s_for_developers&utm_content=post_23_11_2020&utm_term=goproglib)",3204,0,0,goproglib
1328,2020-11-23 07:00:45+00:00,Видеозапись выступления Miki Tebeka о сериализации в Go: https://proglib.io/w/0977c63c,3229,0,0,goproglib
1327,2020-11-22 12:00:48+00:00,"""__Пытаться использовать принцип, не понимая, какую проблему он решает, — все равно что пытаться использовать молоток, когда вы не знаете, что такое гвоздь__""__.__

Невозможно не согласиться с цитатой автора статьи, в которой уделено внимание хорошим и плохим практикам разработки, и приведен пример на Golang.

https://proglib.io/w/eebd4612",3439,0,0,goproglib
1326,2020-11-22 08:04:49+00:00,"[​](https://telegra.ph/file/299726c8769907bbadee8.jpg)#tip 

В пакете `net` есть функция `JoinHostPort` для объединения хоста и порта в сетевой адрес.

Использование этой функции для добавления портов намного проще, чем использование конкатенации строк для добавления двоеточия и порта.",3403,0,0,goproglib
1325,2020-11-21 18:38:04+00:00,Разбираем 5 техник мокинга в Golang: https://proglib.io/w/05754af5,4600,0,0,goproglib
1323,2020-11-21 15:01:28+00:00,"Приглашаем вас на мероприятие ""Серия онлайн семинаров по опциям базы данных Oracle"":

1. Вебинар “Самые популярные опции базы данных Oracle”, пройдет 26 ноября в 11:00 Время Московское. Темы: Oracle Real Application Clusters (RAC), технология управления данных Advanced Compression и самая популярная опция в СУБД - Oracle Partitioning.

2. Вебинар “Недооцененные опции базы данных Oracle”, пройдет 3 декабря в 11:00 Время Московское.
Темы: технология Oracle Active Data Guard, уникальный инструмент Real Application Testing (RAT).

3. Вебинар “Новые опции базы данных Oracle”, пройдет 10 декабря в 11:00 Время Московское. 
Темы: контейнерная архитектура БД или Multitenant Container Database, технология хранения информации в специализированном КЭШе – ORACLE DATABASE IN-MEMORY OPTION.

Участие в мероприятии бесплатное при условии предварительной регистрации.

Принять участие:  https://vk.cc/aCDUIY ",3505,0,0,goproglib
1322,2020-11-21 12:18:20+00:00,"[​](https://github.com/0xjiayu/go_parser/blob/master/imgs/go_binary_info.png?raw=true)Если вы каким-то образом связаны с информационной безопасностью, в частности с реверс-инжинирингом, то вам может быть интересен **go_parser** — инструмент синтаксического анализа двоичных файлов для IDAPro (интерактивный дизассемблер).

https://proglib.io/w/4ca3df80",3401,0,0,goproglib
1321,2020-11-20 18:37:18+00:00,Введение в рефакторинг кода на Go для лучшей тестируемости: https://proglib.io/w/863c5f24,3418,0,0,goproglib
1320,2020-11-19 18:40:28+00:00,[​](https://res.cloudinary.com/practicaldev/image/fetch/s--hjB9T61E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/02dsdoh5wnysmwar83v7.png)Пишем простой контроллер Kubernetes на Go с помощью kubebuilder: https://proglib.io/w/2dd3989a,4908,0,0,goproglib
1319,2020-11-19 12:01:09+00:00,"[​](https://telegra.ph/file/a2daff306b3dc94c8cb3f.jpg)#tip

Функция `PrintStack` пакета `debug` может использоваться для печати трассировки стека вызывающей горутины.  Это может быть весьма полезно во время отладки для отслеживания пути вызова функции.",3352,0,0,goproglib
1317,2020-11-18 10:10:00+00:00,"Wiki по ресурсам для изучения серверного программирования на Go — как веб-сервисов, так и мобильных серверных приложений. 

https://proglib.io/w/4862d507",4693,0,0,goproglib
1316,2020-11-17 16:10:54+00:00,Изучаем Go с помощью фундаментальных руководств с примерами: https://proglib.io/w/d3c195c3,3538,0,0,goproglib
1315,2020-11-17 11:02:43+00:00,"Подписывайтесь на наш основной канал @proglibrary, чтобы не пропускать новые статьи и квизы!",3241,0,0,goproglib
1314,2020-11-16 15:00:52+00:00,Короткий и понятный мануал по развертыванию приложения Go на CentOS 7: https://proglib.io/w/86569c40,3704,0,0,goproglib
1313,2020-11-16 12:00:43+00:00,"[​](https://telegra.ph/file/5ccf839547889b32ecca8.jpg)#tip

В пакете `log` есть флаг `Llongfile`, который печатает полное имя файла и номер строки сообщения журнала, что очень полезно при отладке.

Идеальное место для установки этого флага — функция `init`.",3611,0,0,goproglib
1312,2020-11-16 09:00:25+00:00,"Познакомься с Go-разработкой и освой один из востребованных языков программирования на бесплатных онлайн-занятиях от Skillbox!
Три дня твои скиллы будет прокачивать опытный специалист, Infrastructure Engineer в ManyChat — Антон Жуков!


Регистрируйся бесплатно по ссылке:  https://clc.to/EyB9wA.
Тебя ждут мощная программа и реальные практические задачи 

 На интенсиве ты освоишь базовые функции Golang, увидишь примеры крутых чат-ботов и получишь ответы на свои вопросы по программированию. 

 Разработаешь чат-бота для Telegram, который станет первым кейсом в твоём портфолио разработчика.

 Все участники интенсива получат электронную книгу Кея Петерсона и Дэвида Колба «Век живи — век учись» от издательства «МИФ», а лучшие — грант на 30 000 рублей для обучения в Skillbox.",3322,0,0,goproglib
1311,2020-11-15 08:49:19+00:00,"[​](https://telegra.ph/file/6095e87125486c568a28b.jpg)Перевод статьи на тему горутин, в которой автор разбирается с понятием горутин и выясняет их размер, а также намечает отправные точки для всех, кто интересуется внутренним устройством Go.

https://proglib.io/w/5be653e6",3637,0,0,goproglib
1310,2020-11-14 11:31:11+00:00,"Короткое руководство по установке и настройке рабочего окружения Go с нуля.

https://proglib.io/w/2615fb11",3621,0,0,goproglib
1309,2020-11-14 10:40:57+00:00,Разработчики языка выпустили Go 1.15.5 и Go 1.14.12 для решения недавно обнаруженных проблем безопасности. Рекомендуется выполнить обновление до одного из этих выпусков. С деталями можно ознакомиться [здесь](https://proglib.io/w/ad00b7a9).,3304,0,0,goproglib
1308,2020-11-13 15:00:48+00:00,"Разбираем основы работы с драйвером Go для MongoDB в рамках выполнения простых операций MongoDB CRUD.

https://proglib.io/w/412da4a3",3478,0,0,goproglib
1307,2020-11-13 11:00:51+00:00,"[​](https://telegra.ph/file/14677f8bc04d2b9fbc538.jpg)#tip

Когда программа на Go запускается с использованием команды `go run`, она компилируется и запускается из временного местоположения.

Флаг `--work` может использоваться для печати временного местоположения.",3371,0,0,goproglib
1305,2020-11-12 12:01:31+00:00,"Фундаментальные обучающие видеоматериалы для разработчиков начинающего, среднего и продвинутого уровней:
 
- [Golang University 101](https://www.youtube.com/playlist?list=PLEcwzBXTPUE9V1o8mZdC9tNnRZaTgI-1P) знакомит с фундаментальными концепциями Go и показывает, как использовать инструменты Go для создания кода и управления им; 
- [Golang University 201](https://www.youtube.com/playlist?list=PLEcwzBXTPUE_5m_JaMXmGEFgduH8EsuTs) поднимается на ступеньку выше, объясняя важные методы, такие как тестирование, веб-сервисы и API-интерфейсы; 
- [Golang University 301](https://www.youtube.com/watch?v=YHRO5WQGh0k&list=PLEcwzBXTPUE8KvXRFmmfPEUmKoy9LfmAf)  углубляется в более сложные темы, такие как планировщик Go, реализация карт и каналов, и методы оптимизации.",5204,0,0,goproglib
1303,2020-11-11 16:30:12+00:00,[​](https://telegra.ph/file/d1a17d656d5d35dfd155f.jpg)Wiki по Go Mobile: https://proglib.io/w/c8199920,3336,0,0,goproglib
1302,2020-11-10 15:29:27+00:00,"[​](https://telegra.ph/file/f43a898033a7af3f34755.jpg)#tip 

Команда `ldd` может использоваться для поиска динамических библиотек, от которых зависит приложение на Go.

Например, приложение, использующее пакет `net/http`, скомпилированное с отключенным CGO, не будет иметь динамических зависимостей.

То же приложение, скомпилированное с включенным CGO, будет иметь динамические зависимости.",3511,0,0,goproglib
1301,2020-11-10 09:00:18+00:00,"[​](https://telegra.ph/file/c25b47641cf4962d341e2.jpg)ПриветМеня зовут Максим  

Еще в школе я полюбил программирование, на первую работу в небольшую веб-студию устроился в 16 лет. 
Сейчас мне 20, последних 3 года я занимаюсь коммерческой разработкой.
За это время успел поработать на нескольких стартапах, организовать разработку e-commerce платформы и собрать все основы моего любимого языка Go в [небольшой книге](https://zhashkevych.com/go-for-beginners). 

**Не так давно я начал вести свой канал **[ZHASHKEVYCH](https://t.me/zhashkevychdev), чтобы помогать другим, делиться знаниями и собственным опытом, а также находить единомышленников. В нем вы можете найти посты на следующие темы:

‍Практические советы по профессиональному развитию
[Тебе нужен пет проект
](https://t.me/zhashkevychdev/21)[Хард и софт скиллы
](https://t.me/zhashkevychdev/34)[Учите английский
](https://t.me/zhashkevychdev/36)[Не решай задачи в лоб
](https://t.me/zhashkevychdev/44)[Сначала заработай карму

](https://t.me/zhashkevychdev/39)Лучшие практики, инструменты и подходы к разработке
[Открыть localhost наружу
](https://t.me/zhashkevychdev/26)[Не хранить JWT в localStorage
](https://t.me/zhashkevychdev/58)[Хорошие коммиты
](https://t.me/zhashkevychdev/22)[Грамотность в коде
](https://t.me/zhashkevychdev/18)[Не спеши писать код
](https://t.me/zhashkevychdev/49)[Правило Бойскаута

](https://t.me/zhashkevychdev/61)**На канале регулярно появляется новый контент, а также я публикую свои обучающие видео на YouTube. Так что подписывайся чтобы не пропускать самое интересное **",3646,0,0,goproglib
1300,2020-11-10 08:34:18+00:00,Некоторые советы по использованию Golang в production: https://proglib.io/w/df4212ab,4426,0,0,goproglib
1299,2020-11-09 07:33:57+00:00,"[​](https://telegra.ph/file/139380b847399a0784b12.jpg)**Goexec** — утилита, предназначенная для запуска кода на Go с помощью интерфейса командной строки.

https://proglib.io/w/f36c7f66",3514,0,0,goproglib
1298,2020-11-08 16:06:17+00:00,"[​](https://telegra.ph/file/50c009b9b6fedefa55759.jpg)#tip

Метод `Skip` пакета `testing` можно использовать для пропуска тестов.

Допустим, у нас есть интеграционные тесты, которые нужно пропустить во время локальной сборки и запускать только во время интеграции в конвейер CI / CD.",3706,0,0,goproglib
1297,2020-11-07 10:32:39+00:00,"Продолжение [Backend мастер-класса](https://t.me/goproglib/1224), в котором освещаются следующие темы: 

– [Реализация RESTful HTTP API в Go с помощью Gin](https://proglib.io/w/752fbe2f)
– [Загрузка конфигурации из файлов и переменных среды в Golang с помощью Viper](https://proglib.io/w/8ba6a5f7)",5490,0,0,goproglib
1296,2020-11-06 08:00:20+00:00,"[​](https://telegra.ph/file/c70ada2c7c05b9d77be31.jpg)#tip

Функция `NumGoroutine()` пакета `runtime` возвращает количество горутин, которые уже запущены. 

Эта функция может быть использована для отладки утечек горутин.",4209,0,0,goproglib
1295,2020-11-05 12:22:21+00:00,"Статья о том, как организовать минимальный pre-commit workflow для разработки на Go: https://proglib.io/w/f7b049be",3864,0,0,goproglib
1294,2020-11-05 07:00:16+00:00,"Создай первую модель машинного обучения за 3 дня! С 9 по 11 ноября в 19:00 по МСК пройдёт бесплатный интенсив по Data Science.

Ссылка для регистрации  https://clc.am/B7559g

 Занятия проведёт главный методист технического направления Skillbox Михаил Овчинников.Ты узнаешь, как разрабатывается искусственный интеллект, как работают специалисты Data Science и какие инструменты они используют.

️ Ты построишь модель машинного обучения на Python, способную предсказывать курс доллара! Этот проект станет достойной частью твоего портфолио!

 Трое лучших участников интенсива получат грант на 30 000 рублей для обучения в Skillbox!",3624,0,0,goproglib
1293,2020-11-04 08:00:47+00:00,"Обширная коллекция ссылок на учебные материалы, отобранные по темам и уровню опыта.

https://proglib.io/w/c8cbd88f",5526,0,0,goproglib
1292,2020-11-03 18:30:04+00:00,Разбираемся с хитростями срезов в Golang: https://proglib.io/w/13972b4a,3865,0,0,goproglib
1290,2020-11-03 08:00:19+00:00,"[​](https://telegra.ph/file/b599980fb1ddb45544b4e.jpg)#tip 

Функции `NewPrinter` и `Printf` пакета `text/message` можно использовать для вывода чисел в более удобочитаемом формате, разделенных запятыми.

Например, константа 90000000 может быть напечатана как 90,000,000 с помощью этих функций.",3650,0,0,goproglib
1289,2020-11-02 06:10:45+00:00,"Коллекция идей от Роба Пайка о том, как сделать код на Go лучше: https://proglib.io/w/1e7b481c",3898,0,0,goproglib
1288,2020-11-01 18:00:18+00:00,"**Soup** — пакет, который подобно библиотеке Beautiful Soup на Python, позволяет реализовать функции веб-скрапера на Go, а именно загрузки и анализа веб-страниц, а также навигации или чтения элементов на них.

https://proglib.io/w/d2e916d2",3638,0,0,goproglib
1286,2020-11-01 08:08:03+00:00,"Серия статей про реализацию популярных паттернов проектирования на Go:

- [Фабричный метод](https://dev.to/shubhamzanwar/factory-pattern-4hd0) (Factory Method )
- [Абстрактная фабрика](https://dev.to/shubhamzanwar/abstract-factory-pattern-6f8) (Abstract Factory )
- [Строитель](https://dev.to/shubhamzanwar/builder-pattern-5839) (Builder ‍️) 
- [Адаптер](https://dev.to/shubhamzanwar/adapter-pattern-4knn) (Adapter )
- [Мост](https://dev.to/shubhamzanwar/bridge-pattern-2hi5) (Bridge )
- [Декоратор](https://dev.to/shubhamzanwar/decorator-pattern-19kb) (Decorator )
- [Фасад](https://dev.to/shubhamzanwar/design-patterns-facade-pattern-9pb) (Facade )
- [Легковес](https://dev.to/shubhamzanwar/design-patterns-flyweight-pattern-27a1) (Flyweight ️)",5709,0,0,goproglib
1285,2020-10-31 14:35:38+00:00,"**Go Wasm** — это среда разработки Go, которая помогает писать и запускать код полностью в браузере с использованием WebAssembly.

Код компилируется с использованием реального компилятора Go в виртуальной файловой системе. Go Wasm состоит из трех основных компонентов WebAssembly: «операционной системы», редактора и оболочки. 

Статья с подробностями: https://proglib.io/w/812d1d0c

Демо: https://proglib.io/w/ac22ffa0

Репо: https://proglib.io/w/704ac27e",3484,0,0,goproglib
1284,2020-10-31 11:45:51+00:00,"[​](https://telegra.ph/file/1a1777732dd77831dd93a.jpg)#tip 

Если вы еще не знали, можно поменять местами две переменные в Golang без использования третьей переменной.",3185,0,0,goproglib
1283,2020-10-30 15:45:02+00:00,"GeekBrains запускает курс «Машинное обучение»

Занятия начнутся в ноябре: за 6 месяцев студенты освоят востребованную профессию и получат практический опыт разработки проектов в сфере ML под руководством практикующих специалистов. Программа рассчитана на разработчиков-новичков и бизнес-аналитиков, но имеющие опыт разработчики также подчерпнут в ней немало полезного. После вводного блока занятий по математике, структурам данных и алгоритмам, будут рассмотрены сложные темы: библиотеки Python для Data Science, методы машинного обучения, нейронные сети, прототипирование и интеграция, а также бизнес-процесс машинного обучения. Студентам доступны карьерные консультации и помощь личного наставника в решении возникших затруднений.

Получить дополнительную информацию и записаться в группу можно на сайте: https://proglib.io/w/c53e7731",3192,0,0,goproglib
1282,2020-10-30 09:30:12+00:00,Знакомимся с профилированием кода на языке Go: https://proglib.io/w/08bac0fd,4385,0,0,goproglib
1281,2020-10-30 07:39:36+00:00,"**«Библиотека программиста» приглашает разбирающихся в ИТ авторов присоединиться к проекту.** Мы предлагаем удаленную работу, интересные темы и гонорары с выплатой 2 раза в месяц.

Прошедшие отбор соискателям сразу даем тему статьи и гонорар, если текст будет качественным. Оплата составляет 500 рублей за 1000 знаков (объем — до 10 тысяч знаков). Если материал больше/сложнее — 10 000 рублей (оговаривается заранее).

Напишите несколько слов о себе на адрес job@proglib.io. Ссылки на публикации будут плюсом.",2983,0,0,goproglib
1280,2020-10-29 18:30:14+00:00,Советы и рекомендации по работе в GoLand IDE: https://proglib.io/w/cb315c94,3284,0,0,goproglib
1279,2020-10-29 15:01:31+00:00,"GeekBrains запускает курс «Data Science в медицине»

За 18 месяцев начинающие специалисты освоят применение методов  Data Science в здравоохранении. Опытные преподаватели будут проводить вебинары 2 — 4 раза в неделю, а закончившие курс студенты добавят в портфолио 16 учебных проектов. В программу входят основы высшей математики и программирования, введение в искусственный интеллект, а также продвинутые темы: ОС Linux и инструменты Data Science, сбор и обработка данных, нейронные сети, компьютерное зрение, машинное обучение и обработка естественного языка, а также применение методов AI, ML и Data Science в медицине. HR-менеджер поможет составить резюме и подготовиться к собеседованию.

Получить дополнительную информацию и записаться в группу можно на сайте: https://proglib.io/w/5347bb9b",3003,0,0,goproglib
1278,2020-10-29 12:47:11+00:00,"Егор Гришечко из компании Insolar делится опытом работы с каналами в Go и акцентирует внимание на том, как их использовать более практично и эффективно.

https://proglib.io/w/a651982e",4485,0,0,goproglib
1277,2020-10-29 06:15:01+00:00,"GeekBrains запускает курс «Блокчейн-разработка»

Обучение начнется 2 ноября и продлится 4 месяца. Курс рассчитан на еще не знакомых с темой и уже имеющих некоторый опыт разработчиков. Технологический стек: командная оболочка, TCP/IP, Git и любой язык для backend. Занятия ведут участвующие в блокчейн-проектах преподаватели, а программа на 70% состоит из интерактивных вебинаров. Студенты изучат основы криптографии и распределенного реестра, а затем перейдут к более сложным темам: протоколам консенсуса и анонимизации, смарт-контрактам, закрытым блокчейнам и системам с разрешениями, масштабированию сетей блокчейн и пользовательским аспектам применения технологии. После обучения эксперты криптобиржи Binance проведут для студентов карьерные консультации, а возникающие в процессе затруднения поможет разрешить личный наставник.

Получить дополнительную информацию и записаться в группу можно на сайте: https://proglib.io/w/c6aa436e",2982,0,0,goproglib
1276,2020-10-28 18:45:02+00:00,"[​](https://telegra.ph/file/4bae3eb8d3dbc713379fb.jpg)#tip

Вы знали, что Go playground можно использовать для импорта нескольких файлов? См. прикрепленный скрин. 

Хотелось бы также поделиться экспериментальным альтернативным интерфейсом Go Play Space: https://goplay.space/",2911,0,0,goproglib
1275,2020-10-28 15:45:01+00:00,"GeekBrains открывает факультет Fullstack JavaScript

Подготовительные курсы пройдут в ноябре, а обучение начнется в январе 2021 года. Рассчитанная на 15 месяцев программа позволит студентам освоить профессию разработчика полного цикла. Успешно окончив курс, они смогут запустить собственные проекты: сайты, мобильные приложения и высоконагруженные сервисы. Преподают на факультете ведущие специалисты из GeekBrains и Delivery Club, а затруднения с домашними заданиями поможет решить наставник. Помимо основ HTML, CSS и JavaScript, в учебную программу входят продвинутые темы: современная фронтенд-разработка, бэкенд-разработка, базы данных, сетевые протоколы, многопоточные приложения, взаимодействие в команде и многое другое. Гарантия трудоустройства закреплена в договоре — опытный HR поможет вам составить резюме.

Получить дополнительную информацию и записаться в группу можно на сайте: https://proglib.io/w/28101c15",2973,0,0,goproglib
1274,2020-10-28 09:01:20+00:00,"Руководство по созданию Dockerfile для приложения на Go. Автор приводит Dockerfile, который можно использовать в качестве шаблона, и дает аргументы в пользу каждой строки в нем.

https://proglib.io/w/aaa26faa",5012,0,0,goproglib
1272,2020-10-27 15:15:06+00:00,"GeekBrains открывает факультет обработки естественного языка

Обучение проходит в онлайн-формате 2 раза в неделю в течение 10 месяцев. Студенты факультета смогут с нуля овладеть востребованной профессией NLP-разработчика, ML-инженера или специалиста по Data Science. Программа занятий рассчитана на новичков: в нее входят основы высшей математики (линейная алгебра и матанализ), программирования и машинного обучения. Достаточно подробно изучается теория вероятностей и матстатистика, различные подходы к обработке естественного языка, прототипирование и интеграция, а также бизнес-процесс машинного обучения. Занятия ведут признанные в отрасли эксперты, а решить возникающие в процессе обучения затруднения поможет личный наставник. Успешно окончившие курс студенты получат диплом о профессиональной переподготовке и закрепленную в договоре гарантию трудоустройства. 

Подробная информация о новом факультете доступна на нашем сайте: https://proglib.io/w/3b4fb9c8",2864,0,0,goproglib
1271,2020-10-27 08:00:15+00:00,"При наличии очевидных минусов, плагины в Go являются одним из многих архитектурных проектов, которые позволяют создавать слабосвязанные и модульные программы. Автор статьи на примере разработки базового калькулятора доставки показывает, как разрабатывать плагины на Go.

https://proglib.io/w/4e2074e9",4303,0,0,goproglib
1270,2020-10-26 11:00:48+00:00,"Доклад руководителя группы инфраструктурной разработки на митапе WBTechDay 2020 под названием «CI/CD. Архитектура системы непрерывной интеграции и доставки на Go».

В рамках доклада рассмотрены существующие в Wildberries подходы к обеспечению CI/CD и тому как команда пришла к решению разработать собственную систему. Также автор разбирает архитектуру системы CI/CD и рассказывет о следующем:
️Как устроена модульность CI и как она интегрирована в Gitlab
️Как система интегрирована в Kubernetes и позволяет унифицировать флоу работы различных команд
️При чем тут Vault и как его использовать для управления секретами и автоматизации микросервисного взаимодействия
️Как построить авторизацию на базе ABAC с учетом хранения данных в CEPH
️Как использовать собственную разработку на базе CEPH для событийно-ориентированной обработки данных и индексации данных в памяти

https://proglib.io/w/c6d70a35",3261,0,0,goproglib
1266,2020-10-25 12:47:00+00:00,"[​](https://telegra.ph/file/a6ea8c18cffe5c5fdb6d3.jpg)**Sqreen for Go** — инструмент, который реализует самозащиту исполняемых приложений (RASP). 

Если мы рассматриваем пример SQL-инъекции, то микроагент Sqreen добавляет свою защиту от SQL-инъекции к SQL-драйверу приложения. Поступающий HTTP-запрос проверяется в изолированной среде, что SQL-запрос не имеет исполняемого SQL-кода, который изменит структуру запроса.

Помимо микроагента, Sqreen for Go поставляется с дополнительными решениями для управления безопасностью приложений, среди которых Web application firewall, инвентаризация приложений и база данных уязвимых зависимостей.

В статье указано, что текущий релиз поддерживает защиту не от всех популярных уязвимостей OWASP, но в этом направлении ведется активная работа.

Стоит отметить, что бесплатного аккаунта вполне достаточно для начала работы, т. к. он поддерживает до 3 млн запросов в месяц в одном боевом приложении.

Подробности в статье: https://proglib.io/w/04f7be51",3149,0,0,goproglib
1265,2020-10-24 09:26:36+00:00,"Серия статей о разработке простого чата на Go и Vue.js с поддержкой веб-сокетов:

- [Разработка базового приложения с одной комнатой](https://dev.to/jeroendk/building-a-simple-chat-application-with-websockets-in-go-and-vue-js-gao)
- [Добавление поддержки нескольких комнат](https://dev.to/jeroendk/multi-room-chat-application-with-websockets-in-go-and-vue-js-part-2-3la8)
- [Добавление Redis Pub / Sub к существующему приложению](https://dev.to/jeroendk/how-to-use-redis-pub-sub-in-go-chat-application-part-3-2h4c)",4157,0,0,goproglib
1264,2020-10-23 12:00:59+00:00,"**Go-password-validator** — инструмент, который можно использовать для проверки надежности пароля или просто для валидации пароля на сервере. Разработчик исходит не из количества символов и их регистра, а из значения энтропии.

[Почитать подробнее](https://proglib.io/w/1b21a4da)
[Репозиторий](https://proglib.io/w/53191499)",3472,0,0,goproglib
1261,2020-10-22 12:48:46+00:00,"Паттерн **Легковес** представляет собой структурный паттерн проектирования, который позволяет вместить бОльшее количество объектов в отведённую оперативную память. 

Данный паттерн экономит память, разделяя общее состояние объектов между собой, вместо хранения одинаковых данных в каждом объекте.

Разбираемся с реализацией паттерна Легковес на Go: https://proglib.io/w/f9c6a37e",3378,0,0,goproglib
1260,2020-10-21 08:00:28+00:00,"Интересный доклад руководителя группы разработки на митапе WBTechDay 2020 под названием «Архитектура платежного шлюза Wildberries». 

https://proglib.io/w/70d3b24b

Платежный шлюз реализован на Go, а в рамках доклада спикер освещает следующие вопросы:
- работа без базы
- реализация паттерна retry
- реализация паттерна exponential backoff
- реализация паттерна circuit breaker
- использование RabbitMQ для очередей
- использование CEPH для хранения
- использование redis-cluster для кеширования и многое другое.",3657,0,0,goproglib
1259,2020-10-20 09:30:17+00:00,"**2fa** — консольный агент на Go для двухфакторной аутентификации с поддержкой генерации одноразоваого пароля по времени (TOTP) и событию (HOTP).

https://proglib.io/w/bc7c7ba2",3313,0,0,goproglib
1258,2020-10-19 15:01:00+00:00,"GeekBrains запускает курс «Python для решения бизнес-задач»

Обучение начнется 23 октября и продлится 2,5 месяца. Курс рассчитан на далеких от программирования слушателей: маркетологов, продакт-менеджеров и предпринимателей. В формате видеоуроков и практических вебинаров они научатся автоматизировать рутинные задачи и процессы. Опытные преподаватели расскажут, как создавать ботов Telegram, собирать, обрабатывать и визуализировать данные о клиентах, а также обрабатывать файлы и проверять правильность заполнения форм. Python позволяет написать программу один раз и запускать ее по потребности — это экономит рабочее время.

Получить дополнительную информацию и записаться в группу можно на сайте: https://proglib.io/w/d4c92d71",3231,0,0,goproglib
1257,2020-10-19 10:44:15+00:00,"Материалы семинара, в рамках которого разбираются инструменты, необходимые для диагностики проблем с производительностью в приложениях на Go и их устранения.

https://proglib.io/w/7ba8d683",3169,0,0,goproglib
1253,2020-10-18 08:52:59+00:00,"Руководство по разработке сервера на Go, который реализует базовую HTTP-аутентификацию.

https://proglib.io/w/6f59fa2d",3462,0,0,goproglib
1252,2020-10-17 08:55:58+00:00,"Интересная статья, которая познакомит вас с паттерном Расширение интерфейса в Go: https://proglib.io/w/c9b49350",4513,0,0,goproglib
1251,2020-10-16 11:15:03+00:00,"[​](https://telegra.ph/file/9f470ab0371d020223341.jpg)**Go-diagrams **— инструмент, позволяющий строить красивые системные схемы с помощью нескольких строк кода на Go.

https://proglib.io/w/241685d5",3534,0,0,goproglib
1250,2020-10-16 08:10:47+00:00,"[​](https://telegra.ph/file/547e433517953558c9db9.png)Стать ближе к сфере кибербезопасности и получить первые знания и навыки вы сможете уже 20 октября на интенсиве [«Старт в кибербезопасности: Level 0»](https://is.gd/wYORYn).

За 4 дня практических занятий с экспертом вы научитесь:

— Устанавливать и настраивать Linux-системы на виртуальные машины
— Устанавливать и настраивать сеть на Linux-системах
— Детально понимать взаимодействие между виртуальной и физической машиной
— Осуществлять ряд сетевых и связанных с уязвимостью ОС атак, и разрабатывать защиту от них
— Анализировать безопасность ОС

Что это вам даст?

— Получите необходимые знания о профессии, чтобы оценить свои силы и перспективы
— Детально разберетесь с чего начинается эффективная система информационной безопасности.
— Поймете принципы осуществления кибератак и получите реальный опыт
— Подготовитесь к поступлению на профессиональную программу «Специалист по информационной безопасности»

Эксперт интенсива — Ильдар Садыков, действующий руководитель отдела ИБ Федерального бюро МСЭ Министерство труда и социальной защиты РФ. Управляет 2 000 системами в 85 регионах РФ.

Примите участие в интенсиве и обеспечьте себе уверенный старт на пути к востребованной профессии!

Записаться на интенсив: https://is.gd/wYORYn",3178,0,0,goproglib
1249,2020-10-15 12:00:37+00:00,"[​](https://telegra.ph/file/b53eaa8f5e25c8d76f858.jpg) **ТОП-10 книг по языку программирования Go: от новичка до профессионала
**
Книги по языку Go с лучшими оценками читателей. Расставлены в порядке возрастания сложности, обобщены указанные читателями преимущества и недостатки.

https://proglib.io/sh/GLtBiTekEM",3520,0,0,goproglib
1246,2020-10-14 09:11:53+00:00,Перевод статьи о подключении внешней библиотеки на Go и исключении ненужных зависимостей: https://proglib.io/w/76bdb16e,4382,0,0,goproglib
1245,2020-10-13 12:00:34+00:00,"Серия видеоуроков, в рамках которых девушка доступно объясняет о структурах данных и алгоритмах в Golang: https://proglib.io/w/a4e8ce47",4674,0,0,goproglib
1242,2020-10-12 12:30:13+00:00,Учимся отлаживать приложения на Go в production с помощью eBPF: https://proglib.io/w/a5318400,4216,0,0,goproglib
1241,2020-10-12 09:30:01+00:00,"Go-разработчик с нуля всего за год!

Нравится программирование, но не можешь разобраться во всем самостоятельно? Мы поможем освоить новую профессию и расскажем, как найти высокооплачиваемую работу после обучения!
Переходи по ссылке и регистрируйся ▶️ https://clc.am/dMlKkQ 

На курсе «Профессия Go-разработчик» ты получишь базовые знания программирования, а также подробное обучение по работе с Golang. Пройдя обучающий курс, ты создашь крутое портфолио и сможешь претендовать на должность junior-программиста. А еще, дарим 2 месяца бесплатного английского в онлайн школе «EnglishDom»

Регистрируйся пока есть скидка 40% на обучение!",3194,0,0,goproglib
1240,2020-10-11 13:46:41+00:00,"**Go-string** — пакет, в котором представлены полезные строковые функции для проектов на Go. В репозитории вы можете ознакомиться с результатами тестов скоростных характеристик, проводимых автором пакета.

https://proglib.io/w/aa9161af",3171,0,0,goproglib
1237,2020-10-10 15:00:44+00:00,"Прояви себя в цифре! Участвуй в региональных Онлайн-Хакатонах Цифрового Прорыва! 

Тебя ждет насыщенная серия конкурсов с актуальным кейсами от бизнеса и государства, а призовой фонд каждого хакатона до 3 млн. руб.!

Выбирай удобные даты, понравившийся кейс, собирай команду и покажи, на что ты способен: 

16.10 - 18.10 - Центральный Хаб: [https://leadersofdigital.ru/event/63007

](https://leadersofdigital.ru/event/63007?utm_source=goproglib)24.10 - 26.10 - Северо-Кавказский Хаб: [https://leadersofdigital.ru/event/63006

](https://leadersofdigital.ru/event/63006?utm_source=goproglib)31.10 - 02.11 - Уральский Хаб: [https://leadersofdigital.ru/event/63009

](https://leadersofdigital.ru/event/63009?utm_source=goproglib)14.11 - 16.11 - Северо-Западный Хаб: [https://leadersofdigital.ru/event/63011

](https://leadersofdigital.ru/event/63011?utm_source=goproglib)Стань частью цифрового будущего России!",3010,0,0,goproglib
1236,2020-10-10 09:22:02+00:00,[​](https://user-images.githubusercontent.com/49715/61998422-a8663700-b064-11e9-94a4-39b61ad7626a.png)Иллюстрация жизненного цикла горутин от Joshua T Corbin. Подробнее можно почитать [здесь](https://github.com/golang/go/issues/33322).,3105,0,0,goproglib
1235,2020-10-09 17:41:47+00:00,"Python может быть встроен как общая библиотека в программы, написанные на других языках. В статье представлен тривиальный пример выполнения кода Python в программе на Go и обмена данными между двумя средами выполнения.

https://proglib.io/w/873e3ae2",3282,0,0,goproglib
1234,2020-10-09 13:49:31+00:00," **Первое занятие нашего курса по математике для Data Science доступно на YouTube

**На вебинаре вы узнаете, как решать задачи по комбинаторике. Вы изучите основные формулы комбинаторики, правило суммы и правило произведения. Мы разберем, что такое выбор без возвращения, с возвращением, с учетом порядка, без учета порядка. Параллельно порешаем несколько задач на понимание теории.

https://www.youtube.com/watch?v=GxQGbhjVWWM

Присоединяйтесь к полному курсу по ссылке (набор до 10 октября): https://proglib.io/w/34b0dff5",3153,0,0,goproglib
1233,2020-10-08 16:00:04+00:00,Подборка особенностей работы с JSON в Go: https://proglib.io/w/bd50c357,3375,0,0,goproglib
1230,2020-10-07 15:00:38+00:00,"GeekBrains проводит набор на курсы руководителей команды разработки

Программа обучения онлайн-университета GeekBrains рассчитана на middle- и senior-разработчиков. В течение 6 месяцев слушатели освоят технологии автоматизации разработки, а также методы управления командами, проектами и высоконагруженными системами. Курс разбит на четверти, каждая из которых посвящена одной из ключевых для будущего руководителя компетенций. Практикующие тимлиды с опытом в крупных проектах будут проводить занятия в формате видеолекций с выполнением заданий и разбором персональных кейсов.

Получить дополнительную информацию и записаться можно на сайте: https://proglib.io/w/ea5c6e44",3198,0,0,goproglib
1229,2020-10-07 08:00:23+00:00,"Репозиторий, в котором собраны эксперименты с пакетами Go для кодирования / декодирования данных в различных форматах.

https://proglib.io/w/0369c9ba",3223,0,0,goproglib
1228,2020-10-06 08:00:24+00:00,Разбираемся с минимизацией числа побегов памяти в кучу: https://proglib.io/w/355494d3,4667,0,0,goproglib
1227,2020-10-05 12:00:26+00:00,"«Есть только два типа языков: те, на которые люди жалуются, и те, которыми никто не пользуется». — Бьёрн Страуструп

Невозможно не согласиться с приведенной выше цитатой. Именно так и думает автор статьи, у которого есть определенные претензии к языку Go, но он не перестает им пользоваться. 

https://proglib.io/w/32f63529",3535,0,0,goproglib
1224,2020-10-04 08:26:50+00:00,"**Backend мастер-класс**

Серия доступных в понимании статей из категории Design + Develop + Deploy:

– [Design DB schema and generate SQL code with dbdiagram.io](https://dev.to/techschoolguru/design-db-schema-and-generate-sql-code-with-dbdiagram-io-4ko5)
– [Install & use Docker + Postgres + TablePlus to create DB schema](https://dev.to/techschoolguru/install-use-docker-postgres-table-plus-to-create-db-schema-44he)
– [How to write & run database migration in Golang](https://dev.to/techschoolguru/how-to-write-run-database-migration-in-golang-5h6g)
– [Generate CRUD Golang code from SQL | Compare db/sql, gorm, sqlx, sqlc](https://dev.to/techschoolguru/generate-crud-golang-code-from-sql-and-compare-db-sql-gorm-sqlx-sqlc-560j)
– [Write Go unit tests for db CRUD with random data](https://dev.to/techschoolguru/write-go-unit-tests-for-db-crud-with-random-data-53no)
– [A clean way to implement database transaction in Golang](https://dev.to/techschoolguru/a-clean-way-to-implement-database-transaction-in-golang-2ba)
– [DB transaction lock & How to handle deadlock](https://dev.to/techschoolguru/db-transaction-lock-how-to-handle-deadlock-22o8)
– [How to avoid deadlock in DB transaction? Queries order matter!](https://dev.to/techschoolguru/how-to-avoid-deadlock-in-db-transaction-queries-order-matter-oh7)
– [Deeply understand Isolation levels and Read phenomena in MySQL & PostgreSQL](https://dev.to/techschoolguru/understand-isolation-levels-read-phenomena-in-mysql-postgres-c2e)
– [How to setup Github Actions for Go + Postgres to run automated ](https://dev.to/techschoolguru/how-to-setup-github-actions-for-go-postgres-to-run-automated-tests-81o)[tests](https://dev.to/techschoolguru/how-to-setup-github-actions-for-go-postgres-to-run-automated-tests-81o)",6498,1,0,goproglib
1221,2020-10-03 13:00:23+00:00,"**Go Web Scraping Quick Start Guide **(2019)

**Автор(ы)**: Vincent Smith

**Веб-скрейпинг **— это технология получения данных путем извлечения из страниц веб-сайтов.

Данная книга быстро объяснит вам, как получать данные с различных веб-сайтов с помощью Go и библиотек Colly и Goquery.

Автор Книги акцентирует внимание на том, как перемещаться по веб-сайту, используя сначала поиск по ширине, а затем по глубине, а также находить и переходить по ссылкам. Вы узнаете о способах отслеживания истории, чтобы избежать циклов и защитить свой веб-скрейпер с помощью прокси-серверов.

Наконец, в книге будет рассказано о модели параллелизма Go и о том, как запускать веб-скрейпер параллельно, а также о крупномасштабном распределенном веб-скрейпер.

Книга предназначена для специалистов по обработке данных и веб-разработчиков, обладающих базовыми знаниями Golang, которые хотят собирать и анализировать данные для эффективной отчетности и визуализации.",5745,0,0,goproglib
1220,2020-10-03 10:13:19+00:00,"[​](https://telegra.ph/file/57bab7d7e785e1f7962cb.jpg)**Курс математики для анализа данных от Proglib и МГУ

**Мы предлагаем без отрыва от работы освоить математику для анализа данных. 
 онлайн-встречи с преподавателями из МГУ в Zoom
 подойдет всем, кто хочет вспомнить высшую математику или подготовиться к школе анализа данных Яндекса
 длительность 5 месяцев, по 2 раза в неделю
 от 5 350 руб. в месяц.

Мы дарим промокод на скидку 10% до 6 октября — GOPROGLIB
Подробнее о курсе — [тут ](https://courses.proglib.io/)
Программа курса — [тут](https://courses.proglib.io/programma)",3574,0,0,goproglib
1217,2020-10-01 13:00:27+00:00,Подробное сравнение Node.js и Golang: https://proglib.io/w/083492bb,3366,0,0,goproglib
1216,2020-10-01 10:00:09+00:00,"В последнее время большую популярность набирает язык Go, как быстрый компилируемый язык для бекенда и микросервисов. 

Хотите узнать, почему он так популярен, в чем его преимущества и как он может быть вам полезен?                                                                                                 

Приходите на открытый **онлайн-урок «Разработка на Go»** от проекта HardCode.dev. **5 октября в 19:00 мск.** 

На вебинаре вы:
Познакомитесь и узнаете о востребованности Go в IT-мире.
Поймете, когда и для чего стоит использовать Go.
Узнаете о возможностях языка и его особенностях.
Освоите синтаксис и разберетесь со структурой кода.
Научитесь создавать простые микросервисы на Go.

Воспользуйтесь шансом расширить свой кругозор и прокачать скилы (которые, кстати, очень хорошо оплачиваются)                                                  

**Регистрация по ссылке:** https://clck.ru/R9M8z",3276,0,0,goproglib
1212,2020-09-30 08:00:21+00:00,"**Prisma Client Go** — это конструктор запросов, который обеспечивает безопасный доступ к базе данных и сокращает количество шаблонов. Вы можете использовать его как альтернативу традиционным ORM, таким как gorm, xorm, sqlboiler и большинству инструментов для работы с базами данных.

Это часть экосистемы компании Prisma, которая предоставляет инструменты для доступа к данным, декларативного моделирования данных, миграции схем и визуального управления данными.

https://proglib.io/w/3d08c787",3251,0,0,goproglib
1211,2020-09-29 16:59:39+00:00,"Статья, в которой рассматриваются некоторые причины, по которым Frontend-разработчики должны выбрать Go в качестве отправной точки при переходе к полному стеку.

https://proglib.io/w/7ed4e2b9",3338,0,0,goproglib
1209,2020-09-29 11:00:43+00:00,"[​](https://telegra.ph/file/4a453399e9e0d15699026.jpg)**Data Scientist-ы больше не нужны?

**Может ли программа заменить специалиста? Рассказываем о существующих сервисах автоматизации машинного обучения.

https://proglib.io/sh/a9nuG1hfkY",3161,0,0,goproglib
1208,2020-09-28 16:07:00+00:00,"**Какая математика нужна для Data Science? Интервью с преподавателями МГУ
**
Всё, что вы хотели знать о математике для анализа данных, но не знали, у кого спросить.

https://proglib.io/w/fa2f98d1",3287,0,0,goproglib
1207,2020-09-28 08:00:30+00:00,Подборка материалов по разработке веб-приложений на Go: https://proglib.io/w/21bcf41d,3406,0,0,goproglib
1206,2020-09-27 08:00:31+00:00,"Если вы пришли в Go из мира Django, то у вас, как и у автора статьи, были некоторые вопросы относительно тестирования своих приложений. Но решение есть, более того, в Go вполне возможно писать быстрые и надёжные юнит-тесты без использования сторонних сервисов типа тестовой БД или кэша. 

https://proglib.io/w/675cc3fc",4677,0,0,goproglib
1205,2020-09-26 11:07:37+00:00,"**Хочешь стать дата сайентистом, но не хватает знаний матана?
**Мы совместно с преподавателями из МГУ запускаем курс ""Математика в data science""
Старт курса — 6 октября.

Узнать подробнее: https://courses.proglib.io/",3148,0,0,goproglib
1204,2020-09-26 08:00:34+00:00,"Управление ошибками в Go всегда вызывает споры у разработчиков. Однако, когда дело доходит до обработки ошибок в параллельной среде или объединения нескольких ошибок для одной и той же горутины, Go предоставляет полезные инструменты, которые упрощают управление множеством ошибок. В статье описан процесс объединения нескольких ошибок, генерируемых одной горутиной.

https://proglib.io/w/05c529db",4642,0,0,goproglib
1203,2020-09-25 08:00:31+00:00,"Вторая часть статьи ([ссылка на первую](https://t.me/goproglib/1171)), в которой подробно описана работа с пакетом `ast`: https://proglib.io/w/896f6c31",3347,0,0,goproglib
1202,2020-09-24 18:30:03+00:00,Разбираем методы динамического программирования на Go: https://proglib.io/w/02cf9114,3410,0,0,goproglib
1200,2020-09-24 11:51:19+00:00,"Мы создали канал, посвящённый различным аспектам информационной безопасности. Подписывайтесь, будет .

https://t.me/hackproglib",3095,0,0,goproglib
1194,2020-09-23 08:00:37+00:00,"**Gebug **— инструмент, позволяющий простым способом выполнить отладку докеризированных приложений на Go: https://proglib.io/w/82afc423",4346,0,0,goproglib
1193,2020-09-22 17:59:53+00:00,Серия коротких руководств по разработке на Go для начинающих: https://proglib.io/w/19b9f141,3370,0,0,goproglib
1192,2020-09-22 12:30:09+00:00,"[​](https://telegra.ph/file/871e570dc818bcdb6f573.jpg) **Сможет ли программа заменить Data Scientist: платформы для машинного обучения без программирования**

Было бы здорово, если бы модель машинного обучения можно было просто перетащить иконкой в проект, drag-and-drop. Стоп… но ведь такое уже есть! Рассказываем о восьми сервисах автоматизации задач Data Science.

https://proglib.io/sh/a9nuG1hfkY",3128,0,0,goproglib
1191,2020-09-22 09:30:03+00:00,"Пройди обучение и попади на стажировку в WildBerries!

Хочешь стать IT-специалистом крупной компании? Тогда обучающий курс «Профессия Go-разработчик» для тебя! 

За год обучения ты:
•  получишь базовые знания программирования;
•  пройдёшь обучение от ведущих разработчиков WildBerries;
•  научишься разрабатывать и тестировать приложения на Golang;
•  освоишь принципы работы с алгоритмами поиска и сортировки;
•  научишься взаимодействовать с файловой системой. 

Программа обучения разработана в партнёрстве с международным e-commerce-проектом WildBerries. Выпускники, успешно окончившие курс, смогут пройти собеседование и попасть на стажировку в компанию. Плюс ко всему, Skillbox дарит 2 месяца бесплатного английского в онлайн школе «EnglishDom»

Регистрируйся пока есть скидка 40% на обучение!
Успей записаться по ссылке ▶️https://clc.am/b6Yn2Q!",3239,0,0,goproglib
1187,2020-09-21 15:13:16+00:00,"23 сентября в 19:00 (МСК) мы будем проводить вебинар “Зачем нужна математика в  Data Science”. 

**Спикеры вебинара:  
Алексей Никитин. **Кандидат физико-математических наук, доцент факультета ВМК МГУ. Читает лекции по математическому анализу первых двух курсов на факультете ВМК МГУ и ФКН ВШЭ. 
**Леонид Крицков. **Кандидат физико-математических наук, доцент факультета ВМК МГУ. Автор задачника ""Алгебра и аналитическая геометрия: теоремы и задачи"", используемого в преподавании на факультете ВМК МГУ.  
**Татьяна Захарова. **Кандидат физико-математических наук, доцент факультета ВМК МГУ. Имеет опыт преподавания теории вероятностей и математической статистики более 28 лет. 

**На этом вебинаре мы расскажем: ** 
 • Data Science и математика: почему одно без другого невозможно 
 • Пример. Как математика описывает нейронную сеть 
 • Области Data Science и связанные разделы математики 
 • Где этому можно научиться 

**Ведущим** будет **Артём Дрёмов**, CEO Proglib
Будет полезно всем, кто хочет стать специалистом в анализе данных.",3132,0,0,goproglib
1186,2020-09-21 08:00:15+00:00,Коллекция руководств по стилевому оформлению кода на Go: https://proglib.io/w/8bdcd35f,4634,0,0,goproglib
1185,2020-09-20 08:00:29+00:00,"Учимся отлаживать приложения на Go в production-среде с помощью eBPF, без перекомпиляции и перераспределения: https://proglib.io/w/a5318400",4667,0,0,goproglib
1182,2020-09-18 07:01:28+00:00,"Серия статей об интеграции сервиса на Go со стеком ELK (Elasticsearch, Logstash и Kibana) с нуля: https://proglib.io/w/efd3a823",3857,0,0,goproglib
1179,2020-09-16 18:30:06+00:00,Простые советы и рекомендации по написанию модульных тестов: https://proglib.io/w/809741c2,4486,0,0,goproglib
1178,2020-09-16 15:45:02+00:00," В сентябре многие родители задумываются о будущем детей: хочется увлечь ребёнка тем, что пригодится в жизни. Таким ответственным родителям мы рекомендуем модульные курсы GeekSchool, где ученики тренируют логику, развивают творческое мышление, навыки решения практических задач и привычку работать на результат. Такой опыт пригодится в любой отрасли и на любой должности.

‍ Занятия – это живые вебинары с преподавателями, в любой момент можно задать вопрос и получить ответ. После урока – практическое задание, преподаватель проверяет результат и даёт обратную связь. В конце каждого курса ученики создают финальный проект: например, готовый сайт или компьютерную игру.

За один учебный год можно освоить три направления и решить, что нравится больше. Все подробности здесь: https://proglib.io/w/5972fbe5",3244,0,0,goproglib
1177,2020-09-16 08:00:17+00:00,"**Goxygen** — инструмент, который позволяет сократить ваше время на создание веб-приложения на Go, Angular, React или Vue с нуля. Он генерирует внутренний код Go, связывает его с интерфейсными компонентами, предоставляет Dockerfile для приложения и создает файлы docker-compose для удобного запуска.

https://proglib.io/w/022f0605",3760,0,0,goproglib
1176,2020-09-15 18:30:06+00:00,"**Запуск кода Go на iOS и Android**

Создаём простой пакет Go с помощью Cgo, который можно запустить из приложения iOS (Swift) и Android (Kotlin).

https://proglib.io/w/3f1e5ab5",3456,0,0,goproglib
1175,2020-09-15 15:00:45+00:00,"Хочешь откликнуться на вакансию, не выходя из приложения?
Тогда тебе сюда  [Golang | Jooby.dev

Удобный](https://t.me/golang_job) поиск работы
[Удобный](https://t.me/golang_job) постинг вакансий
[Удобный](https://t.me/golang_job) сервис

С любовью [️](https://t.me/golang_job), от команды Jooby.dev",3183,0,0,goproglib
1172,2020-09-14 19:13:11+00:00,Перевод статьи о сравнении языков Go и Rust для разработки инструмента командной строки: https://proglib.io/w/0b1eea7d,3422,0,0,goproglib
1171,2020-09-13 08:00:29+00:00,"Пошаговое руководство по работе с пакетом `go/ast`, который применяется для изучения представления синтаксического дерева пакета Go и может быть использован для выполнения статического анализа, компоновки кода, метапрограммирования и всего, что требует структурированной интерпретации исходного кода Go.

https://proglib.io/w/7f365b5b",3803,0,0,goproglib
1170,2020-09-12 14:11:32+00:00,[​](https://telegra.ph/file/a335170be372d0fea8c61.jpg)Сегодня 256 день в году. Всех причастных с днём программиста! ,3531,0,0,goproglib
1169,2020-09-12 10:12:26+00:00,Набор практических рекомендаций по структурированию проектов Go внутри репозиториев: https://proglib.io/w/0133c47c,3367,0,0,goproglib
1165,2020-09-11 12:15:21+00:00,"**Каждый третий айтишник в России — самоучка

**В преддверии Дня программиста онлайн-ритейлер Ozon опросил более 700 IT-специалистов, чтобы выяснить, как они пришли в профессию. Оказалось, что треть разработчиков – самоучки и только 30% из них имеют профильное высшее образование.

Несмотря на высокий уровень заработной платы в отрасли, лишь 20% IT-специалистов считают деньги решающим фактором при устройстве на работу. Половина специалистов выбирает IT, исходя из способностей и увлечений, а каждый десятый вообще считает, что попал в эту сферу случайно.

Полные результаты исследования и соответствующая инфографика были опубликованы сегодня на Хабре: https://habr.com/ru/company/ozontech/blog/518722/",3140,0,0,goproglib
1164,2020-09-11 08:00:34+00:00,Знакомимся с паттернами проектирования на примере создания реального приложения на Go: https://proglib.io/w/6ece07a3,4949,0,0,goproglib
1163,2020-09-10 18:30:04+00:00,"Перевод статьи о вариативных функциях в Go: https://proglib.io/w/ee9998a5

Кстати, на канале была [викторина](https://t.me/goproglib/930) по данной теме.",3309,0,0,goproglib
1162,2020-09-10 15:00:23+00:00,"Go — один из самых популярных языков программирования в веб-разработке и  системном программировании. Присоединяйся к бесплатному онлайн-интенсиву, где ты познакомишься с особенностями этого языка, разработаешь чат-бота для Telegram и поймёшь, интересна ли тебе карьера Go-разработчика.

Программа занятий тут: ▶️ https://clc.am/F5FTtw.

Какими преимуществами обладает Go?
 Прост в синтаксисе и располагает подробной документацией.
 Обладает высокой скоростью при умеренном потреблении ресурсов.
 Имеет большое количество библиотек.
 Без проблем взаимодействует с библиотеками языка С.
 Его легко обслуживать благодаря лаконичному синтаксису.",3219,0,0,goproglib
1161,2020-09-09 18:45:07+00:00,Изучаем Go на практике: https://proglib.io/w/63b0d857,3463,0,0,goproglib
1159,2020-09-08 18:30:12+00:00,"Бесплатный мини-курс, который поможет вам ближе познакомиться с Go и одновременно развить свои навыки программирования. В ходе курса вы создадите около 20 различных мини-приложений, пакетов и инструментов.

https://proglib.io/w/6faef3a2",3751,0,0,goproglib
1158,2020-09-08 15:45:04+00:00,"В мире компьютерных игр не только безумное разнообразие жанров , но и огромные бюджеты международных IT-гигантов. Стать разработчиком игр = обеспечить себя захватывающей работой и высокой зарплатой. Какие шаги предпринять, ещё учась в школе, расскажут 12 сентября (сб) в 12:00 на IT-субботнике GeekBrains «Из геймера в разработчики игр».
 
 Кому будет полезно:
  Родители, чьи дети любят компьютерные игры. Вы узнаете, как направить интерес в полезное русло и позаботиться о будущем ребёнка.
  Школьники, которые задумываются о выборе профессии. Вы поймете, чем привлекательна разработка игр и подходит ли она вам.
 
 Бесплатная регистрация и все подробности здесь  https://proglib.io/w/500194de",3208,0,0,goproglib
1157,2020-09-07 08:00:18+00:00,"**Все, что нужно знать о модулях Hugo**

Небольшая, но емкая статья, в которой вы увидите, как любой проект Hugo может использовать файлы, хранящиеся в удаленном репозитории, и сделать их своими собственными с помощью логики импорта и монтирования модуля.
Затем автор статьи углубляется в то, что именно представляет собой модуль Hugo, создав свой собственный.

https://proglib.io/w/5f32d3ea",3430,0,0,goproglib
1156,2020-09-06 07:06:37+00:00,"Работа с MySQL на Go: подключение к БД, создание БД, а также проверка связи с БД, чтобы убедиться, что соединение установлено правильно.

https://proglib.io/w/01813d2a",4741,0,0,goproglib
1155,2020-09-05 15:45:00+00:00,"**8 сентября в 20.00** пройдет бесплатный вебинар **""Разработка на Golang""**, от CTO Mail.ru Василия Романова, евангелиста GO в России.
Проходи по ссылке и регистрируйся на вебинар 
https://golangcourse.ru/#webinar

Вы сможете узнать:
Какие задачи можно решить с помощью golang?
Kак повысить производительность отдела с помощью golang?
Почему так актуален golang в 2020 году?
Какие компании ищут go-разработчиков и для каких задач?

А также, он расскажет о своем авторском курсе, в котором за 3 месяца можно изучить популярный язык в группе из 25 человек, что позволяет преподавателю заниматься с каждым студентом индивидуально.",3378,0,0,goproglib
1154,2020-09-05 08:53:48+00:00,"На видео обсуждаются четыре распространенные уязвимости в Golang: https://proglib.io/w/7e4da16e

Если вам не подходит такой формат, можно изучить расширенную версию доклада в [репозитории](https://proglib.io/w/3371d0fb).",3411,0,0,goproglib
1153,2020-09-04 08:51:41+00:00,Мини-курс по созданию полноценного чата на Go и React.JS: https://proglib.io/w/5d53a527,3930,0,0,goproglib
1152,2020-09-03 08:01:22+00:00,"Пишем простое веб-приложение на Go, которое выполняет запросы whois по доменному имени или IP-адресу, а также развертываем его на облачном сервере.

https://proglib.io/w/2b0a3bd1",4967,0,0,goproglib
1151,2020-09-02 14:06:07+00:00,"**Goleak **— инструмент, который помогает избежать утечек горутин.

https://proglib.io/w/b0001d6f",4685,0,0,goproglib
1150,2020-09-01 15:30:02+00:00,"Оцифруй свой регион - участвуй в Онлайн-Хакатоне Цифрового Прорыва в Приволжском IT-хабе! 

Регистрируйся по ссылке: https://proglib.io/w/bb244819

12-14 сентября участники будут решать на выбор один из 10 представленных кейсов от:

АО «Газпромбанк», ПАО «Россети», Почты России, ПАО «Ростелеком», АО «Газпром-медиа Холдинг», Госкорпорации «Росатом», Саратовского государственного технического университета им. Гагарина Ю.А., Министерства информационного развития и связи Пермского края, Министерства социально-демографической и семейной политики Самарской области, Самарского областного центра детско-юношеского технического творчества.

Призовой фонд хакатона составит 3.000.000 ₽! 

Прояви себя в ""цифре"" - регистрируйся сейчас, собирай и стань частью цифрового будущего! 

Подробности: https://proglib.io/w/bb244819",3517,0,0,goproglib
1149,2020-09-01 08:01:16+00:00,Машинное обучение на Go: реализация наивного байесовского классификатора с нуля ([теория](https://medium.com/@kcatstack/sentiment-analysis-naive-bayes-classifier-from-scratch-part-1-theory-4949115ba13) и [практика](https://medium.com/@kcatstack/naive-bayes-classifier-from-scratch-part-2-nlp-in-golang-81c2a103ee06)).,3711,1,0,goproglib
1148,2020-08-31 06:30:02+00:00,"Репозиторий, в котором собраны многие аспекты Go: от синтаксиса до параллелизма, структур данных и многого другого.

https://proglib.io/w/e5e59a51",5410,0,0,goproglib
1147,2020-08-30 15:30:02+00:00,"Псс… Соскучились?  Photo Lab объявляет о старте онлайн-хакатона PhotoHack Mobile с призовым фондом 500 000 рублей! 


В этот раз перед участниками стоит задача разработать мобильное приложение, используя технологии Photo Lab. При этом речь не идёт о чём-то масштабном и грандиозном, а наоборот, нужно создать нишевый продукт, направленный на решение конкретной задачи.

Где: онлайн
Когда: 12-13 сентября 2020 года
Кого мы ждём: мобильных разработчиков, специалистов по Machine Learning и Data Science, продакт-менеджеров, UI/UX-дизайнеров, авторов креативных идей, а также студентов технических специальностей.

P.S. в команде может быть не более пяти человек 

Подробная информация и регистрация на сайте: https://bit.ly/3lhoQdM
Торопитесь! Заявки принимаются до 11 сентября 2020",3454,0,0,goproglib
1146,2020-08-30 07:01:06+00:00,Реализация полиморфизма с интерфейсами Golang: https://proglib.io/w/51af3134,4357,0,0,goproglib
1145,2020-08-29 15:45:00+00:00,"Язык программирования Go уже давно применяют не только в Google, но и по всему миру: в IBM, Intel, Adobe, Wildberries, Avito. Уже после первого месяца изучения языка можно писать полноценные приложения и приносить пользу, получая за это высокую зарплату.

Но это не только превосходный язык для новичков в программировании. Многие компании переходят на Go и ищут специалистов со знанием двух языков программирования. Освоив Go как второй язык, вы  обеспечите себе отличные перспективы карьерного роста.

Востребованная профессия с нуля, 5 проектов в портфолио и помощь с трудоустройством — всё это даёт курс «Go-разработчик» онлайн-университета Geekbrains. Подробности здесь  https://proglib.io/w/86fe9a41",3334,0,0,goproglib
1144,2020-08-29 07:22:06+00:00,"Короткие заметки о том, как и где Google использует Go: [1](https://proglib.io/w/52ab988d) и [2](https://proglib.io/w/53dda440).",3385,0,0,goproglib
1143,2020-08-28 15:15:00+00:00,"Курс по игровому программированию на C++ в Unreal

За 5 месяцев вы научитесь писать код, который позволит персонажам двигаться, перемещаться, стрелять и взаимодействовать с окружающим миром, а также получите навыки, необходимые для работы геймплей-программистом.

Специально для подписчиков подготовили промокод ""PROG""
Он даст скидку 10% на покупку курса.

Читайте подробнее и начинайте изучать программирование для Action игр уже сейчас: https://bit.ly/3hrNdmu",3355,0,0,goproglib
1142,2020-08-27 07:04:51+00:00,"Интересный пример определения и исправления плохой архитектуры проекта, а также проектирования и реализации чистой архитектуры на Go.

https://proglib.io/w/edb2f6c6",5289,0,0,goproglib
1141,2020-08-26 19:02:29+00:00,"Привет, меня зовут Артём, я являюсь CEO IT-издания [Библиотека программиста](https://proglib.io/), и сейчас ищу редактора. Нам нужен грамотный специалист, не понаслышке знакомый с информационными технологиями.

**Предстоит:**
– писать, редактировать и оформлять новые публикации на сайте Библиотеки программиста (статьи и тесты-викторины)
– редактировать старые публикации по замечаниям читателей
– взаимодействовать с авторами, разработчиками и другими членами команды
– предлагать темы, формировать контент-план и ТЗ для публикаций
– писать и редактировать тексты под рекламные кампании
– реагировать на комментарии читателей

**Как мы вас себе представляем:
**– владеете терминологией, принятой в сообществе IT-разработчиков
– умеете выполнять задания в сжатые сроки
– готовы постоянно поддерживать контакт, оперативно отвечать на возникающие вопросы
– знакомы с HTML, чтобы корректно править старые публикации
– любите объяснять сложные вещи понятным читателю языком, знакомы с [инфостилем](http://maximilyahov.ru/hello/)
– стремитесь увлечь читателя, но не в ущерб фактам
– готовы ежедневно выпускать не менее 1 материала (своего или авторского)

**У нас уже есть:**
– аудитория (в том числе 350 тыс. VK, свыше 150 тыс. Telegram)
– база публикаций, [тестов](https://proglib.io/tests/all), [обсуждений](https://proglib.io/discussions)
– редакционная политика (не придется писать с нуля)
– инструменты оформления и публикации материалов, в том числе планирования
– метрики анализа популярности материалов
– система push-уведомлений
– несколько регулярно пишущих авторов, контент-менеджеры, занимающиеся публикациями в соцсетях, рекламный отдел, команда разработчиков

**Если вы подходите:**
– зарплатная вилка от 50 до 70 тысяч рублей в месяц
– будем регулярно оплачивать труд  дважды в месяц 
– поможем освоиться в команде и работе с инструментами сайта

Чтобы откликнуться, вы можете прислать портфолио из релевантных публикации на ящик artem@proglib.io или выполнить [тестовое задание](https://docs.google.com/document/d/17Yg45pgUwHIuJQe56OLPVBOD_DrTQ94vg5RfD9qOQ_U/edit?usp=sharing) и прислать результат на тот же email.",3453,0,0,goproglib
1139,2020-08-26 08:01:01+00:00,"Разбираемся в том, почему слепое доверие зависимостям может поставить под угрозу безопасность вашего приложения. 

https://proglib.io/w/278a441a",3284,0,0,goproglib
1138,2020-08-25 12:30:03+00:00,"Unreal Engine 4 — один из самых популярных игровых движков. Если знаешь его интерфейс и инструменты, тебе открыты классные перспективы в геймдеве.
 
На бесплатном онлайн-интенсиве ты сможешь познакомиться с этой платформой и создать свою первую игру всего за три вечера, даже если никогда не программировал!
 
Регистрация по ссылке: ▶️ https://clc.am/SlrXDw.
 
Что будет полезного?
 Знакомство с базовыми возможностями UE4. 
 Разработка шутера от первого лица. 
 Создание главного персонажа, его противников и оружия.
 Настройка сцены, камеры, освещения и звукового оформления.
 Изучение 3D-моделей, анимации и искусственного интеллекта.
 
Регистрируйся и подключайся к прямым эфирам с 27 по 29 августа в 19:00 по московскому времени.",3387,0,0,goproglib
1137,2020-08-25 08:00:55+00:00,Пример реализация утилиты traceroute на Go: https://proglib.io/w/6d665886,4396,0,0,goproglib
1136,2020-08-24 15:30:01+00:00,"В этом году для GopherCon команда Ozon Tech подготовила пару часов докладов на самые разные темы: от классических — о микросервисной архитектуре, до по-настоящему гошных. 
Итак для всех, кто пропустил онлайн, в нашем плейлисте доклады от разработчиков одной из самых больших Golang-команд России.
Наслаждайтесь!

https://habr.com/ru/company/ozontech/blog/516044/",3553,0,0,goproglib
1135,2020-08-24 10:14:40+00:00,Практика отладки проектов на Go: https://proglib.io/w/1b07f534,4757,0,0,goproglib
1134,2020-08-23 07:59:57+00:00,"**Ent** — инструмент от Facebook, предоставляющий простой API для моделирования любой схемы базы данных в виде объектов Go.

https://proglib.io/w/b226ce6f",5094,0,0,goproglib
1133,2020-08-22 15:30:01+00:00,"[​​](https://telegra.ph/file/6f28fd03ffa81504ca689.jpg)[Школа программистов открыла](http://mshponline.informatics.ru/?utm_source=goproglib) набор в Виртуальный класс для учеников 3-11 классов на 2020/21 учебный год! - 

Формат Виртуального класса равносилен очному обучению, он происходит в режиме живой видеоконференции в малых группах (до 15 человек). 
Учащиеся общаются с преподавателем и друг с другом через камеру и микрофон, работают в постоянном контакте с другими учениками, социализируясь и осваивая навыки командной работы, такой важной в IT-отрасли; проходят постоянные экспресс-тесты уровня знаний, выполняют проекты и разбирают ошибки в домашних работах. Кроме того преподаватель может использовать педагогические приемы, свойственные только очной форме обучения, например, виртуальный «вызов к доске» или совместное написание кода.

Школа программистов 19 лет предоставляет качественное IT-образование по всей России. 
Наши достижения:
Действующие чемпионы мира WRO (Всемирная олимпиада роботов)
 77 наград на Всероссийских олимпиадах
 средний балл ЕГЭ по информатике у учащихся Школы программистов - 83 балла
‍ Наши выпускники - студенты ведущих вузов страны: НИУ ВШЭ, МФТИ, НИЯУ МИФИ, СПбГУ, ИТМО и МГУ им. М.В. Ломоносова.
 А также стажируются и работают в крупных IT-компаниях, таких как: Apple, ABBYY, Google, Facebook, Kaspersky lab, Microsoft, NVIDIA и Яндекс

Даты ближайших экзаменов:
Школа программистов Junior (3-5 класс):
22 августа в 14:00
26 августа в 18:00

Средняя и старшая Школа (6-10 класс):
22 августа в 14:00
25 августа в 18:00

Получи фундаментальное IT-образование не выходя из дома!
Переходи по ссылке, выбирай экзамен и поступай в Школу программистов! [http://mshponline.informatics.ru/](http://mshponline.informatics.ru/?utm_source=goproglib)",3555,0,0,goproglib
1132,2020-08-22 09:22:58+00:00,"Автор статьи проанализировал некоторые встроенные функции, чтобы понять, как Go с ними справляется.

https://proglib.io/w/7186dccd",4314,0,0,goproglib
1131,2020-08-21 12:46:09+00:00,Максимально полезный инструмент для отображения индикаторов выполнения в терминальных приложениях: https://proglib.io/w/131a7088,3393,0,0,goproglib
1130,2020-08-20 15:15:00+00:00,"Если вам нравится делиться знаниями, мы принесли приятную новость – прямо сейчас Geekbrains ищет 30 преподавателей, авторов и ревьюеров: 

‍ **Преподаватель** ведет онлайн-занятия по любимым темам и видит, как растут новые кадры.
‍ **Автор** разрабатывает собственную программу и делится знаниями с новичками.
️ **Ревьюер** дает обратную связь на практические работы студентов и помогает освоить лучшие практики.

Не страшно, если нет опыта в образовательной сфере – компания ищет профессионалов в своей отрасли, а остальному научат. Можно даже совмещать преподавание с работой.

Станьте экспертом в GeekBrains и помогите тысячам людей найти себя в IT  https://proglib.io/w/0f7f677d",3376,0,0,goproglib
1129,2020-08-20 08:47:23+00:00,Учимся интегрировать структурированное ведение журнала в ваши сервисы Go: https://proglib.io/w/d2ee9386,4402,0,0,goproglib
1125,2020-08-19 08:00:42+00:00,"Автор статьи назвал Golang скучным, но по его мнению это не является недостатком. Разбираемся с причинами: https://proglib.io/w/f1578717",3290,0,0,goproglib
1124,2020-08-18 08:00:40+00:00,"[​​](https://github.com/bxcodec/go-clean-arch/raw/master/clean-arch.png)Пример чистой архитектуры проекта на Go, основанный на принципах, изложенных в популярной статье «[The Clean Architecture](https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html)» от Роберта Мартина.

https://proglib.io/w/358897a2",5213,0,0,goproglib
1123,2020-08-17 08:00:18+00:00,"GitHub Actions преставляет из себя CI/CD систему, интегрированную с GitHub и позволяющую автоматизировать рабочий процесс. 

В нижеуказанной серии статей вы увидите практическую сторону GitHub Actions, а в 4ой части описан процесс релиза проекта на Go.

– [Практическое руководство](https://dev.to/koddr/automate-that-a-practical-guide-to-github-actions-build-deploy-a-static-11ty-website-to-remote-virtual-server-after-push-d19)
– [Создание первого GitHub action](https://dev.to/koddr/create-your-first-github-action-in-6-minutes-4lm2)
– [Сокращатель ссылок для вашего домена через GitHub Actions](https://dev.to/koddr/personal-url-shortener-on-your-domain-with-automation-through-github-actions-2h2i)
– [GitHub Action для максимально быстрого и простого релиза](https://dev.to/koddr/github-action-for-release-your-go-projects-as-fast-and-easily-as-possible-20a2) [ваших проектов](https://dev.to/koddr/github-action-for-release-your-go-projects-as-fast-and-easily-as-possible-20a2) [на](https://dev.to/koddr/github-action-for-release-your-go-projects-as-fast-and-easily-as-possible-20a2) [Go](https://dev.to/koddr/github-action-for-release-your-go-projects-as-fast-and-easily-as-possible-20a2)",4778,0,0,goproglib
1122,2020-08-16 08:00:43+00:00,"Обработка ошибок в Golang с помощью Panic, Defer и Recover: https://proglib.io/w/4c0becb3",4678,0,0,goproglib
1121,2020-08-15 10:00:29+00:00,"Автор статьи делится положительным опытом использования байтового среза в Go после перехода от высокого уровня абстракции веб-фреймворков, таких как Spring или ASP.NET.

https://proglib.io/w/e713b2c4",3446,0,0,goproglib
1118,2020-08-14 08:00:41+00:00,"[​​](https://telegra.ph/file/f5c07b21f70df05f39984.jpg) **Язык Go: как стать востребованным программистом**

Go – один из самых востребованных языков программирования. В этой статье отвечаем на ваши вопросы о том, как можно изучить Golang онлайн и каковы перспективы Go-разработчиков. Плюс показываем все необходимые курсы, книги, ссылки и YouTube-каналы.

https://proglib.io/sh/cNKmStFu45",3870,0,0,goproglib
1117,2020-08-13 15:00:37+00:00,"Простой пример того, как можно объединить приложение на React.js и Go в один двоичный файл: https://proglib.io/w/51226819",3627,0,0,goproglib
1114,2020-08-12 15:01:46+00:00,"Руководство по работе с одним из самых полезных пакетов в Go под названием Context.

https://proglib.io/w/5ca39cc3

Кстати, вы уже ознакомились с примечаниями к релизу Go 1.15? Если нет, то [дерзайте](https://golang.org/doc/go1.15).",3618,0,0,goproglib
1112,2020-08-12 11:54:42+00:00,"Хочешь освоить востребованную IT-профессию? Познакомься с Go-разработкой на онлайн-занятиях от Антона Жукова — Infrastructure Engineer в ManyChat! Тебя ждут мощная программа и реальные задачи.

Регистрируйся бесплатно по ссылке:  https://clc.am/Jku0FA.

 На интенсиве ты освоишь базовые функции Golang, увидишь примеры крутых чат-ботов, получишь ответы на свои вопросы по программированию. 

 К концу интенсива у тебя будет готов проект — чат-бот для Telegram, который станет первым кейсом в твоём портфолио разработчика.

 Все участники интенсива получат электронную книгу Кея Петерсона и Дэвида Колба «Век живи — век учись» от издательства «МИФ», а лучшие — грант на 30 000 рублей для обучения в Skillbox.",3520,0,0,goproglib
1111,2020-08-11 14:00:20+00:00,[​​](https://telegra.ph/file/a928640a533de6a986e12.jpg)ОГО! Спасибо! Очень приятно. Вы так тоже можете сделать: vk.com/proglib,3359,0,0,goproglib
1110,2020-08-11 11:00:58+00:00,"Автор статьи объясняет на примерах, почему модули Go быстрее, чем GOPATH.

https://proglib.io/w/77234590",4467,0,0,goproglib
1105,2020-08-10 08:00:46+00:00,"**Aws-lambda-go **— подборка библиотек, образцов и инструментов, которые помогут разработчикам Go разрабатывать функции AWS Lambda.

Код, запускаемый в AWS Lambda, загружается в качестве функции Lambda. Каждая функция имеет соответствующую информацию о конфигурации. Например, название, описание, точку входа и требования к ресурсам. Код должен быть написан без сохранения состояния, то есть не должен зависеть от конкретной вычислительной инфраструктуры.

https://proglib.io/w/934ab862",4757,0,0,goproglib
1103,2020-08-09 18:06:00+00:00,"Интерфейсы в Go — это способ описать абстрактное поведение. Вам не нужно явно указывать тип, который реализует интерфейс. Это упрощает внедрение зависимостей в Go, оставляя ваш код несвязанным. Вы определяете необходимое поведение и ваш тип может реализовывать все больше и больше интерфейсов, даже не меняя код.

Но когда один интерфейс зависит от другого, вы сталкиваетесь с зависимостью типа, а не поведения. В статье автор описывает решение данной проблемы.

https://proglib.io/w/00784af4",3446,0,0,goproglib
1100,2020-08-08 13:31:49+00:00,"Несмотря на то, что у Go и Rust разные области применения, их не перестают сравнивать. Так и в этой статье автор сравнил два языка на примере небольшого приложения CLI.

https://proglib.io/w/e970588c",3336,0,0,goproglib
1099,2020-08-07 12:30:02+00:00,"Репозиторий, в котором собрана подборка инструментов (фреймворки, библиотеки и т. д.) для разработки проектов на Go с GUI: https://proglib.io/w/b1a5c90d",3639,1,0,goproglib
1096,2020-08-06 08:01:21+00:00,Учимся использовать nil-значения без использования ссылочных типов: https://proglib.io/w/873b04e8,4546,0,0,goproglib
1095,2020-08-05 18:52:25+00:00,Использование Protocol Buffers в Go на практике: https://proglib.io/w/77a79ac1,4694,0,0,goproglib
1093,2020-08-05 15:15:00+00:00,"Привет! Среди наших подписчиков много деловых, работающих людей, которые часто даже не успевают приготовить себе еду и заказывают доставку, которая уже задолбала. 

Вот и хотим вам посоветовать Кухню на районе, способную полностью заменить ежедневную готовку (как мама в детстве).

Кухня на районе — московский сервис доставки готовой домашней еды из под ножа. В чем разница между просто доставкой? Они сами готовят, сами доставляют и всё это максимум за 30 минут. Не все на это способны у себя дома)

Меню имеет огромное разнообразие и меняется каждую неделю. Доставка бесплатна и без минимального заказа. А еще, помимо домашней еды, пицца Zotman и коллаборации с московскими ресторанами.

За 492 рубля вообще можно заказать набор еды на целый день из 5 блюд — это у родителей в столовой на свадьбе дороже было!

А по промокоду PROGLIB вы получите 500 бонусных рублей, которыми можно оплатить до половины заказа. Переходите по ссылке(localkitchen.ru/proglib) заказывайте и приятного аппетита!!!",3237,0,0,goproglib
1092,2020-08-05 09:01:34+00:00,"Автор статьи провёл исследование альтернативного подхода к структурированию приложений CLI на основе Cobra и отделил бизнес-логику от интерфейса командной строки, а также покрыл её модульными тестами. 

https://proglib.io/w/545d68f2",3256,0,0,goproglib
1091,2020-08-04 16:38:25+00:00,Поделитесь опытом относительно написания резюме и прохождения собеседований: https://proglib.io/w/d1f08919,3192,0,0,goproglib
1090,2020-08-04 08:00:20+00:00,"**Айтишники, хорошая новость!** 

Появился канал с удалёнными вакансиями в IT: @theyseeku_it

Здесь ищут девелоперов, разработчиков, проект-менеджеров, UX/UI-дизайнеров, SEOшников и других специалистов.
 
• Вакансии от известных IT-компаний;
• Заработная плата от 30 до 500 тысяч рублей;
• Должности для опытных и начинающих специалистов;
• Только удалённая занятость.

[Присоединяйся](https://t.me/theyseeku_it) и стань частью IT-индустрии!",3190,0,0,goproglib
1087,2020-08-03 18:38:06+00:00,"Увлекаетесь или увлекались языком Python? Отличная возможность проверить свои знания в нашем тесте из 15 вопросов по различным аспектам языка. Сможете правильно ответить на все вопросы?

https://proglib.io/w/4b520a21",3095,0,0,goproglib
1086,2020-08-03 09:01:16+00:00,"Разработка механизма полнотекстового поиска (Full-Text Search, FTS) на Go: https://proglib.io/w/4d52e50c",3321,0,0,goproglib
1085,2020-08-02 12:01:08+00:00,Перевод статьи о разработке хеш-таблицы на дженериках: https://proglib.io/w/8935135e,3208,0,0,goproglib
1082,2020-08-01 10:30:01+00:00,Рассматриваем различные подходы к HTTP-маршрутизации в Go: https://proglib.io/w/fe6a1bcb,4645,0,0,goproglib
1081,2020-07-31 18:30:01+00:00,"Объектно-ориентированное программирование в Golang: работа со структурами.

https://proglib.io/w/f1ea3ea0",3429,0,0,goproglib
1080,2020-07-31 15:45:00+00:00,"Внимание-внимание! Мы торжественно объявляем о старте регионального этапа конкура для IT-специалистов ""Цифровой Прорыв 2020""! 

С середины августа по середину ноября вас ожидают сразу 8 командных хакатонов в ключевых региональных IT-хабах страны. 

Для решения актуальных кейсов от топовых IT-компаний мы ожидаем до 280 команд в каждом регионе, а общий призовой фонд этапа составит 24.000.000 ₽! 

Прояви себя в ""цифре"" - выбирай любой понравившйся хакатон (пока еще есть места), регистрируйся, собирай или вступай в команду и стань частью цифрового будущего России! 

Подробности: [https://leadersofdigital.ru/](https://leadersofdigital.ru/?utm_source=goproglib)",3175,0,0,goproglib
1079,2020-07-31 11:14:07+00:00,"**Eris** — инструмент, который предоставляет простой и понятный способ обработки, отслеживания и регистрации ошибок в Go, чтобы дать разработчикам возможность быстрее диагностировать проблемы. 

https://proglib.io/w/ab280c41",4503,0,0,goproglib
1078,2020-07-30 18:30:00+00:00,"Небольшой материал с примерами на Go о том, как тесты улучшают ваш код: https://proglib.io/w/3b05d1ea",4494,0,0,goproglib
1074,2020-07-29 18:45:00+00:00,Артемий Рябинков из Avito делится опытом разработки конкурентного кода: https://proglib.io/w/9b321fc2,3526,0,0,goproglib
1073,2020-07-29 15:45:00+00:00,"В IT хотят если не все, то многие — спрос на специалистов остался высоким, несмотря на пандемию, а курсов и образовательных программ для разработчиков, тестировщиков, менеджеров и дизайнеров становится все больше. Как научиться в IT, чем отличаются курсы компаний, как выбрать среди них подходящий и есть ли курсы с гарантированным оффером для выпускников — Ozon, «Яндекс.Практикум», «Школа 21», «Тинькофф» и GeekBrains рассказывают в статье на Хабре: https://habr.com/ru/company/ozontech/blog/512026/. 

А мы решили выяснить, откуда берутся разработчики! Как вы пришли в IT? Расскажите — ответы на вопросы займут чуть больше 2 минут (мы посчитали): https://forms.gle/VUDJJ5zeeieL2PRN9",3147,0,0,goproglib
1071,2020-07-29 06:30:02+00:00,"[​​](https://i.redd.it/asmsp647yld51.png)Иллюстрация истории языка Go. На заметку для тех, кто что-то забыл.",3093,0,0,goproglib
1068,2020-07-28 15:45:00+00:00,"Многие слышали про отличный курс факультета веб-разработки GeekBrains. Но не всем по душе корпеть над базами данных и разбираться в бэкенде. Хочется сразу видеть результат 

Для интересующихся фронтендом открылась возможность поступить на факультет Frontend-разработки. Практикующие специалисты со стажем учат всему, что нужно: адаптивно верстать, кроить веб-приложения, понимать Vue и React, использовать концепции Flux и Redux, работать с Node.js и Git.  5 проектов в портфолио.

Самое классное, что это не просто обучение «для галочки» , а университет с гарантированным трудоустройством . Интересно? Смотрите сами: https://proglib.io/w/f0e46b94",3136,0,0,goproglib
1067,2020-07-28 09:00:58+00:00,"**Distributed Services with Go**
**Your Guide to Reliable, Scalable, and Maintainable Systems** (2020)

**Автор(ы):** Travis Jeffery

Бета-версия книги, которая поможет поднять навыки Go на новый уровень, узнав, как проектировать, разрабатывать и развертывать распределенные сервисы.

Вы начнете с самых простых основ обработки хранилищ, изучите сеть клиента и сервера и, наконец, рассмотрите экземпляры серверов, развертывание и тестирование.

С помощью книги вы научитесь размещать свои приложения и библиотеки так, чтобы они были модульными и простыми в обслуживании; создавать сетевые, защищенные клиенты и серверы с помощью gRPC; контролировать приложения с помощью метрик, журналов и трассировок; тестировать и сравнивать приложения; развертывать приложения в облаке с помощью Kubernetes и управлять ими с помощью собственного оператора Kubernetes.",5731,0,0,goproglib
1066,2020-07-27 09:00:31+00:00,"В статье подробно описан процесс создания и защиты Go API с помощью JSON Web Tokens (JWT), а также использования JWT с современным пользовательским интерфейсом React. При этом пользователи аутентифицируются на стороне React с помощью Auth0, а затем отправляют запрос в Go API, указывая свой маркер доступа в запросе. 

https://proglib.io/w/c80b6178",3911,0,0,goproglib
1065,2020-07-26 15:01:03+00:00,Основы и различные варианты форматирования строк в Go: https://proglib.io/w/b96d315c,3263,0,0,goproglib
1064,2020-07-26 12:01:01+00:00,"Оператор `select` в Go похож на `switch` без аргументов, но он может использоваться только для операций с каналами. Оператор `select` используется для выполнения операции только с одним из множества каналов, условно выбранного блоком case.

Оператор `select` выбирает первый готовый канал, и получает сообщение из него, или же передает сообщение через него. Когда готовы несколько каналов, получение сообщения происходит из случайно выбранного готового канала. Если же ни один из каналов не готов, оператор блокирует ход программы до тех пор, пока какой-либо из каналов будет готов к отправке или получению.

Иными словами, `select` блокируется до тех пор, пока один из его блоков case не будет готов к запуску, а затем выполняет этот блок. Если сразу несколько блоков могут быть запущены, то выбирается произвольный.",3202,0,0,goproglib
1063,2020-07-26 08:49:29+00:00,"#вопросы_для_самопроверки

Объясните назначение оператора выбора (select) для каналов в Go.",3066,0,0,goproglib
1062,2020-07-25 08:01:15+00:00,Качественная и ёмкая подборка учебных курсов и материалов по Golang от Ardanlabs: https://proglib.io/w/162babbd,3464,0,0,goproglib
1061,2020-07-24 09:01:30+00:00,"Луковая Архитектура помогает разработчикам моделировать свою бизнес-логику в базовой коллекции без привязки к внешним проблемам, таким как выбор базы данных или работа пользовательского интерфейса. Разбираемся с тем, как выглядит луковая архитектура с примерами на Go.

https://proglib.io/w/f503fbb3",3630,0,0,goproglib
1060,2020-07-23 09:01:14+00:00,Разбираем причины неожиданного наследования переменной среды PATH и практические приемы работы с ней: https://proglib.io/w/73e441b5,4430,0,0,goproglib
1059,2020-07-22 09:01:22+00:00,Разбираем продвинутые техники отладки кода: https://proglib.io/w/ae45c3c7,4693,0,0,goproglib
1058,2020-07-21 15:48:22+00:00,"[​​](https://telegra.ph/file/641733db6971587fb0dde.jpg)Мы снова проводим конкурс (с увеличенным призовым фондом) во ВКонтакте для самых креативных из вас на лучший мем для статьи с нашего сайта. Правила простые: 

1. Вы берете произвольную статью с сайта, не утратившую свою актуальность
2. Делаете для нее мем
3. Отправляете в предложенные новости ссылку и вашу картинку
4. Мы оформляем и публикуем.

Автор картинки с публикацией с наибольшим охватом среди всех нам отправленных получит 15 тысяч рублей. Поехали: https://vk.com/proglib

Срок окончания конкурса — 18 августа 2020 года.",3226,0,0,goproglib
1057,2020-07-21 09:00:43+00:00,"**Project-layout** — репозиторий, в котором собран базовый набор общих исторических и появляющихся макетов проектов в экосистеме Go. 

По мере роста вашего проекта, имейте в виду, что будет важно убедиться, что ваш код хорошо структурирован, иначе вы получите грязный код с множеством скрытых зависимостей. Когда над проектом будет работать больше людей, вам понадобится еще больше структур. Именно тогда важно ввести общий способ управления пакетами / библиотеками. 

https://proglib.io/w/baa7d5aa",3450,0,0,goproglib
1056,2020-07-20 09:01:01+00:00,Реализация классической игры в понг на Go и WebAssembly: https://proglib.io/w/74eecb16,3375,0,0,goproglib
1055,2020-07-19 07:28:40+00:00,Полный список видеозаписей докладов с GolangConf 2019: https://proglib.io/w/fa57af9a,3630,0,0,goproglib
1053,2020-07-18 15:00:31+00:00,"Автор статьи выделяет три общих проблемы программирования и не очень очевидные решения с помощью Golang.

https://proglib.io/w/3c213a9c",4538,0,0,goproglib
1052,2020-07-18 12:34:18+00:00,"️ Команда **Библиотеки программиста **ищет **редактора-копирайтера** для подготовки публикаций

**Что делать: 
**— Подготовка нативных материалов по IT-тематике согласно контент-плану. Темы: программирование, информационная безопасность, Data Science и другие. Форматы материалов: лонгриды, обзоры, интервью, тесты, викторины и переводы англоязычных публикаций. 
— Редакторская работа со структурой материала под ключ.
— Коммуникация с командой по внесению правок.
— Факт-чекинг, корректура написанных материалов.

**Требования:
**— Опыт написания материалов для IT-медиа, продукта или компании.  
— Понимание целевой аудитории и SEO-оптимизации.
— Умение написания материалов, полезных как для читателя, так и заказчика.
— Знание английского языка для  чтения и перевода иностранных источников. 
— Приветствуется знание основ программирования и других направлений в IT-сфере.
— Готовность к выполнению тестового задания (оплачиваемое).
— Работа в команде с главным редактором. 

**Условия:
**— Удаленная работа с соблюдением дедлайнов.  
— Оплата 40-50 тыс.руб. в зависимости от опыта работы, выплаты два раза в месяц. 

**С кем связаться: 
**Откликнуться на вакансию: artem@proglib.io. Присылайте несколько предложений о себе и опыте работы, ссылки на примеры публикаций. Резюме присылать не нужно. В случае взаимного интереса, мы пришлем вам тестовое задание.",3273,0,0,goproglib
1051,2020-07-17 09:10:17+00:00,"Для миграции схем баз данных в Go используется библиотека golang-migrate. [В статье показано](https://proglib.io/w/faf4df6d) на примерах, как ее использовать. Далее автор [приводит примеры](https://proglib.io/w/72f33cab) работы различных библиотек на примере выполнения операций CRUD (создание, чтение, модификация, удаление) над базой данных.",3765,0,0,goproglib
1050,2020-07-16 17:50:09+00:00,Что мотивирует вас откликнуться на вакансию?,3254,0,0,goproglib
1049,2020-07-16 08:48:43+00:00,Короткая и лаконичная презентация о структурировании пакетов Golang: https://proglib.io/w/3b7229e8,4673,0,0,goproglib
1048,2020-07-15 18:02:13+00:00,"Разбираемся с тем, как понимание некоторых концепций CPU помогает принимать оптимальные решения в программировании: https://proglib.io/w/6353054d",5013,0,0,goproglib
1047,2020-07-15 08:30:02+00:00,"Думаешь, что стать программистом сложно? Только не с обучающим курсом от Skillbox!

Если ты никогда не занимался программированием, курс «Профессия Go-разработчик» станет отличным стартом твоей карьеры!

Под руководством опытных кураторов ты получишь базовые знания программирования, поймешь принципы работы с операционными системами и обменом данными, научишься создавать и оптимизировать приложения на языке Go.

Пройдя обучение, ты получишь диплом и возможность стажировки в крупной международной компании.

Первым 20 студентам скидка 40%

Не упусти свой шанс, оставляй заявку по ссылке  ▶️ https://clc.to/nWQ6nw !",3325,0,0,goproglib
1046,2020-07-15 06:00:31+00:00,"Автор статьи глубоко коснулся вопросов, связанных с обработкой ошибок в Go и пришёл к выводу, что в языке она реализована восхитительно. 

https://proglib.io/w/fd8691f2",3442,0,0,goproglib
1045,2020-07-14 09:00:59+00:00,Интеграционные тесты в Golang на примерах: https://proglib.io/w/fbac6181,4743,0,0,goproglib
1044,2020-07-13 09:00:32+00:00,"Учимся инструментировать код на Go с помощью абстрактного синтаксического дерева: 
– [Часть 1](https://proglib.io/w/4e434d56)
– [Часть 2](https://proglib.io/w/89f1d715)
– [Часть 3](https://proglib.io/w/5830b89d)",4923,0,0,goproglib
1043,2020-07-12 09:20:12+00:00,"**The Go Workshop** (2019)

**Автор(ы)**: Delio D’Anna, Andrew Hayes, Sam Hennessy, Jeremy Leasor, Gobin Sougrakpam

Книга фокусируется на развитии практических навыков и учит читателей основам Go и лучшим практикам, эффективной организации кода, модульному тестированию и тестированию производительности, а также позволяет повысить эффективность работы с помощью сторонних пакетов.

С помощью книги вы сможете разрабатывать высокопроизводительные параллельные приложения или создавать сценарии для автоматизации повторяющихся ежедневных задач.",4989,0,0,goproglib
1042,2020-07-11 14:30:01+00:00,"Автор статьи делится практическими знаниями, связанными с созданием, тестированием и развертыванием микросервисов на Go: 
– [Microservices in Golang](https://ewanvalentine.io/microservices-in-golang-part-1/)
– [Docker and go-micro](https://ewanvalentine.io/microservices-in-golang-part-2/)
– [Docker Compose and Datastores](https://ewanvalentine.io/microservices-in-golang-part-3/)
– [Authentication with JWT](https://ewanvalentine.io/microservices-in-golang-part-4/)
– [Event brokering with Go Micro](https://ewanvalentine.io/microservices-in-golang-part-5/)
– [Web Clients](https://ewanvalentine.io/microservices-in-golang-part-6/)
– [Terraform a Cloud](https://ewanvalentine.io/microservices-in-golang-part-7/)
– [Kubernetes and Container Engine](https://ewanvalentine.io/microservices-in-golang-part-8/)
– [Deployments with CircleCI](https://ewanvalentine.io/microservices-in-golang-part-9/)
– [Summary](https://ewanvalentine.io/microservices-in-golang-part-10/)",5847,0,0,goproglib
1039,2020-07-11 08:30:01+00:00,"Go — один из самых популярных языков программирования, применяющийся в web-разработке и в системном программировании. Присоединяйся к бесплатному онлайн-интенсиву, где ты познакомишься с особенностями этого языка, разработаешь чат-бота для Telegram и поймёшь, интересна ли тебе карьера Go-разработчика.

Программа занятий тут: ▶️ https://clc.to/Ln9EKg.

Какими преимуществами обладает Go?
 Прост в синтаксисе и располагает подробной документацией.
 Обладает высокой скоростью при умеренном потреблении ресурсов.
 Имеет большое количество библиотек.
 Без проблем взаимодействует с библиотеками языка С.
 Его легко обслуживать благодаря лаконичному синтаксису.

Регистрируйся на интенсив — воспользуйся шансом изучить перспективную профессию Go-разработчика!",3308,0,0,goproglib
1038,2020-07-10 09:01:46+00:00,"Мы с вами знаем, что Go хорошо подходит для программ, использующих сети и криптографию. Это доказал автор статьи, который написал SNI-прокси (__Server Name Indication — расширение протокола TLS, которое позволяет клиентам сообщать имя хоста, с которым он желает соединиться во время процесса «рукопожатия»__) на Go за 115 строк, используя стандартную библиотеку.

https://proglib.io/w/1045c54a",3381,0,0,goproglib
1037,2020-07-09 18:30:00+00:00,"[Sqlc](https://github.com/kyleconroy/sqlc) — инструмент, позволяющий компилировать SQL-запросы, обеспечивая корректность, безопасность и производительность, которые не могут сравниться ни с одним другим набором инструментов SQL в экосистеме Go.

https://proglib.io/w/33e8472c",3490,0,0,goproglib
1036,2020-07-09 15:30:01+00:00,"Теперь bug hunter'ы могут помочь сервису, которым пользуются они сами, друзья, близкие и мама с бабушкой — Ozon первым среди российских e-commerce компаний [запустил собственную bug bounty](https://habr.com/ru/company/ozontech/blog/509774/) программу.

За найденные на сайте уязвимости можно получить до 120 000 ₽.  Отправлять репорты можно на HackerOne: hackerone.com/ozon. Удачной охоты!",3647,0,0,goproglib
1033,2020-07-09 06:05:00+00:00,"**А вы знаете, что самые высокооплачиваемые вакансии на удаленке это IT & Digital? 

**Канал @hiddengurus ежедневно подготавливает выборку таких топовых позиций специально для вас. 

**После подписки вы получите:

**- Свежие вакансии прямиком от работодателей.
- Возможность принять участие в крутых проектах из **США, Европы, РФ и Латинской Америки.
**- Возможность прокачать свой скилл, и стать настоящим гуру. 
- Царскую **ЗП до 10000$/месяц.
**- Шанс работать из любой точки мира, когда удобно вам!

Подписывайтесь на канал @hiddengurus - **это шанс изменить вашу жизнь!**",3149,0,0,goproglib
1032,2020-07-08 09:01:01+00:00,"[Видеозапись](https://proglib.io/w/741c0d6b) и [текстовое описание](https://proglib.io/w/7650a1e8) доклада Александра Валялкина (автор следующих библиотек на Go: [Fasthttp](https://github.com/valyala/fasthttp), [Fastjson](https://github.com/valyala/fastjson), [Quicktemplate](https://github.com/valyala/quicktemplate)), в которам поднималась важная тема любого языка программирования — оптимизации производительности.",4550,0,0,goproglib
1031,2020-07-07 09:01:11+00:00,Три практических способа управления concurrency в Go: https://proglib.io/w/d00de7f4,4518,0,0,goproglib
1028,2020-07-06 08:00:08+00:00,12 практических примеров создания массивов на языке Go: https://proglib.io/w/4f55f318,3348,0,0,goproglib
1027,2020-07-05 14:03:48+00:00,Шпаргалка по работе с регулярными выражениями в Go: https://proglib.io/w/6efceb12,3454,0,0,goproglib
1024,2020-07-04 10:45:04+00:00,"Интерфейсы Go не работают как интерфейсы C# или Java. Они позволяют вам очень четко объявить необходимые зависимости, что дает большие преимущества, которые невозможно так легко получить при разработке на других языках. В репозитории собраны примеры использования интерфейсов Go для создания более чистого и тестируемого кода. Но прежде чем обращаться к коду, ознакомьтесь с Readme.

https://proglib.io/w/4e2e53a8",4768,0,0,goproglib
1023,2020-07-03 15:45:01+00:00,"[​​](https://telegra.ph/file/b8b4d4c1cb5a660f175bd.jpg)Что бы там ни говорили, а данные – это не только аналитика. Кто-то должен эти данные найти, сохранить и подготовить для анализа. Теперь всему можно научиться на факультете Data Engineering онлайн-университета GeekBrains:

 Автоматизировать сбор данных
 Создать конвейер обработки информации
 Разработать архитектуру хранения и мониторинга
 Подготовить результаты для аналитиков

При успешном прохождении курсов компания гарантирует не только диплом, но и трудоустройство. Список осваиваемых инструментов и отзывы учеников здесь: https://proglib.io/w/f8bac228",3295,0,0,goproglib
1022,2020-07-03 09:01:16+00:00,"**How To Code in Go** (2020)

**Автор(ы):** Mark Bates, Cory LaNou, Tim Raymond

Новая книга о разработке на Go от DigitalOcean поможет на практике узнать, как писать полезные инструменты и приложения, которые могут работать на удаленных серверах или локальных системах Windows, macOS и Linux.

В ходе чтения книги вы научитесь: устанавливать и настраивать локальную среду разработки на Go в системах Windows, macOS и Linux; проектировать свои программы с условной логикой, включая операторы switch для управления потоком программ; определять свои собственные структуры данных и создавать интерфейсы для них для повторного использования кода; писать пользовательские функции обработки ошибок; собирать и устанавливать программы на Go, чтобы они могли работать в разных операционных системах и на разных архитектурах CPU; использовать флаги для передачи аргументов вашим программам, для переопределения параметров по умолчанию.",4938,0,0,goproglib
1019,2020-07-02 09:01:11+00:00,"Автор статьи делится опытом изучения Golang за 24 часа, создав REST-сервис с помощью MySQL и Swagger.

https://proglib.io/w/3d77263b",5253,0,0,goproglib
1018,2020-07-01 16:25:43+00:00,"OWASP — это открытый проект обеспечения безопасности веб-приложений. В связи с тем, что ему доверяет всё сообщество программистов, [репозитории](https://proglib.io/w/c384f385) с подобными примерами практик для Golang можно свободно брать за основу в своих проектах.",3552,0,0,goproglib
1017,2020-06-30 08:00:46+00:00,"Перевод статьи о внутренностях реализации замыканий в Go, из которой вы среди прочего узнаете о том, как Go пытается автоматически определить, нужно ли использовать указатель/ссылку или значение в разных случаях. 

https://proglib.io/w/7a66a3fb",5177,0,0,goproglib
1014,2020-06-29 18:18:29+00:00,Учимся добавлять фоновые задания в микросервисы на Go: https://proglib.io/w/e124dcb6,3579,0,0,goproglib
1013,2020-06-29 12:01:31+00:00,"[​​](https://telegra.ph/file/be0498e8607beb8b5e873.jpg) **12 способов зарабатывать с помощью программного кода**

Все в курсе, что у программистов высокие зарплаты. Но обычная работа в компании – лишь один из источников, с помощью которых можно зарабатывать на программировании. В этой статье обсудим другие способы.

https://proglib.io/sh/u7tJsmH5S4",3331,0,0,goproglib
1012,2020-06-28 09:00:41+00:00,"Продолжение к [посту](https://t.me/goproglib/948) про разработку приложения для банковской сферы:
– [Регистрация пользователя](https://proglib.io/w/e546ee83)
– [Аутентификация пользователя и банковские переводы ч. 1](https://proglib.io/w/16679ee4)
– [Банковские переводы ч. 2](https://proglib.io/w/2700d32d)",3738,0,0,goproglib
1011,2020-06-27 16:01:01+00:00,"**Bild** — коллекция алгоритмов параллельной обработки изображений на чистом Go.

Целью проекта является простота в использовании и разработке. Bild работает на основе пакетов из стандартной библиотеки, чтобы уменьшить использование зависимостей и абстракций разработки. 

https://proglib.io/w/918ad3ad",3380,0,0,goproglib
1009,2020-06-27 13:30:02+00:00,"[​​](https://telegra.ph/file/f2ef9047e2c063ab241f1.jpg)Для получения` 012 `в результате выполнения программы достаточно изменить две строки, как показано ниже (строка 9 и 10). Это один из вариантов реализации, не являющийся единственным верным.",3141,0,0,goproglib
1008,2020-06-27 10:40:53+00:00,"Данная программа выводит `333`. Как необходимо изменить код, чтобы в результате вывести на экран `012`?",3129,0,0,goproglib
1007,2020-06-26 09:00:38+00:00,"Действительно, как узнать, что ты написал на Go хороший код? Если есть какая-то шкала между хорошо и плохо, то как понять, какие части шкалы относятся к хорошему? Каковы его свойства, атрибуты, отличительные признаки, паттерны и идиомы? Ответы на эти вопросы можно найти в переведённой на русский статье с многообещающим названием **«**Дзен Go**»**.

https://proglib.io/w/8af37e8e",5159,0,0,goproglib
1006,2020-06-25 09:01:02+00:00,"Если кому-то необходимо освежить в памяти основы Golang, например, перед собеседованием, то вот отличый вариант, хоть и может показаться неактуальным по времени: https://proglib.io/w/79391e19",3650,0,0,goproglib
1005,2020-06-24 09:30:02+00:00,"Существуют разные способы установления безопасного соединения TLS с помощью Go и gRPC. Вопреки распространенному мнению, вам не нужно вручную предоставлять сертификат сервера вашему клиенту gRPC для шифрования. В [статье](https://proglib.io/w/09fd692b) представлен список примеров кода для разных сценариев. Исходный код доступен в [репозитории](https://proglib.io/w/3189ad22).",4720,0,0,goproglib
1004,2020-06-23 15:15:00+00:00,"[​​](https://telegra.ph/file/fac9f7f6df81b978f03d8.jpg)‍ Как выбрать сервер для 1С

Рассказываем, как выбрать сервер для продуктов 1С в зависимости от числа активных пользователей и других требований к системе.

https://proglib.io/sh/bL4TeHxcQy",3338,0,0,goproglib
1003,2020-06-23 10:00:30+00:00,"Утилита [gogrep](https://github.com/mvdan/gogrep) позволяет находить код по синтаксическим шаблонам, фильтровать результаты по типам выражений, выполнять замену по шаблонам и т. д. 

Зачастую она используется для упрощения рефакторинга кода, изучения кодовой базы и поиска подозрительного кода. Автор статьи в подробностях разобрался с утилитой и поделился практическим опытом.

https://proglib.io/w/eb89f1cf",4442,0,0,goproglib
1002,2020-06-23 08:00:56+00:00,"Оператор `&` используется для получения адреса переменной. В строке 9 программы мы присваиваем адрес b типу a *int. В таком случае говорят, что `a указывает на b`. Когда мы выводим значение в `a`, будет выведен адрес `b`. В итоге получаем:
Тип a: *int
Адрес b: 0xc0000b4020

Вы можете получить другой адрес для b, так как местоположение b может быть где угодно в памяти.",3142,0,0,goproglib
999,2020-06-22 18:30:01+00:00,"[​​](https://media.proglib.io/posts/2020/06/21/7de66fb74126faed10a27662499efa1e.png) **Паттерны Go-кода на все случаи жизни**

Cортировки и битовые маски, обработка ошибок и создание изображений, генерация перестановок и работа с хэш-суммами, запуск HTTP-сервера, юнит-тесты и другие распространенные задачи, решаемые с помощью Go.

https://proglib.io/sh/tAslm0UR9V",4226,0,0,goproglib
998,2020-06-22 15:30:02+00:00,[GolangQuiz](https://t.me/golangquiz) - канал на котором публикуются интересные задачи и вопросы по Go и их разбор.,3194,0,0,goproglib
997,2020-06-22 08:00:51+00:00,"Команда Go предложила более простой дизайн дженериков: [новость об этом](https://blog.golang.org/generics-next-step) и само [описание](https://go.googlesource.com/proposal/+/refs/heads/master/design/go2draft-type-parameters.md).

Для экономии времени можно прочитать краткое руководство по новому дизайну дженериков Go: https://proglib.io/w/de45b19d",3306,0,0,goproglib
996,2020-06-21 09:29:51+00:00,"Вы знаете, что Github Actions позволяют упростить жизнь разработчику, т. к. обеспечивают автоматизацию рабочего процесса. В этом видеоуроке вы узнаете, как можно добавить невероятно полезные GitHub Actions в свои проекты на Go.

https://proglib.io/w/919f7e3d",3597,0,0,goproglib
995,2020-06-20 18:30:01+00:00,"**Hands-On GUI Application Development in Go** (2019)

Автор(ы): Andrew Williams

С помощью книги вы откроете для себя библиотеки GUI Golang, такие как Go-GTK (GIMP Toolkit) и Go-Qt, и научитесь создавать красивые, производительные и отзывчивые графические приложения.

В книге рассматриваются лучшие практики работы с доступными наборами инструментов, включая Walk, Shiny и Fyne. 

В конечном итоге вы изучите преимущества и сложности создания собственных графических приложений на Go, получите представление о том, как Go упрощает разработку кроссплатформенных графических приложений, научитесь разрабатывать графические приложения для Windows с использованием Walk и многое другое.",4743,1,0,goproglib
994,2020-06-20 16:30:01+00:00,"Вы знаете, что строки в Go неизменны. Как только строка создана, её невозможно изменить.

В строке 8 мы пытаемся изменить первый символ строки на «`а`». Любой символ Unicode в одинарной кавычке является `руной`. Мы пытаемся назначить руну `а` нулевой позиции среза. Это недопустимо, поскольку строка является неизменной, и, следовательно, такая программа скомпилируется с ошибкой.

Чтобы обойти неизменность строки, их преобразуют в срез руны. Затем этот фрагмент мутирует с любыми необходимыми изменениями и преобразуется обратно в новую строку. 

Обратите внимание на картинку, прикреплённую к посту. В строке 7 приведенной программы функция `mutate` принимает срез руны в качестве аргумента. Затем она изменяет первый элемент среза на «`а`», преобразовывает руну обратно в строку и возвращает её. Этот метод вызывается из строки 13 программы. Переменная `h` преобразуется в срез руны и передаётся для изменения в строке 13, что приводит к корректной работе и выводу `aello`.",3154,0,0,goproglib
991,2020-06-19 18:15:00+00:00,"Для работы с ядром и системными I/O-вызовами  в Go есть специальный интерфейс `io_uring`. В статье показано, как с ним работать и в чем заключаются его особенности.

https://proglib.io/w/9a4460ef",4299,0,0,goproglib
990,2020-06-19 15:15:00+00:00,"Go-разработчик с нуля всего за год!

Нравится программирование, но не можешь разобраться во всем самостоятельно? Мы поможем освоить новую профессию и расскажем, как найти высокооплачиваемую работу после обучения!
Переходи по ссылке и регистрируйся ▶️ https://clc.to/rQhbFg 

На курсе «Профессия Go-разработчик» ты получишь базовые знания программирования, а также подробное обучение по работе с Golang. Пройдя обучающий курс, ты создашь крутое портфолио и сможешь претендовать на должность junior-программиста. А еще, дарим 2 месяца бесплатного английского в онлайн школе «EnglishDom»

Первым 20 студентам скидка 40% на обучение!",3151,0,0,goproglib
989,2020-06-19 09:00:57+00:00,"Руководство по оформлению кода от разработчиков [Thanos](https://github.com/thanos-io/thanos) с оглядкой на читаемость, производительность, тестируемость и др.

https://proglib.io/w/4bcabd36",3295,0,0,goproglib
988,2020-06-18 18:15:00+00:00,"История о том, как исследователь безопасности нашел критическую уязвимость в инфраструктуре Uber, основанной на Golang: https://proglib.io/w/3eddca16",4321,0,0,goproglib
986,2020-06-18 09:00:51+00:00,"Объёмная статья о реализации шаблона backend сервера на Golang, в которой каждый найдёт для себя что-то полезное.

[Часть 1 (HTTP сервер)](https://proglib.io/w/60128a36)
[Часть 2 (REST API)](https://habr.com/ru/post/500554/)",5744,0,0,goproglib
985,2020-06-17 12:00:36+00:00,Управление памятью и её распределение в Go: https://proglib.io/w/7862e8f4,4843,0,0,goproglib
984,2020-06-17 09:01:18+00:00,"Функция удаления в строке 9 ничего не возвращает и ничего не делает, если указанный ключ (`ключ h`) не существует. В строке 10 мы пытаемся напечатать `s[""h""]`. Поскольку карта `s не имеет ключа h`, она вернет значение по умолчанию int. Следовательно, выведен будет `0`.",3140,0,0,goproglib
980,2020-06-16 09:01:14+00:00,Разбираемся с сортировкой в Go: https://proglib.io/w/f83e5e5c,4397,0,0,goproglib
979,2020-06-15 10:00:26+00:00,"**Go-elasticsearch** — клиент для работы с Elasticsearch. В зависимости от используемой  версии Elasticsearch можно подключать соответствующую версию клиента (6.х и 7.х). 

https://proglib.io/w/ffbc66bd",3454,0,0,goproglib
978,2020-06-15 07:01:27+00:00,"Флаг `+` в спецификаторе формата `%+d` используется для того, чтобы всегда печатать знак для числовых значений. Следовательно, эта программа выводит `-5 +5`.",3225,0,0,goproglib
975,2020-06-14 15:30:02+00:00,"Любите пораскинуть мозгами? 20 и 21 июня образовательный портал GeekBrains проведет онлайн-конкурс по математике и информатике. Решите задачи, войдите в десятку лучших и выиграйте бесплатное обучение IT-профессиям на выбор: веб-программированию, системному администрированию, разработке игр и др. 

‍  Участвуют все желающие, достаточно школьных знаний. А задания с выбором ответа и без.

‍️ Выглядит жизненно: как будто сдаёшь ЕГЭ, чтобы поступить в онлайн-университет. Все подробности здесь: https://proglib.io/w/331f5990",3276,0,0,goproglib
974,2020-06-14 09:00:21+00:00,Учимся контейнеризировать свое окружение при разработке на Go: https://proglib.io/w/8874d3ce,4699,0,0,goproglib
973,2020-06-13 09:31:37+00:00,"Язык Go хорошо себя проявляет при написании сервисов с высокой пропускной способностью, а Python — при использовании для науки о данных. Из статьи вы узнаете, как программы на Go и Python могут взаимодействовать между собой с помощью gRPC.

https://proglib.io/w/be42a6be",3607,0,0,goproglib
972,2020-06-12 18:30:01+00:00,"**Значение Unicode для A равно 65**. Следовательно, когда `i` является типом, приведенным к строке (строка 9), программа выведет `А`.",3360,0,0,goproglib
969,2020-06-11 15:30:09+00:00,"[​​](https://telegra.ph/file/762fb5689fec1d1ba9418.jpg)**Фильм Microsoft Build 2020: главные новинки IT-индустрии

**Рассказ и видео о последних новинках от компании Microsoft. Суперкомпьютеры, безопасное машинное обучение, Learn TV, Fluid Framework и многое другое – будьте в курсе инноваций!

https://proglib.io/sh/RSsI59cBpz",3756,0,0,goproglib
968,2020-06-11 08:01:03+00:00,"**Деплой Golang-приложения  в Kubernetes на DigitalOcean**: учимся помещать приложение в Docker-контейнер, разворачивать в кластере Kubernetes и создавать средство балансировки нагрузки, которое будет служить точкой входа в приложение с общим доступом.

https://proglib.io/w/e6181a85",5193,0,0,goproglib
967,2020-06-10 18:15:00+00:00,"Преимущества, которые вы как разработчик и ваши пользователи получаете от использования чистой архитектуры при разработке программы, очевидны: итоговая бизнес-логика, которая не заботится о том, какая используется СУБД; используется ли CLI, REST API или gRPC; какой используется фреймворк и так далее. 

В данной статье автор делится своим подходом к построению чистой архитектуры: https://proglib.io/w/63955949",3796,0,0,goproglib
965,2020-06-10 09:01:23+00:00,"Выражение `a[low : high : max]` является одним из способов создать срез и называется **полным выражением срезов**. 

Оно строит срез того же типа, с той же длиной и элементами, что и простое выражение среза `a[low:high]`. Кроме того, оно контролирует ёмкость результирующего среза, устанавливая её следующим образом: `max - low`. Ёмкость (__функция cap в  Go__) — это количество элементов в базовом массиве (начиная с элемента, на который ссылается указатель среза). Длина среза (__функция len в  Go__) определяется как `high - low`.

Следовательно, срез **t** в строке 9 **имеет длину 1 **(элемент 4) и **ёмкость 1**.",3186,0,0,goproglib
962,2020-06-09 11:53:34+00:00,"**Go-yaml** — библиотека, предназначенная для работы с форматом yaml в Go. Как заявляют авторы, имеет ряд преимуществ над [существующей](https://github.com/go-yaml/yaml). Так или иначе, она заслуживает вашего внимания. 

https://proglib.io/w/3c4dba29",3363,0,0,goproglib
961,2020-06-08 09:01:10+00:00,Философия и инструменты тестирования кода на Go: https://proglib.io/w/b2907b24,4563,0,0,goproglib
960,2020-06-07 08:39:57+00:00,Качественный туториал по работе с RabbitMQ в Go для начинающих: https://proglib.io/w/f78ab4b3,5193,0,0,goproglib
958,2020-06-06 15:01:34+00:00,"Программа раннего доступа к GoLand 2020.2 открыта: вас ждет начальная поддержка Go 1.15, улучшенная и расширенная поддержка Go Modules, новые функции редактирования кода и многое другое.

https://proglib.io/w/177c6e0a",3032,0,0,goproglib
957,2020-06-06 12:00:28+00:00,"Интересной частью вышеупомянутой викторины является строка **12**:
__i,_____: = strconv.Atoi(s) __

Данный участок кода создает новую **переменную i**, область действия которой находится только в пределах **оператора if**. **Переменная i**, которая выводится в строке **15**, фактически определена в строке **9**, а не та, которая определена в строке **12**. Следовательно, эта программа `выведет 2`.

Стоит также остановиться на строке 12, где происходит конвертация строк в числа. 

Строки можно преобразовывать в цифры, используя пакет __strconv__ в стандартной библиотеке Go. Пакет __strconv__ содержит функции для преобразования integer и float. Это очень распространенная операция при получении ввода от пользователя. Например, если у вас есть программа, которая запрашивает возраст пользователя, и когда пользователь вводит данные, они сохраняются как __string__. Затем вам нужно будет преобразовать их в __int__, чтобы выполнять математические операции.

Если строка не имеет десятичных дробей, вы можете преобразовать ее в целое число, используя функцию __strconv.Atoi__. Если вы знаете, что будете использовать число типа __float__, вам следует использовать __strconv.ParseFloat.__",3062,0,0,goproglib
954,2020-06-05 09:01:05+00:00,Разбираемся с реализацией интерфейсов на Go с помощью [impl](https://github.com/josharian/impl): https://proglib.io/w/bac69788,3243,0,0,goproglib
953,2020-06-05 07:01:59+00:00,"**Эта программа скомпилируется и выведет 30.**

В строке 14 вышеупомянутой программы мы присваиваем адрес rect для r. Несмотря на то, что в строке 15 не использовался синтаксис (*r).area() и в связи с тем, что у area() есть получатель значения, Go способен интерпретировать r.area() как (*r).area(), что приводит к корректному выполнению.",3189,0,0,goproglib
950,2020-06-04 11:18:51+00:00,"**Вакансия: Lead Go developer
**Компания: [MillionAgents](https://www.millionagents.com/), один из ведущих игроков на рынке полевых исследований.
Мы собираем данные о товарах и ценах для крупных розничных сетей и производителей FMCG-товаров 
Вилка: 230 000 - 270 000₽ на руки
Локация: офис, м. Новослободская, Москва
 
‍ **Требуемый опыт:** Golang, gRPC, Redis, Linux / PostgreSQL / Go microservices.
**Отлично, если вы работали с**: Docker, имели опыт управления командой.
 
 **Условия:
**- График 5/2, начало рабочего дня с 10:00 - 12:00 часов;
- Возможность работать пару дней в неделю удаленно;
- Очередь технических задач;
- Технически грамотное руководство;
- Официальное трудоустройство                                                                                                                                                

По всем вопросам можно писать в личные сообщения @svetafeeva

️ **Подробности** - https://proglib.io/vacancies/lead-go-developer-millionagents-2020-06-04",418,0,0,goproglib
949,2020-06-03 08:00:48+00:00,"Сборник технических вопросов для собеседований, решенных с помощью Go: https://proglib.io/w/5deaef72",5067,0,0,goproglib
948,2020-06-02 09:01:20+00:00,"Изучаем Golang, разрабатывая простое приложение для банковской сферы: 
– [Начало](https://proglib.io/w/2ceaa66a) 
– [Авторизация и REST API](https://proglib.io/w/943545a3)",5393,0,0,goproglib
947,2020-06-01 17:46:16+00:00,"Презентации и полная запись недавнего онлайн-митапа **«**Карантин, Go away**»**:

– [Тестирование (микро)сервисов ](https://ispri.ng/RRpGl)[—](https://ispri.ng/KgLNN)[ Алексей Палажченко, Percona](https://ispri.ng/RRpGl)
– [Dependency Injection and it’s friends (in Go) ](https://ispri.ng/JB70l)[—](https://ispri.ng/KgLNN)[ Антон Кучеров, Toggl](https://ispri.ng/JB70l)
– [Чистая архитектура в автоматизации — Сергей Шамбир, iSpring](https://ispri.ng/KgLNN)
– [Go-Swagger в продуктиве: взлеты и падения — Илья Казначеев, МТС](https://ispri.ng/VlyZW)

[Полная запись на YouTube](https://proglib.io/w/90187116)",4916,0,0,goproglib
945,2020-05-31 09:01:05+00:00,"В статье разобраны причины, по которым использование пакета __unsafe__ в Go может быть небезопасным: https://proglib.io/w/861850f1",3331,0,0,goproglib
944,2020-05-30 15:01:07+00:00,Погружение в **goroutines** и их размер**: **https://proglib.io/w/6e0a7965,3414,0,0,goproglib
943,2020-05-30 11:30:07+00:00,"В примере затронута тема анонимных функций, которые отличаются от обычных тем, что они могут определяться внутри других функций и иметь доступ к контексту выполнения, а также этим функциям не назначается имя.

Анонимные функции позволяют нам определить некоторое действие непосредственно там, где оно применяется. Например, нам надо выполнить сложение двух чисел, но больше нигде это действие в программе не нужно.

Анонимные функции могут использоваться как аргумент функции или как результат функции, а также они имеют доступ к окружению, в котором вызываются. Такая ситуация и рассматривается в примере.

Функция `square` определяет локальную переменную `x` и возвращает анонимную функцию. Анонимная функция увеливичает значение переменной `x` и возвращает ее квадрат.
Таким образом, мы можем зафисировать у внешней функции `square` состояние в виде переменной `x`, которое будет изменяться в анонимной функции. В результате получаем 9 и 16.",3242,0,0,goproglib
940,2020-05-29 09:01:24+00:00,Инструментирование программ на Go чистым и гибким способом: https://proglib.io/w/bbaa1873,4308,0,0,goproglib
939,2020-05-28 17:11:31+00:00,"[​​](https://media.proglib.io/posts/2020/05/28/3a21573951511d2ab7f9eac93c933683.jpg)** Инструментирование в Go

**Рассказываем о методах инструментирования Go-кода, контекстной трассировке и специальном средстве лаконичного и гибкого инструментирования gtrace.

https://proglib.io/sh/l15apnJB4W",4572,0,0,goproglib
938,2020-05-27 17:11:17+00:00,"**Пакет flag в Go

**С помощью небольшого мануала вы научитесь использовать пакет flag для создания различных утилит командной строки. Кроме того, в нем показана практика применения пакета flag для управления выводом программы, а также рассказано, как реализовывать подкоманды и вводить позиционные аргументы, в которых можно смешивать флаги и другие данные.

https://proglib.io/w/f5a50a26",4566,0,0,goproglib
937,2020-05-27 08:00:37+00:00," Топовый Вечный! По смехотворной цене! 

8 ГБ RAM / 4x4.5 ГГц CPU / 80 ГБ NVMe / 500 Мбит/сек / anti-DDoS

Размещение в лучшем московском дата-центре Datapro, подключение к каналу 500 Мбит/сек, выделенный IPv4 адрес, защита от DDoS.

Спешите узнать подробней и заказать
https://proglib.io/w/2b9d6955",3417,0,0,goproglib
936,2020-05-27 06:01:54+00:00,"Автор статьи советует использовать стандартные типы по умолчанию в Go, если у вас нет веских причин не делать этого: https://proglib.io/w/c02fdf66",3312,0,0,goproglib
934,2020-05-26 13:45:43+00:00,"Создание веб-API клиента на Go по шагам: [подключение к API](https://proglib.io/w/5d946c9b), [десериализация данных](https://proglib.io/w/f79028c3) и [определение клиента](https://proglib.io/w/7c0fa745).",3682,0,0,goproglib
933,2020-05-25 18:25:57+00:00,"**Hands-On Software Architecture with Golang: Design and architect highly scalable and robust applications using Go** (2019)

**Автор(ы)**: Jyotiswarup Raiturkar

Книга предоставляет набор знаний, которые позволят понимать на практике  принципы архитектуры программного обеспечения с охватом SOA (сервис-ориентированная архитектура), распределенных систем, систем обмена сообщениями и моделирования баз данных.

Автор книги знакомит читателей с различными архитектурными шаблонами для создания распределенных приложений; показывает процесс переноса приложений, написанных на Java или Python, на язык Go; описывает различные аспекты уровня кода (модульность, дизайн классов и конструкции), специфичные для Golang; представляет основные задачи архитектуры, такие как эффективное управление сложностью, масштабируемостью и надежностью программных систем; показывает практику развертывания архитектуры и планирования миграции приложений с других языков и многое другое.",5983,0,0,goproglib
932,2020-05-24 16:36:51+00:00,"**Сборка приложений Go для разных операционных систем и архитектур**

Используя переменные среды и теги сборки, вы можете контролировать, для какой ОС и архитектуры создается окончательный двоичный файл. С помощью мануала вы научитесь собирать тестовое приложение, которое объединяет строки в путь к файлу, создает и выборочно включает зависимые от платформы фрагменты и собирает двоичные файлы для нескольких ОС и архитектур в своей системе. 

https://proglib.io/w/774fa86e",5058,0,0,goproglib
931,2020-05-23 17:36:13+00:00,Автор статьи делится шаблонами для написания веб-сервисов на Go: https://proglib.io/w/05683c0e,3755,0,0,goproglib
930,2020-05-23 10:46:24+00:00,"В нашей викторине затронута тема вариативных функций в Go, которые в качестве единого аргумента принимает ноль, одно или несколько значений. Хотя вариативные функции используются не так часто, в отдельных случаях они могут сделать ваш код чище и читабельнее.

Срез **i** передается в вариативную функцию **hello()** в строке №13. Изменения, внесенные во фрагмент внутри функции, видны вызывающей стороне (5 заменилось на 18, т.к. это нулевое значение среза). Следовательно строка №14 напечатает 18.",3423,0,0,goproglib
926,2020-05-21 09:01:13+00:00,"Перевод статьи, в которой описан процесс разработки системы удалённого мониторинга пациентов (технический стек: Go/Vue), заражённых Covid-19. 

https://proglib.io/w/da87faf2",3381,0,0,goproglib
925,2020-05-21 07:01:44+00:00,"В программировании на Go __nil__ является нулевым значением. Как помните, переменная integer, объявленная без значения, по умолчанию будет равна 0. Пустая строка будет нулевым значением переменной string и так далее. Указатель, который ни на что не указывает, принимает значение __nil__. Идентификатор __nil__ также обладает нулевым значением для срезов, карт и интерфейсов.

Если мы объявляем переменную типа интерфейса без присваивания, нулевым значением является __nil__. В нашем примере тип интерфейса и значение являются __nil__, тогда и переменная **i** считается равной **nil**.",3222,0,0,goproglib
922,2020-05-19 17:31:17+00:00,"[​​](https://telegra.ph/file/11911aedea9439e86220a.png)**Mvn-golang** ― плагин, который осуществляет вызовы к утилитам и командам GoSDK с автоматическим формированием нужных переменных окружения и позволяет использовать Maven для построения Go-проекта.

[Статья с описанием
](https://proglib.io/w/e3281e3e)[Ссылка на репозиторий](https://github.com/raydac/mvn-golang)",3298,0,0,goproglib
920,2020-05-19 06:30:03+00:00,Разбираемся с использованием преимуществ структур и интерфейсов в Go для макетирования любого сервиса или библиотеки: https://proglib.io/w/0c9d8358,3344,0,0,goproglib
919,2020-05-18 17:38:00+00:00,"Хоть и старая, но не теряющая свою актуальность подборка видеоматериалов о разработке полноценного веб-приложения на Go: 
– [Часть 1 (net/http)](https://proglib.io/w/43b1aff1)
– [Часть 2 (martini + markdown)](https://youtu.be/ZvKuEfsqurc)
– [Часть 3 (MongoDB - mgo)](https://proglib.io/w/26d6caae)
– [Часть 4 (Сессия + Авторизация)](https://proglib.io/w/df1f99fb)
– [Часть 5 (Рефакторинг)](https://proglib.io/w/efb633b4)
– [Часть 6 (Заключительная)](https://proglib.io/w/b32674b3)",5377,0,0,goproglib
918,2020-05-17 18:30:01+00:00,Туториал по использованию стандарта AES для шифрования и дешифрования информации в программах на Go: https://proglib.io/w/b073e0b4,3682,0,0,goproglib
917,2020-05-17 15:01:21+00:00,"Golang позволяет определить структуру следующим образом (кроме указанного в задании):
– Присвоить начальные значения по порядку: 
`tom := person{""Tom"", 25}`

– Использовать формат поле:значение, чтобы задать начальные значения полей структуры, при этом можно не соблюдать порядок, в котором поля шли при описании структуры: 
`tom := person{age: 25, name: ""Tom""}`

– Определить анонимную структуру, а затем задать ей значения: 
`tom := struct{name string; age int}{""Tom"", 25}`",3331,0,0,goproglib
915,2020-05-16 18:05:26+00:00,"**Hands-On System Programming with Go: Build Modern and Concurrent Applications for Unix and Linux Systems Using Golang** (2019)

**Автор(ы)**: Alex Guerrieri

С помощью книги вы изучите основы системного программирования, начиная от API ядра и файловой системы до сетевого программирования и процессов взаимодействия.

Вы узнаете, как оптимизировать операции ввода и вывода с файлами и потоками данных, которые являются полезными инструментами при создании приложений псевдотерминала, получите представление о том, как процессы взаимодействуют друг с другом, узнаете о процессах и управлении демоном с помощью сигналов, каналов и кодов выхода. Эта книга также позволит вам понять, как использовать сетевое взаимодействие с помощью различных протоколов, включая TCP и HTTP.

По мере продвижения вы будете фокусироваться на лучшей функции Go ― параллелизме, помогающем вам управлять связью с каналами и goroutines, для синхронизации общих ресурсов.",5007,0,0,goproglib
914,2020-05-15 18:30:02+00:00,"Развернутая статья о разработке CLI приложения на Go с помощью пакета __flag__ и __UNIX-style опций__
(gnuflag, go-flags и cli.go): https://proglib.io/w/a9f2cbf0",4829,0,0,goproglib
913,2020-05-15 15:30:07+00:00,"Ozon научит Go бесплатно! Важная новость для всех, кто связывает своё будущее с написанием кода: самый быстрорастущий российский e-commerce запускает бесплатную школу Go. Это возможность за два месяца стать middle-специалистом с опытом решения реальных задач и проектом в портфолио — а лучшие выпускники получат предложение о работе в Ozon. Что нужно, чтобы поступить? Опыт в написании кода, сделанное тестовое задание и, конечно, заявка. Подробности тут: http://ozon.dev/goschool",4656,0,0,goproglib
912,2020-05-14 18:13:24+00:00,Готовые примеры кода для быстрого решения повседневных задач на Go: https://proglib.io/w/6d6ee310,5212,0,0,goproglib
911,2020-05-13 19:03:14+00:00,"**Certmagic** — библиотека, позволяющая реализовать автоматический HTTPS для любой программы на Go: полностью управляемая выдача и обновление TLS-сертификатов.

https://proglib.io/w/fa361ed5",5037,0,0,goproglib
910,2020-05-13 12:00:26+00:00,"[​​](https://telegra.ph/file/54fc240abca85dba5de1f.jpg)«Цифровой прорыв» 2020 открывает прием заявок на масштабный IT-марафон с призовым фондом 5.000.000 руб.! ️

В режиме онлайн ты сможешь реализовать свою идею, создать действительно классный продукт, который будет менять жизни людей. 

 Регистрируйся по ссылке: https://proglib.io/w/a6b2d251

Тебя ждут два онлайн-хакатона, которые пройдут 5-7 июня и 19-21 июня. ‍‍

 - 36 часов кодинга/400 команд;
 - Крутые кейсовые задания  от Росатома, Сбербанка, Глобального русскоговорящего технологического сообщества Rutech;
 - Образовательная программа;
 - Трекеры и эксперты , которые будут помогать тебе на каждом этапе.  

 25 июня - 25 июля состоится онлайн-чемпионат на технологической платформе [Mail.ru](https://proglib.io/w/a6b2d251):

 - Индивидуальное участие;
 - Задачи по Machine Learning и Data Science;
 - Возможность попасть на финал Цифрового Прорыва!

 Проверь свои силы и разработай крутой проект для решения реальных бизнес-задач, регистрируйся по ссылке: https://proglib.io/w/a6b2d251",3367,0,0,goproglib
909,2020-05-13 08:30:02+00:00,Видеозаписи выступлений с таймкодами и презентации выступающих на митапе GOnline: https://proglib.io/w/4aaf3107,4349,0,0,goproglib
908,2020-05-12 18:30:01+00:00,Рендеринг изображений в 2D видеоиграх с помощью библиотеки Ebiten на Go: https://proglib.io/w/26f8af0f,3378,0,0,goproglib
907,2020-05-12 15:30:05+00:00,"Go-разработчик с нуля всего за год!

Нравится программирование, но не можешь разобраться во всем самостоятельно? Мы поможем освоить новую профессию и расскажем, как найти высокооплачиваемую работу после обучения!
Переходи по ссылке и регистрируйся ▶️ https://clc.to/d71Lhw 

На курсе «Профессия Go-разработчик» ты получишь базовые знания программирования, а также подробное обучение по работе с Golang. Пройдя обучающий курс, ты создашь крутое портфолио и сможешь претендовать на должность junior-программиста.

Первым 20 студентам скидка 35% на обучение!",3411,0,0,goproglib
906,2020-05-12 09:01:02+00:00,"**Building RESTful Web services with Go: Learn how to build powerful RESTful APIs with Golang that scale gracefully** 1st Edition (2017)

**Автор(ы): **Kindle Edition

С помощью книги вы изучите необходимые концепции разработки REST API, создав несколько реальных сервисов с нуля.

В книге описаны методы кластеризации и кэширования для создания реактивной масштабируемой веб-службы, работа с фреймворком Gin для быстрого внедрения конечных точек RESTful, реализация клиентской библиотеки для веб-службы RESTful с помощью Go и многое другое.

Книга предназначена для тех, кто хочет научиться создавать веб-сервисы RESTful с помощью фреймворка Gin. Чтобы наилучшим образом использовать примеры кода, включенные в книгу, вы должны иметь базовые знания программирования Go.",4915,0,0,goproglib
905,2020-05-11 13:01:43+00:00,"Практическое видеоруководство для начинающих по работе с фреймворком для вызова удаленных процедур (gRPC).

https://proglib.io/w/b41e4efb",4863,0,0,goproglib
904,2020-05-10 09:01:30+00:00,"Несколько преимуществ Golang, отличающих его от других языков программирования: https://proglib.io/w/700e2939",3438,0,0,goproglib
903,2020-05-09 15:03:15+00:00,Создание простой системы распознавания лиц на Go: https://proglib.io/w/900afcbe,3605,0,0,goproglib
902,2020-05-08 18:30:01+00:00,"Презентация Daniel Martí на Go Remote Fest 2020 о том, что нас ждёт в Go 1.15.",4012,0,0,goproglib
901,2020-05-08 15:30:02+00:00,"Весь мир на удаленке, заработки в офлайне просели – нельзя полагаться на один источник дохода. Бывшие офисные сотрудники штудируют курсы и уходят во фриланс за онлайн-заказами. Преимущества очевидны:

 Зарплату определяют нагрузка и опыт, а не мнение начальника
 Международный рынок: больше вариантов, оплата в валюте
 Сам выбираешь, когда трудиться и отдыхать

Но работа во фрилансе отличается от офисной. Учиться лучше у людей с опытом – на GeekBrains freelance. Курсы по тестированию, верстке, мобильной разработке и вебу – все с акцентом на быстрый старт во фрилансе. Делимся ссылкой: https://proglib.io/w/b08b8b92",3311,0,0,goproglib
900,2020-05-08 09:01:26+00:00,"В Go имеется встроенная функция **len()**, помогающая работать с массивами и срезами. Как и в случае со строками, вы можете рассчитать длину массива или среза, используя команду len() с указанием массива или среза в качестве параметра.",3186,0,0,goproglib
898,2020-05-07 17:26:29+00:00,[​​](https://divan.dev/images/vpl_cover.png)Переосмысление визуального программирования с помощью Go: https://proglib.io/w/2d5b2b05,3328,0,0,goproglib
897,2020-05-06 18:45:00+00:00,"[​​](https://media.proglib.io/posts/2020/05/05/f706f64983af0cdc4f67b5aace7ce1f8.jpg) **25 лучших книг для программистов**

Список наиболее часто рекомендуемых книг о программировании, составлен по результатам анализа упоминаний в интернет-публикациях. Книги об алгоритмах, чистом коде, паттернах проектирования, а также пособия для развития soft skills и прохождения собеседований.

https://proglib.io/sh/hwx5MziQen",3828,0,0,goproglib
895,2020-05-06 09:01:24+00:00,"__fmt.Fscanf()__ — применимо только к форматированным строкам. 
__bufio.Reader.ReadLine() __— реализует очень низкий уровень и может потребоваться больше вызовов при превышении лимита буфера. 
__bufio.ReadString('\n')__ — не может обработать EOF. 

**bufio.Scanner.Scan()** — в данном случае подходит лучше всего. Кроме того, bufio.Scanner можно использовать для чтения из стандартного потока ввода и из любого потока байтов, если он реализует интерфейс io.Reader.",3276,0,0,goproglib
893,2020-05-05 18:29:55+00:00,"Concurrency в Go: 

– [Go Maps](https://proglib.io/w/c9d265ad)
– [Concurrency With Golang Goroutines](https://proglib.io/w/730e42b6)
– [Go Mutex](https://proglib.io/w/87156820)
– [Go Channels](https://tutorialedge.net/golang/go-channels-tutorial/)
– [Go WaitGroup](https://proglib.io/w/f8e570a1)",3781,0,0,goproglib
892,2020-05-04 11:53:42+00:00,Разбираемся с разработкой чат-сервера на Go: https://proglib.io/w/8e877996,5025,0,0,goproglib
891,2020-05-03 10:30:42+00:00,"Что делать, если программа создаёт огромное количество горутин, которые не смогут завершить свою работу? У garbage collector не будет возможности освободить занятую ими память, что может стать большой проблемой.

О том, как с этим бороться, описано в следующей статье: https://proglib.io/w/34d761c5

Пост с четырьмя предыдущими статьями данного автора, связанными с многопоточность, [здесь](https://t.me/goproglib/834).",5130,0,0,goproglib
890,2020-05-02 18:30:01+00:00,Учимся работать в связке Go и Docker на основе следующих материалов: [создание и использование многоэтапных сборок Docker-образов для приложения на Go](https://proglib.io/w/b7f4fdb6) и [контейнеризация и деплой приложения на Go](https://proglib.io/w/10c7201f).,3738,0,0,goproglib
888,2020-05-02 11:30:04+00:00,"Помните [пост](https://t.me/goproglib/726), в котором мы приводили репозиторий, включающий интересные задачи с собеседований с соответствующими решениями? 

Так вот, тот же автор создал не менее полезный репозиторий, в котором содержатся его заметки по обучению Go и компьютерным системам. Кроме пояснений к коду, он включил ссылки на другие статьи, которые представляют практическую значимость.

https://proglib.io/w/2c8a7706",3420,0,0,goproglib
887,2020-05-02 09:42:56+00:00,"Мы теперь есть в Яндекс.Мессенджере. Присоединяйтесь:

https://yandex.ru/chat/#/join/627c55a9-89c7-4d27-86ed-287d33a5ce7d",233,0,0,goproglib
886,2020-05-01 18:45:00+00:00,"Учимся правильно использовать переменные окружения в Go для хранения параметров программы (например, параметры подключения к БД) с помощью пакетов os, godotenv и viper.

https://proglib.io/w/3886fc20",3288,0,0,goproglib
885,2020-05-01 15:45:00+00:00,"За два года спрос на профи в Data Science вырос вдвое. По сведениям hh дата-сайентисты получают от 100 тыс. руб./мес. Но обычно знания приходится собирать по крупицам. К счастью, Geekbrains подготовили курс по машинному обучению:

 65 часов контента с практикой к каждому занятию,
 30 онлайн-уроков с живыми преподавателями,
 5 проектов – всё по-взрослому.

Курс длится 5 месяцев, занятия ведут дата-сайентисты, работающие в крупных компаниях. Подробнее: https://proglib.io/w/9ad723f6",3148,0,0,goproglib
884,2020-04-30 18:30:02+00:00,Шпаргалки по [работе со строками](https://proglib.io/w/6ce69205) и [форматированию чисел и строк](https://proglib.io/w/8ea5f2e5) в Go.,3369,0,0,goproglib
883,2020-04-30 15:23:40+00:00,"Go или Golang — один из самых молодых и перспективных языков программирования. Простой и минималистичный, он легко изучается и при этом позволяет создавать надежное и эффективное программное обеспечение. Если вы давно хотели потестить возможности Go — [записывайтесь на бесплатный интенсив ](https://geekbrains.ru/link/R2xzVc)«Язык GO» от образовательного портала **GeekBrains ****Mail.ru**** group. 
**Что будет:
— Познакомитесь с основами работе на языке Go: 
написание кода, 
компиляция, 
запуск,
работа с переменными и массивами, проверка условий, 
циклы, 
импорт. 
— Научитесь писать, компилировать и запускать простой код в командной строке.
— Напишете простую консольную игру.
— Получите ответы на интересующие вопросы по теме.
Присоединяйтесь: https://geekbrains.ru/link/R2xzVc",3254,0,0,goproglib
882,2020-04-30 10:00:28+00:00,"При разработке веб-приложений на Go приходится сталкиваться с задачами обработки входных данных, поступаемых от пользователя, поэтому необходимо разбираться с правильной проверкой и очисткой последних. Эффективность данного процесса напрямую связана с защитой от следующих проблем безопасности приложений (по классификации OWASP Top 10): внедрение SQL, NoSQL, LDAP и т.д. (A1); внешние сущности XML (A4) и межсайтовое выполнение сценариев (A7).

https://proglib.io/w/5399b2ce",3379,0,0,goproglib
881,2020-04-29 11:01:02+00:00,"Репозиторий с полезными ссылками на инструменты, библиотеки и проекты, позволяющие повысить производительность приложений и эффективность разработки на языке Go: https://proglib.io/w/6829c5ad",3471,0,0,goproglib
880,2020-04-29 08:49:47+00:00,"Quadcode – это международная продуктовая компания, которая создает программное обеспечение для торговой и инвестиционной индустрии. Наши клиенты - это компании-брокеры и финансовые организации. 

Golang Developer, от 140 000 до 200 000 руб.

**Требования:
**— опыт разработки на Golang более двух лет;
— опыт работы с PostgreSQL;

**Условия:
**— трудоустройство, согласно ТК РФ;
— место работы в десяти минутах ходьбы от ст.м. Новочеркасская в офисе класса А+;
— питание: компенсация обедов + кухни с разнообразной едой на каждом этаже;
— здоровье: ДМС со стоматологией, массажный кабинет в офисе;
— спорт: корпоративный спортзал с личным тренером, спортивные секции (футбол, баскетбол, волейбол);
— развитие: корпоративные тренинги, обучение английскому языку в офисе;
— работа в отличном коллективе, множество развлекательных мероприятий и возможность влиять на продукт.

️ **Подробности** - https://proglib.io/vacancies/golang-developer-quadsode-2020-04-24",285,0,0,goproglib
879,2020-04-28 09:01:19+00:00,Разбираемся с использованием языка запросов GraphQL в Golang на простом примере получения данных пользователей и хранения в БД MongoDB: https://proglib.io/w/a1e8443e,3667,0,0,goproglib
878,2020-04-27 09:01:37+00:00,"Подборка руководств по тестированию приложений на языке Go:

– [Введение в тестирование в Go](https://proglib.io/w/ab72b6a8) (правильная реализация тестов с помощью инструмента Go Test)
– [Расширенное тестирование](https://proglib.io/w/ad2ff2a1) (продвинутые практики тестирования, которые разработчики самого языка Go используют для его тестирования)
– [Введение в бенчмаркинг](https://proglib.io/w/2d7547c8) (оценка производительности программы и анализ потенциальных узких мест)
– [Улучшение Go-тестов с помощью Testify](https://proglib.io/w/82539b41)",5719,0,0,goproglib
877,2020-04-26 16:00:17+00:00,"Практический доклад Андрея Смирнова (Talos) на GolangConf 2019 о том, как написать операционную систему на Go и почему писать её на Go удобно и полезно.",4108,0,0,goproglib
876,2020-04-26 09:00:53+00:00,"**Правильный ответ:** var a []int

Первое объявление не выделяет память, если срез не используется, поэтому этот метод объявления предпочтителен.",3341,0,0,goproglib
874,2020-04-25 17:19:24+00:00,"**Инструменты Go-разработчика, которые упрощают и автоматизируют процесс разработки**

В сегодняшней подборке разберемся с тем, [как правильно использовать Makefile при разработке](https://proglib.io/w/cf9fe7da) приложений на Go (с примером [усовершенствованного Makefile](https://proglib.io/w/83c14336) для упрощения создания и управления веб-серверами, написанными на Go), а также познакомимся с [Git Hooks](https://proglib.io/w/cadabe14), предназначенными для улучшения рабочего процесса разработки на Go.",5077,0,0,goproglib
873,2020-04-24 18:00:17+00:00,Реализация управления памятью с помощью сборщика мусора Golang: https://proglib.io/w/69c9c207,3529,0,0,goproglib
872,2020-04-24 15:05:11+00:00,"Создавай цифровые решения будущего и получи приз!

Мы объявляем онлайн-хакатон VirusHack от Ростелекома, организованный в партнерстве с Агентством инноваций Москвы и РАЭК. В нем вы прокачаете свои навыки в разработке технологий, которые помогут людям, бизнесу и государству приспосабливаться к нестандартным условиям жизни.

Победитель реализует свой проект при поддержке крупнейших компаний страны!

Призовой фонд хакатона 2 500 000 рублей!

Онлайн-хакатон пройдет с 3 по 5 мая 2020 года — успейте зарегистрироваться на него до 30 апреля 2020-го: https://proglib.io/w/f9855a15

Добавляйтесь в чат хакатона: https://bit.ly/2RAQgOx",3316,0,0,goproglib
871,2020-04-24 09:00:55+00:00,"**Learn Data Structures and Algorithms with Golang** (2019)
Level up your Go programming skills to develop faster and more efficient code

**Автор(ы)**: Bhagvan Kommadi

С помощью книги вы изучите основы структур данных и алгоритмов, научитесь в реальных условиях эффективно использовать структуры данных, такие как массивы, стеки, деревья, списки и графики. 

В книге описаны принципы повышения производительности приложений с использованием наиболее подходящих структур данных и алгоритмов. Вы изучите широкий спектр классических алгоритмов, таких как алгоритмы рекурсии и хеширования, научитесь работать с алгоритмами сборки мусора для эффективного управления памятью и проводить анализ затрат и компромиссов. Кроме того, вы узнайте о подводных камнях при выборе структур данных и алгоритмов, прогнозируя их скорость и эффективность.",4420,0,0,goproglib
870,2020-04-23 09:30:02+00:00,Разбираемся с веб-сокетами в Golang на основе [руководства](https://proglib.io/w/a0c59d8d) и [практической реализации системы монитора подписчиков YouTube в режиме реального времени](https://proglib.io/w/2f89a09b).,5346,0,0,goproglib
869,2020-04-22 18:00:06+00:00,"** Broccoli** — инструмент, который использует систему сжатия Brotli от Google для встраивания виртуальной файловой системы статических файлов в исполняемые файлы Go.

**Основные преимущества:**
– средний размер двоичного файла на 13-25% меньше из-за использования алгоритма сжатия Brotli;
– поддержка связывания нескольких исходных каталогов, опираясь только на интерфейс командной строки __go generate__ и не требуя конфигурационных файлов;
– опциональная декомпрессия, подразумевающая распаковку файлов только при первом чтении и многое другое.

https://proglib.io/w/26d24202",3726,0,0,goproglib
867,2020-04-22 09:01:11+00:00,"Правильный ответ: **a, e, c**.

Как вы уже знаете, срез — это часть массива. Срезы индексируются и имеют длину, которую можно изменить. 

На первом этапе мы устанавливаем значения (__a: [a b c]__), затем берем срез (__b: [b]__) и изменяем значение (__b: [e]__), после чего наша переменная __a__ будет иметь значение __[a e c]__.",3258,0,0,goproglib
864,2020-04-21 16:25:00+00:00,"Более 1200 компаний сейчас ищут тестировщиков мобильных приложений со средней зарплатой 100 000 рублей, по данным сайта hh.ru.

Онлайн-курс «Тестирование мобильных приложений» подойдет как новичкам в тестировании мобильных приложений, так и тестировщикам смежных сфер.

Записывайся прямо сейчас и получи скидку 30% на обучение!

За девять месяцев ты научишся:
`️`запускать автотесты для Android и iOS;
`️`работать с эмуляторами и симуляторами;
`️`писать сложные проверочные тесты;
`️`находить баги, которые пропускают даже опытные мобильные тестировщики.

Переходи на сайт, чтобы получить презентацию программы и индивидуальную консультацию специалиста. https://clc.to/7-mssg",3350,0,0,goproglib
863,2020-04-21 10:00:08+00:00,"Если вы разворачиваете свои проекты на Go в облачной экосистеме или планируете это делать, то вам может помочь статья, в которой рассмотрены некоторые уникальные преимущества Go в этой области. В ней также рассмотрены некоторые ошибки, которые могут быть неочевидны с первого взгляда.

https://proglib.io/w/4989a3be",4586,0,0,goproglib
862,2020-04-20 15:30:03+00:00,"**What** — инструмент, предоставляющий набор простых и удобных функций регистрации (логирования), подходящих для отслеживания любых действий в вашем коде. 

[Репозиторий](https://proglib.io/w/cb41ddba)
[Статья с описанием](https://proglib.io/w/06b51034)",3529,0,0,goproglib
861,2020-04-20 12:16:08+00:00,Разбираем два примера реализации цикла foreach в Go: https://proglib.io/w/383ff0e6,3610,0,0,goproglib
860,2020-04-19 18:00:51+00:00,"**Black Hat Go
Go Programming for Hackers and Pentesters** (2020)

**Автор(ы)**: Tom Steele, Chris Patten, Dan Kottmann

Обновленная версия книги, затрагивающей все аспекты прикладной безопасности для разработчиков программного обеспечения, белых хакеров и всех, кто как-то связан с информационной безопасностью.",4827,1,0,goproglib
859,2020-04-18 12:01:08+00:00,"Правильный ответ: **0 1 2 | 0 0 0**

В первом случае (A, B, C) у нас базовый пример, когда константа увеличивается от 0 на единицу, а в одной строке все константы получат одинаковые значения (D, E, F).

Обратите внимание, что в примере используется предварительно объявленный идентификатор **iota**, который представляет последовательные не типизированные целочисленные константы. Go компилятор запускает iota от 0 и увеличивается на единицу для каждой следующей константы. Значение определяется во время компиляции, а не времени выполнения. 

Резюмируем:
– ключевое слово iota представляет последовательные целочисленные константы;
– оно обнуляется каждый раз, когда const появляется в исходном коде;
– оно увеличивается после каждой спецификации const.",4146,0,0,goproglib
855,2020-04-17 09:00:49+00:00,"Разбираемся с интернированием строк в Go (метод хранения только одной копии каждого отдельного строкового значения, которое должно быть неизменным): https://proglib.io/w/ea0e6a63",3860,0,0,goproglib
854,2020-04-16 13:15:37+00:00,"**Gops** — это диагностический инструмент от Google, который предназначен для отображения и диагностики процессов Go, которые в данный момент выполняются в вашей системе. Расширенные функции, такие как создание отчетов о статистике памяти, отображение трассировки стека, получение профилей pprof и трассировок выполнения, доступны с помощью диагностического агента gops.

Статья: https://proglib.io/w/5bb4c168
Репозиторий: https://proglib.io/w/ecb55f82",5554,0,0,goproglib
853,2020-04-15 09:00:53+00:00,"Серия статей о реализации алгоритма Raft (алгоритм для решения задач консенсуса в сети ненадёжных вычислений, используется в Kubernetes) на языке Go:

– [Introduction](https://proglib.io/w/0ba9749a) 
– [Elections](https://proglib.io/w/3a50cca4)
– [Commands and log replication](https://proglib.io/w/35ce36f4)
– [Persistence and optimizations](https://proglib.io/w/5071ddeb)",4036,0,0,goproglib
852,2020-04-14 16:01:04+00:00,"Практическая статья о том, как справиться с разношерстностью микросервисов на Go. Пишет Алексей Партилов — техлид команды web-разработки в компании Lamoda.

https://proglib.io/w/eeeccdf0",3822,0,0,goproglib
851,2020-04-14 12:49:59+00:00,"Во время самоизоляции многие работодатели наконец-то признали, что удалённые работники вполне эффективны. Пути назад нет — бизнес идёт туда, где ему выгодно, и скоро всё меньше рабочих мест будут требовать физического присутствия работника в офисе.
 
Мы предлагаем встретить эти перемены во всеоружии. С 14 по 16 апреля GeekBrains проводит серию бесплатных вебинаров «Все об удалёнке: как работать эффективно и зарабатывать»
 
Рассмотрим весь путь фрилансера: от принятия решения и выбора биржи, до навыков удалённого делегирования задач и организации работы команды. Пройдёмся по наиболее часто задаваемым вопросам, осветим неочевидные аспекты и проблемы работы из дома.
 
Переходите по ссылке, чтобы узнать больше и записаться: https://proglib.io/w/b6edc487",3345,0,0,goproglib
850,2020-04-14 09:02:11+00:00,"Репозиторий, в котором собраны имплементации и демонстрации самых популярных алгоритмов на языке Go: https://proglib.io/w/d2c49e71",3762,0,0,goproglib
849,2020-04-13 09:00:54+00:00,"**Статическая компиляция программ на** **Go**

Go создает статические двоичные файлы по умолчанию, если только вы не используете cgo для вызова кода C, в этом случае он создаст динамически связанную библиотеку. Оказывается, что использование cgo является более распространенным явлением, чем предполагают многие, поскольку пакеты os/user и net по умолчанию используют cgo, поэтому при импорте одного (прямого или косвенного) получится нестатический двоичный файл.

https://proglib.io/w/6907fb2b",3912,0,0,goproglib
848,2020-04-12 09:00:48+00:00,"Качественная подборка статей о тестировании приложений на языке Go, в которой вы увидите не какие-то абстрактные вещи и доводы, что тестирование — это полезно, а реальные примеры написания тестов под прикладные задачи.

https://proglib.io/w/84df9c82",4174,0,0,goproglib
847,2020-04-11 09:24:55+00:00,"**Production Go **
Build modern, production-ready systems in Go (2018)

**Автор(ы):** Herman Schaaf и Shawn Smith

Целью книги является предоставление знаний для написания готового к работе сервиса на Go. Это означает не только написание первоначальной реализации, но и надежное развертывание, а также мониторинг ее производительности.

Книга предназначена для аудитории, которая разбирается в основных темах информатики и практике разработки программного обеспечения. Она охватывает все важные аспекты работы production-системы, включая такие сложные темы, как профилирование использования памяти Go-программой, развертывание и мониторинг приложений, написанных на Go, написание идиоматических тестов и многое другое.",5095,0,0,goproglib
846,2020-04-10 10:00:41+00:00,[​​](https://marianogappa.github.io/images/webassembly-tinygo-cheesse.gif)Помните [пост о TinyGo](https://t.me/goproglib/728)? Тут подробно описан процесс запуска Golang в браузере с помощью WebAssembly и TinyGo в рамках реализации игры в шахматы: https://proglib.io/w/aafc6df4,4063,0,0,goproglib
845,2020-04-09 10:00:40+00:00,"**Пишем простую командную оболочку на Go**

В статье описан процесс разработки простой оболочки для UNIX-подобных операционных систем на языке Go, и она займет всего около 60 строк кода. 

https://proglib.io/w/80f1e402",4302,0,0,goproglib
844,2020-04-08 09:55:03+00:00,"**Golang с точки зрения программиста на C**

Автор статьи делится мнением, что чем больше вы экспериментируете с Go, тем меньше он будет ощущаться как компилируемый язык (C или C++), и тем больше он будет ощущаться как интерпретируемый язык (Python или Ruby).

https://proglib.io/w/77908202",4374,0,0,goproglib
843,2020-04-07 09:01:19+00:00,"**Логирование в Golang: выбор системы и ее использование**

Язык Go имеет встроенные функции, которые облегчают разработчикам реализацию логирования. Сторонние разработчики также создали дополнительные инструменты для упрощения логирования. Давайте разберемся, какая разница между ними и какой вариант предпочтительнее выбрать.

https://proglib.io/w/273f74dd",3927,0,0,goproglib
842,2020-04-06 11:46:42+00:00,Почему вы не смотрите курсы? Что вам в них не нравится?,3731,0,0,goproglib
841,2020-04-06 10:00:19+00:00,"Учимся создавать приложения с помощью Golang и нереляционной СУБД MongoDB на основе базовых операций CRUD, API-интерфейсов RESTful и GraphQL.

https://proglib.io/w/73ce2e11",3986,0,0,goproglib
840,2020-04-05 12:00:37+00:00,"Сборник лучших практик, которые помогут вам лучше понять приоритеты безопасности при разработке на Golang.",4614,0,0,goproglib
837,2020-04-04 13:06:20+00:00,"Свежие разборы проектов на Go с канала «Good reviewer - Bad reviewer» ([CASPaxos](https://proglib.io/w/4cf5c290), [riot + typo](https://proglib.io/w/6d6abdff), [molecule](https://proglib.io/w/b38955eb)) и выпуски подкаста Generic Talks о языке Go и сопутствующих темах от этих же ребят:

– [Go 1.14 и что он нам несёт](https://proglib.io/w/b282f462)
– [Таймеры, почему языки такие, GopherСon](https://proglib.io/w/09e4ed27)
– [Live show про GolangCI-Lint, настройку линтеров на CI, дизайн API под батчинг по дефолту, кеширование и другие вещи](https://proglib.io/w/3d0ee85b)
– [Что же там происходит в CPU](https://proglib.io/w/8d0ee8b5)
– [Zig, LLVM и как всегда Go](https://proglib.io/w/1dd69220)",3862,0,0,goproglib
836,2020-04-03 18:30:19+00:00,"Репозиторий содержит коллекцию из 100+ популярных проблем (задач) с портала [LeetCode](https://leetcode.com/), решенных на языке Go. Каждая задача включает соответствующую ссылку с условием задания и решение, покрытое тестами. 

https://proglib.io/w/75bf65eb",4072,0,0,goproglib
835,2020-04-03 15:30:21+00:00,"В мультифункциональной команде, создающей приложение под Kubernetes, разработчику стоит знать основы Kubernetes. Возможности и ограничения Кубернетес диктуют архитектуру приложения. К тому же разработчикам иногда приходится самим деплоить приложение, настраивать мониторинг, вплоть до создания окружений.
Понимание того, как эксплуатируется приложение, превращает разработчика в инженера.

7 апреля стартует цикл из** 19 бесплатных вебинаров **от Слёрма по основам Kubernetes. Для прохождения достаточно знать Linux.
Вебинары идут 1-2 раза в неделю в 20:00 по Москве.

Регистрация: https://proglib.io/w/4227fda6",3818,0,0,goproglib
834,2020-04-03 12:19:54+00:00,"​​Давайте уже добьем тему многопоточности и всего, что с ней связано, и рассмотрим следующую серию статей на русском: 

– [Race condition и data race](https://proglib.io/w/7c0d9300)
– [Deadlocks, livelocks и starvation](https://proglib.io/w/070a4280)
– [Примитивы синхронизации в go](https://proglib.io/w/f882dfcd)
– [Безопасная работа с каналами в go](https://medium.com/german-gorelkin/data-protected-by-confinement-ec6b7be401ea)
– [Goroutine Leaks](https://proglib.io/w/34d761c5)",4757,0,0,goproglib
833,2020-04-02 09:34:15+00:00,"[​​](https://miro.medium.com/max/1400/1*sOjZdGv-o7PWaRUfYRrjDQ.jpeg)**Состояние гонки в Golang
**
Состояние гонки (Race conditions) или гонка даных (Data race) является ошибкой проектирования многопоточной системы или приложения, при которой работа системы или приложения зависит от того, в каком порядке выполняются части кода. Подобная ошибка может привести к ошибочным и загадочным сбоям, чем благополучно пользуются злоумышленники для получения доступа к системе или приложению. Несмотря на то, что механизмы конкурентности Go упрощают написание чистого конкурентного кода, они не предотвращают состояние гонки. В данном случае требуется осторожность, усердие и тестирование, а инструменты автоматизации поиска могут помочь.

Начиная с версии 1.1 Go включает в себя детектор гонки, инструмент для определения состояний гонки в коде Go. В настоящее время он доступен для систем Linux, OS X и Windows с 64-разрядными процессорами x86.

О гонках данных простыми словами можно почитать [здесь](https://proglib.io/w/7726a032). Учимся использовать детектор гонки данных с помощью данных статей ([1](https://proglib.io/w/2f2ccd30) и [2](https://proglib.io/w/7726a032)).",4122,0,0,goproglib
832,2020-04-01 17:25:09+00:00,"**Учимся искать Goroutines во время отладки**

Goroutines являются неотъемлемой частью большинства Golang программ, но использование множества процедур делает программу более трудной для отладки. На основе материалов статьи вы научитесь маркировать goroutines с пользовательскими данными, что является одной из последних функций GoLand 2020.1.

https://proglib.io/w/45dd448c",3617,0,0,goproglib
831,2020-04-01 13:00:20+00:00,"Если вы боитесь, что ваш заработок пострадает из-за карантина, участвуйте в [онлайн-марафоне от GeekBrains](https://prglb.ru/4sxqu). За 14 дней вы выберете другую востребованную профессию. Вас ждут:

23 бесплатных вебинара по программированию, дизайну, маркетингу и управлению.
Инсайды от экспертов из Mail ru Group, Wikium, Альфа-Банка и других компаний-лидеров рынка.
Заряд мотивации: вы поймете, что начать карьеру можно в любом возрасте, с любым бэкграундом.
Шанс выиграть бесплатное обучение.

Успейте [зарегистрироваться](https://prglb.ru/4sxqu) и выбрать новую профессию мечты!",3428,0,0,goproglib
830,2020-04-01 09:00:14+00:00,"Плейлист с видеоуроками исключительно практических сторон Golang, в котором вы увидите следующие темы: RESTful API на Go, Go Based AWS Lambda, тестирование в Go, Go MySQL, Go API на основе ORM, вебсокеты в Go, Goroutine, Go WebAssembly, Protocol Buffers в Go, безопасность Go REST APIs с помощью JSON Web Tokens, Каналы в Go, Go sync.WaitGroup, разработка системы мониторинга YouTube в режиме реального времени с помощью Go, докеризация приложения на Go и деплой в DigitalOcean, безопасность приложений на языке Go и многое другое.

https://proglib.io/w/3f2511ae",4038,0,0,goproglib
829,2020-03-31 10:00:31+00:00,"[​​](https://camo.githubusercontent.com/dac6dbf72e0850938904d72d230ec518f9bf90bd/68747470733a2f2f692e696d6775722e636f6d2f395a375070734f2e706e67)**Пишем roguelike (генерируемые случайным образом уровни, пошаговость и необратимость смерти персонажа) игру на Go под названием «Jumpdrive»**

Это космическая фантастика 70-х годов о пилоте, который разбил свой разведывательный корабль на острове чужой планеты. Для автора создание игры является, по всей видимости, пет-проектом, а вам может принести практическую пользу.

https://proglib.io/w/905fcd8a",3911,0,0,goproglib
828,2020-03-30 09:00:45+00:00,"Есть много разных книг и статей о том, как писать хороший код на ходу, но не так много, как эффективно отлаживать код. Поэтому смотрим доклад Андрея Солдатенко с FOSDEM 2020 и учимся продвинутым техникам отладки приложений на языке Go.

https://proglib.io/w/fa3236cc",4004,0,0,goproglib
827,2020-03-29 11:06:23+00:00,"Продолжим тему, связанную с базами данных, и рассмотрим, как правильно использовать PostgreSQL вместе с Go. Автор статьи показывает, как начать работу с Object Relational Mapper в Go, рассматривает пример настройки базы данных PostgreSQL и приводит практические примеры по соединению с БД, выгрузке данных и др.

https://proglib.io/w/39997659",4068,0,0,goproglib
826,2020-03-28 12:30:48+00:00,"**Пишем элементарную базу данных с нуля на Go**

На основе материалов статьи вы сможете создать парсер для выполнения простых запросов (CREATE, INSERT и SELECT). Затем вы создадите внутреннюю память, поддерживающую типы TEXT и INT, и напишете базовый REPL.

https://proglib.io/w/59a96433",4296,0,0,goproglib
825,2020-03-27 10:00:37+00:00,"Доклад Николая Муляра (AirPush) о **быстром запуске микросервиса**. В своем практическом докладе автор делится опытом создания шаблона Go микросервиса, рассказывает о проблемах, которые привели его команду к данному шаблону, чтобы уберечь других разработчиков от повторения ошибок.",5142,0,0,goproglib
824,2020-03-26 09:01:06+00:00,"Серия постов с примерами приложений на языке Go, использующих чистую архитектуру:

– [Чистая архитектура с использованием Golang](https://eltonminetto.net/en/post/2018-03-05-clean-architecture-using-go/)
– [Golang: использование тегов сборки для хранения конфигураций](https://eltonminetto.net/en/post/2018-06-25-golang-usando-build-tags/)
– [Непрерывная интеграция в проекты с использованием monorepo](https://eltonminetto.net/en/post/2018-08-01-monorepo-drone/)
– [Миграция данных с](https://eltonminetto.net/en/post/2019-01-23-migracao-de-dados-com-go-e-mongodb/) [помощью](https://eltonminetto.net/en/post/2019-01-23-migracao-de-dados-com-go-e-mongodb/) [Golang и MongoDB](https://eltonminetto.net/en/post/2019-01-23-migracao-de-dados-com-go-e-mongodb/)
– [Использование Golang в качестве языка сценариев](https://eltonminetto.net/en/post/2019-08-08-golang-linguagem-script/)
– [Создание тестовых макетов с использованием GoMock](https://eltonminetto.net/en/post/2019-12-19-gomock/)
– [Использование Prometheus для сбора метрик из приложений Golang](https://eltonminetto.net/en/post/2020-03-13-golang-prometheus/)",5303,0,0,goproglib
823,2020-03-25 11:44:37+00:00,"Golang имеет сильную поддержку параллелизма. Начиная с самого языка (goroutines, channels) и заканчивая конструкциями в стандартной библиотеке (WaitGroup, Mutex), язык пытается облегчить разработчику написание параллельных программ. В статье автор разбирается с некоторыми из них, создавая программу, которая раскручивает три разных HTTP-сервера и позволяет изящно отключаться, когда программа получает сигнал SIGTERM.

https://prglb.ru/2a2d2",4407,0,0,goproglib
821,2020-03-24 09:30:10+00:00,"Если вы ещё не видели этот ресурс, то советуем обязательно уделить ему внимание: **серия уроков по языку Go на русском от ребят из  4gophers**

На нем вы найдёте как шпаргалки по языку и теоретические основы, так и основательные практические выкладки.

https://golangs.org",4920,0,0,goproglib
820,2020-03-23 16:54:44+00:00,Разбираемся с аспектами безопасности в Golang: https://prglb.ru/smc2,4559,0,0,goproglib
819,2020-03-22 09:04:03+00:00,"**Mastering Go: Create Golang production applications using network libraries, concurrency, machine learning, and advanced data structures** **(2019)**

Второе издание книги включает в себя совершенно новую главу по машинному обучению в Go, в которой вы познакомитесь с методами фундаментальной статистики посредством простой регрессии и кластеризации, классификации, нейронных сетей и обнаружения аномалий. Другие главы расширены, чтобы охватить использование Go с Docker и Kubernetes, Git, WebAssembly, JSON и многим другим. Если вы серьезно относитесь к языку программирования Go, второе издание этой книги является важным руководством по экспертным методам.",6939,1,0,goproglib
818,2020-03-22 09:04:03+00:00,"**Mastering Go: Create Golang production applications using network libraries, concurrency, and advanced Go data structures** **(2018)**

В книге подробно описаны основные функции, пакеты, а также типы и структуры данных, которые позволят читателю писать потокобезопасные, облачные и сетевые приложения. Большинство программистов на Go сталкиваются с трудностями интеграции своих проектов с production кодом. С Mastering Go автор показывает вам, как решить эту проблему. 

Из книги вы научитесь: 
– понимать варианты дизайна синтаксиса Golang;
– оптимизировать код Golang;
– оценивать модели параллелизма, доступные в Golang;
– понимать взаимодействия систем и сетевого кода;
– писать код на уровне сервера, который хорошо работает во всех средах;
– грамотно использовать типы данных и структуры данных Golang.",4690,0,0,goproglib
817,2020-03-21 12:03:08+00:00,"[​​](https://telegra.ph/file/3e79b329439b6966c6e84.jpg)**Как написать код, который полюбят все**

Набор практик хорошего кода, не зависящих от языка программирования. Примените их, и ваш код будет не только работать, но и читаться.

https://proglib.io/sh/Hyk7rvDhX9",3984,0,0,goproglib
816,2020-03-20 14:01:02+00:00,"[​​](https://telegra.ph/file/d048e592d8c243de6f15b.jpg)**Как сделать эффективными обсуждения по видеосвязи**

Поговорим об использовании видеосвязи для удаленной работы. Бесплатные тарифы программ для видеоконференций и простые практики эффективных обсуждений.

https://proglib.io/sh/n0CbYBwFUK",4572,0,0,goproglib
815,2020-03-20 10:00:27+00:00,"**Туториал по основам языка Go: от «Hello World» до ООП**

36 отдельных тем, связанных с разработкой на Go, с уклоном на практику. Каждый сможет найти в них что-то полезное, ведь это своего рода опыт автора.

https://prglb.ru/21e6t",4233,0,0,goproglib
814,2020-03-19 09:00:55+00:00,"**Шпаргалка по инструментам Go-разработчика** 

В шпаргалке собрана небольшая подборка инструментов, которые могут стать отличным подспорьем для разработчика приложений на языке Go.",4964,0,0,goproglib
813,2020-03-18 16:00:32+00:00,Подробно разбираем пакет sync в Go: https://prglb.ru/4si2y,4731,0,0,goproglib
812,2020-03-18 11:24:09+00:00,"️В связи с пандемией коронавируса Яндекс, Skyeng и Билайн уже начинают рассылать сотрудникам письма с рекомендацией работать из дома.
 
Такая практика окончательно закрепит в умах людей по всему миру очевидный факт — **работать удалённо выгодно как работодателю, так и работнику.** Отдавать работу на аутсорс — штатная процедура всех организаций, живущих в ногу со временем.
 
   **Как работать удалённо уже 
**                     **сейчас?**

С этим вам поможет @theyseeku. 
Это крупнейший в телеграме канал с вакансиями на удалёнку, заработавший отличную репутацию у топовых компаний.

С помощью их удобного бота @findervc_bot можно получать вакансии только по выбранной специальности. **Нет опыта работа на удалёнке?** В [закреплённом посте](https://t.me/theyseeku/4166) собраны полезные статьи для начинающих.
 
t.me/theyseeku — **№1 среди тех, кто ищет удалённую работу.**",4154,0,0,goproglib
811,2020-03-18 10:00:21+00:00,"Разработка телефонной платформы на Go — интересная сфера применения языка, не так ли? Тут ребята из ITooLabs подробно делятся подобным кейсом: [1](https://habr.com/ru/company/ua-hosting/blog/491652/) и [2](https://habr.com/ru/company/ua-hosting/blog/491656/) часть.",3849,0,0,goproglib
810,2020-03-17 17:11:12+00:00,Обширный практический доклад Александра Емелина (Авито) на GolangConf 2019 о масштабировании WebSocket-соединения на Go,4688,0,0,goproglib
809,2020-03-16 10:00:30+00:00,"Разбираемся с шаблонами проектирования в Go: 
1. Реализация паттерна [декоратор](https://youtu.be/F365lY5ECGY).
2. Реализация паттернов [генератор и наблюдатель](https://youtu.be/Rb8s0zw1SNM).
3. Реализация паттернов [фабрика и абстрактная фабрика](https://youtu.be/-1xgg7yUlUc).",5815,0,0,goproglib
808,2020-03-15 15:25:50+00:00,Простые методы оптимизации приложений на языке Go: https://prglb.ru/1foc,4718,0,0,goproglib
806,2020-03-15 09:00:36+00:00,"Разбираемся с тем, как правильно структурировать приложение на Go. Полезные советы и кейсы в видео найдут для себя как начинающие, так и опытные разработчики.

https://youtu.be/1rxDzs0zgcE",3998,0,0,goproglib
805,2020-03-14 09:00:58+00:00,"**simdjson-go** — высокопроизводительный анализатор JSON. Он широко использует инструкции SIMD (simple instruction, multiple data — одиночный поток команд, множественный поток данных) для достижения производительности синтаксического анализа гигабайт данных формата JSON в секунду. По сравнению со стандартным пакетом `encoding/json`, simdjson-go работает примерно в 10 раз быстрее.

https://github.com/minio/simdjson-go",4380,0,0,goproglib
804,2020-03-13 09:00:49+00:00,Практическое руководство по Golang IO: https://prglb.ru/ikz8,4610,0,0,goproglib
803,2020-03-12 16:10:56+00:00,"Полезные функции Go, которые реализуют некоторые трудно решаемые проблемы, но их лучше избегать: https://prglb.ru/42tqx",4313,0,0,goproglib
802,2020-03-12 13:02:25+00:00,"Реши одну из 8 IT-задач агроиндустрии на главном агрокодинге страны AgroCode 2020.

Разработай систему сбора данных о росте растений, маркетплейс поставщиков удобрений или дневник здоровья телят. Призовой фонд — 1 350 000 рублей!

Заявки принимаются от команд и индивидуальных участников до 24 марта на сайте https://prglb.ru/32b2g

Генеральный спонсор — Россельхозбанк",4287,0,0,goproglib
801,2020-03-12 09:01:09+00:00,"Свежие видео с канала «Good reviewer - Bad reviewer», в рамках которого ребята проводят ревью кода на разных языках программирования:

– [build](https://youtu.be/lCY9TIX2xAY)
– [safestd](https://youtu.be/M1x4Fny6Hgo)",3822,0,0,goproglib
800,2020-03-11 09:00:28+00:00,"**Web Development with Go** (2016)

Автор: Jonathan Calhoun

С помощью книги вы научитесь создавать реальные веб-приложения с нуля, используя язык программирования Go. Вы освоите не только основы построения веб-приложений на Go, но и научитесь использовать REST архитектуру, устанавливать и использовать сторонние библиотеки, а также тестировать готовые приложения.",5395,1,0,goproglib
799,2020-03-10 10:22:31+00:00,"Go для DevOps и микросервисов – хорошая идея?

Если вы внимательно посмотрите на набор инструментов DevOps, вы найдете множество проектов, написанных на Go: Docker, Kubernetes, Prometheus, и многие другие. Есть также значительное сообщество вокруг применения Go для создания микросервисов. Но является ли Go действительно хорошим или даже лучшим выбором для этих областей? Разбираемся 

https://youtu.be/X-VsNa7kKHk",5160,0,0,goproglib
798,2020-03-09 09:00:58+00:00,"Почему ребята из [Cortex](https://www.cortex.dev/) выбрали язык Go для разработки инфраструктуры машинного обучения, а не Python? 

https://prglb.ru/1bp7",4364,0,0,goproglib
797,2020-03-08 09:01:16+00:00,"Практический доклад Максима Рындина на GopherCon Russia 2018 о продуктовой разработке на Go, в рамках которого он описывает процесс миграции на Go в компании Gett, кратко освещает причины такого решения и трудности, с которыми они столкнулись.

https://youtu.be/ppnnuDotxZM",5142,0,0,goproglib
796,2020-03-07 16:35:19+00:00,"**Gos: Armed Golang** 

Проект предоставляет готовые решения для кросс-компиляции, компиляции .proto файлов, реализации прокси и др.

https://github.com/storyicon/gos",4157,0,0,goproglib
795,2020-03-06 13:05:20+00:00,Подробное руководство об использовании Websockets в Go: https://prglb.ru/ccu1,5193,0,0,goproglib
794,2020-03-05 10:51:12+00:00,Учимся правильно парсить тело JSON запроса на Go: https://prglb.ru/5r85l,5252,0,0,goproglib
793,2020-03-04 18:03:33+00:00,Реализуем управление доступом на основе ролей в REST API на Go: https://prglb.ru/2eurj,5207,0,0,goproglib
791,2020-03-04 09:00:08+00:00,"**7 простых методов функционального программирования в Go**

Если вы знакомы с понятием функционального программирования (ФП), то вы почерпнёте для себя что-то полезное в статье, которая описывает применение основных концепций ФП в Go.

https://deepu.tech/functional-programming-in-go/",3934,0,0,goproglib
790,2020-03-03 09:01:08+00:00,"[25 февраля официально релизнулся Go 1.14](https://blog.golang.org/go1.14). Небольшая подборка материалов о нововведениях на русском языке, которые появились в новой версии языка:

– [Обзорная статья об изменениях](https://www.opennet.ru/opennews/art.shtml?num=52443)
– [Основная библиотека](https://golang-blog.blogspot.com/2020/02/go-1-14-core-library.html?m=1)
– [Runtime и компилятор](https://golang-blog.blogspot.com/2020/02/go-1-14-runtime-compiler.html?m=1)
– [Инструменты, команда go](https://golang-blog.blogspot.com/2020/02/go-1-14-go-command.html?m=1)
– [Изменения в языке и его портах](https://golang-blog.blogspot.com/2020/02/go-1-14-language-changes.html?m=1)",4549,0,0,goproglib
789,2020-03-02 09:00:22+00:00,"**Проактивная защита: Топ-10 требований OWASP 2018**

Открытый проект по обеспечению безопасности веб-приложений (OWASP) помогает организациям начать проектировать, разрабатывать, приобретать, использовать и поддерживать безопасное программное обеспечение. В данном документе собраны 10 аспектов безопасности, на которые разработчики программного обеспечения должны обращать внимание. Несмотря на год выпуска, информация не теряет свою актуальность и в настоящее время.",5428,0,0,goproglib
788,2020-03-01 09:00:17+00:00,"У языка Go немало сфер применения, в том числе разработка игр. По ссылке ниже вы найдёте подборку обучающих видеоматериалов, связанных с данной темой.

https://gameswithgo.org/topics.html",5199,0,0,goproglib
787,2020-02-29 09:00:18+00:00,"**GoUtils

**Репозиторий включает набор небольших утилит для облегчения работы с Go.

https://github.com/kisom/goutils",5128,0,0,goproglib
786,2020-02-28 09:00:12+00:00,"Видеозаписи выступлений с парижской конференции dotGo 2019. 

https://m.youtube.com/playlist?list=PLMW8Xq7bXrG5B_gvikeSf3Du3NGBs4yVi",5156,0,0,goproglib
783,2020-02-27 09:04:31+00:00,"Разбираемся с внедрением зависимостей (Dependency injection, DI) в Go с помощью контейнера [wire](https://github.com/google/wire): https://blog.drewolson.org/go-dependency-injection-with-wire

Общие понятия о DI в Go: https://blog.drewolson.org/dependency-injection-in-go ([перевод](https://habr.com/ru/company/funcorp/blog/372199/))",5859,0,0,goproglib
782,2020-02-26 09:01:12+00:00,"Статья, которая не может остаться без вашего внимания, о том, что Go – это язык Google, а не сообщества.

https://utcc.utoronto.ca/~cks/space/blog/programming/GoIsGooglesLanguage",5755,0,0,goproglib
781,2020-02-25 09:01:40+00:00,"**goHackTools**

В репозитории содержатся переписанные на Go скрипты из следующих книг и материалов по безопасности / взлому:     

– Violent Python
– Black Hat Python
– Security with Go
– Python Web Penetration Testing Cookbook
– [asecuritysite](https://asecuritysite.com/)
– [Криптография с Python](https://vk.com/doc187366527_464874978?hash=45d8e4c6fd48820484&dl=8e644ab04c8ad6520d)
– Black Hat Go

https://github.com/dreddsa5dies/goHackTools",6766,0,0,goproglib
780,2020-02-24 09:00:46+00:00,"Цикл статей о создании микросервисов с помощью go-micro:

[Micro In Action, Part 1: Getting Started](https://itnext.io/micro-in-action-getting-started-a79916ae3cac)
[Micro in Action, Part 2: An Ultimate Guide for Bootstrap](https://itnext.io/micro-in-action-part-2-71230f01d6fb)
[Micro In Action, Part 3: Calling a Service](https://itnext.io/micro-in-action-part-3-calling-a-service-55d865928f11)
[Micro In Action, Part 4: Pub/Sub](https://medium.com/@dche423/micro-in-action-part4-pub-sub-564f3b054ecd)
[Micro In Action, Part 5: Message Broker](https://itnext.io/micro-in-action-part-5-message-broker-a3decf07f26a)
[Micro In Action, Part6: Service Discovery](https://itnext.io/micro-in-action-part6-service-discovery-f988988e5936)",6146,0,0,goproglib
779,2020-02-23 09:00:31+00:00,"[​​](https://telegra.ph/file/a5aa2e9424c0e91ddc684.jpg)**HTTP Google Cloud Functions на Go**

Речь идет о серверной вычислительной платформе, управляемой событиями. Облачные функции позволяют писать код, не беспокоясь о выделении ресурсов или масштабировании для удовлетворения меняющихся требований.

Существует два типа облачных функций: HTTP функции, отвечающие на HTTP запросы, и фоновые функции, которые запускаются событиями, такими как сообщение, публикуемое в Cloud Pub / Sub, или файл, загружаемый в Cloud Storage. В статье подробно и доступно описан первый способ.

https://codelabs.developers.google.com/codelabs/cloud-functions-go-http/#0",4549,0,0,goproglib
778,2020-02-22 09:00:46+00:00,"Доклад Алексея Акуловича на фестивале TechTrain 2018, нацеленный в большей степени на начинающих разработчиков, **о плюсах и минусах языка Go, о его применении в ВКонтакте, об основных причинах негатива в адрес Go и что с ними можно сделать (или нельзя)**. В ходе доклада звучат взвешенные и обоснованные сравнения с другими языками, а в конце речь идет о применении Go в ВКонтакте (и где не применяется и почему).

https://youtu.be/2fxNbhy2gt0",4407,0,0,goproglib
777,2020-02-21 09:01:04+00:00,"**Функциональные опции** – парадигма в Go, предназначенная для создания чистых и расширяемых API. Если вам требуется передать десятки опций в API и на выходе добиться хорошего качества, то на помощь может прийти данная парадигма. А в статье описаны основные практики использования функциональных опций.

https://habr.com/ru/post/489296/",4285,0,0,goproglib
776,2020-02-20 18:11:12+00:00,"В данной статье автор подробно описывает практику поиска утечек памяти в приложениях на Go.

https://kirshatrov.com/2019/11/04/finding-memory-leak-in-cgo/",3745,0,0,goproglib
774,2020-02-20 09:01:55+00:00,"Существует немало способов хранения и использования настроек проекта при разработке на Go. Автор делится одним из способов, а именно, чтение настроек из внешней системы (например, etcd, consul и т. д.) с использованием их отдельных библиотек / API.

https://dev.to/j4ng5y/how-i-do-go-application-configuration-in-2020-336b",3715,0,0,goproglib
773,2020-02-19 09:01:27+00:00,"**Practical Cryptography With Go** **(2015) **

Автор: Kyle Isom

Книга обязательна к прочтению, несмотря на год выпуска. Вы узнаете, как создавать безопасные системы с точки зрения криптографии. Книга затрагивает как теоретическую, так и практическую сторону данного вопроса и в качестве языка  программирования выбран язык Go. В книге также отмечены некоторые проблемы, которые криптография не решает.

Репозиторий с примерами кода: https://github.com/kisom/gocrypto/",5460,0,0,goproglib
772,2020-02-18 15:00:45+00:00,"Подкаст **Generic Talks **о Go и не только –** Ваши бенчмарки (скорее всего) ничего не значат
**
10:00:00 – Посчитать размер объекта в Go. Что может быть проще? Зачем вообще это делать?
20:12:22 – Как ограничивают память другие известные проекты на Go. Разбираем подходы.
30:17:00 – Как понять что мы достигли предела по оптимизациям и пора внедрять другие подходы. Шипилев и его график)
40:20:22 – В бар заходит Искандер. Unsafe.Sizeof и отдельный пропозал.
50:29:40 – Рекурсивный обход структур в хипе для расчета размера, потенциальные использования рантайма и сборщика мусора.
60:33:46 – Как возможность расчета размеров в рантайме может открыть возможность для других оптимизаций.
70:47:11 – Pluggable GC в Go стоит ли форкать стандартный компилятор и рантайм?
80:50:11 – Говяжий язык. Beef - шаг вперед или очередной велосипед?
91:02:30 – Actix-web - open source, восприятие критики и мнения которые ничего не значат.
101:13:03 – Spinlock vs Mutex почему все так получилось? Почему так сложно правильно бенчмаркать?
111:24:00 – Erlang vs Go vs Java vs NodeJS бенчмарк серверов который не смог. Как сделать adaptive capacity limiter вручную для того чтобы выровнять latency. Говорим о том как анализировать результаты бенчмарков, делать выводы и проверять гипотезы.
121:37:25 – Затравочка будущих выпусков

Источники: 
– [Soundcloud](https://soundcloud.com/generictalks/0007-vashi-benchmarki-skoree-vsego-nichego-ne-znachat)
– [Apple Podcast](https://podcasts.apple.com/pl/podcast/0007-%D0%B2%D0%B0%D1%88%D0%B8-%D0%B1%D0%B5%D0%BD%D1%87%D0%BC%D0%B0%D1%80%D0%BA%D0%B8-%D1%81%D0%BA%D0%BE%D1%80%D0%B5%D0%B5-%D0%B2%D1%81%D0%B5%D0%B3%D0%BE-%D0%BD%D0%B8%D1%87%D0%B5%D0%B3%D0%BE-%D0%BD%D0%B5-%D0%B7%D0%BD%D0%B0%D1%87%D0%B0%D1%82/id1489980299?i=1000463220916)
– [Google Podcast](https://podcasts.google.com/?feed=aHR0cDovL2ZlZWRzLnNvdW5kY2xvdWQuY29tL3VzZXJzL3NvdW5kY2xvdWQ6dXNlcnM6NzAyMDE4Njc3L3NvdW5kcy5yc3M&episode=dGFnOnNvdW5kY2xvdWQsMjAxMDp0cmFja3MvNzQ2OTE3NDIw&ved=0CAYQzsICahcKEwiQqs3N-NXnAhUAAAAAHQAAAAAQAQ)",4659,0,0,goproglib
771,2020-02-18 14:11:23+00:00,"Agile-методы — семейство гибких подходов к управлению проектами. Они помогают командам во всём мире эффективно работать в условиях постоянно меняющихся требований, учитывать все изменения и встраивать новые факторы в рабочий процесс. 

Прекрасные новости для каждого, кто хочет вывести работу своей команды на новый уровень! [GeekBrains запускает трёхдневный интенсив](https://prglb.ru/3jzez) по методологии Agile.

В ходе интенсива вы не только познакомитесь с «гибкими» подходами, но научитесь выбирать подходящие для решения любой задачи. На практике вы разберёте реальные кейсы и научитесь внедрять и применять Agile-методы в своих проектах.

Успейте подать заявку и повысьте свою эффективность - https://prglb.ru/3jzez",3389,0,0,goproglib
770,2020-02-18 09:00:48+00:00,"**Пополняем коллекцию стилей оформления кода**

Помимо комментариев от разработчиков языка ([Go Code Review Comments](https://code.google.com/p/go-wiki/wiki/CodeReviewComments) and [Effective Go](http://golang.org/doc/effective_go.html)), стоит обращать внимание на подобные вещи: [стиль оформления](https://about.sourcegraph.com/handbook/engineering/go_style_guide) [кода](https://about.sourcegraph.com/handbook/engineering/go_style_guide) [на](https://about.sourcegraph.com/handbook/engineering/go_style_guide) [Go](https://about.sourcegraph.com/handbook/engineering/go_style_guide)[, применяемый](https://about.sourcegraph.com/handbook/engineering/go_style_guide) [компанией Sourcegraph](https://about.sourcegraph.com/handbook/engineering/go_style_guide).",3551,0,0,goproglib
769,2020-02-17 09:00:40+00:00,"Доклад специалиста из Cloudflare о WebAssembly с Go на митапе WebAssembly SF, в котором затронуты основы WASM, компиляция Go в WASM и преимущества запуска Go в браузере и движках JS, таких как V8: https://youtu.be/TzeEgdee3fc",4170,0,0,goproglib
768,2020-02-16 09:00:25+00:00,"**Учимся тестировать проекты на Go с dockertest**

Для определенности автор разбирает написание тестов к приложению, которое тоже может представлять интерес для вас: [телефонная книга](https://eax.me/golang-pgx/) [на Go c REST-интерфейсом, где](https://eax.me/golang-pgx/) [в качестве СУБД используется PostgreSQL](https://eax.me/golang-pgx/).

https://eax.me/golang-dockertest/",4801,0,0,goproglib
767,2020-02-15 08:20:10+00:00,"**Непрерывная интеграция и доставка (СI/CD) c Go GitHub Actions
**
Go предоставляет несколько новых решений проблем программных зависимостей. В этой статье автор продемонстрировал один из способов – кроссплатформенные Go GitHub Actions, которые вы можете использовать в своих рабочих процессах и делиться ими с другими.

https://blog.myitcv.io/2020/02/04/portable-ci-cd-with-pure-go-github-actions.html",4835,0,0,goproglib
766,2020-02-14 17:51:45+00:00,"**A Short Cyclopedia of Go** **(2019)**

Автор: John Tullis

Книга была создана как ресурс для людей, интересующихся языком Go в контексте компьютерных наук. Используемый подход состоит в том, чтобы предоставить концепции, принципы, определения и объяснения в области компьютерных наук и программирования, а затем связать языковые возможности с каждой концепцией или принципом. 

Энциклопедией она называется в связи с тем, что содержание разделено на отдельные главы, расположенные в алфавитном порядке.",4503,0,0,goproglib
765,2020-02-13 09:00:51+00:00,"Возможно уже заезженная, но одна из важнейших тем – работа с модулями в Go, точнее, все преимущества работы с версии 1.13.

– [Общие сведения](https://www.ardanlabs.com/blog/2019/10/modules-01-why-and-what.html)
– [Проекты, зависимости и языковой сервер Gopls](https://www.ardanlabs.com/blog/2019/12/modules-02-projects-dependencies-gopls.html) (анализирует написанный код и отвечает за автозаполнение)
– [Выбор минимальной версии](https://www.ardanlabs.com/blog/2019/12/modules-03-minimal-version-selection.html)
– [Зеркала, контрольные суммы и модуль Athens](https://www.ardanlabs.com/blog/2020/02/modules-04-mirros-checksums-athens.html) (предоставляет хранилище данных и прокси)",4606,0,0,goproglib
764,2020-02-12 12:00:57+00:00,"Довольно смелый пост о том, что Go – это новый Ruby: https://00f.net/2019/10/28/go-is-the-new-ruby/",4838,0,0,goproglib
763,2020-02-11 08:01:02+00:00,"**Десять рекомендаций-постулатов для написания простого, читаемого и поддерживаемого кода на Go**, представленных на недавней GopherCon Israel 2020: https://the-zen-of-go.netlify.com",5686,0,0,goproglib
762,2020-02-10 08:00:41+00:00,"На канале уже упоминался волшебный проект **Buffalo**, который представляет из себя экосистему для веб-разработки на Go. Напомним, что Buffalo позволяет создать веб-проект, в котором уже есть все, начиная с внешнего интерфейса (JavaScript, SCSS и т. д.) и заканчивая бекендом (база данных, маршрутизация и т. д.), уже подключенными и готовыми к запуску. Оттуда он предоставляет простые API для быстрого создания веб-приложения на Go. 

Всю информацию можно найти на [официальном сайте](https://gobuffalo.io/en/) или в [репозитории](https://github.com/gobuffalo/buffalo/). Просто нам хотелось еще раз показать всю прелесть и простоту работы с данным инструментом на примере преобразования статического сайте в проект Buffalo: https://www.gopherguides.com/articles/converting-a-static-website-to-golang-buffalo/",6635,0,0,goproglib
761,2020-02-09 08:01:03+00:00,"В преддверии официального релиза Go версии 1.14 (заметки о выпуске, накопившиеся в процессе работы, уже [готовы](https://tip.golang.org/doc/go1.14)), давайте ознакомимся с изменениями, коснувшимися языка и всего, что с ним связано, с версии 1.12: https://youtu.be/0c-1KJwSMCw",4951,0,0,goproglib
760,2020-02-08 08:01:06+00:00,"Ребята проводят [код-ревью проектов на языке Go](https://www.youtube.com/playlist?list=PLrWcS3DGI555hxNER4ffncCNdV9pgOVPF&feature=share), рассказывая о том, как эти проекты сделаны, почему они так сделаны и как можно лучше. Обязательно к просмотру!",5528,0,0,goproglib
759,2020-02-07 08:01:16+00:00,"**Практическое руководство: советы по написанию реальных программ на Go**

Из видео вы узнаете лучшие практические рекомендации в следующих направлениях: идиоматический код, разработка пакетов и API, обработка ошибок, параллелизм и тестирование: https://youtu.be/eB0ypsFTG20",5378,0,0,goproglib
758,2020-02-06 12:42:34+00:00,"**Get Programming with Go** (2018)

Авторы: Nathan Youngman и Roger Peppe

Книга является отличным примером введения в язык Go с примерами кода, которые можно воспроизвести прямо в Go Playground.",5245,0,0,goproglib
757,2020-02-05 09:01:20+00:00,"Даже такие гиганты, как American Express выбирают Go для разработки своих внутренних сервисов. Причины этого с примерами кода вы увидите в статье: https://americanexpress.io/choosing-go/",5173,0,0,goproglib
756,2020-02-04 09:00:46+00:00,"2 статьи, которые требуют вашего внимания при разработке веб-приложений на Go:

– [Преимущества использования Golang для вашего следующего веб-приложения](https://www.mindinventory.com/blog/advantages-of-golang-for-web-application-project/)
– [Рейтинг лучших веб-фреймворков для разработки на Go](https://www.mindinventory.com/blog/top-web-frameworks-for-development-golang/)",5249,0,0,goproglib
755,2020-02-03 09:01:34+00:00,"Вы уже сталкивались в своей пратике с каналами в Go. Давайте заглянем **«**под капот**»** данной технологии и разберемся как она работает изнутри:

– [Под капотом Golang — как работают каналы. Часть 1.](https://medium.com/@victor_nerd/под-капотом-golang-как-работают-каналы-часть-1-e1da9e3e104d)
– [Строение каналов в Golang. Часть 2.](https://medium.com/@victor_nerd/golang-channel-internal-part2-b4e37ad9a118)",5140,0,0,goproglib
750,2020-02-02 09:09:17+00:00,"**Gio** позволяет реализовать переносимые программы с графическим интерфейсом на Go. Программы Gio работают на всех основных платформах: iOS / tvOS, Android, Linux (Wayland / X11), macOS, Windows, FreeBSD, OpenBSD + экспериментальная поддержка браузеров (Webassembly / WebGL).

Gio включает эффективный векторный рендеринг, основанный на проекте [Pathfinder](https://github.com/servo/pathfinder). Текст и другие фигуры визуализируются с использованием только их контуров, чтобы поддерживать эффективную анимацию, преобразованный рисунок и независимость от разрешения пикселей.

Все подробности здесь: https://gioui.org/

Кстати, автор данного модуля (Elias Naur) будет выступать на предстоящей GopherCon Russia 2020",3963,0,0,goproglib
749,2020-02-01 17:17:48+00:00,"Свод правил, позволяющих обеспечить управляемость кодовой базы и продуктивное использование возможностей языка Go. Специалисты Uber делятся правилами оформления кода в формате плохо-хорошо: [Uber Go Style Guide](https://github.com/uber-go/guide/blob/master/style.md).",3954,0,0,goproglib
748,2020-01-31 17:23:37+00:00,Пожалуй один из самых удачных материалов по работе с базами данных в Go,5437,0,0,goproglib
747,2020-01-30 17:43:35+00:00,"В статье приводится **подборка из 10 источников для изучения Go**, с упором на онлайн ресурсы: https://www.agiratech.com/learn-go-programming-tutorials/",5125,0,0,goproglib
745,2020-01-30 09:01:06+00:00,"**Инлайнинг defer

**Эффективным способом справиться с ресурсами, которые должны быть освобождены независимо от того, какой путь функция принимает для возврата, является использование **оператора defer**. Знакомимся с переводом статьи «Инлайнинг defer» и применяем этот мощный оператор при разработке своих проектов: https://4gophers.ru/articles/defer/",3337,0,0,goproglib
744,2020-01-29 09:01:21+00:00,"Возникала ли у вас задача, связанная с разработкой тестов для модуля, который взаимодействует с базой данных и при этом вам не хочется привязывать модуль тестов к настоящей базе данных. В основной поставке Go есть инструмент для таких нужд под названием «FakeDb». 

**Эмуляция работы базы данных в тестах с помощью FakeDb**: https://habr.com/ru/post/485280/",4509,0,0,goproglib
743,2020-01-28 15:30:33+00:00,"Вчера был релиз v0.0.27 плагина **govim**, претерпевший достаточно много полезных модификаций. Не проходите мимо: https://github.com/govim/govim/releases/tag/v0.0.27",3739,0,0,goproglib
742,2020-01-28 13:25:46+00:00,"ㅤ
**Специально**, для тех, кто ищет работу в сфере АйТи, был создан [канал](https://t.me/joinchat/AAAAAFZEHKueTRHhpUEoww), где публикуют только качественные вакансии.

Больше не нужно бесконечно сёрфить в надежде найти что-то годное...всё уже собрано [здесь](https://t.me/joinchat/AAAAAFZEHKueTRHhpUEoww)!

Ссылка на канал с отборными вакансиями: [https://t.me/joinchat/AAAAAFZEHKueTRHhpUEoww

](https://t.me/joinchat/AAAAAFZEHKueTRHhpUEoww)**Го сам и захвати друга **",3482,0,0,goproglib
741,2020-01-28 08:00:44+00:00,"**IDE в браузере уже сегодня**

Запускайте свои Go приложения прямо в браузере с помощью Go Playground, работающего на основе React и Monaco editor (использует движок VS Code). Поддерживается автодополнение кода, загрузка и сохранение файлов, WebAssembly и темная тема  .

https://github.com/x1unix/go-playground",3408,0,0,goproglib
739,2020-01-26 08:00:47+00:00,"Чем заняться в воскресенье? Можно, например, прочитать статью в 2 частях и написать blockchain менее чем за 200 строк кода на Go:

https://habr.com/ru/post/347930/
https://habr.com/ru/post/348624/",4384,0,0,goproglib
738,2020-01-25 07:56:09+00:00,"**Опыт разработки: почему мы пишем инфраструктуру машинного обучения на Go, а не на Python**

В статье вы ознакомитесь с мнением практикующего разработчика Cortex о преимуществах применения Go для инфраструктурных решений в ML-проектах и о том, как два языка могут дополнять друг друга.

https://proglib.io/sh/Wpcxn1lNsz",4102,0,0,goproglib
737,2020-01-24 15:50:53+00:00,"Вы покрываете код тестами, или вовсе используете подход TDD (разработка через тестирование)? В любом случае, познакомьтесь с качественным  материалом по данной теме: https://medium.com/@gonzalo.molina1996/tdd-with-table-driven-test-in-go-3b1e6dc25c0b",3781,0,0,goproglib
736,2020-01-23 09:01:19+00:00,"**Гайд по использованию веб-сокетов в Go, включая лучшие инструменты и пошаговое руководство**

Взаимодействие клиента и сервера без обновления страницы – это то, что мы считаем само собой разумеющимся. Но в прошлом реализация такого функционала была настоящей проблемой для разработчиков, которые прошли долгий путь от длинных HTTP-опросов и AJAX и наконец нашли решение для создания приложений реального времени: https://yalantis.com/blog/how-to-build-websockets-in-go/",4611,0,0,goproglib
735,2020-01-22 17:29:49+00:00,"**Автоматическая проверка** **безопасности исходных кодов Go-приложений **

Инструмент **Gosec** позволяет проверять исходные коды ваших проектов на такие ошибки конфигурации или уязвимости, как: жестко закодированные учетные данные, привязка ко всем интерфейсам, построение SQL-запроса с использованием формата строки / объединения строк и многое другое. Инструмент позволяет гибко настраивать параметры запуска, автоматически выдавать номер и описание CWE (Common Weakness Enumeration).

https://github.com/securego/gosec
https://securego.io/",3688,0,0,goproglib
734,2020-01-21 18:21:52+00:00,"Теоретическая статья о том, как с минимальными изменениями исходных кодов проекта реализовать кэширование часто запрашиваемых данных. 

Cинхронизация кэша через [Redis](https://github.com/go-redis/redis) для сервиса на Go: https://habr.com/ru/post/482704/",4195,0,0,goproglib
733,2020-01-20 17:17:53+00:00,"**Замечательный теоретико-практический тур по языку Go

**Последовательно, от простого к сложному, и все это присыпано практикой. В общем все как вы любите: https://tour.golang.org/list",4861,0,0,goproglib
732,2020-01-20 13:12:36+00:00,"#MoscowTravelHack

Такого ещё не было! Первый в России хакатон по созданию цифровых решений для туризма Moscow Travel Hack. Придумай новые продукты для путешественников и жителей города. Задачи на хакатон предложили 10 партнёров: «МегаФон», Facebook, PANORAMA 360, MTS Startup Hub, «Аэроэкспресс», Пушкинский музей, «Царицыно», Discover Moscow, «Город открытий» и Russpass. 

В каждый трек пройдет по 5 команд. Среди призов — не только 100 000 рублей, но и возможность реализовать проект с партнёрами после хакатона. Придумывать решение заранее не обязательно! Подать заявку можно индивидуально или командой. 

Успей до 28 января!
Подробности на сайте travelhack.moscow",5231,0,0,goproglib
731,2020-01-19 13:28:30+00:00,"**Разбираемся с разработкой генератора идентификаторов на Go** 

В [статье](https://bartfokker.com/posts/identicon) речь идет не о простых идентификаторах пользователя, а об Identicon – это визуальное представление хеш-значения, служащее для идентификации пользователя компьютерной системы в виде аватара, защищая его конфиденциальность.",3994,0,0,goproglib
730,2020-01-18 14:23:21+00:00,"Тема WebAssembly продолжает набирать обороты. Мы это явно видим, т.к. этот инструмент постоянно на слуху и появляются средства для упрощения работы с ним. 

Встречайте экспериментальную библиотеку [Vugu](https://www.vugu.org/), предназначенную для создания веб-интерфейсов на Go + WebAssembly, которая работает в вашем браузере уже сегодня: https://github.com/vugu/vugu",4541,0,0,goproglib
729,2020-01-17 15:38:46+00:00,"В данном плейлисте вы найдёте ответы на многие вопросы, связанные с написанием **REST API на Go**: https://m.youtube.com/playlist?list=PLehOyJfJkFkJ5m37b4oWh783yzVlHdnUH",4811,0,0,goproglib
728,2020-01-16 17:05:22+00:00,"**TinyGo** – это проект, который позволяет создавать приложения на языке Go для микроконтроллеров и современных веб-браузеров путем создания нового компилятора на основе LLVM.

Вы можете компилировать и запускать программы TinyGo на нескольких различных платах микроконтроллеров, таких как [BBC micro: bit](https://www.microbit.co.uk/) и [Arduino Uno](https://store.arduino.cc/usa/arduino-uno-rev3/).

TinyGo также может быть использован для создания кода WebAssembly (WASM).

https://tinygo.org
https://github.com/tinygo-org/tinygo",5327,0,0,goproglib
727,2020-01-15 18:08:26+00:00,Очередная практическая полезность от 4gophers. Сегодня ознакомимся с переведенной статьей под названием **«Пишем свой BitTorrent клиент на Go»**: https://4gophers.ru/articles/bittorrent/,4791,0,0,goproglib
726,2020-01-14 16:06:22+00:00,"В своём репозитории автор представляет наиболее интересные по его мнению и часто задаваемые **практические** вопросы на собеседованиях на позицию Go-разработчика. Упор сделан именно на эффективность алгоритма программы и структуры данных.

https://github.com/hoanhan101/algo/",6308,0,0,goproglib
725,2020-01-13 09:00:43+00:00,"**Если вы используете архитектуру микросервисов, вы однозначно хотите попробовать или уже попробовали фреймворк gRPC**

Хоть и на английском, но [здесь доступно рассказывают о gRPC](https://www.youtube.com/playlist?list=PLy_6D98if3UJd5hxWNfAqKMr15HZqFnqf) и о том, как его использовать с Protocol Buffer для разработки приложений на Go (там и Java немного зацепили, без обид).",5962,0,0,goproglib
724,2020-01-12 13:50:33+00:00,"Оптимизация использования ресурсов, сокращение времени обслуживания запросов, горизонтальное масштабирование кластера, а также обеспечение отказоустойчивости (резервирования) – все это про балансировку нагрузки. 

Сегодня ознакомимся с [материалами статьи](https://4gophers.ru/articles/load-balancing/#.Xhsi3i1eNQI), в которой описываются этапы создания простого балансировщика нагрузки на Go.",4369,0,0,goproglib
723,2020-01-11 11:59:51+00:00,"**Vim** – довольно противоречивый текстовый редактор. Если удалось закрыть его с первого раза, то он определенно для вас. Vim нельзя просто запустить и начать работать – требуется определённая подготовка. Зато стоит раз испытать его в деле и поражаешься тому, как можно было без него обходиться. Для работы с определенным языком программирования необходимо устанавливать плагины, и Go здесь не является исключением:

- [govim](https://github.com/govim/govim) (написан на Go);
- [vim-go](https://github.com/fatih/vim-go) (написан на VimScript).",4826,0,0,goproglib
722,2020-01-10 16:29:29+00:00,"Полезная утилита **Govalidate** позволяет на лету проверить:
- установку и версию Go;
- правильно ли настроен PATH;
- установлены ли зависимости CGO;
- поддержку плагина для доступных редакторов.

https://github.com/rakyll/govalidate",4422,0,0,goproglib
721,2020-01-09 17:03:43+00:00,[Полный перевод интервью с Райаном Далем](https://habr.com/ru/post/413187/) (создатель Node.js) о языке программирования Go с многообещающим заголовком «Для серверов я не могу представить другой язык кроме Go»,5013,0,0,goproglib
720,2020-01-08 10:59:45+00:00,[Подборка](https://www.kv.by/post/1057998-12-knig-dlya-izucheniya-yazyka-programmirovaniya-go) из 12 книг для изучения языка программирования Go,5037,0,0,goproglib
719,2020-01-07 11:13:33+00:00,"**Отладка приложения**

В связи с ростом популярности микросервисов и контейнеризации у разработчика может возникнуть задача отладки Go приложения в Kubernetes из IDE. Давайте ознакомимся с [материалами статьи](https://itnext.io/debug-a-go-application-in-kubernetes-from-ide-c45ad26d8785), в которой автор поэтапно описывает все процессы.",5104,0,0,goproglib
718,2020-01-06 10:33:29+00:00,"Там сегодня на Coursera курсы бесплатные стартуют по Go от МФТИ, MAIL.RU GROUP и ФРОО: **«**[Разработка веб-сервисов на Go - основы языка](https://www.coursera.org/learn/golang-webservices-1)**»** и **«**[Разработка веб-сервисов на Golang, часть 2](https://www.coursera.org/learn/golang-webservices-2)**»** . Присоединяйтесь, т.к. 2 часть не только для новичков!  (не реклама)",4440,0,0,goproglib
717,2020-01-05 10:26:55+00:00,В [статье](https://4gophers.ru/articles/unsafe/#.XhG5phczZQI) приводится перевод материала о безопасном использовании пакета unsafe (предоставляет средства низкоуровневого доступа к памяти).,4402,0,0,goproglib
716,2020-01-04 10:30:46+00:00,Полезный [материал в слайдах](https://docs.google.com/presentation/d/1N8QC6DCSt9fsPSpksu_QHBrWk4OezrllcY4mnjIjLbw/edit#slide=id.g550f852d27_228_0) с конференции GopherCon UK 2019 об оптимизации кода на Go,4996,0,0,goproglib
715,2020-01-03 11:36:46+00:00,Задумывались когда-нибудь о размере скомпилированного кода? В некоторых задачах это более чем критично. Автор [статьи](https://www.cockroachlabs.com/blog/go-file-size) вот задумался ,5047,0,0,goproglib
712,2020-01-02 08:46:48+00:00,"У языка Go множество сфер применения, в том числе он отлично подходит для автоматизации различных задач. Более того, в сфере информационной безопасности ранее активно использовали Python, а теперь его спокойно заменяет Go. Поэтому сегодня рассмотрим книгу, в которой описаны этапы проведения тестирования на проникновение с уклоном в программирование на Go.",4413,0,0,goproglib
711,2020-01-01 11:28:41+00:00,"Вы наверняка уже слышали о [Hugo](https://github.com/gohugoio/hugo/blob/master/README.md), по крайней мере на канале он упоминался. Так вот, Hugo - это очень гибкий и простой в использовании генератор статических сайтов, написанный на Go. В данной [статье](https://gohugo.io/news/lets-celebrate-hugos-5th-birthday/) приводится своего рода история создания и практика использования Hugo, а также отмечены дальнейшие планы развития.",4449,0,0,goproglib
710,2019-12-31 16:52:21+00:00,"В последний день уходящего года хочется подвести некоторые итоги и наметить ориентиры на следующий год. Давайте ознакомимся с [материалами статьи](https://medium.com/@meeusdylan/why-you-should-learn-go-in-2020-6ce975b66d47), в которой перечислены причины продолжения изучения Go и в 2020 году, и пойдем в новый год со спокойной душой! ",3717,0,0,goproglib
709,2019-12-30 15:00:40+00:00,"Планировщик, который крадет задачи в Go - одна из парадигм планирования в многопоточных вычислениях.

Планирование задач является важной и актуальной задачей у разработчиков. Разбираемся подробнее с [work-stealing планировщиком в Go](https://habr.com/ru/post/333654/) ([оригинал статьи](https://rakyll.org/scheduler/)). 
[Статья другого автора на эту же тему](https://medium.com/a-journey-with-go/go-work-stealing-in-go-scheduler-d439231be64d).",4033,0,0,goproglib
708,2019-12-29 14:00:34+00:00,"Выступления [2го](https://www.youtube.com/watch?v=nxydu5aPtjQ&list=PLGN1AjiJJv0l8VNnFOnJSq1Vi87TLU1kp) и [3го](https://www.youtube.com/watch?v=IV0wrVb31Pg&list=PLGN1AjiJJv0mHK60uQxVXjYg-G8d4YyqQ) дней международной конференции, проходящей в октябре 2019 года в Италии",3716,0,0,goproglib
706,2019-12-28 16:24:45+00:00,"Безопасность в наше время важнее всего. Сегодня рассмотрим такую сторону обеспечения безопасности при разработке приложений, как шифрование. Если более конкретно, то разберёмся с известным алгоритмом шифрования RSA и рассмотрим генерацию RSA ключей на Go.

Перевод статьи «[RSA - theory and implementation](https://eli.thegreenplace.net/2019/rsa-theory-and-implementation/)» — https://4gophers.ru/articles/rsa/",3423,0,0,goproglib
705,2019-12-27 16:56:49+00:00,"**Продолжаем тему WebAssembly

В **программировании как и в жизни - все познаётся в сравнении. Сегодня рассмотрим статью, в которой сравниваются GopherJS (транслятор Golang в JS) и WebAssembly для Go",4061,0,0,goproglib
703,2019-12-26 18:17:27+00:00,"WebAssembly представляет из себя открытый формат байт-кода, исполняемого современными браузерами и предоставляет способ исполнения кода, написанного на различных языках, в сети, со скоростью близкой к нативной, чего ранее невозможно было достичь.

Сегодня знакомимся с [работой WebAssembly в Go](https://www.brianketelsen.com/web-assembly-and-go-a-look-to-the-future/).",5214,0,0,goproglib
702,2019-12-25 18:11:49+00:00,"Разработка через тестирование - весьма спорная штука, которая в одном случае целесообразна, а в другом - нет. Но при грамотном подходе она может избавить разработчика от последующих проблем, которые могут возникнуть в ходе или после разработки. Давайте познакомимся с [особенностями](https://github.com/quii/learn-go-with-tests) разработки через тестирование при работе с Go.",4220,0,0,goproglib
701,2019-12-25 10:35:27+00:00,"**Минутка российской статистики**. 

Всего 1% трудоспособного населения РФ работает удалённо. При этом они **зарабатывают на 40% больше** своих офисных коллег. Два вопроса: почему вы не переходите на удалёнку и как найти нужную вакансию? 

Первый вопрос оставляем на вашей совести, а на второй отвечаем:
1. Следите за появлением вакансий в [крупнейшем агрегаторе вакансий на удаленку
](https://t.me/theyseeku/4166)2. Занимайтесь самообразованием — курсы и статьи найдёте там же.

Вот так всё просто. Вступайте и работайте из любой точки мира (или с дивана): [t.me/theyseeku](https://t.me/theyseeku/4166)",3673,0,0,goproglib
700,2019-12-24 17:16:51+00:00,"Сегодня разберёмся с [основными проблемами](https://m.youtube.com/watch?t=0h0m3s&v=Uojy57I-xP0), с которыми сталкиваются разработчики на Go при работе с одной из самых популярных СУБД - Postgres",3677,0,0,goproglib
699,2019-12-23 17:20:30+00:00,"**Разработка высокомасштабируемого Golang API с помощью Docker Swarm (объединяет множество Docker хостов в один виртуальный хост) и Traefik (обратный прокси с поддержкой Docker)

**[Данная статья покажет](https://hackernoon.com/architecting-a-highly-scalable-golang-api-with-docker-swarm-traefik-875d1871cc1f) вам, как настроить кластер Swarm, развернуть пару микросервисов и создать обратный прокси-сервис (с Traefik), отвечающий за маршрутизацию запросов по их базовым URL-адресам.",4046,0,0,goproglib
698,2019-12-23 12:40:18+00:00,"Level.Travel — команда разработки сложного продукта в сфере путешествий.  

За последние 8 лет мы с нуля создали и продолжаем развивать решение для онлайн-продажи путешествий. Нашу платформу используют лидеры рынка – Тинькофф Банк, OneTwoTrip, Сбербанк, TripAdvisor, Kayak, АК Барс Банк, Евросеть и многие другие. 

Кого мы ищем:
[Ruby on Rails / Back-end developer 
](https://prglb.ru/4b4vo)[Front-end developer](https://prglb.ru/3wbls) 
[Android developer](https://prglb.ru/5ma2n) 
[Python / Back-end developer](https://prglb.ru/4b3ez) 
[UI/UX дизайнера
](https://prglb.ru/217mp)[Продюсер проектов мобильной разработки](https://prglb.ru/3mxtp) 
[Продюсер команды Growth & Acquisition](https://prglb.ru/2uc8h) 

У нас: белая зп, оф.трудоустройство, больничные, отпуска, ДМС со стоматологией. Оплата 50% профильных мероприятий. Геймификация процессов и несколько раз в год релокейты поработать в другую страну. Клевый молодой коллектив, интересные ивенты, насыщенная корпоративная жизнь. Пинг-понг, бильярд и другие активности в офисе. Скидки на путешествия! 

О том, как мы живем и работаем, а также других наших вакансиях можно почитать тут: https://prglb.ru/30tqr

ap@level.travel / @anya_podlesnaya TG",3480,0,0,goproglib
697,2019-12-22 10:37:33+00:00,"Возможно не все знают, что для работы связки Docker-Golang, есть альтернатива Docker Hub - это GitHub Package Registry.

Обычно для любого языка программирования для запуска приложения необходимо создать пакет (npm для JavaScript, NuGet для C #, и т.д.), затем сохранить его где-нибудь. В случае с Docker люди просто загружают образы в Docker Hub, но теперь у разработчиков есть новая альтернатива. Ознакомьтесь с подробностями в [статье](https://martinheinz.dev/blog/6).",3494,0,0,goproglib
696,2019-12-20 12:30:11+00:00,"[Взгляд со стороны на некоторые особенности Go](https://dev-gang.ru/article/czto-ja-uznal-novogo-izuczaja-go-u7sjhih6df/), которые всплывают в ходе практики.

Автор затрагивает вопросы стандартной библиотеки, управления зависимостями, типов данных, возвращаемых значений, а также интерфейсы.",4265,0,0,goproglib
695,2019-12-19 16:10:23+00:00,"Микросервисы набирают популярность. Сегодня познакомимся с практической стороной вопроса построения микросервисов с помощью Golang, Kafka и DynamoDB.

В первой статье автор расскажет об основных [требованиях к созданию микросервиса с использованием Golang и Kafka](https://medium.com/@self.maurya/building-a-microservice-with-with-golang-kafka-and-dynamodb-part-i-552cc4816ff). Вторая статья затрагивает [вопросы интеграции с DynamoDB и масштабируемости](https://medium.com/@self.maurya/building-a-microservice-with-golang-kafka-and-dynamodb-part-ii-4c2def48a5dc).",4790,0,0,goproglib
694,2019-12-18 18:27:10+00:00,"Обработка ошибок в любом языке программирования занимает особое место, Go не является исключением. [Давайте подробнее разберемся с обработкой ошибок](https://evilmartians.com/chronicles/errors-in-go-from-denial-to-acceptance) и в конечном итоге поймем, что ошибки в Go следует рассматривать не как причину боли, а как гибкий и мощный инструмент контроля.",4097,0,0,goproglib
693,2019-12-17 09:01:21+00:00,"Сегодня вспомним [основы](https://golang-blog.blogspot.com/p/go-essentials.html) языка Go и пробежимся по [более сложным вещам](https://golang-blog.blogspot.com/p/blog-page_2.html): данные, инициализация, интерфейсы, пустой идентификатор, многопоточность, ошибки и многое другое.",4298,0,0,goproglib
692,2019-12-16 18:48:36+00:00,"Несколько месяцев назад была анонсирована версия 1.13 языка Go, но сейчас не за горами версия 1.14, которая уже наделала много шума. 
Чтобы не вносить путаницу, сегодня речь пойдет о планах на грядущую версию, [в слайдах](https://docs.google.com/presentation/d/1HfIwlVTmVWQk94OLKfTGvXpQxyp0U4ywG1u5j2tjiuE/edit).",3712,0,0,goproglib
691,2019-12-14 11:47:19+00:00,"Обфускация - это процесс приведения исходного или исполняемого кода программы к виду, сохраняющему её функциональность, но затрудняющему анализ, понимание алгоритмов работы и модификацию при декомпиляции. 

Обфускация, как правило, применяется для следующего: затруднения декомпиляции/отладки и изучения программ с целью обнаружения функциональности; затруднения декомпиляции проприетарных программ с целью предотвращения обратной разработки; оптимизации программы с целью уменьшения размера кода.

Применяйте обфускацию в своих проектах с помощью готовых [решений](https://github.com/mvdan/garble).",4595,0,0,goproglib
690,2019-12-11 18:32:20+00:00,[Довольно интересное чтиво](https://research.swtch.com/vgo-principles) о принципах управления версиями в Go.,4158,0,0,goproglib
689,2019-12-11 14:45:01+00:00,"Ускорить разработку. Гибко масштабировать. Обеспечить безопасную работу сайта…  Если от этих фраз ты начинаешь гореть, тебе пора на онлайн-интенсив по Django Framework от GeekBrains. Научим быстро и качественно реализовывать веб-проекты, избегать распространенных ошибок при создании приложений с нуля. 

Два продуктивных дня, две практические работы и собственный проект для портфолио  —  все это ты сделаешь под контролем эксперта-куратора. Каждому участнику выдаем именной сертификат.

До 16 декабря курс стоит на 40% дешевле! 
Подробная программа, стоимость и условия по ссылке: 
https://bit.ly/38uejp6",3876,0,0,goproglib
688,2019-12-10 12:47:10+00:00,"В связи с приближающимся Новым годом, оставим здесь основные [слайды и сслыки](https://github.com/mvdan/2019-talks) 2019 года, связанные с Go.",3536,0,0,goproglib
686,2019-12-08 18:01:07+00:00,"Ответ:
http://localhost

Пакет url (import ""net/url"") парсит URL-адреса и реализует экранирование запроса.
Нужные нам символы подставляются автоматически исходя из схемы: scheme://[userinfo@host]/path?query#fragment
Пример с официального сайта: 

package main

import (
  ""fmt""
  ""log""
  ""net/url""
)

func main() {
  u, err := url.Parse(""http://bing.com/search?q=dotnet"")
  if err != nil {
    log.Fatal(err)
  }
  u.Scheme = ""https""
  u.Host = ""google.com""
  q := u.Query()
  q.Set(""q"", ""golang"")
  u.RawQuery = q.Encode()
  fmt.Println(u)
}

Ответ: https://google.com/search?q=golang",3498,0,0,goproglib
685,2019-12-08 15:56:22+00:00,"**Как вы думаете, что выведет данный код?  u := url.URL{Scheme: ""http"", Host: ""localhost""} fmt.Printf(""%s"", u)**
__anonymous poll__

Print http://localhost – 166
 73%

Нет правильного ответа – 39
 17%

Compile error – 13
 6%

Print http:localhost – 8
▫️ 4%

 226 people voted so far.",3152,0,0,goproglib
683,2019-12-07 17:37:42+00:00,"В статье приводятся ряд отличительных особенностей языка Go, выделяемых одним из разработчиков Google Cloud. Он объясняет причину перехода на Go с Python, Java и JavaScript в некоторых из своих проектов. Основные особенности: в Go уделяется особое внимание прямой совместимости и зависимости, у языка нет функциональных особенностей, которые ухудшают читабельность, а также он поставляется из коробки со всем, что действительно нужно (базовая библиотека тестов, надежные сетевые и синхронизирующие примитивы и шаблоны, и многое другое). 

https://benjamincongdon.me/blog/2019/11/11/The-Value-in-Gos-Simplicity/",3799,0,0,goproglib
682,2019-12-03 11:12:00+00:00,"На языке С++ можно написать любое приложение для любой задачи. Правда, он настолько сложный, что освоить все тонкости довольно трудно.

Go — простой и удобный язык, который был создан в Google на замену C и C++. Если вы решили изучать Go, советую посмотреть бесплатное занятие Нетологии «Программирование на Go: практика для новичков», чтобы: 

• узнать о специфике языка и библиотек,
• решить простую задачу и проверить Go в деле,
• выяснить, подходит ли Go для ваших задач.

Подробности и регистрация по ссылке: http://netolo.gy/faA",3824,0,0,goproglib
681,2019-12-03 09:54:34+00:00,"#beginner  #best_practices 

Немного лучших практик по Go начинающим разработчикам. 

https://prglb.ru/4edc3",3745,0,0,goproglib
680,2019-11-23 14:02:12+00:00,"**Hugo-темы
**[Docsy](https://themes.gohugo.io/docsy/) — это тема Hugo для наборов технической документации, обеспечивающая простую навигацию, структуру сайта и многое другое. Это неофициально активно поддерживаемый продукт Google, написанный на Go. Он является самым быстрым в мире статическим движком для сайтов.",5308,0,0,goproglib
679,2019-11-22 10:48:31+00:00,"**Быстрый старт: Golang & MongoDB
**Полезная серия статей о том, как подключить и использовать MongoDB.

В [первом уроке](https://www.mongodb.com/blog/post/quick-start-golang--mongodb--starting-and-setup) рассматривается, как установить связь между языком и базой данных.
Во [втором уроке](https://www.mongodb.com/blog/post/quick-start-golang--mongodb--how-to-create-documents) продолжается работа с материалом из первого урока, но также показано подключение к определенной коллекции для создания новых документов.
В [третьем уроке](https://www.mongodb.com/blog/post/quick-start-golang--mongodb--how-to-read-documents) показано чтение документов из MongoDB и создание запросов для получения документов на основе определенных критериев.",5436,0,0,goproglib
678,2019-11-21 15:03:59+00:00,"**Fuzz-тестирование в Go
**Fuzzing — это метод тестирования, который загружает нашу программу случайными данными. Он дополняет обычное тестирование и позволяет разработчикам находить ошибки, которые было бы трудно найти при вводе вручную. Fuzzing довольно легко настроить в программах Go и может быть адаптирован практически всеми видами кода.

__Где можно узнать больше?
__[Презентация о фаззинге на митапе Google TechTalk](https://www.youtube.com/watch?v=3J9qbvOfklg).
Учебники, примеры, обсуждения, исследовательские предложения и другие ресурсы, связанные с фаззингом — [тут](https://github.com/google/fuzzing).",4377,0,0,goproglib
677,2019-11-20 19:45:58+00:00,"**Как начать работать с Docker

**[Docker](https://blog.golang.org/docker) раскрывает потенциал вашей организации, предоставляя разработчикам и ИТ-специалистам свободу создавать, управлять и защищать критически важные для бизнеса приложения, не опасаясь блокирования технологий или инфраструктуры. Docker позволяет объединять традиционные и облачные приложения, созданные на Windows Server, Linux и мэйнфреймах, в автоматизированную и безопасную цепочку поставок, улучшая сотрудничество между разработчиками и сокращая время окупаемости.

Docker можно использовать по-разному. Например, он предлагает одноразовую среду, которую можно использовать для изучения новых технологий. Docker предоставляет удобный способ иметь локальные среды разработки, которые часто соответствуют производственной среде. Docker также имеет популярный способ конфигурирования, сохранения и совместного использования серверных сред с использованием контейнеров, который помогает в установке приложения или большого стека с помощью простой команды запуска, например, «docker pull» или «docker run».

В [этой статье](https://www.linode.com/docs/applications/containers/when-and-why-to-use-docker/) описано когда и зачем использовать Docker.",3801,0,0,goproglib
676,2019-11-20 13:00:55+00:00,"Многие платят за образование, но после выпуска работают за зарплату ниже рынка, только чтобы получить опыт работы. МТС и Сколково создали образовательную программу для выпускников бакалавриата и магистратуры(возраст - 19-24 года), которая поможет подтянуть навыки и скиллы и, что самое главное, получить реальный опыт работы над проектом. 

Программа платная, но у тебя есть возможность выиграть 100% грант на обучение. Узнай о программе, перейдя по ссылке https://prglb.ru/33gwx со своего ПК, найди все подсказки, информацию об обучении и сразу же стартуй с одного из этапов квеста.",3230,0,0,goproglib
675,2019-11-20 11:21:13+00:00,"**16 избранных ссылок на материалы о языке Go для начинающих
**Подборка лучших статей о языке Go для читателей различного круга интересов и уровня подготовки, на английском и русском языках.

[Golang: основы для начинающих (rus)
](https://tproger.ru/translations/golang-basics/)[Трюки с использованием срезов
](https://github.com/golang/go/wiki/SliceTricks)[5 советов по использованию строк
](https://www.calhoun.io/5-tips-for-using-strings-in-go-2/)[Типы данных Struct, Map, Array и Slice
](https://letslearngo.wordpress.com/2016/01/09/struct-map-array-and-slice/)[Понятное объяснение указателей Go менее чем в 800 слов
](https://dave.cheney.net/2017/04/26/understand-go-pointers-in-less-than-800-words-or-your-money-back)[Туториал по каналам Go
](http://guzalexander.com/2013/12/06/golang-channels-tutorial.html)[Разработка с использованием каналов 
](http://blog.mergermarket.it/now-youre-thinking-with-channels/)[Аксиомы каналов
](https://dave.cheney.net/2014/03/19/channel-axioms)[Наглядная визуализация структур Go
](https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff)[Понимание panic-ошибок
](https://joeshaw.org/understanding-go-panic-output/)[3 наиболее распространенных ловушки языка Go (rus)
](https://proglib.io/p/3-go-pitfalls/)[Как обойти подводные камни
](https://divan.github.io/posts/avoid_gotchas/)[Основные подводные камни
](https://deadbeef.me/2018/01/go-gotchas)[50 оттенков Go: ловушки, подводные камни и распространенные ошибки новичков
](https://habrahabr.ru/company/mailru/blog/314804/)[Неофициальный список частых вопросов и ответов
](http://www.tapirgames.com/blog/golang-unofficial-faq)[Лекции Техносферы: Программирование на Go (rus)](https://habrahabr.ru/company/mailru/blog/327966/#lekciya-1-vvedenie)",4775,0,0,goproglib
673,2019-11-19 10:11:55+00:00,"[DockerSlim](http://dockersl.im/) — прекрасный репозиторий с открытым исходным кодом, написанный на Go. Его использование — это большой шаг в правильном направлении! ;)

""Продолжай делать то, что делаешь. Не нужно ничего менять. Используй базовое изображение, которое хочешь. Используй менеджер пакетов, который хочешь. Не беспокойся о ручной оптимизации свое Dockerfile. Тебе не нужно выбрасывать свои инструменты и рабочий процесс, чтобы иметь небольшие изображения контейнеров"" — обо всем этом беспокоится docker-slim.",3640,0,0,goproglib
672,2019-11-18 16:38:15+00:00,"[Gotraning — это материал](https://github.com/ardanlabs/gotraining/blob/master/topics/go/README.md) для любого разработчика среднего уровня, который имеет некоторый опыт работы с другими языками программирования и хочет изучать Go. Материал идеально подходит для тех, кто хочет начать обучение изучению го или для тех, кто хочет лучше понять язык и его внутреннюю среду.
Примечание. Этот материал предназначен для обучения в группе с тренером или же с ментором, так как код хорошо прокомментирован, но в нем отсутствуют некоторые контекстуальные концепции и идеи, которые будут рассмотрены в классе. Также вы можете внести свой вклад в развитие, создав новую учетную запись. :)",3553,0,0,goproglib
670,2019-11-18 10:01:23+00:00,"**Использование HTTP/2 Server Push для создания быстрых и идиоматических клиентских API REST
**[Vulcain](https://github.com/dunglas/vulcain) — это совершенно новый протокол, использующий HTTP/2 Server Push для создания быстрых и идиоматических клиентских REST API.

Также предоставляется сервер с открытым исходным кодом, который вы можете поместить поверх любого существующего веб-API, чтобы мгновенно превратить его в Vulcain-совместимый. Он поддерживает гипермедиа API, а также любой «устаревший» API, документируя его отношения с помощью OpenAPI .",3176,0,0,goproglib
669,2019-11-17 12:15:43+00:00,"[Salt](https://github.com/prologic/salt) — Простая утилита командной строки, написанная на Go, которая поддерживает шифрование/дешифрование NaCL и криптографию с открытым ключом secretbox.",3232,0,0,goproglib
668,2019-11-16 10:01:15+00:00,"**Методы оценки безопасности для проектов Go
**[""Практика Trail of Bits Assurance](https://www.trailofbits.com/services/) получила множество проектов Go, что было подтверждено успехом [оценки в Kubernetes](https://github.com/trailofbits/audit-kubernetes) этим летом. В результате мы адаптировали для проектов Go некоторые методы и тактики оценки безопасности, которые мы использовали с другими скомпилированными языками"", — вырезка из весьма полезного поста о методах безопасной разработки.
В результате авторами была создана [адаптация для проектов Go](https://blog.trailofbits.com/2019/11/07/attacking-go-vr-ttps/), некоторые методы и тактики оценки безопасности, которые они использовали с другими скомпилированными языками.",3981,0,0,goproglib
667,2019-11-15 15:47:35+00:00,"**Статическая проверка в действии**: инструмент статического анализа [Staticcheck
](https://superhighway.dev/staticcheck-in-action)Слишком часто мы обнаруживаем ошибки только после развертывания деплоя на продакшн. Даже на таком языке, как Go, можно писать неэффективный код и не отлавливать ошибки, пока не станет слишком поздно. [Staticcheck](https://staticcheck.io/) — это инструмент статического анализа, который может решить эту проблему. Он специализируется на поиске ошибок, простоте кода, производительности и интеграции редактора. Staticcheck с открытым исходным кодом и предлагается бесплатно. Он постоянно дополняется новыми и улучшенными проверками.

Он имеет различные [проверки](https://staticcheck.io/docs/checks): 
- на неиспользуемые переменные, 
- на откладывание метода Lock для мьютекса сразу после блокировки (пользователь, вероятно, намеревался вместо этого отложить Unlock), 
- на недоступность кода и многое другое.",3544,0,0,goproglib
666,2019-11-14 08:35:52+00:00,"**Go.dev****: новый центр для разработчиков Go
**""За последние два года, когда мы общались с пользователями компаний всех размеров, мы неоднократно слышали три вопроса: кто еще использует Go, для чего они его используют и как я могу найти полезные пакеты Go?"", — сообщают в [блоге Go](https://blog.golang.org/go.dev).

Вчера был запущен go.dev, новый хаб для разработчиков Go, чтобы помочь ответить на эти вопросы. Там можно найти множество учебных ресурсов для начала работы с языком, примеры использования и примеры компаний, использующих Go.

golang.org по-прежнему является домом для проекта Go с открытым исходным кодом и дистрибутива Go.[ Go.dev](https://go.dev/) — это сопутствующий сайт, предоставляющий эти вспомогательные ресурсы.",3492,0,0,goproglib
664,2019-11-13 13:25:16+00:00,"**Go Flutter для компьютера
**Google Flutter — это платформа, которая позволяет вам разрабатывать приложения с единой кодовой базой на гугловском языке [Dart](https://dart.dev/). Flutter позволяет создавать красивые нативные приложения на iOS и Android. [Этот неофициальный проект](https://github.com/go-flutter-desktop/go-flutter) выводит Flutter на рабочий стол благодаря возможностям Go и GLFW. Сам механизм не знает, как обращаться с компьютером (например, обрабатывать ввод с клавиатуры / мыши). Вместо этого он предоставляет уровень абстракции для любой платформы для реализации. Целью [этого проекта](https://github.com/pchampio/go-flutter-desktop-embedder) является реализация API встраивания Flutter с использованием единой кодовой базы, работающей в Windows, MacOS и Linux. GLFW подходит для этой задачи, потому что он предоставляет правильные абстракции поверх буфера / мыши / клавиатуры OpenGL для каждой платформы.",3370,0,0,goproglib
663,2019-11-13 10:11:17+00:00,"**Небольшой пакет golang для рендеринга разметки удобным для терминала способом 
**Пакет [termd](https://github.com/tj/go-termd) обеспечивает рендеринг разметки терминала с поддержкой подсветки синтаксиса блоков кода.
__Особенности:
__- подсветка синтаксиса кода,
- перенос слов до указанной ширины столбца,
- терминальный стиль.",3117,0,0,goproglib
662,2019-11-12 10:25:17+00:00,"**Основные операции, необходимые для начала работы с модулями
**Go 1.11 и 1.12 включают предварительную поддержку модулей, новую систему управления зависимостями, которая делает информацию о версии зависимостей явной и простой в управлении. Модуль представляет собой набор пакетов Go, хранящихся в файловом дереве с файлом ""go.mod"" в корне. ""go.mod"" определяет путь модуля (module path), который также является путем импорта, используемого для корневого каталога. Его требование зависимостей, другие модули, необходимы для успешной сборки. Каждое требование к зависимости записывается в виде пути к модулю и конкретной семантической версии .

Начиная с Go 1.11, команда go позволяет использовать модули, если текущий каталог или любой родительский каталог имеет go.mod, при условии, что каталог находится снаружи $GOPATH/src. Внутри $GOPATH/src, для совместимости, команда go по-прежнему выполняется в старом режиме GOPATH, даже если go.mod найден. Начиная с Go 1.13, режим модуля будет использоваться по умолчанию для всех разработок.

В этих ссылках на четыре части одного большого поста можно найти более подробную информацию об использовани Go Modules:
Часть 1 - [Использование Go Modules
](https://blog.golang.org/using-go-modules)Часть 2 - [Миграция на Go Modules
](https://blog.golang.org/migrating-to-go-modules)Часть 3 - [Публикация Go Modules
](https://blog.golang.org/publishing-go-modules)Часть 4 - [Go Modules: v2 и последующие](https://blog.golang.org/v2-go-modules)",3968,0,0,goproglib
661,2019-11-11 20:03:15+00:00,"**Мини-руководство для начинающих
**Создание REST API как микросервис Go вместе с MySQL.

https://teletype.in/@sofiya-yurova/B1koTNvjS",3385,0,0,goproglib
659,2019-11-10 15:23:10+00:00,"Ответ: да, может. Происходит следующее: функция, которая возвращает одно значение, выделяет один слот в стеке, чтобы удерживать его, а функция, которая возвращает два значения, выделяет два слота в стеке для их хранения и так далее.",3021,0,0,goproglib
658,2019-11-10 10:01:39+00:00,Может ли функция Go возвращать несколько значений?,3051,0,0,goproglib
656,2019-11-09 19:26:54+00:00,"Learning Functional Programming in Go (2017)
Автор: Sheehan L.

#go #book #en

Язык: English. 

Целевая аудитория: для go-разработчиков, знакомых с ООП и заинтересованных в изучении применения функциональной парадигмы.

Эта книга является учебным пособием для программистов, которые хотят изучать FP и применять его для написания лучшего кода. Автор ведет читателя от базовых приемов к продвинутым темам в логической, лаконичной и понятной последовательности.

В книге рассматриваются следующие темы:
️ создание надежных приложений;
️ методы устранения побочных эффектов;
️ первоклассные функции для реализации чистых функций;
️ реализация лямбда-выражения в Go и многое другое.

Преимущества: 
 глубокое введение в тему;
 все взаимосвязано, просто и продуманно.

Недостатки: 
не обнаружено.",3499,0,0,goproglib
655,2019-11-08 18:05:55+00:00,"**Наследие Go
**[Эта презентация](https://spf13.com/presentation/the-legacy-of-go/) была разработана для GoLab во Флоренции, Италия. Она была представлена в качестве заключительного выступления на конференции. Презентация рассказывает о наследии Go, глядя в прошлое и в будущее. Присутствующие назвали эту презентацию красивой, вдохновляющей и удивительной. Как вам?",3136,0,0,goproglib
654,2019-11-07 16:38:18+00:00,"Создание и тестирование интеграции Stripe может потребовать частого переключения между терминалом, вашим редактором кода и панелью мониторинга. 

[Интерфейс командной строки Stripe (CLI)](https://stripe.com/en-fr/blog/stripe-cli), который позволяет вам взаимодействовать со Stripe прямо из терминала и упрощает сборку, тестирование и управление интеграцией.",3992,0,0,goproglib
653,2019-11-07 13:35:37+00:00,"Онлайн-платформа goods открывает несколько вакансий на должности:

[Frontend-разработчик
](https://prglb.ru/3dljj)[Backend-разработчик](https://prglb.ru/3ef7w) 
[Middle Android Developer](https://prglb.ru/5ls4v) 
[Golang Developer](https://prglb.ru/4x5yk) 
[Senior Golang Developer](https://prglb.ru/5rrvh) 

Что мы предлагаем своим разработчикам маркетплейса? Комфортный офис в центре города, официальное оформление, высокую зарплату, премии и бонусы, бесплатные курсы, ДМС и годовые абонементы в фитнес-клубы.

Не упусти свой шанс! Пиши на почту: irina.andriyanova@goods.ru

Если не нашли себе подходящую вакансию - посетите нашу страницу с рассказом о компании, фотками из офиса и множеством других вакансий - https://prglb.ru/3ejj",3287,0,0,goproglib
652,2019-11-07 10:41:32+00:00,"**Pkger -- встраивание статических файлов в Go
**""Прежде чем подумать о написании строки кода, я рассмотрел проблемы, возникшие у меня с Packr, и способы их решения. Решения этих проблем станут требованиями, от которых мне нужно будет работать в обратном направлении"", — [статья Марка Бейтса](https://blog.gobuffalo.io/introducing-pkger-static-file-embedding-in-go-1ce76dc79c65), в которой он не только в текстовой форме объявил о проекте, но и представил видеопрезентацию для ""нелюбителей читать"". :)",3007,1,0,goproglib
651,2019-11-06 15:24:42+00:00,"[Вот это правильно!](https://github.com/golang/go/wiki/NoPlusOne) Просьба разработчиков оставлять комментарии, только если они несут в себе определенный контекст. Если же проблема уже была обозначена ранее, то стоит просто поставить лайк лучшему ответу или же конструктивно описать ее:
``` issue also affects me on Windows 10 when running all.bat at revision c0ff33.```",2987,0,0,goproglib
650,2019-11-06 10:34:20+00:00,"Всем известно, что Golang исполняется 10. Некоторые его празднуют весь месяц, юбилей всё-таки! А вы уже празднуете?",3252,0,0,goproglib
649,2019-11-05 10:11:14+00:00,"**Публикация Go модулей
**Узнайте, как создавать версии и публиковать модули [в блоге Go](https://blog.golang.org/publishing-go-modules).",3677,0,0,goproglib
648,2019-11-04 10:08:16+00:00,"**Go-фреймворки
**Мы собрали несколько востребованных фреймворков, которые позволят познакомиться с фуллстек-разработкой на примерах.

[gin-gonic
](https://github.com/gin-gonic/gin)Gin — это веб-фреймворк HTTP, написанный на Go (Golang). Он имеет API, похожий на Martini, с гораздо лучшей производительностью — до 40 раз быстрее. Если вам нужна потрясающая производительность, принесите себе немного Gin.

[buffalo
](https://gobuffalo.io/en/)Экосистема веб-разработки Go, которая разработана, чтобы сделать вашу жизнь проще.

[rest-go-mux-pq
](https://github.com/AmundsenJunior/rest-go-mux-pq)Пример REST API в Go с использованием PostgreSQL и gorilla / mux из учебника по SemaphoreCI.

[microservice
](https://github.com/claygod/microservice)Эта библиотека предоставляет простую структуру микросервиса, которая включает в себя конфигуратор, регистратор, метрики и, конечно, обработчик.",4732,0,0,goproglib
647,2019-11-03 10:09:33+00:00,"**Go in Action
**[Go in Action](https://www.amazon.com/Go-in-Action-dp-B07KRNPBHH/dp/B07KRNPBHH/ref=mt_audio_download?_encoding=UTF8&me=&qid=1572773921) знакомит с языком Go, который ведет вас от любознательного разработчика к гуру Go. Книга начинается с введения уникальных особенностей и концепций игры в Go. Затем вы получите практический опыт написания реальных приложений, включая веб-сайты и сетевые серверы, а также методы манипулирования и преобразования данных на скоростях, которые заставят ваших друзей ревновать.

Эта аудиокнига содержит информацию о:
1) спецификации и реализации языка,
2) системе типов Go,
3) внутренних структурах данных Go,
4) тестировании и бенчмаркинге,

В этой книге предполагается, что вы работающий разработчик, владеющий другим языком, таким как Java, Ruby, Python, C # или C ++.",3739,0,0,goproglib
645,2019-11-02 10:09:50+00:00,"**Немного о** **TinyGo**
[TinyGo](https://www.linux.org.ru/news/development/15023050) – компилятор, который используют в таких областях, как микроконтроллеры, WASM, а также разработки утилит командной строки. К примеру, Arduino в настоящее время работает с TinyGo на постоянной основе.

Компилятор использует утилиты и библиотеки, написанные в проекте Go, при этом предоставляя альтернативный метод компиляции программ на основе наработок проекта LLVM.

TinyGo занимает заметное место в секторе оборудования с открытым исходным кодом. ",3286,0,0,goproglib
644,2019-11-01 19:01:10+00:00,"**Несколько полезных ссылок для новичка и не только ;)**

[Примеры приложений на Go](https://gobyexample.ru/)
[История языка и интересные факты](https://habrahabr.ru/post/326798/)",3415,0,0,goproglib
643,2019-11-01 14:40:12+00:00,"**Трендовые go-репозитории на github**

Какие репозитории считаются наиболее впечатляющими? Нескольно репозиториев на сегодняшний день по версии github:

 [GoAdminGroup / go-admin](https://github.com/GoAdminGroup/go-admin) — фреймворк для создания админки за 10 минут.

[kubernetes / autoscaler](https://github.com/kubernetes/autoscaler) — компоненты автомасштабирования для Kubernetes.

 [ipfs / go-ipfs](https://github.com/ipfs/go-ipfs) — IPFC имплементация на go.",3372,0,0,goproglib
642,2019-10-25 18:09:24+00:00,"[​​](https://telegra.ph/file/318b00a31a953939e04f9.jpg)**Практика написания модульных тестов 
**
Unit-тесты пишутся в теории достаточно просто, но когда дело доходит до практики, всплывают нюансы из-за отсутствия моков и ассертов в языке Go.

[Читай, какие именно](https://eax.me/golang-unit-testing/)",4251,0,0,goproglib
641,2019-10-25 07:29:06+00:00,"[​​](https://telegra.ph/file/5b62d6dbde5b83bbf51e1.jpg)​​Работа со звуком

Чтобы лучше понимать обработку звука и научить программу отличать гитарные аккорды, нужно сначала знать, как их записывать и визуализировать.
Будем использовать PortAudio и gnuplot.

[Читать](https://mlesniak.com/post/2018/09/11/go-guitar-/-record-sound/?utm_campaign=Master%20the%20World%20of%20Golang&utm_medium=email&utm_source=Revue%20newsletter)",4096,0,0,goproglib
639,2019-10-22 11:00:46+00:00,"**Коллекция библиотек/ фреймворков для Go

**Golang славится своей богатой коллекцией сторонних модулей. Список не полный, но даже в нем можно найти все необходимое для авторизации, написания ботов, отправки сообщений и прочего.

https://awesome-go.com/#authentication-and-oauth",4098,0,0,goproglib
638,2019-10-21 17:00:30+00:00,"**Внедряем двустороннюю TLS аутентификацию **

TLS в 2019 году - стандарт. Учимся применять его на серверной и клиентской части.


https://venilnoronha.io/a-step-by-step-guide-to-mtls-in-go",4155,0,0,goproglib
637,2019-10-20 17:00:26+00:00,"**Тестируем код в ****#Go****  (часть 2) **
 
Разбираем TestMain функцию в  Go, правильно распоряжаемся данными, пишем тесты  для веб-сервисов. В качестве бонуса статья содержит полезные лайфхаки.  

https://www.ardanlabs.com/blog/2019/10/integration-testing-in-go-set-up-and-writing-tests.html",4355,0,0,goproglib
636,2019-10-20 13:00:53+00:00,"**Тестируем код в ****#Go**** с помощью Докера (часть 1) 
**Разберем, почему нужно использовать Докер, и как на нем прогонять тесты, под руководством опытного инженера, который спроектировал Voyager – первый в мире самолет, облетевший весь мир без остановок и перезаправок 
 https://www.ardanlabs.com/blog/2019/03/integration-testing-in-go-executing-tests-with-docker.html",3886,0,0,goproglib
635,2019-10-18 17:00:42+00:00,"[​​](https://telegra.ph/file/98f04238a3710853fe81c.jpg)[​​](https://telegra.ph/file/4a450fcef4eb9aaa666b1.jpg)**Сетевое программирование

**Одной из ключевых возможностей языка Go является возможность работы с сетевыми сервисами: отправлять запросы к ресурсам в сети и, наоборот, обрабатывать входящие запросы. Основной функционал по работе с сетью представлен пакетом net. Рассмотрим, что можно делать с его помощью.

https://metanit.com/go/tutorial/9.1.php",4553,0,0,goproglib
634,2019-10-17 15:30:03+00:00,"[​​](https://telegra.ph/file/14e23ae8634abe88e5c82.jpg)​​**gRPC-микросервис отправки электронной почты, Часть 2**

Продолжение вчерашнего поста. В этой статье мы разберёмся, как отправлять письма на Go, использовать для этого защищенное соединение и делать массовые рассылки.


https://37yonub.ru/articles/batch-email-sending-using-golang-ru-p2",4291,0,0,goproglib
633,2019-10-16 15:01:34+00:00,"[​​](https://telegra.ph/file/a46fe5eb226e4357cb30c.jpg)​​**gRPC-микросервис отправки электронной почты, Часть 1

**Сегодня напишем на Go маленький микросервис для рассылки email-сообщений. Микросервис будет использовать gRPC для клиент-серверного взаимодействия.
Гайд расчитан на Linux\Mac пользователя.

https://37yonub.ru/articles/batch-email-sending-using-golang-ru#%D1%87%D1%82%D0%BE-%D1%82%D0%B0%D0%BA%D0%BE%D0%B5-grpc

#mac #linux",4486,0,0,goproglib
632,2019-10-15 15:02:35+00:00,"Научись писать производительные веб-сервисы с простым кодом за пару дней!
Осталось всего 2 места на курсе «Стань GO-разработчиком» от Василия Романова (Mail.Ru Group), который стартует уже 17 октября
. http://bit.ly/2IP1hXM

На курсе мы разберем: 
* Основы golang 
* Как делать сервисы с помощью golang 
* Асинхронную работу сервисов
* Разберем на практических задачах как добиваться высокой производительности сервисов

По промокоду  BETTERGO сможешь получить скидку в 5000 рублей только до 16.10, торопись!

. http://bit.ly/2IP1hXM",3929,0,0,goproglib
631,2019-10-15 12:01:03+00:00,"[​​](https://telegra.ph/file/830e1af800270294f178c.jpg)**Блокчейн на Go

**В последнее время на слуху блокчейн и все, что с ним связано. Почему бы не попробовать написать свой на языке Go? Вы узнаете, как поддерживать целостность блокчейна, что такое блоки, и поймете общую терминологию.


https://www.codementor.io/codehakase/building-a-simple-blockchain-with-go-k7crur06v",3423,0,0,goproglib
629,2019-10-14 14:00:53+00:00,"[​​](https://telegra.ph/file/cbf990fef5617c3f9b68c.jpg)Хочешь **бесплатно** научиться программировать?
 
**«Школа 21» - бесплатный** образовательный проект Сбербанка, школа открыта в Москве и в декабре 2019 года открывает свои двери в Казани.
Для поступивших в школу в Казани из других городов будет предоставлено общежитие.
 
Получи junior или senior degree, без учителей, без лекций, без оценок.
**«Школа 21»** работает **24/7** - без графиков и расписания, ты сам определяешь, когда тебе учиться. Поступление не зависит от предыдущих знаний, опыта работы, умения программировать и наличия диплома. Поступить в нее может каждый достигший 18 летнего возраста.
 
Набор уже открыт и проходит в игровой форме.
Не теряй время, переходи на сайт Школы, выбери кампус, в котором ты хочешь учиться и подай заявку на обучение до **2 декабря:** https://prglb.ru/568xf",3549,0,0,goproglib
628,2019-10-14 10:00:51+00:00,"[​​](https://telegra.ph/file/0391152df677ee584c0d4.jpg)**Golang как скриптовый язык**

Компания Cloudfare делится советами в написании сценариев для Linux именно на Go. 

https://blog.cloudflare.com/using-go-as-a-scripting-language-in-linux/",3215,0,0,goproglib
627,2019-10-13 17:00:52+00:00,"[​​](https://telegra.ph/file/b028b0581113011c9668f.jpg)[​​](https://telegra.ph/file/ce2a8633a00410bfa8186.jpg)**GoPress - пишем CMS на Go**

Wordpress - хорошая штука, но всегда хочется лучше. В нем постоянно находят уязвимости, и это факт. Более того, Golang + дополнительные библиотеки позволяют сделать собственную систему.

https://golangdev.wordpress.com/",3284,0,0,goproglib
626,2019-10-13 14:00:43+00:00,"[​​](https://telegra.ph/file/c79e2d207cb31a333cbcc.jpg)[​​](https://telegra.ph/file/616867cbe6e1029b714a5.jpg)**Хеширование паролей

**Передавать пароли в plaintext формате небезопасно, поэтому их нужно шифровать. По ссылке сниппет с применением техники шифрования. Будем использовать инструмент под названием bcrypt.

https://gowebexamples.com/password-hashing/

#security #hashing",3079,0,0,goproglib
625,2019-10-11 11:00:45+00:00,"[​​](https://telegra.ph/file/7c823d3dd9778307397de.jpg)**Туториал по Golang для новичков**

Если вы только начинаете свой путь в go, тогда эта статья для вас. Вы узнаете о структуре языка в целом (что такое packages, workspaces, какие есть data types).

https://milapneupane.com.np/2019/07/06/learning-golang-from-zero-to-hero/",4071,0,0,goproglib
624,2019-10-10 12:21:20+00:00,"[​​](https://telegra.ph/file/c33e673049807cfccbf03.jpg)[​​](https://telegra.ph/file/7835c21f08d2568d92fb2.jpg)**Функция vs Метод**

Как отличить функцию от метода в языке golang, ключевые особенности и где их применять.

https://www.sohamkamani.com/blog/golang/functions-vs-methods/",3687,0,0,goproglib
623,2019-10-08 14:42:13+00:00,"[​​](https://telegra.ph/file/b5602133d01aa2c5a8ddf.jpg)Поделись своим опытом и получи приз!
Для тех, кто все пропустил:

Конкурс на
 2 лучших статьи сайте proglib.io
 1 лучший комментарий на сайте proglib.io

Что нужно? Написать статью или оставить комментарий под любой из статей сайта. Победитель выбирается по количеству просмотров и лайков НА сайте. Любители накручивать дисквалифицируются!

Для самых крутых авторов статей мы подготовили подарки:

 1 место - годовая подписка на** ВСЕ **продукты Jetbrains либо издание по архитектуре (""Архитектура программного обеспечения на практике"" или ""Чистый код"", или ""Искусство программирования""), либо любую книгу по желанию.
 2 место - годовая подписка на какой-то один из продуктов Jetbrains либо издание про базы данных (""Рефакторинг баз данных или Эволюционное проектирование""или ""Базы данных: Проектирование, реализация и сопровождение. Теория и практика"", или ""Работа с PostgreSQL. Настройка и масштабирование""), либо любую книгу по желанию.

 А комментатор “не в бровь, а в глаз” получит бумажную книгу на выбор: ""Думай медленно...Решай быстро"" Канемана, ""Музыка мозг. Правила гармоничного развития"" или ""Мозг во сне. Что происходит с мозгом, пока мы спим"", либо любую книгу по желaнию.

— Статьи должны быть по теме сайта, от 4к до 8к знаков, с уникальностью 90%+ без рекламы и брани. Предпочтение туториалам на базе личного опыта, интересным подборкам и обзорам.
— Комментарий должен быть без рекламы и брани.

И да победят лучшие!
Дедлайн конкурса — 18 октября 2019",4077,0,0,goproglib
622,2019-10-07 14:54:21+00:00,"**Какой у вас опыт в коммерческой разработке?**
__public poll__

Нет опыта – 5K
 42%

Более 1 года до 3 лет (включительно) – 3K
 21%

До 1 года (включительно) – 2K
 15%

Более 6 лет – 2K
 12%

Более 3 до 6 лет (включительно) – 1K
 11%

 [13144 people](https://t.me/vote?start=results_2d78a92_0c41df175db488642) voted so far.",3257,0,0,goproglib
621,2019-10-07 12:00:37+00:00,"**Небольшой HTTP debug сервер

**Спойлер: автор разрабатывал приложение, которое общалось по SOAP с сервером. Однако, чтоб сэмулировать его работу, пришлось бы читать исходный код и проводить дополнительные настройки. Решением оказалось создание промежуточного сервера, и нет, это не прокси.

[Читать](https://fale.io/blog/2018/08/31/a-small-http-debug-server-in-go/)",2949,0,0,goproglib
620,2019-10-06 10:01:01+00:00,"[​​](https://telegra.ph/file/b03d216a66d1310b9d360.jpg)**Gobot SDK + DJI drone**

Не поверите, но на Go можно программировать даже дронов! Автор рассказывает, как он сделал подобное с DJI.

https://www.muetsch.io/flying-a-dji-tello-drone-with-go.html",3671,0,0,goproglib
618,2019-10-05 10:01:20+00:00,"[​​](https://telegra.ph/file/e09cad94ade5456775ce6.jpg)**Кросс-компиляция веб-сервиса под микрокомпьютер**

Иногда целевая система не тянет установку компилятора и дополнительных файлов, поэтому приходится собирать код на другой машине. В этом видео: неизвестный с голосом бота Максима и с помощью всемогущего javascript сделает это для микрокомпьютера Black Swift.

https://www.youtube.com/watch?v=iJVaX0H360E",3310,0,0,goproglib
617,2019-10-04 12:01:16+00:00,"**Соцсеть на Go**

Хотели бы вы написать свою соцсеть? Если да, то приступайте к просмотру. Подробный видеоурок от создания протокола до написания клиента.

[Смотреть](https://www.youtube.com/watch?v=GEIKT1jt9iA&list=PLPdkuDuTmwsRA50ppwbFqbf1_Z61Yg2UJ&index=2&t=0s)",3843,0,0,goproglib
616,2019-10-03 11:01:14+00:00,"[​​](https://telegra.ph/file/a6b954e4a467dc524f825.jpg)**API клиент - это просто**

Представьте, что вам нужно написать клиент, который будет обращаться к стороннему API (AWS/Twilio). **Go**  все это может, но нужно знать, как воспользоваться нужными инструментами.

https://blog.gopheracademy.com/advent-2016/http-client/",3620,0,0,goproglib
615,2019-10-02 17:00:53+00:00,"[​​](https://telegra.ph/file/ea99cf28ce4efaa221d09.jpg)**Шаблонизатор экселя для Go

**Когда мы не хотим создавать что-то с нуля, мы пишем шаблонизаторы. Логично. Давайте сделаем это на Go, и нам не придется формировать документы вручную.

[GO-go-go....](https://ivahaev.ru/go-xlsx-templater/)",3413,0,0,goproglib
614,2019-10-01 12:01:01+00:00,"Go для DevOps, DevOps для Go

Сегодня Go стремительно приобретает популярность как язык будущего. Разбираемся, почему он идеально подходит для DevOps.
 https://nuancesprog.ru/p/4773/",4243,0,0,goproglib
613,2019-09-30 11:00:59+00:00,"[​​](https://telegra.ph/file/989aa5f6c359b6e5c69fd.jpg)**Разработка веб-серверов на Go - от простого к сложному **

Эксклюзив от создателя, возможно, известного, возможно, нет, инструмента для пентестинга - Gopfish.

https://m.habr.com/ru/company/skillbox/blog/446454/",3905,0,0,goproglib
612,2019-09-29 10:00:50+00:00,"[​​](https://telegra.ph/file/8232c86ff2c65b2367410.jpg)**Пишем нейросеть на Go с нуля

**Сейчас вы научитесь создавать нейронную сеть на Go для решения задачи классификации. В нашем случае мы будем тренировать модель классифицировать цветы ириса, основываясь на известном датасете Фишера. Этого должно быть более чем достаточно, чтобы решить нашу задачу с большой точностью.

https://tproger.ru/translations/neural-net-from-scratch-in-go/",4194,0,0,goproglib
611,2019-09-28 10:00:49+00:00,"**Локализация с помощью go-i18n

**Библиотека, предоставляющая удобный API для выполнения задач локализации: от перевода файлов до полной автоматизации процедур.

https://phrase.com/blog/posts/internationalisation-in-go-with-go-i18n/",3532,0,0,goproglib
610,2019-09-27 10:00:47+00:00,"**Дженерики в Go?**

Это статья о том, как введение дженериков может изменить Go и почему это будет целесообразным шагом. Здесь также будут затронуты изменения, которые придётся внести в язык для выполнения задуманного.

https://tproger.ru/translations/generics-in-go/",3557,0,0,goproglib
609,2019-09-26 10:30:37+00:00,"**Сервисы на Go в Badoo: как мы их пишем и поддерживаем

**Оказывается, в Badoo есть +-10 сервисов на Go. Разработчики рассказывают, как они все это поддерживают.
Написать такой сервис на Go очень просто: в стандартной библиотеке есть куча инструментов, а если чего-то и не хватает, то на Github есть много модных библиотек для удовлетворения большинства нужд.

https://tech.badoo.com/ru/article/377/servisy-na-go-v-badoo/",3792,0,0,goproglib
608,2019-09-25 13:00:45+00:00,"**Пишем Static Blog Generator

**Продолжаем тему самописного софта на примере SSGs ( static site generators). Вы, скорее всего, наслышаны о Hugo / Jekyll / Gatsby. Пришло время написать что-то свое, но с меньшим функционалом. Будем создавать генератор блогов. Поехали.

https://zupzup.org/static-blog-generator-go/",3625,0,0,goproglib
605,2019-09-24 09:00:56+00:00,"[​​](https://telegra.ph/file/a6d960f60392e3045f2a9.jpg)**Пишем p2p мессенджер со сквозным шифрованием

**Читать отзывы и документацию о языке не достаточно, чтобы научиться на нем писать более менее полезные приложения.
Обязательно для закрепления нужно создать что-то интересное, чтобы наработки можно было бы использовать в других своих задачах.
Статья ориентирована на новичков интересующихся языком go и пиринговыми сетями.

[Приступим](https://www.pvsm.ru/golang/306668)",4638,0,0,goproglib
604,2019-09-23 10:15:18+00:00,"[​​](https://telegra.ph/file/c4fb14109292c934fe819.jpg)**Кросс-компиляция приложений**
Знали ли вы, что разрабатывая приложение на Go на вашем MacBook, вам не обязательно собирать отдельную версию для Linux в отдельной OS, например? С этим прекрасно справится кросс-компиляция, доступная из коробки. Читайте подробный мануал по ссылке.

https://www.yellowduck.be/posts/cross-compile/",3888,0,0,goproglib
603,2019-09-22 12:18:10+00:00,"[​​](https://telegra.ph/file/53811a9de08fd5c67e0ae.jpg)**Go модули с приватными Git репозиториями

**https://dev-gang.ru/article/go-moduli-s-privatnami-git-repozitorijami-4uadzrnilt/

Работаем с приватными репозиториями.
Модули значительно улучшили процесс управления зависимостями в Go. Довольно просто включить определенные версии пакетов Go из общедоступных репозиториев . 
Что, если мы хотим расширить это поведение для импорта пакетов Go из приватных репозиториев ? На самом деле все довольно просто: убедитесь, что у вашего установщика Go есть доступ к приватным репозиториям Git. Но как мы можем это сделать?",3503,0,0,goproglib
602,2019-09-21 10:00:38+00:00,"[](https://t.me/iv?url=https%3a%2f%2fnuancesprog.ru%2fp%2f4894%2f&rhash=31f985290bceda) Переводим всё в Go с его широким функционалом. Реализуем простое решение и учимся использовать специальную волшебную строку.

https://nuancesprog.ru/p/4894",3656,0,0,goproglib
601,2019-09-20 10:00:34+00:00,"В этой статье разбираемся, как стоит и не стоит называть переменные в GO/
Спойлер: вы врядли назовете своих питомцев ""пес"" и ""кот"" и врядли дадите имя переменной после обьявления ее типа. 
[Жми](https://dave.cheney.net/2019/01/29/you-shouldnt-name-your-variables-after-their-types-for-the-same-reason-you-wouldnt-name-your-pets-dog-or-cat)",3547,0,0,goproglib
600,2019-09-19 10:00:15+00:00,"[​​](https://telegra.ph/file/505916c04a34fd7e313e7.jpg)#go 
**Пишем арканоид на Unity. Механика мяча и платформы

**Статья из цикла о написании простой игры на Unity — классического арканоида.

Эффективное использование 2D инструментов, представляемые движком.
 
[Build Arkanoid With Unity: Player and Ball Mechanics](https://gamedevelopment.tutsplus.com/tutorials/build-arkanoid-with-unity-player-and-ball-mechanics--cms-20860)",4077,0,0,goproglib
597,2019-09-18 10:00:16+00:00,"[​​](https://telegra.ph/file/f54e5c6236a5a52a446b2.jpg)#golang
Golang оснащен таким ключевым словом как __""go"" __. С его помощью можно создавать __goroutines__. Не менее важно ставить их на паузу или отключать. Ни один запрос не может длиться вечно. Для этого был разработан Context package, который мы сейчас изучим. 

[Context package](https://blog.golang.org/context)",3506,0,0,goproglib
596,2019-09-17 10:01:15+00:00,"#go

Теории не бывает без практики, так и наоборот, поэтому учимся на примере, как пользоваться If/Else

https://gobyexample.com/if-else",3681,0,0,goproglib
595,2019-09-16 10:01:07+00:00,"#go 
Новички иногда допускают ошибки при написании кода, не подозревая о них. Вот некоторые из них 
https://telegra.ph/Top-oshibok-novichkov-v-Go-09-11",4298,0,0,goproglib
594,2019-09-15 10:01:25+00:00,"**Статья о том**, **как создать ультра-быстрое автодополнение на Go и jQuery. Часть 1.
P.S. Быстрее**,** чем на C/C++,  лучше**,** чем на Java...**
[https://go-auto-complete](https://scotch.io/@Grork/build-ultra-speed-autocomplete-with-go-and-jquery)",4346,0,0,goproglib
591,2019-09-09 15:08:18+00:00,"**Golang разработчик**

Компания Talents In Games разыскивает талантливого Go-разработчика на полный рабочий день. Подробнее на нашем сайте:

https://proglib.io/vacancies/golang-razrabotchik-talents-in-games-2019-09-09",3906,0,0,goproglib
590,2019-09-07 09:28:34+00:00,"**Затарим на работе филе, или Тест на знание IT-сленга**

Давно варитесь в сфере IT? Проверьте, так ли хорошо вы разбираетесь в IT-сленге, или вас еще можно чем-то удивить.

https://proglib.io/tests/zatarim-na-rabote-file-ili-test-na-znanie-it-slenga",4627,0,0,goproglib
589,2019-08-31 09:00:59+00:00,"#book

Настоящее руководство научит вас использовать современную версию MySQL с JSON для хранения больших данных. Автор является опытным проектировщиком баз данных в компании Oracle, и за годы работы применял многочисленные решения по оптимизации работы, с которыми и поделился в этой книге с читателями. В ней вы найдёте множество примеров реальных приложений и советов от автора.

https://t.me/progbook/3710",5519,0,0,goproglib
588,2019-08-28 12:01:16+00:00,"Пишем нейросеть на Go с нуля

В этой статье автор расскажет, как шаг за шагом создать нейронную сеть на Go для решения задачи классификации. Несмотря на то, что здесь рассматривается только одна архитектура сети, код будет достаточно гибким для удобного изменения количества узлов на каждом слое при необходимости.

#статьядня

https://prglb.ru/1oio2",5455,0,0,goproglib
587,2019-08-28 06:54:56+00:00,"#advanced

Как создать и развернуть безопасный REST API с помощью Go, Postgresql, JWT и GORM

Из данного руководства вы узнаете, как разрабатывать и развертывать защищенные API REST с использованием языка программирования Go.

https://prglb.ru/2ts7o",4069,0,0,goproglib
586,2019-08-26 12:01:10+00:00,"#beginner

Понимание структур данных в Golang
Golang приобрел огромные возможности в разработке программного обеспечения за несколько лет после его запуска.

#статьядня
https://prglb.ru/2t43p",4046,0,0,goproglib
584,2019-08-25 12:01:03+00:00,"#библиотека #advanced 

Библиотека Go для создания аутентификации в ваших приложениях через другие социальные сети.

https://github.com/dghubble/gologin",3407,0,0,goproglib
583,2019-08-25 10:01:05+00:00,"#book 

Go — сравнительно молодой язык программирования, выпущенный компанией Google всего 6 лет назад, но уже ставший одним из самых популярных. Его основными преимуществами являются простой и понятный синтаксис, статическая типизация, параллелизм и высокая производительность.

https://t.me/progbook/374",3196,0,0,goproglib
582,2019-08-23 18:56:10+00:00,"Какие существуют юзкейзы для тегов в Go? И на этот вопрос есть ответ:

https://stackoverflow.com/questions/10858787/what-are-the-uses-for-tags-in-go",3491,0,0,goproglib
580,2019-08-22 10:01:27+00:00,"#book

Несмотря на свою молодость, спецификация языка программирования Go позволяет применять его в разных областях разработки, включая также веб и сетевое программирование. Эта книга раскроет аспекты применения языка в разработке сетевой архитектуры, включая объяснения сериализации данных, протоколов уровня приложений и кодировок. Кроме того, автор касается рассмотрения разницы HTTP и HTTPS, веб-сокетов, RPC и многого другого.

https://t.me/progbook/3657",3968,0,0,goproglib
579,2019-08-21 07:44:00+00:00,"**Утомленные яблоком: причины бросить Mac OS и выбрать Linux**

Выбираете между Mac OS и Linux? Загляните под кат: мы подробно расписали – продолжать использовать Linux или переключиться на Mac OS.

https://prglb.ru/40ahy",3682,0,0,goproglib
577,2019-08-19 10:00:55+00:00,"#beginner

Большой список полезных ссылок на ресурсы по изучению Go с нуля.

https://prglb.ru/49eyf",2955,0,0,goproglib
576,2019-08-18 10:43:58+00:00,"#advanced 

Немного о том, как выглядит профессиональная разработка в крупных компаниях.

https://prglb.ru/rn1k",2987,0,0,goproglib
575,2019-08-17 10:01:19+00:00,"#golang #video

Go предоставляет вам современные и мощные функции и возможности по написанию эффективных программ и приложений. Взяв всё лучшее от других языков, создатели Go также не забыли про параллелизм. Спикер в данном видео расскажет вам о популярных паттернах параллельного программирования на Go.

https://bit.ly/2AW7VYS",3111,0,0,goproglib
574,2019-08-17 10:01:19+00:00,"#golang #библиотека 

Библиотека gorilla/mux предоставляет вам простой и эффективный пакет маршрутизации и обработки входящих запросов в вашем веб-приложении.

https://github.com/gorilla/mux",2605,0,0,goproglib
573,2019-08-16 12:01:26+00:00,"#advanced 

Кэширование в Golang.

https://prglb.ru/4vil8",2965,0,0,goproglib
572,2019-08-16 10:01:24+00:00,"#book

С момента своего создания система Git привлекает разработчиков своими мощными и обширными функциями по управлению кодом. Для начинающих программистов, особенно тех, кто никогда ранее не пользовался Linux’ом, Git покажется сложным и запутанным, однако примеры и темы этой знаменитой книги не позволят вам долго искать ответ на свой вопрос. 

https://t.me/progbook/3616",2594,0,0,goproglib
571,2019-08-15 12:00:58+00:00,"#beginner #библиотека

Библиотека для парсинга данных с формы и джсон с http запросов. 

https://github.com/albrow/forms",2799,0,0,goproglib
570,2019-08-15 10:00:55+00:00,"#book

Книга представляет из себя больше формат интервью и содержит множество тем, завязанных на практическом применении языка. Автор объясняет ряд проблем, основанных на рекурсии и массивах, с которыми часто сталкиваются программисты. Рассматривает популярные алгоритмы и способы анализа их сложности. Также в книге вы найдёте ряд изящных решений разных задач.

https://t.me/progbook/3609",2777,0,0,goproglib
569,2019-08-14 12:01:13+00:00,"#docker

Сегодня без докера не обходятся почти ни одно как монолитное, так и микросервисное приложения. Docker позволяет вам чрезвычайно просто настроить рабочую среду и переносить ее как на разные машины, так и в разные окружения. В этом репозитории собраны многочисленные шпаргалки и рецепты по работе с данным инструментом.

https://prglb.ru/1r0sj",3224,0,0,goproglib
568,2019-08-14 10:01:06+00:00,"#book

Сегодня ситуация такая, что ваше приложение либо может остаться вообще без пользователей, либо же обрабатывать передаваемые ими огромные массивы данных. Это руководство научит вас, как создавать веб-приложения на Go с использованием микросервисной архитектуры и облачных технологий. Если вы уже знакомы с основами разработки на Go, вам будет достаточно применить свои знания, чтобы создавать современные приложения в стеке Go и React.

https://t.me/progbook/3606",2868,0,0,goproglib
567,2019-08-13 12:00:50+00:00,"#beginner #regex

Регулярные выражения - это чрезвычайно полезная возможность работать с текстом эффективно и точно. Если вам нужно найти совпадение в большом отрезке текста или даже найти все совпадения по паттерну, вам нужны регулярки. В этом туториале вы познакомитесь с тем, какие есть ф-ции по работе с регулярными выражениями в Go.

https://github.com/StefanSchroeder/Golang-Regex-Tutorial",2724,0,0,goproglib
565,2019-08-12 13:00:49+00:00,"#advanced 

Рефакторим код на Go  и увеличиваем скорость работы программы в 23 раза.

https://prglb.ru/59zhs",2993,0,0,goproglib
564,2019-08-12 10:00:47+00:00,"#advanced #библиотека

Пакет для быстрой сборки и запуска командных приложений на Go.

https://github.com/urfave/cli",2362,0,0,goproglib
563,2019-08-11 12:01:14+00:00,"#beginners 

Давайте посмотрим, чем же Go так красив, что мы его так любим.

https://prglb.ru/1ui87",2544,0,0,goproglib
562,2019-08-11 10:00:48+00:00,"#video #advanced 

Паттерны параллельного программирования на Go.

https://www.youtube.com/watch?v=QDDwwePbDtw",2551,0,0,goproglib
561,2019-08-10 12:01:19+00:00,"#book #sql

Пусть вас не смущает название книги, информации в ней достаточно, чтобы составлять даже самые сложные запросы к базе. Но навык составлять сложные запросы ничего не стоит, если эти запросы неэффективны. Автор же руководства научит вас, как работать с большими данными, при этом не экономя память и время на результат выполнения запроса. Книга пригодится разработчикам любого уровня, так что заслуживает вашего прочтения.

https://t.me/progbook/3582",2608,0,0,goproglib
560,2019-08-10 10:01:14+00:00,"#advanced

Учимся использовать на практике шаблонизацию в Go.

https://prglb.ru/uaou",2516,0,0,goproglib
559,2019-08-09 12:01:17+00:00,"#advanced

Поднимаем mysql базу внутри докер-контейнера. 

https://prglb.ru/48hzv",2570,0,0,goproglib
558,2019-08-09 10:01:17+00:00,"#book #postgresql 

Данные - важная часть любого приложения. Их может собраться так много, что ваше приложение начнёт отказывать в работе при каждом обращении к нему. Чтобы это избежать, нужно использовать эффективные инструменты по манипуляции ими. Один из таких инструментов - СУБД PostgreSQL. Настоящее руководство научит вас пользоваться его важными функциями и возможностями.

https://t.me/progbook/3570

https://t.me/progbook/3571",2447,0,0,goproglib
557,2019-08-08 12:00:55+00:00,"#websocket #advanced #video

Простой туториал по работе с веб-сокетами на Golang.

https://www.youtube.com/watch?v=dniVs0xKYKk",2806,0,0,goproglib
556,2019-08-08 10:00:52+00:00,"#patterns #beginner

Знание и умение пользоваться паттернами проектирования позволяет вам писать легко поддерживаемый и расширяемый код. В этих репозиториях представлены как теоретическое описание паттернов, так и примеры их реализации на языке Go. 

https://prglb.ru/4eu96
https://prglb.ru/1opdp",2677,0,0,goproglib
555,2019-08-07 12:01:02+00:00,"#git #beginners 

Что общего между всеми языками программирования? Конечно Git! Системой контроля версий понадобится пользоваться в любом случае. И чтобы вы не влипли в неприятную ситуацию, наше издание периодически пишем туториалы для новичков. Вот лишь  некоторые из них:

**Полезные советы для начинающих Git-разработчиков**
https://proglib.io/p/git-for-beginner/

**Спаси щеночка – держи свои git-репозитории в чистоте**
https://proglib.io/p/clean-git-repo/

**Git-мастер: 3 простых шага для достижения цели**
https://proglib.io/p/git-master/

**11 концепций и команд git, которые заставят вас плакать**
https://proglib.io/p/painful-git/",3108,0,0,goproglib
554,2019-08-07 10:00:41+00:00,"#advanced #tutorial

Практический гайд по работе с безопасностью в Go. 

https://prglb.ru/4xuhs",2388,0,0,goproglib
552,2019-08-06 13:00:42+00:00,"#book

Nginx — это лёгкий HTTP сервер, работающий на Unix-подобных операционных система. Предназначен для веб-приложений с высоким трафиком, поддерживающий возможность расширения сети. Nginx стал лучшей альтернативой Apache, поскольку предлагает такие преимущества, как высокую скорость загрузки и передачи данных. Из книги вы узнаете, как настроить сервер Nginx, как решать разные проблемы, связанные с нагрузкой, прерывания или отказами в работе. Книга подходит как для начинающих программистов, являясь исчерпывающим руководством по технологии, так и отличным справочным руководством для профессиональных разработчиков. 

https://t.me/progbook/3551",2528,0,0,goproglib
551,2019-08-06 05:59:00+00:00,"**По каким темам вам хотелось бы больше материалов?**
__anonymous poll__

Паттерны проектирования, применяемые в Go – 119
 32%

Разработка микросервисов – 78
 21%

Работа с Docker, RabbitMQ, веб-сокетами и т.д. – 71
 19%

Веб-разработка – 38
 10%

Видео, статьи и книги для продвинутых – 26
 7%

Обзор популярных библиотек и репозиториев – 22
 6%

Видео, статьи и книги для начинающих – 18
 5%

 372 people voted so far.",2420,0,0,goproglib
549,2019-08-05 10:01:01+00:00,"#book

Go - это простой современный язык программирования, реализующий новые технологии и принципы разработки приложений. В то же время авторы языка постарались оставить в Go всё лучшее, что было у его предшественников. Настоящее руководство научит вас использовать параллелизм в веб-приложениях, работать с JSON и XML файлами, а также реализовывать популярный шаблон проектирования dependency injection. Помимо этого вы узнаете, как увеличить эффективность приложения, тестировать его и работать с фреймворками. 

https://t.me/progbook/3545",2500,0,0,goproglib
548,2019-08-04 12:00:36+00:00,"#docker #tests

Пишем поддерживаемые тесты, используя контейнеры Docker. Примеры представлены на языках Go и Java.

https://prglb.ru/18ixk",2698,0,0,goproglib
547,2019-08-04 10:00:36+00:00,"#book

Если вам нужно быстро научиться работать с NoSQL базами данных, понять разницу между реляционными и документоориентированными СУБД и ускорить взаимодействие вашего приложения с данными, то эта книга поможет вам ответить на все вопросы и поможет приступить к работе с MongoDB. Вместе с авторами вы установите Mongo, настроите её для работы и выполните свои первые команды. Книга ориентирована на начинающих разработчиков и администраторов, но при этом вы должны понимать принципы работы баз данных вообще.

https://t.me/progbook/3539",2449,0,0,goproglib
546,2019-08-03 12:00:36+00:00,"#библиотека #advanced 

Osin — это библиотека для работы с протоколом OAuth2. Если вы не слышали о нём, этот протокол позволяет пользователям авторизовываться через сторонние приложения.

https://github.com/openshift/osin",2430,0,0,goproglib
545,2019-08-03 10:00:42+00:00,"#advanced 

Если коротко, монады используют для связывания функций, а если нужно подробно — читайте статью.

https://awalterschulze.github.io/blog/post/monads-for-goprogrammers/",2354,0,0,goproglib
544,2019-08-02 12:00:56+00:00,"#advanced

В этой статье автор расскажет о том, почему он считает, что дженерики надо добавить в Go и как это сделать.

https://blog.golang.org/why-generics",2434,0,0,goproglib
543,2019-08-02 10:00:53+00:00,"#docker #book

В разработке программного обеспечения, как и в любой другой программной области, существуют свои хорошие практики и стандарты, реализуя которые, можно сделать процесс разработки более удобным и эффективным. Это руководство расскажет вам про популярную сегодня технологию Docker, цель которой - автоматизировать создание, развёртывание и управление приложениями. Вы пройдёте путь от установки до первого использования Docker в создании собственных проектов.

https://t.me/progbook/3526

https://t.me/progbook/3527",2301,0,0,goproglib
542,2019-08-01 12:00:42+00:00,"#book

Очередное руководство по Git для тех, кто ещё не убедился в его большой пользе для повседневной разработки. Git позволяет поддерживать разные версии вашего проекта и переключаться между ними в любой момент времени, а также с помощью него над проектом может работать множество разработчиков совместно или параллельно. Настоящая книга представляет собой практическое справочное руководство по основам данной СКВ с решением многочисленных ежедневных проблем.

https://t.me/progbook/3522",2451,0,0,goproglib
541,2019-08-01 10:01:09+00:00,"#beginner

Основы Go для самых начинающих. Вы узнаете, что такое Go, какие у него особенности, где часто применяется и многое другое.

https://prglb.ru/4up53",2323,0,0,goproglib
540,2019-07-31 12:00:52+00:00,"#beginner

В этой статье автор покажет, как писать простые приложения для командной строки. 

https://bit.ly/2MfpC9V",2601,0,0,goproglib
539,2019-07-31 10:00:58+00:00,"#book

Healthy SQL - это книга о том, как проектировать правильные базы данных, как соблюдать нормальные формы структур таблиц и как справляться с большими нагрузками. Книга наполнена практическими советами и примерами правильно спроектированных баз данных. Также вы узнаете о таких расширенных темах языка как джоины, индексы и очереди.

https://t.me/progbook/3513",2395,0,0,goproglib
538,2019-07-30 12:00:44+00:00,"#advanced #библиотека 

Валидатор структур и полей в Golang.

https://github.com/go-playground/validator",2481,0,0,goproglib
537,2019-07-30 10:01:06+00:00,"#advanced

Пишем юнит-тесты для REST API приложений на Go.

https://prglb.ru/lqqh",2550,0,0,goproglib
536,2019-07-30 10:01:01+00:00,"#book

Современная культура представляет хакеров как социальных героев, что привело к появлению целого ряда стереотипов, влияющих на популярность данного направления в разработке среди начинающих программистов. Это руководство расскажет вам про основы сетевого программирования и скриптинга в среде Kali Linux.

https://t.me/progbook/3509",2215,0,0,goproglib
535,2019-07-29 12:00:49+00:00,"#docker #advanced 

Как докеризировать ваш проект на Go? Узнаем из следующей статьи.

https://bit.ly/2DDcfxI",2527,0,0,goproglib
534,2019-07-29 10:00:57+00:00,"#beginner #web

Небольшой онлайн-туториал по основам создания веб-приложений на Go. Вы узнаете про роутинг, основы Request/Response, обработку форм и многое другое.

https://gowebexamples.com/",2405,0,0,goproglib
533,2019-07-28 12:00:53+00:00,"#beginners #rest

Создаём безопасное REST API приложение с использованием Go, Postgres, JWT и GORM.

https://bit.ly/2AOdZ4f",2837,0,0,goproglib
532,2019-07-28 10:00:56+00:00,"**Вдарим по базам: актуальные и полезные книги по SQL**

Если ты разработчик, то обязан знать хотя бы одну СУБД. Держи эти книги по SQL и изучай: пришло время познать силу работы с данными.

https://prglb.ru/4d12t",2342,0,0,goproglib
531,2019-07-27 12:00:55+00:00,"#advanced

Отправляем смс-сообщения через Go с помощью сервиса Twillio. 

https://prglb.ru/3c9ne",2488,0,0,goproglib
530,2019-07-27 10:00:48+00:00,"#advanced

Работаем с .tar файлами в Go. 

https://prglb.ru/1uy50",2239,0,0,goproglib
529,2019-07-26 13:00:35+00:00,"#advanced

В этой статье автор попробует вас отговорить использовать стандартный HTTP-клиент для Go на продакшене. 

https://prglb.ru/2n7nk",2492,0,0,goproglib
528,2019-07-26 10:00:26+00:00,"#book #sql

Несмотря на то, что SQL может быть понятен любому программисту благодаря своему синтаксису, писать на нём производительные запросы является результатом больших навыков и знаний. Эта книга уделяет подробное внимание правильному проектированию баз данных, оптимизации запросов и обзору популярных паттернов взаимодействия с базами данных.

https://t.me/progbook/3486",2444,0,0,goproglib
527,2019-07-25 12:30:17+00:00,"#advanced

Используем контейнеры Docker для dev-разработки. 

https://prglb.ru/11vxu",2564,0,0,goproglib
526,2019-07-25 10:00:56+00:00,"#advanced

А вы слышали про интерпретатор Yaegi? В статье авторы расскажут про его особенности и преимущества. 

https://prglb.ru/1c8eo",2284,0,0,goproglib
525,2019-07-24 12:00:47+00:00,"#rabbitmq

Обрабатываем очереди на Go и RabbitMQ.

https://prglb.ru/2q3pb",2620,0,0,goproglib
524,2019-07-24 10:00:26+00:00,"#book

Если у вас уже есть опыт в программировании на бэкенде, освоить язык Go вам будет проще простого. Тем не менее, несмотря на простоту, в языке собраны многочисленные полезные функции, операторы и современные технологии и тенденции в программировании. Это руководство предназначено для тех, кто уже знаком с Go, но хочет посмотреть на лучшие практики и рецепты программирования на нём.

https://t.me/progbook/3473",2538,0,0,goproglib
523,2019-07-23 15:30:13+00:00," Python для анализа данных
25 июля / 17:00 / онлайн / бесплатно
 
Если вам не хватает навыков работы с данными, сделайте первый шаг и познакомьтесь с языком программирования Python и его возможностями для аналитики.
 Зачем идти:
— Вы узнаете особенности языка Python для аналитики;
— Узнаете, какие существуют библиотеки для Python, используемые в анализе данных;
— Изучите множество кейсов;
— Напишите свой первый код.
 
Запишитесь по ссылке:
http://netolo.gy/e0V

 Зачем аналитикам SQL
31 июля / 19:00 (Мск) / онлайн / бесплатно
 
Знание языка запросов SQL позволяет оперативно решать аналитические задачи. Аналитику теперь не нужно тратить время на привлечение разработчиков, потому что получить, обработать и скомпоновать нужные данные он может самостоятельно.
Зачем идти:
— Вы узнаете, где и для чего используется SQL;
— Поймете, какие задачи может решать и какие аналитические функции имеет SQL;
— Выучите простые SQL-команды для аналитика;
— Разберете практический кейс.
 
Запишитесь по ссылке:
http://netolo.gy/e00",2418,0,0,goproglib
522,2019-07-23 10:00:31+00:00,"#beginner

Полный обзор на создание веб-приложений на Go.

https://prglb.ru/4xpx1",2411,0,0,goproglib
521,2019-07-22 12:00:20+00:00,"#book #sql

Не взирая на простоту и доступность SQL, бывают запросы или плохо спроектированные базы данных, при которых разработчику приходится сильно постараться, чтобы получить нужные данные. Настоящее руководство рассчитано на начинающих разработчиков и демонстрирует не только основы SQL, но и лучшие практики работы с ним.

https://t.me/progbook/3460",2530,0,0,goproglib
520,2019-07-22 10:00:23+00:00,"#advanced

Основы и возможности параллельного программирования в Go. 

https://prglb.ru/44kq",2443,0,0,goproglib
519,2019-07-21 12:00:37+00:00,"#advanced #oop

Если вы ещё не использовали такую интересную возможность языка Go как композиция интерфейсов, время посмотреть, что это такое и где можно применить. 

https://bit.ly/2LSmFvI",2542,0,0,goproglib
518,2019-07-21 10:00:46+00:00,"#beginner

Быстрый деплой простого Go приложения.

https://prglb.ru/4j6wl",2329,0,0,goproglib
517,2019-07-20 12:00:42+00:00,"#book

Несмотря на лёгкий и понятный синтаксис и простые ключевые слова, SQL может решать достаточно сложные задачи работы с данными. К сожалению, начинающему разработчику сложно найти примеры хороших практических задач, наиболее приближённых к реальным проектам. В этом руководстве вы найдёте около шестидесяти задач разной степени сложности, взятых из опыта автора книги. 

https://t.me/progbook/3443",2411,0,0,goproglib
516,2019-07-20 10:00:11+00:00,"#библиотека #advanced 

Удобная библитека по работе с json и yaml данными.

https://github.com/olebedev/config",2243,0,0,goproglib
515,2019-07-19 12:00:28+00:00,"#advanced 

Каналы (channels) представляют собой инструменты коммуникации между горутинами. В этой статье вы узнате, как устроены эти самые каналы.

https://bit.ly/2b8Z1I3",2621,0,0,goproglib
514,2019-07-19 10:00:26+00:00,"**Проекты для оттачивания скиллов: 12 лучших идей**

Для развития навыков и улучшения возможности трудоустройства необходимо создавать проекты. Держите подборку для оттачивания скиллов.

https://prglb.ru/3q4u",2413,0,0,goproglib
513,2019-07-18 12:00:40+00:00,"#beginner

Топ 10 ошибок, которые часто допускают разработчики на проектах на Golang.

https://prglb.ru/1293n",2619,0,0,goproglib
512,2019-07-17 12:00:40+00:00,"#advanced

В этой статье рассматривается Godog - официальный пакет фреймворка Cucumber для Behavior-driven Development. 

https://prglb.ru/2f193",2676,0,0,goproglib
511,2019-07-17 10:00:46+00:00,"#advanced

Кэшируем запросы к базе данных на Go. 

https://prglb.ru/3v6mz",2441,0,0,goproglib
510,2019-07-16 12:00:32+00:00,"#advanced #библиотека

JobRunner - это инструмент для реализации отложенных задач, очередей со встроенной аналитикой.

https://prglb.ru/3eikw",2506,0,0,goproglib
509,2019-07-16 10:00:41+00:00,"#book

Если вы уже прошли курс начинающего программиста на языке Golang и знаете про основы создания современных веб-приложений, следующее небольшое справочное руководство  -  это то, что вам нужно, чтобы начать создавать качественные веб-приложения на данном языке. Несмотря на маленький объём, книга охватывает самые нужные темы для профессиональной разработки.

https://t.me/progbook/3420

https://t.me/progbook/3421",2524,0,0,goproglib
508,2019-07-15 12:00:34+00:00,"#библиотека #beginners 

GraphQL — это язык запросов, используемый для описания запрашиваемых данных на клиенте. Данная библиотека является реализацией GraphQL для языка Go.

https://github.com/graphql-go/graphql",2579,0,0,goproglib
507,2019-07-15 10:00:37+00:00,"#git

**Git-мастер: 3 простых шага для достижения цели**

Расскажем, как звание Git-мастер поможет в изучении программирования, и почему контроль версий важно использовать в работе постоянно.

https://prglb.ru/2thq1",2446,0,0,goproglib
506,2019-07-14 12:00:36+00:00,"#advanced

Система миграций базы данных для Go.

https://github.com/golang-migrate/migrate",2501,0,0,goproglib
505,2019-07-14 10:00:37+00:00,"#book

Если у вас уже есть опыт программирования на других языках и вы хотели бы изучить другую технологию, то вам стоит обратить внимание на популярный язык Go, а эта книга поможет вам быстро выучить его концепции и принципы. Руководство представляет из себя интенсивный и всесторонний курс по Go, затрагивая сложные темы языка, такие как параллелизм, система типов и тестирование.

https://t.me/progbook/3405

https://t.me/progbook/3406",2409,0,0,goproglib
504,2019-07-13 12:00:34+00:00,"#video #rest

Пишем REST API клиент на Go.

https://prglb.ru/ecpd",2586,0,0,goproglib
503,2019-07-13 10:00:45+00:00,"#advanced #machine_learning 

Основы машинного обучения на примере создание игры на Go. 

https://prglb.ru/12459",2617,0,0,goproglib
501,2019-07-12 10:00:29+00:00,"#beginner

Делаем оффлайн-страницу на Go и WebAssembly.

https://prglb.ru/4i9k3",2638,0,0,goproglib
500,2019-07-11 12:01:07+00:00,"#architecture

Если вы только принялись изучать Go, то наверняка не представляете ещё, как должна выглядеть хорошая архитектура приложения. Исправляем данное недоразумение в следующей статье:

https://bit.ly/2AZnGOU",3043,0,0,goproglib
499,2019-07-11 10:01:22+00:00,"#sql #video

Раз Golang хорошо подходит для веб-программирования, ему необходима поддержка функций и пакетов для работы с базами данных. Общие принципы похожи на многие другие языки программирования, тем не менее, давайте посмотрим следюущее видео, чтобы лучше разбираться:

https://www.youtube.com/watch?v=Nh3CJYZZSdc",2410,0,0,goproglib
498,2019-07-10 12:00:09+00:00,"#advanced

Если вы часто или уже постоянно используете Docker, то вам еще один инструмент по визуализации процессов работы контейнерной системы. 

https://github.com/jesseduffield/lazydocker",2526,0,0,goproglib
497,2019-07-10 10:01:08+00:00,"#advanced 

Срезы в Go - это жирные указатели. Разбираемся в теме подробнее вместе с автором.

https://prglb.ru/5h2v7",2423,0,0,goproglib
496,2019-07-09 12:01:21+00:00,"#advanced #библиотека

Клиент для работы с Apache Kafka.

https://prglb.ru/26aw6",2523,0,0,goproglib
495,2019-07-09 10:01:34+00:00,"**Подборка материалов для изучения баз данных и SQL**

Подборка книг, видеокурсов и онлайн-ресурсов для изучения баз данных, основ реляционной теории и языка SQL.

https://prglb.ru/1dis",2529,0,0,goproglib
494,2019-07-08 12:01:16+00:00,"#book

Очередное небольшое обучающее руководство по Go, охватывающее одну конкретную тему, на этот раз  -  базы данных. Если вы уже хорошо знакомы с основами веб-разработки на других языках, данный справочник придётся вам по вкусу: в нём рассматриваются популярные пакеты для работы с СУБД MySQL, примеры простых запросов и работа с подготовленными выражениями.

https://t.me/progbook/3367",2777,0,0,goproglib
493,2019-07-08 10:01:29+00:00,"#book #docker 

Docker стал стандартом управления процессом разработки приложений. Потратив время на его изучение, впоследствии вы сможете безболезненно внедрять Docker в производство крупных приложений и сервисов. Данное руководство хорошо описывает основы по работе с ним, среди которых основы контейнеризации, Docker Compose, Docker Swarm, а также работа с Kubernetes и крупной инфраструктурой.

https://t.me/progbook/3365",2609,0,0,goproglib
492,2019-07-07 12:01:03+00:00,"#web

Хороший онлайн-учебник с примерами создания веб-приложений на Go. Тут вы найдёте много важного: роутинг, request-response, шаблоны, работа с http и проч.

https://gowebexamples.com/",2851,0,0,goproglib
491,2019-07-07 10:01:05+00:00,"#book

Redis - одна из наиболее популярных NoSQL СУБД. Из настоящего руководства вы узнаете, как установить Redis, настроить и работать со структурами данных. Также вы научитесь увеличивать масштабируемость и производительность ваших приложений благодаря встроенным методам эффективного управления данными в Redis. Кроме этого, автор поделится с вами основными советами резервного копирования и восстановления данных в Redis.

https://t.me/progbook/3358",2532,0,0,goproglib
490,2019-07-06 10:01:36+00:00,"#beginner #библиотека

Библиотека для чтения и записи в ini файлы.

https://prglb.ru/4q2v7",2519,0,0,goproglib
489,2019-07-05 12:01:20+00:00,"#advanced

Пишем библиотеку для сериализации на Golang.

https://prglb.ru/30scc",2636,0,0,goproglib
488,2019-07-05 10:01:19+00:00,"**NoSQL базы данных: хранилища и доступность данных**

Рассказываем о NoSQL системах баз данных: что это такое, где такие системы применяются и каких видов бывают. Рассмотрим различные виды хранилищ и 2 теоремы.

https://prglb.ru/46yvh",2461,0,0,goproglib
487,2019-07-04 12:01:24+00:00,"#advanced

Делаем HTTP запросы с помощью Golang.

https://prglb.ru/5o00y",2628,0,0,goproglib
486,2019-07-04 10:01:24+00:00,"#book

Следующее руководство написано для тех, кто до сих пор не может выйти из Vim, и для тех, кому эта шутка уже приелась и Vim  -  их основной инструмент. И правда, этот маленький и невзрачный редактор может слишком много, чтобы им не пользоваться. Данное руководство научит вас использовать все возможности последней версии Vim, а также его более современный и удобный форк Neovim.

https://t.me/progbook/3342",2483,0,0,goproglib
485,2019-07-03 12:01:03+00:00,"#video #beginners 

В этом видеокурсе вы не только выучите синтаксис языка Go, но и научитесь применять методы параллельной разработки, встроенные функции и пакеты:

https://bit.ly/2Le4SPd",2805,0,0,goproglib
484,2019-07-03 10:01:28+00:00,"#book

Go - замечательный молодой язык программирования, позволяющий вам делать веб-приложения эффективнее, чем на любом другом языке, за счёт своих низкоуровневых возможностей, многопоточности и компилируемости. Если вы задаётесь вопросом о том, что уже было написано на Go, чтобы этот язык стоило изучить, то вам ответят следующее: множество веб-приложений, утилит и Docker. Это руководство не научит вас писать сложные портативные или консольные программы, но из него вы узнаете, как писать веб-приложения.

https://t.me/progbook/3334",2560,0,0,goproglib
483,2019-07-02 10:01:17+00:00,"[​​](https://telegra.ph/file/4d9b24c6d4d8a3851211f.jpg)Лучшие вакансии для Go & Rust разработчиков за последний месяц!️
Специалисты из [New.HR](https://newhr.ru/) вручную собрали для вас самые интересные вакансии из проверенных ИТ и Диджитал компаний
 
Вакансии от 30+ компаний: Lamoda, [Tutu.ru](https://www.tutu.ru/), Gett, Avito, Wheely, Ozon, [Aviasales.ru](https://www.aviasales.ru/) и др.
 
Смотреть тут: https://new.hr/3135
 
Ребята каждый день постят новые вакансии в @forgoandrust",2764,0,0,goproglib
482,2019-07-02 08:01:24+00:00,"#video #beginner 

Если вы соскучились по интересным заданиям и практическим упражнениям, в этом курсе они есть. Например, вы научитесь работать с авторизацией, СУБД PostgreSQL, MVC, REST и многим другим.

https://bit.ly/2RIBtTf",2537,0,0,goproglib
481,2019-07-01 12:01:13+00:00,"#advanced

Возможно, на раннем этапе программирования вы не используете паттерны и пишете тяжело читаемый и сложно связанный код. Эта статья познакомит вас с методами исправления связности, которые помогут вам легко рефакторить и писать код. 

https://prglb.ru/2hgw2",2414,0,0,goproglib
480,2019-07-01 10:01:11+00:00,"#book

Неважно, какое именно приложение вы пишете  -  простой блог или крупный интернет-магазин, вам не обойтись без хорошей архитектуры базы данных. Это руководство познакомит вас с самыми известными и часто используемыми паттернами проектирования логики бизнес-задач с использованием MongoDB. Все примеры приведены на языках Python и JavaScript.

https://t.me/progbook/3326",2293,0,0,goproglib
479,2019-06-30 12:00:57+00:00,"#book

Go - современный язык программирования, разработанный корпорацией Google с целью сделать простой по сравнению с другими язык программирования, но не менее эффективный при разработке программного обеспечения и веб-приложений. Из руководства вы узнаете о том, как установить Go и настроить рабочее окружение, как использовать сторонние библиотеки и как пользоваться всеми возможностями языка.

https://t.me/progbook/3319

https://t.me/progbook/3320",2349,0,0,goproglib
478,2019-06-30 10:01:13+00:00,"#book

Таким промышленным гигантам, как Mozilla, VMware, Google, просто необходима система обмена сообщениями между компонентами программной системы, чтобы вовремя исправлять ошибки и следить за поведением приложения в целом. Авторы подготовили для вас профессиональное руководство по основам RabbitMQ, дав описание основным его характеристикам, таким как производительность и масштабируемость, и приведя примеры реального использования.

https://t.me/progbook/3315",2280,0,0,goproglib
477,2019-06-29 12:01:08+00:00,"#advanced #библиотека

Библиотека для хранения настроек приложения в переменных окружения.

https://github.com/vrischmann/envconfig",2198,0,0,goproglib
476,2019-06-29 10:01:14+00:00,"#advanced

Полезный туториал по основам выделения памяти в Go.

https://prglb.ru/11g1g",2323,0,0,goproglib
475,2019-06-28 12:00:58+00:00,"#advanced

Почему Go хорош для микросервисов, узнаем из следующей статьи.

https://prglb.ru/4o2my",2417,0,0,goproglib
474,2019-06-28 10:00:54+00:00,"#advanced #testing

Основы юнит-тестирования Go-приложений на реальных примерах. 

https://prglb.ru/ee66",2418,0,0,goproglib
473,2019-06-27 12:01:12+00:00,"#advanced 

Подробная статья про логирование, интерфейсы и аллокации в Go.

http://commaok.xyz/post/interface-allocs/",2502,0,0,goproglib
472,2019-06-27 10:01:11+00:00,"#advanced

Обзор на PushMan: отправка более миллиона сообщений в режиме реального времени.

https://prglb.ru/th7e",2301,0,0,goproglib
471,2019-06-26 15:40:43+00:00,"[​​](https://telegra.ph/file/84f137f2151c41a7b88d8.jpg)‍ Стань middle-разработчиком по Go и зарабатывай в 1.5-2 раза больше!

Стартует новый запуск курса от Василия Романова (Почта Mail.Ru)
http://bit.ly/2Fz6GRk

На курсе вы разберете: 
** Основы golang 
** Как делать сервисы с помощью golang 
** Асинхронную работу сервисов
** На практических задачах узнаете как добиваться высокой производительности сервисов

За 2 месяца вы освоите профессию на уровне middle-специалиста.
Успешно прошедшим курс гарантировано собеседование в ведущих компаниях!

Успейте записаться, на курсе всего 30 мест.",2479,0,0,goproglib
469,2019-06-26 10:00:55+00:00,"#advanced 

Обзор функций округления в нашем любимом Go. 

https://www.cockroachlabs.com/blog/rounding-implementations-in-go/",2268,0,0,goproglib
468,2019-06-25 12:01:11+00:00,"#video #advanced 

На Go можно делать какие угодно приложения, в том числе и сетевые. В этом видео мы познакомимся с тем, как использовать веб-сокеты на Go.

https://www.youtube.com/watch?v=CIh8qN7LO8M",2528,0,0,goproglib
467,2019-06-25 10:01:09+00:00,"#advanced

Разбираем основные структуры данных в Go. 

https://prglb.ru/2t43p",2430,0,0,goproglib
466,2019-06-24 12:00:58+00:00,"#advanced

Изучаем взаимодействие Golang с GraphQL.

https://prglb.ru/19815",2419,0,0,goproglib
465,2019-06-24 10:01:03+00:00,"#advanced

Немного об опыте изучения Golang. 

https://prglb.ru/3f47y",2228,0,0,goproglib
464,2019-06-23 12:01:07+00:00,"#book

Эта книга представляет собой исчерпывающее руководство для желающих изучить функциональное программирование на примере языка программирования Go. Книга поделена на несколько частей: первая часть рассказывает о чисто функциональном программировании, управлении коллекциями и использовании функций более высокого порядка, а вторая - про шаблоны проектирования функциональной парадигмы.

https://t.me/progbook/3267",2394,0,0,goproglib
463,2019-06-23 10:01:01+00:00,"#book

Микросервисы - это такой тип архитектуры, при котором вы разделяете ваше приложение на независимые и самодостаточные сервисы, работающие отдельно и не влияющие на другие сервисы. Настоящее руководство рассматривает создание микросервисных приложений и подойдёт опытным разработчикам и архитекторам крупных коммерческих приложений.

https://t.me/progbook/3265",2277,0,0,goproglib
462,2019-06-22 12:01:00+00:00,"#advanced

Простые техники оптимизации Go приложений.

https://prglb.ru/1foc",2412,0,0,goproglib
461,2019-06-22 09:01:26+00:00,"#book

Данное руководство рассматривает HTTP/2, один из основных сетевых протоколов. Вы узнаете про то, как разрабатывался данный протокол, про обратную совместимость, основные характеристики и приемы работы с ним. Также в конце вас ждет небольшой обзор HTTP/3, который должен выйти совсем скоро.

https://t.me/progbook/3263",2327,0,0,goproglib
460,2019-06-21 12:01:05+00:00,"**REST API приложение на Go: пошаговый туториал**

В этой статье мы рассмотрим, как создать REST API приложение на языке Go: лучшая пошаговая инструкция с использованием популярной архитектуры.

https://prglb.ru/k4dn",2744,0,0,goproglib
459,2019-06-21 10:00:59+00:00,"#advanced #testing

Пишем тесты на Go с помощью Ginkgo. 

https://prglb.ru/rjhi",2286,0,0,goproglib
458,2019-06-20 12:01:01+00:00,"#advanced #библиотека

Данная библиотека предоставляет многочисленные реализации различных структур данных на Golang: контейнеры, списки, мапы, стеки, хэш-таблицы и многое другое.

https://prglb.ru/3ixce",2354,0,0,goproglib
457,2019-06-20 10:01:08+00:00,"#advanced #testing

Особенности юнит-тестирования на Golang.

https://prglb.ru/5625g",2358,0,0,goproglib
456,2019-06-19 12:00:55+00:00,"#beginner #библиотека

Быстрая библиотека для парсинга сайтов на Golang.

https://prglb.ru/4yrq7",2529,0,0,goproglib
455,2019-06-19 10:00:53+00:00,"#beginner

Основы обработок ошибок на Go: ключевые слова `defer`, `panic` и `recover`.

https://prglb.ru/590yf",2309,0,0,goproglib
454,2019-06-18 12:00:44+00:00,"#advanced

Анатомия массивов в Go. 

https://prglb.ru/1sdfn",2501,0,0,goproglib
453,2019-06-18 10:00:45+00:00,"#advanced

Создаем REST API приложение на Go, используя chi, MongoDB и другие полезные инструменты.

https://prglb.ru/4j7dq",2482,0,0,goproglib
452,2019-06-17 12:00:43+00:00,"#beginners 

Статья в двух частях, в которой автор расскажет про интересные возможности обработки ошибок в Go.

**Часть 1:**
https://bit.ly/2CG8Zkv

**Часть 2:**
https://bit.ly/2LEcmLJ",2350,0,0,goproglib
451,2019-06-17 10:00:40+00:00,"#book

Linux на данный момент остаётся одной из самых популярных ОС для разработки и системного администрирования. Почему это так? Почти все программы для Linux - бесплатны. На Linux вам почти не удастся занести вирусов и, соответственно, Linux работает и по этой причине, и потому, что многие программы для Linux можно оптимизировать под себя, намного быстрее Windows. А в этом руководстве вы познакомитесь с Linux, с его экосистемой, терминалом, важными командами и программами для разработки.

https://t.me/progbook/3220",2237,0,0,goproglib
450,2019-06-16 12:00:39+00:00,"#beginner

Как работает `defer` в Go.

https://prglb.ru/1bfg2",2427,0,0,goproglib
449,2019-06-16 10:00:43+00:00,"#book

Существует одно простое правило в программировании: если разработчик хорошо разбирается в одном языке, свободно пишет приложения самостоятельно и знает весь жизненный цикл разработки, то изучить другой язык не составит труда. В связи с этим появился новый и эффективный подход к изучению других языков - изучение в сравнении. Так, авторы данного руководства подготовили материал по изучению языка Go для тех, кто разбирается в JavaScript. Вы познакомитесь с конструкциями и функциями в Go на примере тех, которые знаете из JavaScript.

http://www.pazams.com/Go-for-Javascript-Developers/",2139,0,0,goproglib
448,2019-06-15 12:00:41+00:00,"#advanced #библиотека

Библиотека для работы с кроном.

https://prglb.ru/3qlgr",2378,0,0,goproglib
447,2019-06-15 10:00:40+00:00,"#book

Крупные компании давно оценили возможность потоковой обработки данных и сделали ставку в пользу библиотек, специально предназначенных для этого. Одна из популярных - Kafka. Библиотека достаточно проста в использовании, однако требует установку дополнительных модулей и инструментов. Данное руководство научит вас ориентироваться в Kafka и в том, как её правильно и быстро развернуть.

https://t.me/progbook/3210",2265,0,0,goproglib
446,2019-06-14 12:00:48+00:00,"#book #beginner

Вам достаточно посмотреть на список тем, раскрываемых автором книги, чтобы понять, что вам точно нужно прочитать данное руководство после того, как вы пройдёте курс начинающего Go разработчика. В этом современном справочнике вы узнаете про работу с базами данных, микросервисы, параллельное программирование и построение REST API приложений.

https://t.me/progbook/3205",2705,0,0,goproglib
445,2019-06-14 10:00:42+00:00,"#book #sql

SQLite  -  это простая и лёгкая СУБД, способная заменить мощные MySQL и PostgreSQL при работе с небольшими объёмами данных. Команды SQLite почти ничем не отличаются от уже знакомых вам в СУБД MySQL, однако разобраться в работе некоторых из них всё же стоит. В данном руководстве вы найдёте всю необходимую информацию, чтобы начать использовать SQLite в реальных приложениях.

https://t.me/progbook/3203",2177,0,0,goproglib
444,2019-06-13 12:00:55+00:00,"#advanced

Обрабатываем ошибки в приложениях на Go. 

https://prglb.ru/3i0vc",2384,0,0,goproglib
443,2019-06-13 10:00:50+00:00,"#book #nginx

Nginx - это чрезвычайно мощный веб-сервер, поддерживающий в настоящее время более 40 % всех веб-сайтов и способный обрабатывать одновременно около 10 000 подключений к ней. Эта книга научит вас настраивать веб-сервер и принимать обоснованные дизайнерские решения в разных ситуациях, а также продемонстрирует многочисленные настройки nginx, что позволит вам быстрее почувствовать себя комфортно при работе на боевом сервере.

https://t.me/progbook/3198",2339,0,0,goproglib
442,2019-06-12 12:00:39+00:00,"#advanced #book

Простой хэндлер для обработки ошибок.

https://github.com/pkg/errors",2259,0,0,goproglib
441,2019-06-12 10:00:37+00:00,"#advanced

Ускоряем скрапинг данных с амазона с помощью библиотеки Colly.

https://prglb.ru/2duce",2227,0,0,goproglib
440,2019-06-11 12:01:04+00:00,"#oop

Еще один путь внедрения зависимости в Go. 

https://prglb.ru/1kp6e",2461,0,0,goproglib
439,2019-06-11 10:00:37+00:00,"#book

Если вы работаете в команде или даже один, вам необходимо контролировать свой код, выполнять поставленные задачи, следить за совместимостью и много чего еще, с чем отлично помогает справиться система контроля версий Git. В этом руководстве вы познакомитесь с основными командами и проблемами, которые он решает.

https://t.me/progbook/3180",2222,0,0,goproglib
438,2019-06-10 13:00:34+00:00,"#advanced #библиотека

Библиотека для конфигурации через Yaml или JSON форматы.

https://github.com/olebedev/config",2358,0,0,goproglib
437,2019-06-10 10:00:58+00:00,"#advanced

Разбираем самую быструю библиотеку для выполнения web-assembly кода - wasmer.

https://prglb.ru/a85w",2261,0,0,goproglib
436,2019-06-09 12:00:34+00:00,"**Как DevOps поможет всем: идеи, инструменты, развитие**

DevOps – это распиаренный бренд, методология разработки, философия или же часть корпоративной культуры? Разбираемся вместе.

https://prglb.ru/5uj4y",2311,0,0,goproglib
435,2019-06-09 10:00:49+00:00,"#book 

PostgreSQL невероятно мощная и гибкая СУБД, она имеет схожий функционал и синтаксис с другой популярной СУБД, MySQL, однако её возможности гораздо шире. Например, она способна обрабатывать данных больше, чем MySQL, поддерживает создание собственных типов данных, хранение многомерных массивов, индексирование JSON и многое другое. Эта книга поможет вам настроить PostgreSQL и использовать её самые полезные возможности.⠀

https://t.me/progbook/3164",2222,0,0,goproglib
434,2019-06-08 12:00:34+00:00,"#video #advanced

Доклад с недавнего HighLoad++ о вопросах производительности в Go. 

https://www.youtube.com/watch?v=8UESXMJwTpc",2557,0,0,goproglib
433,2019-06-08 10:00:33+00:00,"#book #messaging

RabbitMQ реализует популярный протокол AMPQ для передачи сообщений в системе. Этот популярный брокер показал себя как один из лучших инструментов для отправки и управления отложенными сообщениями. В настоящем руководстве вы познакомитесь с основами работы кролика и задачами, которые он выполняет.

https://t.me/progbook/3162",2157,0,0,goproglib
432,2019-06-07 14:00:39+00:00,"#advanced #book

Являясь в настоящее время самым доступным и финансируемым видом деятельности, программирование привлекает множество людей своими большими возможностями в создании и распространении собственных программ и приложений. В то же время это привело к появлению большого числа плохо спроектированных программ, развитие которых трудно поддерживать из-за неудобочитаемого кода и плохой архитектуры. Эксперт в области объектных технологий, Мартин Фаулер, в своей книге описывает процесс рефакторинга, приводит замечания и показывает, где чаще всего можно найти возможности для оптимизации проекта.

https://t.me/progbook/3153",2255,0,0,goproglib
431,2019-06-07 13:00:26+00:00,"Вы любите мемы и наше издание. Почему не совместить приятное с полезным? Предлагаем вашему вниманию нашу новую позицию.

https://telegra.ph/Pikcher-boh-najdis-06-06",2110,0,0,goproglib
430,2019-06-07 09:10:21+00:00,"Доброе утро! Хотим собрать закрытый чат для общения и нетворкинга. Чтобы туда попасть, расскажите немного о себе мне @theasder",81,0,0,goproglib
429,2019-06-06 14:00:38+00:00,"[​​](https://telegra.ph/file/27849cc07373048e881b5.jpg)Внимание: нужны программисты

- IT-бизнесов все больше
- Размещаются вакансии даже для джуниоров
- Программисты получают в 2 раза больше денег

Но людей не хватает, потому что все думают, что это сложно и не каждому дано. Это ошибка.

Большинство языков можно выучить без  подготовки, и даже новичок быстро найдет работу за достойные деньги.

Прямо сейчас регистрируйтесь на бесплатный марафон для легкого старта отличной карьеры! Вы узнаете:

- Действительно ли разработчику нужно быть гуру математики и свободно владеть английским языком (спойлер: нет).
- Вы немного попрактикуетесь в написании кода и поймете, насколько это интересно именно вам.
- Узнаете, какие востребованные сферы разработки существуют, в чем их специфика и с чего лучше начать новичку.

Не ошибитесь и не пропустите: 
https://prglb.ru/547up

Онлайн / 13 — 20 июня / Бесплатно",2260,0,0,goproglib
428,2019-06-06 11:00:29+00:00,"#book

Сегодня почти ни один крупный проект не обходится без системы контроля версий Git, функции которой позволяет настолько уверенно контролировать процесс разработки, насколько это возможно. Вы не только можете хранить код и разрабатывать в группе, вы можете вернуться к последнему коммиту, даже если он был совершён несколько месяцев назад. Однако и при работе с Git случаются свои ошибки и подводные камни, о которых и расскажет автор данного руководства.

https://t.me/progbook/3144",2161,0,0,goproglib
427,2019-06-05 12:00:52+00:00,"#advanced #библиотека

Библиотека для работы с веб-сокетами на Go.

https://github.com/nhooyr/websocket",2355,0,0,goproglib
426,2019-06-05 10:00:46+00:00,"#regularexpression #book

Регулярные выражения являются мощным инструментом при работе с разными видами текстовых данных: будь то простое извлечение текста по определённому паттерну, извлечение электронных адресов, масок телефонных номеров или даже валидных url адресов. Это большое руководство рассматривает основные свойства и функции регулярных выражений, а также примеры реального применения.

https://t.me/progbook/3131",2165,0,0,goproglib
425,2019-06-04 12:00:51+00:00,"#graphql

Другой тренд разработки - GraphQL. В этой статье в двух частях рассматриваются основы технологии и использование в реальных приложениях.

**Часть 1:** https://prglb.ru/4731o

**Часть 2:** https://prglb.ru/3sk5w",2595,0,0,goproglib
424,2019-06-04 10:00:51+00:00,"#video #docker

В этом видео автор расскажет про основы Docker, про революцию контейнеров и будущее системы контейнеризации.

https://www.youtube.com/watch?v=e5HZ2UJDKFo",2197,0,0,goproglib
423,2019-06-03 12:00:40+00:00,"**5 лучших материалов по PostgreSQL**

Знание – сила, и набор материалов по PostgreSQL тому подтверждение. Представляем книги и курсы, с которыми полнофункциональная СУБД станет доступной.

https://prglb.ru/2he76",2360,0,0,goproglib
422,2019-06-03 10:00:39+00:00,"В нашем новом канале вы найдете многочисленные интересные предложения по работе от лучших компаний страны. Вам будут предложены комфортные условия, высокие зарплаты и не менее высокие требования, поэтому учимся тут, а работу ищем в https://t.me/godevjob",2183,0,0,goproglib
421,2019-06-02 12:00:43+00:00,"#book

Если вы хотите знать о последнем слове в мире разработки, то Docker - это оно самое. Вам не нужно устанавливать десятки программ, веб-серверов и компонентов для разработки, вам нужно всего лишь настроить работу с Docker, а научиться этому поможет автор следующего руководства. Вы познакомитесь с тем, что такое контейнеры, микросервисы, Docker Swarm, Kubernetes и многие другие инструменты для контейнеризации. 

https://t.me/progbook/3113",2487,0,0,goproglib
420,2019-06-02 10:00:37+00:00,"**12 друзей Docker-а – опенсорсные инструменты в помощь разработке**

Рассматриваем опенсорсные инструменты, способные ускорить, облегчить, улучшить, а иногда и оптимизировать работу с Docker-ом.

https://prglb.ru/5uanu",2274,0,0,goproglib
418,2019-06-01 10:00:45+00:00,"#book 

Redis — это нереляционная высокопроизводительная СУБД, поддерживаемая такими языками программирования, как PHP, C/C++, Java, Go и многие другие. Особенность Redis в том, что все данные хранятся в словаре в виде пары «ключ — значение». Redis часто используют в случаях, когда нужно подписывать приложения на различные каналы и отправлять сообщения всем подписчикам. В книге рассмотрены ключевые основы Redis и примеры по работе с ним.

https://t.me/progbook/3108",2333,0,0,goproglib
417,2019-05-31 12:00:40+00:00,"#beginner #библиотека

Удобная библиотека для работы с файловой системой: перемещение, создание папок, создание и запись в файл и многое другое.

https://github.com/spf13/afero",2322,0,0,goproglib
416,2019-05-31 10:00:39+00:00,"#advanced #bot

Делаем бота для игры крестики-нолики на Go и WebAssembly.

https://prglb.ru/37mcv",2367,0,0,goproglib
415,2019-05-30 12:00:44+00:00,"#advanced #библиотека

Библиотека для работы с веб-сокетами на Go.

https://github.com/gobwas/ws",2273,0,0,goproglib
414,2019-05-30 10:00:51+00:00,"#book #regularexpression #beginner

Регулярные выражения повсеместно используются для работы с информацией: извлечение, поиск, сравнение, преобразование фрагментов текста через сопоставление с шаблонами и конкретными символами. Они применяются во многих областях программирования и присутствует во многих языках, среди которых Java, PHP, JavaScript, Perl, C# и другие. Книга научит вас работать с регулярными выражениями и применять их там, где это остро необходимо. 

https://t.me/progbook/3097",2199,0,0,goproglib
413,2019-05-29 14:00:29+00:00,"**О языке SQL на примере SQLite, MySQL и PostgreSQL**

Говоря о БД, нельзя не вспомнить о языке SQL, СУБД и запросах, непонятных на первый взгляд. После нашей статьи вы освоите основы SQL.

https://prglb.ru/4e1o1",2305,0,0,goproglib
412,2019-05-29 10:00:44+00:00,"#book

Данная серия является одной из лучших серий по программированию, демонстрирующая разные технологии в действии, чего иногда остро не хватает разработчикам для начала работы. На этот раз вы примените Docker на примере реальных приложений. Docker — это программное обеспечение для автоматизации развёртывания и управления приложениями. Книга научит вас всему, что необходимо знать при работе с этой технологией. 

https://t.me/progbook/3087",2407,0,0,goproglib
411,2019-05-28 12:00:48+00:00,"#advanced

Изучение параллельного программирования с помощью изображений. 

https://prglb.ru/1iksl",2523,0,0,goproglib
410,2019-05-28 10:00:41+00:00,"#beginner #библиотека

Простое и быстрое хранилище типа ключ-значение, написанная с использованием стандартной библиотеки Go.

https://github.com/recoilme/pudge",2240,0,0,goproglib
408,2019-05-27 10:00:37+00:00,"#book

Если у вас уже есть опыт разработки и вы хотели бы изучить ещё один язык программирования, то, возможно, вам стоит посмотреть в сторону Go, этого лёгкого в изучении и мощного в разработке языка программирования от компании Google. Книга является хорошим введением в эту языковую структуру, предоставляя многочисленные примеры кода, теоретическое объяснение и упражнения в конце каждой главы. 

https://t.me/progbook/3077",2374,0,0,goproglib
407,2019-05-26 14:00:15+00:00,"#advanced

Построение микросервисных приложений с помощью Golang.

https://prglb.ru/zbcu",2531,0,0,goproglib
406,2019-05-26 12:00:14+00:00,"#advanced

5 продвинутых техник тестирования приложений на Go.

https://prglb.ru/1egaw",2371,0,0,goproglib
405,2019-05-25 17:00:23+00:00,"#beginner

Библиотека для управления шаблонами в веб-приложениях на Golang/

https://github.com/foolin/goview",2235,0,0,goproglib
404,2019-05-25 12:00:24+00:00,"#golang #beginner

Форматирование строк для начинающих.

https://prglb.ru/2wwm",2239,0,0,goproglib
403,2019-05-24 12:00:15+00:00,"#book

Go набирает популярность, и сфера его применения становится шире, что делает выбор в пользу этого языка при разработке ещё более очевидным. Настоящее руководство предназначено опытным программистам и раскрывает важные темы, связанные с профессиональной разработкой, как то: структуры данных, работа с библиотеками, параллелизм и многое другое.

https://t.me/progbook/3059",2522,0,0,goproglib
401,2019-05-24 10:00:17+00:00,"#book

Сегодня NoSQL базы данных нашли своё применение в крупной коммерческой разработке в качестве простого и, одновременно, эффективного инструмента по работе с большими объёмами данных. Настоящее руководство является самым простым способом освоить NoSQL базы данных, основы по работе с ними и стандартные функции и приёмы этих СУБД. 

https://t.me/progbook/3057",2300,0,0,goproglib
400,2019-05-23 12:00:16+00:00,"#advanced #библиотека

Библиотека для реализации протокола OAuth2.

https://github.com/openshift/osin",2342,0,0,goproglib
399,2019-05-22 12:00:10+00:00,"#advanced

Серия статей про сборку мусора в Golang. 

https://prglb.ru/5xf04",2742,0,0,goproglib
398,2019-05-22 10:00:10+00:00,"#book #spark

Если вы слышали про большие данные или даже имели с ними дело, то, вероятнее всего, слышали про Hadoop, Apache Spark и другие системы и фреймворки, предназначенные для обработки колоссальных объемов данных в сети. Это руководство предназначено не только опытным разработчикам, но и тем, кто уже готов переходить на современные системы обслуживания данных, оно расскажет про основы фреймворка Apache Spark и особенности его использования.

https://t.me/progbook/3047",2365,0,0,goproglib
396,2019-05-21 10:00:29+00:00,"#book #docker

Docker, docker, docker - это слово в последние года стало звучать ещё громче и чаще. И, возможно, вполне обоснованно, ведь контейнерная система Docker настолько уникальна, что с ней не сравнить другие мейнстримные сборки веб-серверов. Раньше, настроив окружение для разработки на локальной машине, вам приходилось настраивать такое же окружение на хостинге. Теперь вам достаточно просто перенести контейнер со всеми зависимостями и пакетами на другую машину и развернуть его там, ничего при этом не настраивая. 

https://t.me/progbook/3036",2425,0,0,goproglib
395,2019-05-20 12:00:32+00:00,"#advanced #библиотека

Библиотека для тестирования работы базы данных.

https://github.com/DATA-DOG/go-sqlmock",2299,0,0,goproglib
394,2019-05-20 10:00:32+00:00,"**От CREATE до JOIN: введение в SQL + шпаргалка**

Львиная доля мировой информации хранится в реляционных базах данных. Чтобы работать с ней, нужно владеть языком SQL-запросов.

https://prglb.ru/460ea",2448,0,0,goproglib
393,2019-05-19 12:01:20+00:00,"#библиотека #beginner

Удобная библиотека для создания ботов ВКонтакте.

https://github.com/nikepan/govkbot",2324,0,0,goproglib
392,2019-05-19 10:01:21+00:00,"#beginner

Что же на самом деле имеет Go и чего не имеет. 

https://prglb.ru/1y26g",2273,0,0,goproglib
391,2019-05-18 12:01:03+00:00,"#golang #библиотека 

Роутинг — один из важнейших компонентов веб-приложений. Библиотека bone предоставляет мощные функции по построению маршрутизации в веб-приложении.

https://github.com/go-zoo/bone",2355,0,0,goproglib
390,2019-05-18 10:01:10+00:00,"#best_practices 

Параллельно с тем, как вы будете изучать Golang, вам также нужно изучать лучшие практики написания приложений на нём.

https://talks.golang.org/2013/bestpractices.slide#1",2419,0,0,goproglib
389,2019-05-17 12:01:23+00:00,"#beginner

Обработка ошибок в REST API приложениях.

https://prglb.ru/1bdin",2562,0,0,goproglib
388,2019-05-17 11:01:13+00:00,"#book #sql


Настоящее издание популярного справочника по языку SQL содержит описание всех операторов SQL, описанных стандартом 2003 года, реализованных в таких СУБД, как Microsoft SQL Server 2008, Oracle 11g, MySQL 5.1 и PostgreSQL 8.3. Также в руководстве рассмотрены основы реляционных баз данных, сложные запросы и функции, в том числе характерные для каждой СУБД в отдельности 

https://t.me/progbook/3015",2219,0,0,goproglib
387,2019-05-16 12:01:20+00:00,"#beginner #библиотека 

Библиотека для генерации безопасного UUID первой версии.

https://github.com/agext/uuid",2562,0,0,goproglib
386,2019-05-16 10:01:16+00:00,"#beginner #mongodb

Создаем простое CRUD приложение с использованием MongoDB.

https://prglb.ru/571y4",2570,0,0,goproglib
385,2019-05-15 12:01:11+00:00,"#advanced 

Нужно ли использовать указатель вместо полной копии структуры? Давайте это узнаем.

https://prglb.ru/5l3bz",2473,0,0,goproglib
384,2019-05-15 10:01:10+00:00,"#beginner 

Основы обработки ошибок в Golang.

https://prglb.ru/4w8vr",2389,0,0,goproglib
383,2019-05-14 12:01:03+00:00,"#advanced #web

Пишем собственный HTTP клиент и сервер на Golang.

https://prglb.ru/1dgm8",2578,0,0,goproglib
382,2019-05-14 10:01:02+00:00,"#book

Эту книгу вполне можно назвать объёмным и исчерпывающим руководством по проектированию и созданию сложных баз данных. В ней содержится описание распределенных, объектно-ориентированных и объектно-реляционных СУБД, а также подробное описание особенностей разработки приложений баз данных для Web и многочисленные примеры кода доступа к базам данных из Web.

https://t.me/progbook/2997",2369,0,0,goproglib
381,2019-05-13 12:01:21+00:00,"#tutorial #beginners 

На этом сайте вы найдёте 30 полезных источников по изучению Go: создание веб-приложений, работа с шаблонами, парсеры, многопоточность и многое другое.

https://stackify.com/learn-go-tutorials/",2510,0,0,goproglib
380,2019-05-13 10:01:01+00:00,"#testing

Юнит-тестирование — важная часть профессиональной разработки приложений. Давайте посмотрим, как тестировать приложения, написанные на Go.

https://bit.ly/2DBS03R",2361,0,0,goproglib
379,2019-05-12 12:01:15+00:00,"#video #advanced 

Создаем REST API приложение с использованием системы аутентификации JWT. 

https://prglb.ru/13uds",2575,0,0,goproglib
378,2019-05-12 10:00:55+00:00,"#book #database

Если вы хотите знать о том, какие базы данных существуют, как они организованы, какую базу данных выбрать под свои задачи, но не хотите при этом тратить время на изучение каждой базы данных в отдельности, то следующее пособие расскажет вам о самых известных из них: Redis, Neo4J, CouchDB, MongoDB, HBase, PostgreSQL и Riak. Для каждой базы в книге приведены реальные примеры, демонстрирующие основные идеи и сильные стороны каждой из них. Также книга научит вас, как выбирать базы данных под свои требования.

https://t.me/progbook/2985",2428,0,0,goproglib
377,2019-05-11 12:00:56+00:00,"#beginner 

Основы обработки ошибок в Golang.

https://prglb.ru/4w8vr",2484,0,0,goproglib
376,2019-05-11 10:00:56+00:00,"#advanced #video

На небольших и простых примерах автор этого видео расскажет вам про параллелизм в Golang. 

https://prglb.ru/3sbub",2147,0,0,goproglib
375,2019-05-10 12:00:57+00:00,"#algorithms 

Реализация сортировки методом пауз на языке программирования Go с использованием параллельности, каналов и горутин:

``` main

import(
    ""fmt""
    ""time""
)

var get_value chan int

func send_value(x int) {
    time.Sleep(int64(x) * 1E8)
    get_value <- x
}

func main() {
    values := []int{3, 1, 9, 7, 2, 6, 4, 8, 5, 10}

    get_value = make(chan int)

    for _, x := range values {
        go send_value(x)
    }
    for range values {
        fmt.Println(<- get_value)
    }
}```",2444,0,0,goproglib
374,2019-05-10 10:00:59+00:00,"#books

Большой репозиторий с лучшими книгами по языку Go. Теперь у вас есть, чем заняться.

https://github.com/dariubs/GoBooks",2308,0,0,goproglib
373,2019-05-09 12:00:58+00:00,"#book

По правилам развития технологий, не существует идеально спроектированных и разработанных приложений. В то же время, мы можем добиться меньшей связности ПО за счёт разделения на компоненты, которые по отдельности легче и дешевле поддерживать, чем вместе. В этом знаменитом руководстве автор расскажет про новый тренд в мире технологий  -  микросервисы. Вы пройдёте от хорошей иллюстративной теории до небольшой практики, которая поможет вам дальше изучать микросервисную архитектуру самостоятельно. 

https://t.me/progbook/2970",2534,0,0,goproglib
372,2019-05-09 10:00:53+00:00,"#book

Марк Саммерфильд, основоположник программирования на Go и автор данной книги, собрал хороший материал, в котором поэтапно и в удобной форме показывает, как писать программы на Go, как использовать его революционные возможности и идиомы, проводя одновременно с этим сравнительный анализ с более старыми языками программирования. Автор последовательно описывает приёмы работы, пакеты и встроенные типы данного языка, что подойдёт разработчикам разной квалификации.

https://t.me/progbook/2968",2604,0,0,goproglib
371,2019-05-08 12:00:50+00:00,"#golang #web

Архитектура веб-сервисов на любом  языке программирования выглядит примерно одинаково: у вас есть папка с моделями для работы с базой данных, есть папка public, настройки, папка vendor, в которой хранятся все зависимости вашего проекта и несколько файлов ещё. Предлагаем посмотреть, как то же самое выглядит на языке Go.

https://bit.ly/2APBgnE",2964,0,0,goproglib
369,2019-05-07 12:01:09+00:00,"#web #advanced

Разрабатываем настоящий веб-сервер на Go с использованием Let's Encrypt для протокола HTTPS, реализуем API и мидлвары, и многое другое.

https://prglb.ru/1ltz4",2683,0,0,goproglib
368,2019-05-07 10:01:08+00:00,"#advanced

Используем GraphQL в Go приложениях. 

https://prglb.ru/3i9cr",2443,1,0,goproglib
367,2019-05-06 12:00:47+00:00,"#golang #библиотека 

Библиотека gorilla/mux предоставляет вам простой и эффективный пакет маршрутизации и обработки входящих запросов в вашем веб-приложении.

https://github.com/gorilla/mux",2354,0,0,goproglib
366,2019-05-06 10:01:00+00:00,"#golang #video

Go — это невероятно интересный и популярный язык программирования, который вскоре, возможно, станет одним из первых в десятке часто используемых в разработке языков. Предлагаем для начала посмотреть этот курс, чтобы точно определиться, нравится вам этот язык или нет.

https://www.youtube.com/watch?v=SqrbIlUwR0U",2320,0,0,goproglib
365,2019-05-05 12:01:05+00:00,"#video #beginners

Для тех, кто только подключился, давайте начнём с основ языка. Они несложные. Зато потом вы сможете приступить к реальной практике и созданию приложений на Go.

https://www.youtube.com/playlist?list=PLQVvvaa0QuDeF3hP0wQoSxpkqgRcgxMqX",2391,0,0,goproglib
364,2019-05-05 12:01:05+00:00,"#golang #web

Golang прекрасно подходит для веб-разработки. До сих пор не знаете, как это выглядит? Тогда следующий плейлист для вас.

https://www.youtube.com/playlist?list=PLGtcqyFrda9474GltUO-7S4KoJVcdLMp4",2321,0,0,goproglib
363,2019-05-04 12:00:44+00:00,"#beginner

Основы Go для самых начинающих. Вы узнаете, что такое Go, какие у него особенности, где часто применяется и многое другое.

https://prglb.ru/4up53",2560,0,0,goproglib
362,2019-05-04 10:00:59+00:00,"#book #databases

В настоящее время графовые базы данных применяются для моделирования социальных графов (социальных сетей), в биоинформатике, а также для семантической паутины. В графовых СУБД, как правило, разделяют хранилище и механизм обработки. Из этой же книги вы узнаете, как моделировать и реализовывать приложения, основанные на графовых базах данных. Книга предназначена, в первую очередь, для тех разработчиков, кто работает с большими данными и хотел бы увеличить эффективность их обработки.

https://t.me/progbook/2936",2277,0,0,goproglib
361,2019-05-03 12:00:57+00:00,"#video #advanced 

Паттерны параллельного программирования на Go.

https://www.youtube.com/watch?v=QDDwwePbDtw",2620,0,0,goproglib
360,2019-05-03 10:00:55+00:00,"#библиотека #advanced 

Библиотека Go для создания аутентификации в ваших приложениях через другие социальные сети.

https://github.com/dghubble/gologin",2240,0,0,goproglib
359,2019-05-02 12:00:54+00:00,"#book 

Go набирает популярность, и сфера его применения становится шире, что делает выбор в пользу этого языка при разработке ещё более очевидным. Настоящее руководство предназначено опытным программистам и раскрывает важные темы, связанные с профессиональной разработкой, как то: структуры данных, работа с библиотеками, параллелизм и многое другое.

https://t.me/progbook/2038",2480,0,0,goproglib
358,2019-05-02 10:00:59+00:00,"#advanced #tutorial 

Разрабатываем веб-сервер на Golang. 

https://prglb.ru/1ltz4",2320,0,0,goproglib
357,2019-05-01 12:00:53+00:00,"#docker

Создаём образ docker с Go с нуля.

https://bit.ly/2S7URpn",2897,0,0,goproglib
356,2019-05-01 10:00:57+00:00,"#video #beginners 

В этом плейлисте очень подробно и на множестве простых примеров автор расскажет про основы языка Go.

https://bit.ly/2rG6zvM",2432,0,0,goproglib
355,2019-04-30 12:00:56+00:00,"#advanced 

Погружаемся в каналы на Golang. 

https://prglb.ru/5p5ah",2499,0,0,goproglib
354,2019-04-30 10:00:37+00:00,"#advanced 

Строим простую распределенную систему на Go с помощью Consul. 

https://prglb.ru/2rz1g",2453,0,0,goproglib
353,2019-04-29 12:00:43+00:00,"#advanced #testing

Продвинутые приемы тестирования для Golang.

https://prglb.ru/2qct8",2419,0,0,goproglib
352,2019-04-29 10:00:39+00:00,"**REST API приложение на Go: пошаговый туториал**

В этой статье мы рассмотрим, как создать REST API приложение на языке Go: лучшая пошаговая инструкция с использованием популярной архитектуры.

https://prglb.ru/k4dn",2541,0,0,goproglib
351,2019-04-28 12:00:52+00:00,"#advanced 

Список реализованных приложений на Go для вдохновления.

http://www.golangprograms.com/advance-programs.html",2605,0,0,goproglib
350,2019-04-28 10:00:51+00:00,"Выучили Go и скучаете по реальным заданиям? Пора искать работу! С нашим новым каналом это более чем возможно. В нем вы найдете многочисленные привлекательные вакансии, хорошие предложения и, кто знает, возможно, работу вашей мечты!

Подписывайтесь: @godevjob",2299,0,0,goproglib
349,2019-04-27 12:00:26+00:00,"#advanced #библиотека 

Все удобства для работы с базой лично для вас: библиотека для генерации ORM на основе схемы вашей базы данных.

https://prglb.ru/46ikb",2549,0,0,goproglib
348,2019-04-27 10:00:50+00:00,"#библиотека 

Библиотека для создания ботов для Telegram.

https://github.com/zhulik/margelet",2485,0,0,goproglib
347,2019-04-26 12:01:04+00:00," Разыскивается главный редактор на сайт proglib.io

Если вам хочется глубже погрузиться в мир IT и владеть вниманием широкой аудитории, эта вакансия для вас!

https://proglib.recruitee.com/o/7b76f5yn7m",2561,0,0,goproglib
346,2019-04-26 10:00:52+00:00,"#advanced #video

Полный обзор на Protobuff на примерах таких языков как Golang, Python, Java.

https://prglb.ru/4rqbz",2630,0,0,goproglib
344,2019-04-25 10:00:51+00:00,"Основы безопасности любого пользовательского приложения — это хеширование паролей. А как сделать правильно, разбираемся в этой статье.

https://bit.ly/2PWx1ev",2542,0,0,goproglib
343,2019-04-24 12:00:38+00:00,"#advanced #библиотека

Библиотека для работы с командной строкой с помощью Golang.

https://prglb.ru/3li1v",3016,0,0,goproglib
342,2019-04-24 10:00:48+00:00,"**Чем хорош язык Go и зачем его изучать? Все плюшки Golang**

Язык Go – серверный язык будущего. В этой статье мы не будем разбирать «Hello World!», но затронем важность Golang и его характеристики.

https://prglb.ru/5mcys",2670,0,0,goproglib
341,2019-04-23 10:00:34+00:00,"#book #linux

Linux'ом должен уметь пользоваться каждый разработчик по двум причинам: это достаточно открытая система, которую легко настраивать под свои нужды, и вторая причина - многие веб-серверы находятся именно на Linux. Это руководство познакомит вас с основными командами работы в среде Linux и интересными приёмами оптимизации различных задач.

https://t.me/progbook/2871",3785,0,0,goproglib
340,2019-04-22 12:00:34+00:00,"#algorithms #beginners 

Небольшая статья о том, как важно правильно реализовать алгоритм и как это влияет на скорость работы программы:

https://bit.ly/2GjSzlQ",3308,0,0,goproglib
339,2019-04-22 10:00:21+00:00,"#video #beginners 

В этом плейлисте очень подробно и на множестве простых примеров автор расскажет про основы языка Go.

https://bit.ly/2rG6zvM",2590,0,0,goproglib
338,2019-04-21 12:00:16+00:00,"#book #advanced

Go — это язык нового поколения, предназначенный для разработки приложений с параллельной обработкой, для создания облачных, системных и веб-приложений. Тем, кто уже знаком с другими языками, такими как Java, C или C#, настоящей книги будет достаточно для того, чтобы начать профессионально использовать Go в ежедневной разработке. Книга быстро познакомит с основами языка, перейдя к объяснению таких тем, как тестирование и отладка, маршрутизация, создание сетевых и веб-служб, также она содержит решения множества типовых задач.

https://t.me/progbook/2477",3114,0,0,goproglib
337,2019-04-21 10:00:17+00:00,"#advanced #api

Читаем данные Google-таблиц с помощью их публичного API на Golang.

https://prglb.ru/cap1",2501,0,0,goproglib
336,2019-04-20 12:00:30+00:00,"**30 лучших книг для освоения языка программирования Go**

Ищете книги по Go? Представляем 30 книг для освоения языка программирования Go, которые ответят на вопросы новичков и уверенных разработчиков.

https://prglb.ru/1ye97",2930,0,0,goproglib
335,2019-04-20 07:00:21+00:00,"**Исследование аудитории Telegram 2019

**Друзья, команда **TGStat** проводит масштабное исследование аудитории мессенджера. Кто же он — пользователь Telegram 2019 года? Страдает ли он из-за блокировки, каково на сегодня распределение по полу, возрасту, интересам и десятку других параметров?

Исследование поможет удовлетворить не только научный интерес, и не только интерес брендов, но и интерес всего сообщества, противостоящего блокировкам.

Опрос займет всего 5 минут! Не поленитесь)
Ваше мнение очень важно!

**Ссылка на опрос:
**https://tgstat.ru/research",2449,0,0,goproglib
334,2019-04-19 12:00:29+00:00,"#advanced 

Сегодня эффективность разработки зависит от умения использовать сторонние решения вроде библиотек и фреймворков. На этом сайте собраны самые популярные из них на разные случаи:

https://go.libhunt.com/",2969,0,0,goproglib
333,2019-04-19 10:00:38+00:00,"#advanced

Создаем и деплоим REST API приложения на Go, PostgreSQL, JWT и GORM.

https://prglb.ru/2ts7o",2776,0,0,goproglib
332,2019-04-18 12:00:14+00:00,"#advanced #testing 

Пишем юнит-тесты для REST API приложения на Go.

https://prglb.ru/lqqh",3297,0,0,goproglib
331,2019-04-18 10:00:37+00:00,"#book #beginner #sql

Книга Мартина Грубера ""Понимание SQL"" является самой что ни на есть классикой в мире баз данных. Хотя любая классика переживает несколько изданий, этому руководству хватило один раз появиться, чтобы навсегда стать неумирающим самоучителем по SQL и базам данных. Руководство относительно небольшое и научит вас не только основам SQL, но и достаточно сложным темам, призванным увеличить эффективность запросов. 

https://t.me/progbook/2837",2587,1,0,goproglib
330,2019-04-17 12:00:09+00:00,"#advanced 

Структуры — один из основных типов данных в Golang. Они используются практически повсеместно (пользовательские типы, конфиги и т.д.). Более того к полям структур через теги могут быть добавлены метаданные, которые нужны для маппинга данных через encoding/json или encoding/xml, валидации, ORM и др. Эта статья подробно рассказывает о применении тегов в Go:

https://bit.ly/2ANtUjq",3275,0,0,goproglib
329,2019-04-17 10:00:08+00:00,"#video #beginners 

Если вам не требуется мощные СУБД по типу Postgres или MySQL, а что-то попроще, советуем простую низкоуровневую СУБД ключ-значение bolt.

https://github.com/boltdb/bolt",2468,0,0,goproglib
328,2019-04-16 12:00:07+00:00,"#advanced #video

Создаем бота для Slack на языке Go.

https://prglb.ru/smfh",3365,0,0,goproglib
327,2019-04-16 10:01:01+00:00,"#advanced #video 

Учимся распознавать изображения с помощью библиотеки TensorFlow и Golang.

https://prglb.ru/2xoyz",2940,0,0,goproglib
326,2019-04-15 12:01:19+00:00,"#advanced #библиотека 

Валидатор структур и полей в Golang.

https://github.com/go-playground/validator",3128,0,0,goproglib
325,2019-04-15 10:01:23+00:00,"#beginner 

Онлайн-туториал с многочисленными примерами решения популярных задач на Golang.

https://gobyexample.com/",2792,0,0,goproglib
324,2019-04-14 12:01:13+00:00,"#beginners 

Каждый программист должен знать больше, чем один язык программирования. Такие правила диктует не только рынок, но и правила развития: вы должны знать о многих техниках разработки, чтобы быть гибче, увереннее и сильнее. Если вы ещё не определились, какой язык будет вашим вторым, почитайте данную статью о Go. Тут и статистика, и основы, и особенности языка.

https://bit.ly/2FoDOh2",3309,0,0,goproglib
323,2019-04-14 10:01:17+00:00,"#advanced #библиотека 

Библиотека для работы с Elasticsearch.

https://prglb.ru/cp5e",2731,0,0,goproglib
322,2019-04-13 12:00:59+00:00,"#beginner #email

Простая библиотека для обработки и отправки сообщений на Go.

https://github.com/go-gomail/gomail/",3229,0,0,goproglib
321,2019-04-13 10:01:23+00:00,"#advanced #tutorial 

В этом туториале автор расскажет, как решал проблемы с потреблением памяти в Golang.

https://prglb.ru/4f4vz",2569,0,0,goproglib
320,2019-04-12 12:01:23+00:00,"#advanced 

В Go 1.9 появились лейблы профайлера. Что это такое, можно узнать [тут](https://github.com/golang/proposal/blob/master/design/17280-profile-labels.md), а как ими пользоваться — [тут](https://bit.ly/2VxDVuM).",2941,0,0,goproglib
319,2019-04-12 10:01:31+00:00,"#microservices #advanced 

В этой статье автор расскажет, как использовать инструмент Go Kit для создания микросервисов.

https://bit.ly/2VpTaWB",2873,0,0,goproglib
318,2019-04-11 12:01:09+00:00,"#advanced #video

Создаем RESTful приложение на Golang.

https://prglb.ru/5xcey",2944,0,0,goproglib
317,2019-04-11 10:01:19+00:00,"#advanced #testing 

Тестируем работу с базами данных различными способами на Go.

https://prglb.ru/4jzph",2618,0,0,goproglib
316,2019-04-10 12:00:50+00:00,"#video

На гоферконе спикеры часто, как тому и следует, поднимают сложные темы в разработке на Go, полезные разработчику любого уровня. В этот раз вы узнаете про тестирование приложений на языке.

https://www.youtube.com/watch?v=8hQG7QlcLBk",3045,0,0,goproglib
315,2019-04-10 10:01:13+00:00,"#advanced #библиотека 

Библиотека для создания ботов Vk.

https://prglb.ru/2v2ev",2425,0,0,goproglib
314,2019-04-09 12:01:04+00:00,"#библиотека #advanced 

Удобная библитека по работе с json и yaml данными.

https://github.com/olebedev/config",3117,0,0,goproglib
313,2019-04-09 10:01:10+00:00,"#best_practices 

Кому интересно, как выглядит обычная организация кода в Go, добро пожаловать в статью.

https://bit.ly/2oZXLAr",2848,0,0,goproglib
312,2019-04-08 12:01:02+00:00,"#advanced 

Как реализовать ООП в Go без наследования? Узнаем из следующей статьи.

https://prglb.ru/4rdpm",3096,0,0,goproglib
311,2019-04-08 10:01:06+00:00,"#advanced #библиотека 

Библиотека для валидации строк, числовых значений, срезов и структур данных в Golang.

https://prglb.ru/d2m1",2380,0,0,goproglib
310,2019-04-07 12:00:58+00:00,"#golang #book

Go - современный язык программирования, разработанный корпорацией Google с целью сделать простой по сравнению с другими язык программирования, но не менее эффективный при разработке программного обеспечения и веб-приложений. Из руководства вы узнаете о том, как установить Go и настроить рабочее окружение, как использовать сторонние библиотеки и как пользоваться всеми возможностями языка. 

https://t.me/progbook/1845

https://t.me/progbook/1846",3008,0,0,goproglib
309,2019-04-07 10:01:08+00:00,"#golang #web

Go хорош во всём, в том числе и веб-разработке, для которого у языка есть многочисленные библиотеки. В этой серии статей вы познакомитесь с тем, как писать сложные веб-приложения, используя шаблонизаторы, маршрутизаторы и основы работы с базами данных.

https://metanit.com/go/web/1.1.php",2556,0,0,goproglib
308,2019-04-06 12:00:54+00:00,"#advanced

Пишем собственные контроллеры для Kubernetes на Go,

https://prglb.ru/5fa5m",2903,0,0,goproglib
307,2019-04-06 10:01:00+00:00,"#testing

Юнит-тестирование — важная часть профессиональной разработки приложений. Давайте посмотрим, как тестировать приложения, написанные на Go.

https://bit.ly/2DBS03R",2459,0,0,goproglib
306,2019-04-05 12:01:04+00:00,"#book

Вам достаточно посмотреть на список тем, раскрываемых автором книги, чтобы понять, что вам точно нужно прочитать данное руководство после того, как вы пройдёте курс начинающего Go разработчика. В этом современном справочнике вы узнаете про работу с базами данных, микросервисы, параллельное программирование и построение REST API приложений.

https://t.me/progbook/2193",2962,0,0,goproglib
305,2019-04-05 11:01:10+00:00,"#best_practices 

Репозиторий с лучшими практиками  по Go, охватывающие темы параллельного программирования, зависимостей, обработки ошибок, тестов и многого другого.

https://github.com/codeship/go-best-practices",2570,0,0,goproglib
304,2019-04-04 12:00:37+00:00,"#video #beginners 

В этом видеокурсе вы не только выучите синтаксис языка Go, но и научитесь применять методы параллельной разработки, встроенные функции и пакеты:

https://prglb.ru/2s11y",3101,0,0,goproglib
303,2019-04-04 10:00:40+00:00,"#advanced

Если вы опытный разработчик на Golang, но не можете найти интересных практических задач, как насчет поучаствовать в опенсорс проекте? В данном списке собраны проекте, нуждающиеся в такой помощи.

https://prglb.ru/2f9h9",2560,0,0,goproglib
302,2019-04-03 12:00:32+00:00,"#golang #video

Go — это невероятно интересный и популярный язык программирования, который вскоре, возможно, станет одним из первых в десятке часто используемых в разработке языков. Предлагаем для начала посмотреть этот курс, чтобы точно определиться, нравится вам этот язык или нет.

https://prglb.ru/5n8qe",3167,0,0,goproglib
301,2019-04-03 10:00:34+00:00,"#beginner 

Делаем  ваш проект на Go лучше.

https://prglb.ru/1lo4",2460,0,0,goproglib
300,2019-04-02 12:00:49+00:00,"#video #beginners 

Если вам не требуется мощные СУБД по типу Postgres или MySQL, а что-то попроще, советуем простую низкоуровневую СУБД ключ-значение bolt.

https://prglb.ru/3bib5",3046,0,0,goproglib
299,2019-04-02 10:00:31+00:00,"#библиотека #advanced 

Библиотека Go для создания аутентификации в ваших приложениях через социальные сети.

https://prglb.ru/5d2zv",2588,0,0,goproglib
298,2019-04-01 12:00:34+00:00,"#book

Go набирает популярность, и сфера его применения становится шире, что делает выбор в пользу этого языка при разработке ещё более очевидным. Настоящее руководство предназначено опытным программистам и раскрывает важные темы, связанные с профессиональной разработкой, как то: структуры данных, работа с библиотеками, параллелизм и многое другое.

https://t.me/progbook/2038",3317,0,0,goproglib
297,2019-04-01 10:00:33+00:00,"#библиотека #beginner 

Забавная библиотека по генерированию аватаров. Для веб-приложений самое то. 

https://prglb.ru/3oman",2592,0,0,goproglib
296,2019-03-31 12:00:42+00:00,"#beginners 

Хороший туториал для тех, кто только познакомился с Go. Вы узнаете про основы работы с функциями, переменными, типами данных, циклами, массивами, структурами и многим другим.

https://prglb.ru/4up53",2993,0,0,goproglib
295,2019-03-31 10:00:28+00:00,"#beginners 

Давайте посмотрим, чем же Go так красив, что мы его так любим.

https://prglb.ru/1ui87",2482,0,0,goproglib
294,2019-03-30 12:00:51+00:00,"#advanced #tutorial 

Валидация входящих данных на Golang.

https://prglb.ru/l9uf",2810,0,0,goproglib
293,2019-03-30 10:00:58+00:00,"#advanced #tutorial 

Основы чистой архитектуры на Golang.

https://prglb.ru/cs4p",2586,0,0,goproglib
292,2019-03-29 12:00:46+00:00,"#beginners 

Онлайн-книга по замечательному языку Go с примерами:

https://prglb.ru/qe2l",2902,0,0,goproglib
291,2019-03-29 10:00:58+00:00,"#beginners 

Не знаете, как и с чего начать изучение Go? В этой статье вы найдёте советы и книги для начала:

https://prglb.ru/5dxav",2544,0,0,goproglib
290,2019-03-28 12:00:40+00:00,"#video #beginners

Для тех, кто только подключился, давайте начнём с основ языка. Они несложные. Зато потом вы сможете приступить к реальной практике и созданию приложений на Go.

https://prglb.ru/43oy6",3199,0,0,goproglib
289,2019-03-28 10:00:50+00:00,"#golang #book

Разработчики Go понимали, что среди программистов особой популярностью пользуется С-подобный синтаксис, поэтому не стали изобретать язык, который потребовал бы переучиваться, а создали лёгкий язык с чистым синтаксисом, которой можно использовать в разных видах разработки. Из книги вы узнаете, как Go упрощает разработку приложений, обработку ошибок и параллельное программирование. Также вы научитесь использовать Go в разных парадигмах программирования.

https://t.me/progbook/1136",2877,0,0,goproglib
288,2019-03-27 12:00:43+00:00,"**3 наиболее распространённых подводных камня в Go**

Начиная изучение Go, многие сталкиваются с совершенно не очевидными моментами в этом языке. Рассмотрим три таких подводных камня в Go.

https://prglb.ru/la5k",3316,0,0,goproglib
287,2019-03-27 10:00:19+00:00,"#advanced

Введение в Go для самых опытных. 

https://prglb.ru/1zxds",2543,0,0,goproglib
286,2019-03-26 10:54:26+00:00,"Направляется уведомление о внесении в «Единый реестр доменных имен, указателей страниц сайтов в сети «Интернет» и сетевых адресов, позволяющих идентифицировать сайты в сети «Интернет», содержащие информацию, распространение которой в Российской Федерации запрещено» следующего(их) указателя (указателей) страницы (страниц) сайта в сети «Интернет»: https://proglib.io/p/wifi-hack/ .",106,0,0,goproglib
285,2019-03-26 10:00:40+00:00,"#beginner #библиотека 

Список современных библиотек для работы с безопасностью в Golang.

https://prglb.ru/2vrx8",2538,0,0,goproglib
284,2019-03-25 12:00:22+00:00,"#beginner

Большой список полезных ссылок на ресурсы по изучению Go с нуля.

https://prglb.ru/49eyf",3224,0,0,goproglib
283,2019-03-25 10:00:25+00:00,"#beginner

Плюсы и минусы изучения языка Go.

https://prglb.ru/5m2ya",2544,0,0,goproglib
282,2019-03-25 10:00:24+00:00,"#beginner 

На этом сайте вы найдете многочисленные интересные видео по созданию приложений на Go: от создания сокращателя ссылок, игр и парсинга до многопоточного программирования и отложенных задач.

https://prglb.ru/3p885",2511,0,0,goproglib
281,2019-03-24 10:37:12+00:00,"**Go vs Python: изучение основ языка Go в сравнении с Python**

Это не соревнование двух языков, а просто еще один способ обучения. Рассматриваем возможности языка Go, проводя параллели с Python.

https://prglb.ru/4j3gt",3087,0,0,goproglib
280,2019-03-23 12:00:27+00:00,"#advanced #tdd

Изучаем Golang через тестирование: в этом репозитории вы найдете многочисленные приложения, написанные по принципу TDD.

https://prglb.ru/1i3hl",2943,0,0,goproglib
279,2019-03-23 10:00:46+00:00,"#advanced #video

Работаем с протоколом авторизации OAuth 2.0 на Golang.

https://prglb.ru/4v4vn",2837,0,0,goproglib
278,2019-03-22 12:00:23+00:00,"#advanced 

Создаем бессерверный сайт с нуля с помощью Golang, AWS Lambda и API Gateway.

https://prglb.ru/30p0e",3137,0,0,goproglib
277,2019-03-22 10:00:18+00:00,"#advanced #tutorial 

Изучаем параллельное программирование на Go при помощи иллюстраций.

https://prglb.ru/1iksl",2829,0,0,goproglib
276,2019-03-21 12:00:19+00:00,"#advanced 

Анатомия срезов в Golang.

https://prglb.ru/11rx2",3261,0,0,goproglib
275,2019-03-21 10:00:46+00:00,"#advanced 

Продвинутые особенности работы с фреймворком от Google gRPC с помощью Go.

https://prglb.ru/4vpf9",2816,0,0,goproglib
273,2019-03-20 12:00:35+00:00,"#beginner

Что, зачем и когда: подробнее об операторе nil в Go.

https://prglb.ru/1l2xs",3714,0,0,goproglib
272,2019-03-20 10:00:45+00:00,"Выучили Go и скучаете по реальным заданиям? Пора искать работу! С нашим новым каналом это более чем возможно. В нем вы найдете многочисленные привлекательные вакансии, хорошие предложения и, кто знает, возможно, работу вашей мечты!

Подписывайтесь: @godevjob",3498,0,0,goproglib
271,2019-03-19 12:00:18+00:00,"#advanced 

Кэширование в Golang.

https://prglb.ru/4vil8",4278,0,0,goproglib
270,2019-03-19 10:00:27+00:00,"#advanced 

Немного о том, как выглядит профессиональная разработка в крупных компаниях.

https://prglb.ru/rn1k",2665,0,0,goproglib
269,2019-03-18 12:00:15+00:00,"#beginner #tutorial 

Лучшие практики по работе с JSON в Go.

https://prglb.ru/2eg1",3167,0,0,goproglib
268,2019-03-18 10:00:20+00:00,"#advanced #tutorial 

Изучаем Go с помощью TDD.

https://prglb.ru/1i3hl",2593,0,0,goproglib
267,2019-03-17 12:00:38+00:00,"#advanced #design_patterns 

Реализация паттерна Event Bus на Go.

https://prglb.ru/4qjgy",3266,0,0,goproglib
266,2019-03-17 10:00:47+00:00,"#advanced

Что такое корутины и как они на самом деле работают, узнаем из следующей статьи. В конце вы также найдете полезные ссылки на глубокое изучение темы. 

https://prglb.ru/5pkzm",2673,0,0,goproglib
265,2019-03-16 12:00:50+00:00,"#beginner #tutorial 

Большой список уроков на тему программирования на Go для начинающих.

https://prglb.ru/21e6t",2948,0,0,goproglib
264,2019-03-16 10:00:59+00:00,"#beginner #mysql

Учимся отменять sql-запросы в Go приложениях.

https://prglb.ru/4c4l6",2596,0,0,goproglib
263,2019-03-15 12:00:45+00:00,"#beginner #tutorial
 
Простой туториал по работе с SQL на Go.

https://prglb.ru/w1tq",3268,0,0,goproglib
262,2019-03-15 10:00:46+00:00,"#beginner #tutorial 

На данном сайте вы можете решать задачи и получать экспертизу от профессиональных разработчиков. 

https://prglb.ru/to62",2921,0,0,goproglib
261,2019-03-14 16:00:49+00:00,"[​​](https://telegra.ph/file/7bdd919fd84e80dc7545e.jpg)Хочешь стать программистом с высоким чеком оплаты? Пришло время действовать!
Онлайн-университет Skillbox с 11 по 29 марта проводит ряд бесплатных вебинаров по программированию.

Регистрация по ссылке ▶️ https://goo.gl/CKFxdh

Лучшие преподаватели-практики страны поделятся своими знаниями и секретами!

Каждый участник получит электронный сертификат!",3134,0,0,goproglib
260,2019-03-14 12:00:18+00:00,"#beginner #cheatsheet 

Еще одна крутая шпаргалка по Go.

https://prglb.ru/2cta",2780,0,0,goproglib
259,2019-03-14 10:00:22+00:00,"#advanced #video

Учимся языку Go через игры.

https://prglb.ru/3s0k4",2742,0,0,goproglib
258,2019-03-13 12:00:19+00:00,"#advanced #tutorial 

Создаем микросервисное приложения на Go, используя библиотеку Gin.

https://prglb.ru/4m3rk",3761,0,0,goproglib
257,2019-03-13 10:00:52+00:00,"#advanced #библиотека 

Интересный репозиторий (на русском!) с примерами реализаций различных паттернов проектирования на Golang.

https://prglb.ru/1opdp",3113,0,0,goproglib
256,2019-03-12 12:00:18+00:00,"#advanced #библиотека 

Пакет для работы со звуком в Go приложениях. 

https://prglb.ru/k90g",3348,0,0,goproglib
255,2019-03-12 10:00:50+00:00,"#advanced #tutorial 

Введение во фреймворк gRPC.

https://prglb.ru/53nyd",3175,0,0,goproglib
254,2019-03-11 12:00:12+00:00,"#advanced #tutorial 

Изучаем параллелизм на Go.

https://prglb.ru/5t7hm",3260,0,0,goproglib
252,2019-03-11 10:00:16+00:00,"#advanced #tutorial 

Туториал по работе с переменными окружения в Go.

https://prglb.ru/4dhs2",2606,0,0,goproglib
251,2019-03-10 12:00:20+00:00,"#advanced #video 

Продвинутый дебаг на Go с помощью Delve.

https://prglb.ru/4aqyc",2953,0,0,goproglib
250,2019-03-10 10:00:23+00:00,"#advanced #библиотека 

Реализиация генетических алгоритмов на Golang.

https://prglb.ru/36kga",2563,0,0,goproglib
249,2019-03-09 12:00:50+00:00,"#beginner #fact

Интересные факты по поводу строк в Golang.

https://prglb.ru/4lun1",3011,0,0,goproglib
248,2019-03-09 10:00:22+00:00,"#advanced #библиотека 

Прокси для работы с базой данных ClickHouse.

https://prglb.ru/w8rf",2573,0,0,goproglib
247,2019-03-08 12:00:25+00:00,"#beginner #video 

Создаем RESTful приложение на Golang и MongoDB.

https://prglb.ru/3ri1c",3209,0,0,goproglib
246,2019-03-08 10:00:18+00:00,"#advanced #tutorial

В этом небольшом справочнике вы узнаете, какие бывают баги при многопоточном программировании на Go.

https://prglb.ru/3d5mg",2859,0,0,goproglib
245,2019-03-07 11:02:13+00:00,"#вакансия

**Golang Senior Fullstack Developer**

**от 150 000 до 200 000 рублей**   **Удаленно**

**Обязательные требования:**
- Опыт построения API с помощью Go-Restful, Gin, Go-Micro или любой другой популярной библиотекой;
- Понимание, что такое vendoring, опыт использования glide, godep, go modules;
- Опыт работы с pub/sub (например, go-nsq);
- Опыт работы с gGRPC, Protobuf;
- Опыт работы с каким-либо ORM (gorm, sqlboiler).

** Общие требования:**
- Работа с docker и docker-compose на уровне пользователя;
- Желателен опыт работы с каким-либо CI/CD (CircleCI, TravisCI, Drone);
- Понимание очередей сообщений, опыт работы с RabbitMQ, Kafka или NSQ;
- Опыт работы в Scrum/Kanban команде;
- Знание принципов построения микросервисной архитектуры (choreography vs orchestration);
- Опыт работы с ELK стеком, Graylog или чем-то подобным для логов;
- Опыт работы с Kubernetes. Базовые знания, желательно с опытом написания helm charts.

**Откликнуться:**   @syomkina_olga",3703,0,0,goproglib
244,2019-03-07 10:00:37+00:00,"#advanced #библиотека 

Еще одно современное, с хорошей документацией хранилище типа ключ-значение.

https://prglb.ru/5s4jz",2753,0,0,goproglib
243,2019-03-06 12:00:15+00:00,"#beginner #библиотека 

Вроде бы мелочь, но кто не хотел раскрасить вывод терминала? С этой библиотекой это более, чем возможно.

https://prglb.ru/530i7",2998,0,0,goproglib
242,2019-03-06 10:00:17+00:00,"#advanced

В этой статье автор покажет, как соединить React с Go и написать простое приложение.

https://prglb.ru/18m5a",2891,0,0,goproglib
241,2019-03-05 12:00:12+00:00,"#beginner #tutorial 

Работает с PDF документами с помощью Go.

https://prglb.ru/vqid",3108,0,0,goproglib
240,2019-03-05 10:00:15+00:00,"#beginner #tutorial

Популярные ссылки для начинающих по изучению Go.

https://prglb.ru/4j3x",2547,0,0,goproglib
239,2019-03-04 12:00:19+00:00,"#advanced 

Об управлении версиями пакетов в Golang.

https://prglb.ru/4lp0t",2995,0,0,goproglib
238,2019-03-04 10:00:28+00:00,"#advanced #tutorial

Анатомия функций в Golang.

https://prglb.ru/1pk47",3010,0,0,goproglib
237,2019-03-03 12:00:40+00:00,"#advanced #video

Качественное введение в шаблоны проектирования на Go.

https://prglb.ru/5ojo7",3246,0,0,goproglib
236,2019-03-03 10:00:55+00:00,"**30 лучших книг для освоения языка программирования Go**

Ищете книги по Go? Представляем 30 книг для освоения языка программирования Go, которые ответят на вопросы новичков и уверенных разработчиков.

https://prglb.ru/1ye97",2840,0,0,goproglib
235,2019-03-02 12:00:27+00:00,"#advanced #библиотека 

Аутентификация в веб-приложении — это полезно и необходимо, но, надо признать, мы так часто пишем ее, что она уже наскучила. Что если вам нужно делать действительно необходимые вещи? Берете следующую библиотеку, настраиваете и забываете об этом.

https://prglb.ru/5bn4e",2632,0,0,goproglib
234,2019-03-02 10:00:10+00:00,"**Работа с PostgreSQL: от полного нуля до полного просветления**

Работа с PostgreSQL не отличается от работы с любой другой СУБД, но знать синтаксис все-таки полезно. Предлагаем вашему вниманию вводный курс по основам.

https://prglb.ru/4ja8l",2831,0,0,goproglib
233,2019-03-01 12:00:49+00:00,"#advanced 

Библиотека для реализации консольных приложений на Go.

https://prglb.ru/3y5b9",2623,0,0,goproglib
232,2019-03-01 10:00:55+00:00,"#advanced #graphql

Основы работы Go с популярным нынче языком запросов GraphQL.

https://prglb.ru/3i9cr",2622,0,0,goproglib
231,2019-02-28 12:00:23+00:00,"#advanced 

Ошибки сопровождают разработчиков чаще, чем хорошие идеи, поэтому к ним надо быть готовым основательно. Эта статья расскажет, как проводить ревизию ошибок. 

https://prglb.ru/5gkd5",3020,0,0,goproglib
230,2019-02-28 10:00:25+00:00,"#advanced 

Огромная статья с советами, как поддерживать проекты на Go в реальном мире. 

https://prglb.ru/5xmvq",2917,0,0,goproglib
228,2019-02-27 12:00:26+00:00,"#advanced #mongo

Создаем REST API приложение на Go и MongoDB.

https://prglb.ru/1rlh8",3536,0,0,goproglib
227,2019-02-27 10:00:24+00:00,"#advanced #news

Пару дней назад состоялся релиз go 1.12. По ссылке можно посмотреть, что изменилось в новой версии, а также скачать ее и попробовать на практике. 

https://prglb.ru/1g6di",2801,0,0,goproglib
226,2019-02-26 19:00:42+00:00,"#book

Если вы начинающий программист и до сих пор не решили, на каком языке будете писать свои приложения, возможно, вам стоит посмотреть в сторону быстро набирающего популярность языка Go, разработанного компанией Google. И лучше всего начать с этой книги, где вы прочитаете о предназначении и преимуществах языка, и о том, как писать программы на нём. Стоит обратить внимание, что одним из авторов книги является Брайан Керниган, ставший в своё время соавтором другой популярной книги — Язык программирования Си, заслуженно почитаемой программистами на этом языке. 

https://t.me/progbook/2535",2929,0,0,goproglib
225,2019-02-26 10:00:14+00:00,"#advanced 

Создаем хранилище ключ-значение на Golang.

https://prglb.ru/4kjsh",2816,0,0,goproglib
224,2019-02-25 12:00:14+00:00,"#advanced 

Все, что нужно знать о пакетах в Go.

https://prglb.ru/5k3ky",3141,0,0,goproglib
223,2019-02-25 10:00:19+00:00,"#advanced 

Работаем с очередями с помощью Go и RabbitMQ.

https://prglb.ru/2q3pb",2866,0,0,goproglib
222,2019-02-24 12:00:35+00:00,"#advanced 

От архитектуры приложения зависит его жизнеспособность и расширяемость, поэтому о ней нужно думать с самого начала. В этой статье автор расскажет о принципах чистой архитектуры на Golang.

https://prglb.ru/1vne7",3189,0,0,goproglib
221,2019-02-24 10:00:45+00:00,"#advanced #web

Пишем веб-сервис на Golang. 

https://prglb.ru/5f6ny",2914,0,0,goproglib
220,2019-02-23 12:00:32+00:00,"#advanced #book

Go — это язык нового поколения, предназначенный для разработки приложений с параллельной обработкой, для создания облачных, системных и веб-приложений. Тем, кто уже знаком с другими языками, такими как Java, C или C#, настоящей книги будет достаточно для того, чтобы начать профессионально использовать Go в ежедневной разработке. Книга быстро познакомит с основами языка, перейдя к объяснению таких тем, как тестирование и отладка, маршрутизация, создание сетевых и веб-служб, также она содержит решения множества типовых задач.

https://t.me/progbook/2477",2940,0,0,goproglib
219,2019-02-23 10:00:42+00:00,"#advanced 

Не исправляйте баги, исправляйте систему! 

https://prglb.ru/27vii",2440,0,0,goproglib
218,2019-02-22 12:00:29+00:00,"#advanced 

Структуры данных на Go: деревья.

https://prglb.ru/410h3",2684,0,0,goproglib
217,2019-02-22 10:00:23+00:00,"#advanced 

Основа для создания веб-сервисов на Go.

https://prglb.ru/2e3vx",2591,0,0,goproglib
216,2019-02-21 12:00:22+00:00,"#advanced 

История про тестирование в Go.

https://prglb.ru/4k62o",3198,0,0,goproglib
215,2019-02-21 10:00:23+00:00,"#advanced 

Гайд по работе с памятью в Go. 

https://prglb.ru/11g1g",3036,0,0,goproglib
214,2019-02-20 15:00:46+00:00,"#advanced 

А вы в курсе, насколько Go производительный? Если вы в это не верите и не видите разницу с другими языками, вот вам пример репозитория с проектом, который обрабатывает миллион подключений одновременно. 

https://prglb.ru/34yrj",3022,0,0,goproglib
213,2019-02-20 10:00:36+00:00,"#video #sqlite

Спикер в видео очень старательно объяснил, чем хорошо использовать Go совместно с SQLite.

https://prglb.ru/1hz29",2804,0,0,goproglib
212,2019-02-19 10:43:36+00:00,"**О языке SQL на примере SQLite, MySQL и PostgreSQL**

Говоря о БД, нельзя не вспомнить о языке SQL, СУБД и запросах, непонятных на первый взгляд. После нашей статьи вы освоите основы SQL.

https://prglb.ru/4e1o1",3424,0,0,goproglib
210,2019-02-18 12:00:28+00:00,"#advanced 

Предрелиз Go 1.12. Какие будут изменения - читаем в статье. 

https://prglb.ru/h849",3425,0,0,goproglib
209,2019-02-18 10:00:45+00:00,"#beginner  #best_practices 

Немного лучших практик по Go начинающим разработчикам. 

https://prglb.ru/4edc3",2861,0,0,goproglib
208,2019-02-17 12:00:59+00:00,"#advanced 

Пример еще одного роутинга на Go для создания веб-приложений.

https://prglb.ru/358uu",3324,0,0,goproglib
207,2019-02-17 10:01:03+00:00,"#advanced 

Пример создания подписок на Go. Возможно, вам как раз очень не хватает такого функционала в ваших скромных приложений.

https://prglb.ru/4ch8r",3206,0,0,goproglib
206,2019-02-16 12:00:52+00:00,"#advanced 

Очередной HTTP клиент для Go.

https://prglb.ru/5ozgf",3153,0,0,goproglib
205,2019-02-16 10:01:01+00:00,"#advanced 

Мигрируем на модули Go за три шага.

https://prglb.ru/78ae",2844,0,0,goproglib
204,2019-02-15 12:00:39+00:00,"#advanced #библиотека

Библиотека для работы с нативными SQL запросами в Go. 

https://prglb.ru/59yf5",3337,0,0,goproglib
203,2019-02-15 10:00:54+00:00,"#advanced 

В этой статье разбираемся, как мокать в Go. 

https://prglb.ru/498wm",3156,0,0,goproglib
202,2019-02-14 12:00:38+00:00,"#advanced #библиотека

Простой веб-сервер на Go для обработки статических страниц. 

https://prglb.ru/1mv7n",3652,0,0,goproglib
201,2019-02-14 10:00:47+00:00,"#advanced 

Деплоим проект на Go через Docker.

https://prglb.ru/14u8p",3521,0,0,goproglib
200,2019-02-13 10:00:20+00:00,"#advanced

Возможно, на раннем этапе программирования вы не используете паттерны и пишете тяжело читаемый и сложно связанный код. Эта статья познакомит вас с методами исправления связности, которые помогут вам легко рефакторить и писать код. 

https://prglb.ru/2hgw2",3901,0,0,goproglib
199,2019-02-12 19:00:13+00:00,"#advanced 

Как известно, Go достаточно терпим к ошибкам и надежно защищает разработчиков от многих из них, однако ошибки все-таки бывают. В этой статье автор поделится методами продвинутой обработки ошибок в Go. 

https://prglb.ru/91g7",3094,1,0,goproglib
198,2019-02-12 10:00:17+00:00,"#advanced

Дайджест по Go с последней недели: 
- состояние Go на февраль 2019 года;
- что ждать от Go в 2019: дженерики, модули, улучшенный обработчик ошибок;
- алгоритмы и структуры данных на Go.

https://prglb.ru/20fq4",3123,0,0,goproglib
197,2019-02-11 19:00:30+00:00,"#advanced 

Интерактивная шпаргалка по Go для начинающих. 

https://prglb.ru/3d742",3152,0,0,goproglib
196,2019-02-11 10:10:04+00:00,"#beginner

Основы Go для самых начинающих. Вы узнаете, что такое Go, какие у него особенности, где часто применяется и многое другое.

https://prglb.ru/4up53",3100,0,0,goproglib
195,2019-02-10 14:00:28+00:00,"**REST API приложение на Go: пошаговый туториал**

В этой статье мы рассмотрим, как создать REST API приложение на языке Go: лучшая пошаговая инструкция с использованием популярной архитектуры.

https://prglb.ru/k4dn",3634,0,0,goproglib
194,2019-02-10 12:00:50+00:00,"#book #advanced 

В последнее время Go покорил не только многих начинающих разработчиков, но и рынок разработки: от простых веб-приложений до сложных highload-проектов. Настоящее руководство познакомит вас с основами создания веб-приложений на языке Go, его особенностями перед другими языками и примерами проектов, которые вы сможете написать после изучения. 

https://t.me/progbook/2442",2772,0,0,goproglib
193,2019-02-09 13:00:46+00:00,"#book #beginner 

Онлайн-книга по Go, рассматривающая основы языка, такие как горутины, функции, каналы, интерфейсы, методы, структуры, указатели и многое другое.

https://go101.org/article/101.html",2828,0,0,goproglib
192,2019-02-09 11:00:40+00:00,"#advanced #библиотека 

Продвинутая библиотека для реализации авторизации на сайте с поддержкой ACL, RBAC и многое другое.

https://github.com/casbin/casbin",2714,0,0,goproglib
191,2019-02-08 10:00:28+00:00,"#advanced

В этой статье автор расскажет, почему горутины не легче обычных потоков.

https://bit.ly/2MSIJGY",3133,0,0,goproglib
190,2019-02-07 19:00:37+00:00,"#advanced 

Если вы собираетесь написать веб-приложение на Go, советуем посмотреть в строну этого небольшого фреймворка.

https://github.com/micro/go-web",3211,0,0,goproglib
189,2019-02-07 10:00:58+00:00,"#advanced #best_practices

Лучшие практики использования языка Go с хорошими примерами кода.

https://github.com/codeship/go-best-practices",3377,0,0,goproglib
188,2019-02-06 10:00:31+00:00,"#advanced 

Туториал для опытных разработчиков на Go, рассматривающий необычные возможности и дополнения языка.

https://tutorialedge.net/golang/advanced-go-testing-tutorial/",3690,0,0,goproglib
187,2019-02-05 12:00:15+00:00,"#book #advanced 

На сегодняшний день Go - самый впечатляющий из новых языков программирования. Изначально он создавался для того, чтобы помочь задействовать всю мощь современных многоядерных процессоров. В этом руководстве Марк Саммерфильд, один из основоположников программирования на языке Go, показывает, как писать программы, в полной мере использующие его революционные возможности и идиомы. Данная книга представляет собой одновременно и учебник, и справочник, сводя воедино все знания, необходимые для того, чтобы продолжать освоение Go, думать на Go и писать на нем высокопроизводительные программы.

https://t.me/progbook/372",4220,0,0,goproglib
186,2019-02-05 10:00:16+00:00,"#advanced #web 

Пример готового MVC приложения на Go.

https://github.com/josephspurrier/gowebapp",2975,0,0,goproglib
185,2019-02-04 12:00:12+00:00,"#advanced #design_patterns 

Список популярных паттернов проектирования, реализованных на языке Go.

https://github.com/tmrts/go-patterns",3346,0,0,goproglib
184,2019-02-04 10:00:13+00:00,"#beginner #web

Небольшой онлайн-туториал по основам создания веб-приложений на Go. Вы узнаете про роутинг, основы Request/Response, обработку форм и многое другое.

https://gowebexamples.com/",3042,0,0,goproglib
183,2019-02-03 12:00:17+00:00,"#библиотека #beginner 

Библиотека для работы с переменными окружения.

https://github.com/caarlos0/env",3021,0,0,goproglib
182,2019-02-03 10:00:20+00:00,"#video #advanced 

Постоянно слышите про микросервисы и про то, что Go считается лучшим решением для них? Этот видеокурс направлен на изучение микросервиной архитектуры и построения API с использованием языка Go.

https://bit.ly/2RCR6HL",3185,0,0,goproglib
181,2019-02-02 12:00:18+00:00,"#advanced 

Как развивалась сборка мусора в Go — узнаем из этой статьи.

https://bit.ly/2Gmxupj",2973,0,0,goproglib
180,2019-02-02 10:00:56+00:00,"#advanced 

Разбираем работу пакетов bytes strings в C++.

https://bit.ly/2ta3Lbn",2416,0,0,goproglib
179,2019-02-01 12:00:15+00:00,"#библиотека 

Пример чат бота для Slack и Telegram на Go.

https://github.com/go-chat-bot/bot",2913,0,0,goproglib
178,2019-02-01 10:00:20+00:00,"**10 советов: как подтянуть разговорный английский язык**

Хотите работать в международных компаниях, но знаете только русский? Рассказываем, как подтянуть разговорный английский язык программисту.

https://proglib.io/p/english-communication/",2730,0,0,goproglib
177,2019-01-31 12:00:13+00:00,"#advanced 

Занимательный туториал по многопоточному программированию на Go.

https://pragmacoders.com/blog/multithreading-in-go-a-tutorial",2867,0,0,goproglib
176,2019-01-31 10:00:13+00:00,"#advanced 

Список реализованных приложений на Go для вдохновления.

http://www.golangprograms.com/advance-programs.html",2792,0,0,goproglib
175,2019-01-30 12:00:26+00:00,"#advanced 

Надёжность Go в инфраструктуре DropBox.

https://about.sourcegraph.com/go/go-reliability-and-durability-at-dropbox-tammy-butow",2958,0,0,goproglib
174,2019-01-30 10:00:27+00:00,"#advanced 

Полный обзор на написание собственной утилиты для Go.

https://arslan.io/2017/09/14/the-ultimate-guide-to-writing-a-go-tool/",2761,0,0,goproglib
173,2019-01-29 12:00:21+00:00,"#паттерны

Список известных паттернов проектирования на Go.

https://github.com/AlexanderGrom/go-patterns",3309,0,0,goproglib
172,2019-01-29 10:00:25+00:00,"#библиотека 

Библиотека для создания ботов для Telegram.

https://github.com/zhulik/margelet",2885,0,0,goproglib
171,2019-01-28 12:00:17+00:00,"#advanced #docker

Сегодня в профессиональной разработке стандартом является система контейнеризации Docker. Однако несмотря на все преимущества по сравнению с виртуальными машинами, Docker тоже может тормозить. Давайте разберёмся, какие могут быть причины для этого.

https://bit.ly/2JTjjr2",3942,0,0,goproglib
170,2019-01-28 10:00:23+00:00,"#book

Карл Сегуин — автор множества коротких руководств, связанных с программированием и несущие важную в пределах своего объёма информацию, необходимую в той или иной области разработки. В этот раз мы представляем Вашему вниманию одну из его самых популярных книг, а именно — “Маленькая книга по Go”, распространяющаяся в свободном доступе. В ней вы познакомитесь с основами языка, концепциями программирования, напишите первую программу и подготовитесь к более глубокому изучению этого современного языка. 

https://sefus.ru/little-go-book/",2632,0,0,goproglib
169,2019-01-27 16:00:34+00:00,"#docker #advanced 

Как докеризировать ваш проект на Go? Узнаем из следующей статьи.

https://bit.ly/2DDcfxI",2513,0,0,goproglib
168,2019-01-27 15:00:49+00:00,"#библиотека #advanced 

Веб-сервер для Go со свтроенными HTTP/2, Lua, Markdown и многими другими полезными инструментами.

https://github.com/xyproto/algernon",2349,0,0,goproglib
167,2019-01-26 12:00:52+00:00,"#beginner #git

Онлайн-туториал по Git Flow для начинающих разработчиков. 

https://ru.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow",2735,0,0,goproglib
166,2019-01-26 10:01:04+00:00,"#book 

Go - настоящая звезда современного программирования. Лёгкий, мощный, язык показал себя достаточно способным и используется сегодня почти везде, где раньше использовали языки по типу PHP и Java. Язык и правда легко учится, однако только теми, кто уже знаком с программированием, для начинающих всё-таки стоит относится к изучению внимательно. В этом руководстве автор, известный педагог и писатель Марк Саммерфилд, познакомит вас с основами программированию через язык Go. В книге множество примеров и удобно выделенный код. 

https://t.me/progbook/1679",2635,0,0,goproglib
165,2019-01-25 12:00:24+00:00,"#advanced 

Компилируем Go в WebAssembly.

https://www.sitepen.com/blog/compiling-go-to-webassembly/",2638,0,0,goproglib
164,2019-01-25 10:00:32+00:00,"#библиотека #beginner

Библиотека по работе с PDF на Go.

https://github.com/hhrutter/pdfcpu",2449,0,0,goproglib
163,2019-01-24 12:00:17+00:00,"#advanced 

Go на Windows? Легко! В этой статье автор расскажет, как работать с API данной ОС.

https://bit.ly/2AYJidz",2901,0,0,goproglib
162,2019-01-24 10:00:14+00:00,"#advanced 

Создаём SSH туннель на Go!

http://elliot.land/post/how-to-create-an-ssh-tunnel-in-go",2500,0,0,goproglib
161,2019-01-23 12:00:36+00:00,"#beginner

Теория современного Go. 

https://peter.bourgon.org/blog/2017/06/09/theory-of-modern-go.html",2906,0,0,goproglib
160,2019-01-23 10:00:37+00:00,"#advanced 

Полезные инструменты для Go разработчика: лейблы-профайлера. 

https://rakyll.org/profiler-labels/?utm_source=golangweekly&utm_medium=email",2720,0,0,goproglib
159,2019-01-22 12:00:58+00:00,"#advanced 

До сих пор не умеете пользоваться интерфейсами в Go? Исправляем недоразумение следующей статьёй.

https://blog.chewxy.com/2018/03/18/golang-interfaces/",3405,0,0,goproglib
158,2019-01-22 11:00:29+00:00,"#beginner

Поговорим о недостатках и преимуществах языка Go. 

https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/",2948,1,0,goproglib
157,2019-01-21 12:00:36+00:00,"#advanced 

Композиция интерфейсов в Go.

https://bit.ly/2LSmFvI",3151,0,0,goproglib
156,2019-01-21 10:00:53+00:00,"#beginner

Полный обзор на создание веб-приложений на Go.

https://bit.ly/2HjfxtE",2994,0,0,goproglib
155,2019-01-20 12:00:35+00:00,"#advanced 

Библиотека реализованных структур данных на Go.

https://github.com/emirpasic/gods",3332,0,0,goproglib
154,2019-01-20 10:00:42+00:00,"На этот раз вам предлагается прочитать книгу по Go, где на многочисленных иллюстрациях и примерах показаны основы программирования на этом языке, основы построения и структура приложений.",3755,0,0,goproglib
153,2019-01-19 12:00:14+00:00,"#advanced 

Сравнение производительности Go с другими языками. 

https://www.toptal.com/back-end/server-side-io-performance-node-php-java-go",3092,0,0,goproglib
152,2019-01-19 10:00:35+00:00,"#advanced 

Пишем Kubernetes оператора на Golang.

https://bit.ly/2T3dwDc",2707,0,0,goproglib
151,2019-01-18 12:00:38+00:00,"#beginner

Разбираемся с пакетом IO в Go.

https://bit.ly/2FyhroK",2762,0,0,goproglib
150,2019-01-18 10:00:47+00:00,"#beginner 

В этой статье автор расскажет о том, что было бы, если бы в языке  Go не было глобальных переменных.

https://bit.ly/2sc6lOG",2363,0,0,goproglib
149,2019-01-17 12:00:34+00:00,"#beginner

В этой статье автор покажет, как писать простые приложения для командной строки. 

https://bit.ly/2MfpC9V",3016,0,0,goproglib
148,2019-01-17 10:00:43+00:00,"#библиотека #beginner 

Забавная библиотека по генерированию аватаров. Для веб-приложений самое то. 

https://github.com/aofei/cameron",2372,0,0,goproglib
147,2019-01-16 12:00:41+00:00,"#book

Go набирает популярность, и сфера его применения становится шире, что делает выбор в пользу этого языка при разработке ещё более очевидным. Настоящее руководство предназначено опытным программистам и раскрывает важные темы, связанные с профессиональной разработкой, как то: структуры данных, работа с библиотеками, параллелизм и многое другое.

https://t.me/progbook/2038",2862,0,0,goproglib
146,2019-01-16 10:00:52+00:00,"#web #beginner 

Go очень хорош для создания веб-приложений: он быстрый, простой и предоставляет богатую библиотеку компонентов вроде роутинга, базы данных и шаблонизатора. В этой статье вы посмотрите, как создаются простые приложения на Go.

https://golang.org/doc/articles/wiki/",2593,0,0,goproglib
145,2019-01-15 12:00:44+00:00,"#advanced 

Если коротко, монады используют для связывания функций, а если нужно подробно — читайте статью.

https://awalterschulze.github.io/blog/post/monads-for-goprogrammers/",2924,0,0,goproglib
144,2019-01-15 10:00:52+00:00,"#advanced 

Обзор функций округления в нашем любимом Go. 

https://www.cockroachlabs.com/blog/rounding-implementations-in-go/",2523,0,0,goproglib
143,2019-01-14 12:00:46+00:00,"#библиотека #advanced 

Удобная библитека по работе с json и yaml данными.

https://github.com/olebedev/config",2825,0,0,goproglib
142,2019-01-14 10:00:56+00:00,"#advanced

Наверняка многие из вас слышали про модную технологию JWT для авторизации на сайте, но немногие умеют с ней работать в Go. Эта статья поможет вам с этим разобраться и начать использование. 

https://4gophers.ru/articles/avtorizaciya-v-go-s-ispolzovaniem-jwt/#.XDxXDt_njQo",2729,0,0,goproglib
141,2019-01-13 12:00:30+00:00,"#beginner

Топ 10 загружаемых пакетов на проект с Go.

https://bit.ly/2Fp5667",2832,0,0,goproglib
140,2019-01-13 10:00:42+00:00,"#библиотека 

Badger — это быстрое хранилище типа ключ-значение.

https://github.com/dgraph-io/badger",2359,0,0,goproglib
139,2019-01-12 12:00:26+00:00,"#beginner 

В Go нет привычных нам классов и объектов, однако это не мешает многим разработчикам считать этот язык объектно-ориентированным. В этой статье автор попытается объяснить, почему это не так.

https://spf13.com/post/is-go-object-oriented/",2576,0,0,goproglib
138,2019-01-12 10:00:38+00:00,"#advanced 

В этой статье автор создаёт приложение на Go с помощью потоков для генерации мозаиков из загруженных фотографий.

https://blog.saush.com/2015/06/24/creating-a-photo-mosaic-web-app/",2371,0,0,goproglib
137,2019-01-11 12:00:24+00:00,"#advanced 

Каналы (channels) представляют собой инструменты коммуникации между горутинами. В этой статье вы узнате, как устроены эти самые каналы.

https://bit.ly/2b8Z1I3",2758,0,0,goproglib
136,2019-01-11 10:00:34+00:00,"#best_practices 

Кому интересно, как выглядит обычная организация кода в Go, добро пожаловать в статью.

https://bit.ly/2oZXLAr",2546,0,0,goproglib
135,2019-01-10 12:00:20+00:00,"**16 трюков для консоли Linux**

Сделали новую подборку трюков для консоли Linux. Будет полезно и новичкам, и профессионалам.

https://proglib.io/p/new-linux-tricks/",3364,0,0,goproglib
134,2019-01-10 10:00:20+00:00,"#video #beginners 

Когда начинаешь программировать на каком-либо языке, возникает острое желание применять его там, где это будет полезным. Если вам не удаётся найти такой проект, в этом курсе авторы научат вас языку Go, используя реальные примеры вроде игр, сетевых приложений, веб API и приложений командной строки. 

https://bit.ly/2F9H92H",2647,0,0,goproglib
133,2019-01-09 12:00:18+00:00,"#библиотека #advanced 

Osin — это библиотека для работы с протоколом OAuth2. Если вы не слышали о нём, этот протокол позволяет пользователям авторизовываться через сторонние приложения.

https://github.com/openshift/osin",2690,0,0,goproglib
132,2019-01-09 10:00:16+00:00,"#book

Если у вас уже есть опыт программирования на других языках и вы хотели бы изучить другую технологию, то вам стоит обратить внимание на популярный язык Go, а эта книга поможет вам быстро выучить его концепции и принципы. Руководство представляет из себя интенсивный и всесторонний курс по Go, затрагивая сложные темы языка, такие как параллелизм, система типов и тестирование. 

https://t.me/progbook/1291",2584,0,0,goproglib
131,2019-01-08 12:00:26+00:00,"#book

Несмотря на свою молодость, спецификация языка программирования Go позволяет применять его в разных областях разработки, включая также веб и сетевое программирование. Эта книга раскроет аспекты применения языка в разработке сетевой архитектуры, включая объяснения сериализации данных, протоколов уровня приложений и кодировок. Кроме того, автор касается рассмотрения разницы HTTP и HTTPS, веб-сокетов, RPC и многого другого.

https://t.me/progbook/1107",2796,0,0,goproglib
130,2019-01-08 10:00:39+00:00,"#video #beginner 

Если вы соскучились по интересным заданиям и практическим упражнениям, в этом курсе они есть. Например, вы научитесь работать с авторизацией, СУБД PostgreSQL, MVC, REST и многим другим.

https://bit.ly/2RIBtTf",2506,0,0,goproglib
129,2019-01-07 12:00:12+00:00,"#beginners 

Небольшая статья про косточки в Go, в частности, про пакет encoding.

https://bit.ly/2C3M80U",2569,0,0,goproglib
128,2019-01-07 10:00:10+00:00,"#advanced 

Подробная статья про логирование, интерфейсы и аллокации в Go.

http://commaok.xyz/post/interface-allocs/",2402,0,0,goproglib
127,2019-01-06 12:00:35+00:00,"#advanced 

В Go 1.9 появились лейблы профайлера. Что это такое, можно узнать [тут](https://github.com/golang/proposal/blob/master/design/17280-profile-labels.md), а как ими пользоваться — [тут](https://bit.ly/2VxDVuM).",2565,0,0,goproglib
126,2019-01-06 10:00:46+00:00,"#advanced #oop

Если вы ещё не использовали такую интересную возможность языка Go как композиция интерфейсов, время посмотреть, что это такое и где можно применить. 

https://bit.ly/2LSmFvI",2229,0,0,goproglib
125,2019-01-05 12:00:27+00:00,"#advanced 

Рефакторим код на Go  и увеличиваем скорость работы программы в 23 раза.

https://bit.ly/2sU9nGJ",2577,0,0,goproglib
124,2019-01-05 10:00:31+00:00,"#microservices #advanced 

В этой статье автор расскажет, как использовать инструмент Go Kit для создания микросервисов.

https://bit.ly/2VpTaWB",2342,0,0,goproglib
123,2019-01-04 12:00:20+00:00,"#rest #advanced 

Данный большой плейлист научит вас создавать REST приложения на языке Go и с СУБД PostgreSQL. Также вы активно будете использовать Postman и дополнительные библиотеки.

https://bit.ly/2s9APzt",2536,0,0,goproglib
122,2019-01-04 10:00:35+00:00,"**Cистема контроля версий Git: расширенная шпаргалка**

Git — это популярная система контроля версий. Ее использует практически каждый проект, чья деятельность так или иначе связана с ИТ.

https://proglib.io/p/git-tips/",2230,0,0,goproglib
121,2019-01-03 12:00:22+00:00,"#advanced 

Для удобной структуры проекта в разных языках используют разные строительные единицы вроде пакетов, пространств имён или модулей. В этой статье вы научитесь использовать модули языка Go.

https://roberto.selbach.ca/intro-to-go-modules/",2333,0,0,goproglib
120,2019-01-03 10:00:30+00:00,"#book

Сегодня ситуация такая, что ваше приложение либо может остаться вообще без пользователей, либо же обрабатывать передаваемые ими огромные массивы данных. Это руководство научит вас, как создавать веб-приложения на Go с использованием микросервисной архитектуры и облачных технологий. Если вы уже знакомы с основами разработки на Go, вам будет достаточно применить свои знания, чтобы создавать современные приложения в стеке Go и React.

https://t.me/progbook/2195",2341,0,0,goproglib
119,2019-01-02 12:00:23+00:00,"#docker #beginners 

Давайте подробно рассмотрим, как деплоится Go приложение на сервер с помощью Docker.

https://blog.golang.org/docker",2530,0,0,goproglib
118,2019-01-02 10:00:37+00:00,"#beginners #oop 

Является ли Go объектно-ориентированным языком? Узнаем об этом в следующей подробной статье:

https://www.ardanlabs.com/blog/2013/07/object-oriented-programming-in-go.html",2294,0,0,goproglib
117,2018-12-30 12:00:28+00:00,"#advanced 

Если коротко, горутины — это функции, работающие параллельно с другими функциями. В этой же статье вы узнаете, как контролировать смерть горутин.

https://blog.labix.org/2011/10/09/death-of-goroutines-under-control",2683,0,0,goproglib
116,2018-12-30 10:00:36+00:00,"#advanced 

Интересная статья по основам обработки ошибок в Go и  ключевым словам: Defer, Panic и Recover.

https://blog.golang.org/defer-panic-and-recover",2339,0,0,goproglib
115,2018-12-29 12:00:25+00:00,"#book

Очередное небольшое обучающее руководство по Go, охватывающее одну конкретную тему, на этот раз  -  базы данных. Если вы уже хорошо знакомы с основами веб-разработки на других языках, данный справочник придётся вам по вкусу: в нём рассматриваются популярные пакеты для работы с СУБД MySQL, примеры простых запросов и работа с подготовленными выражениями.

https://t.me/progbook/2177",2531,0,0,goproglib
114,2018-12-29 10:00:21+00:00,"#beginners 

Статья в двух частях, в которой автор расскажет про интересные возможности обработки ошибок в Go.

Часть 1:
https://bit.ly/2CG8Zkv

Часть 2:
https://bit.ly/2LEcmLJ",2272,0,0,goproglib
113,2018-12-28 12:00:18+00:00,"#beginners 

На этом сайте вы найдёте множество книг, онлайн-туториалов и других источников по изучению Go для начинающих.

https://hackr.io/tutorials/learn-golang",2430,0,0,goproglib
112,2018-12-28 10:00:34+00:00,"#beginners

Топ онлайн-курсов по программированию на Go, которые сделают из вас настоящего разработчика (вероятно).

https://bit.ly/2TiZCgh",2454,0,0,goproglib
111,2018-12-27 12:00:39+00:00,"#библиотека 

Имплементация технологии JWT на Go.

https://github.com/robbert229/jwt",2421,0,0,goproglib
110,2018-12-27 10:01:01+00:00,"#book

Вам достаточно посмотреть на список тем, раскрываемых автором книги, чтобы понять, что вам точно нужно прочитать данное руководство после того, как вы пройдёте курс начинающего Go разработчика. В этом современном справочнике вы узнаете про работу с базами данных, микросервисы, параллельное программирование и построение REST API приложений.

https://t.me/progbook/2193",2341,0,0,goproglib
109,2018-12-26 12:00:41+00:00,"#video #beginners 

Большой и подробный курс для начинающих Go разработчиков, только к нам присоединившимся. Этих видео вам хватит с лихвой, чтобы вы поняли философию языка и приступили к созданию эффективных приложений.

https://bit.ly/2V9SV1J",2501,0,0,goproglib
108,2018-12-26 10:00:51+00:00,"#best_practices 

Репозиторий с лучшими практиками  по Go, охватывающие темы параллельного программирования, зависимостей, обработки ошибок, тестов и многого другого.

https://github.com/codeship/go-best-practices",2313,0,0,goproglib
107,2018-12-25 12:00:24+00:00,"#book

Сообщество языка Go так любит его в целом и по отдельности, что пишет десятки небольших руководств не хуже профессиональных изданий. Так и в этом руководстве автор рассматривает основы языка на многочисленных качественных примерах его работы. Вы узнаете про основные типы в языке и его конструкции, а также познакомитесь с работой его модели параллелизма.

https://t.me/progbook/2188",2438,0,0,goproglib
106,2018-12-25 10:00:53+00:00,"#beginners #advanced 

Большой список библиотек, фреймворков и технологий по языку Golang в одном месте. 

https://github.com/uhub/awesome-go",2137,0,0,goproglib
105,2018-12-24 12:00:36+00:00,"#beginners 

Обязательный туториал для разработчиков любого уровня по правилам чистой архитектуры на языке Go.

https://bit.ly/2rRfZoo",2405,0,0,goproglib
104,2018-12-24 10:00:43+00:00,"**Чем хорош язык Go и зачем его изучать? Все плюшки Golang**

Язык Go – серверный язык будущего. В этой статье мы не будем разбирать «Hello World!», но затронем важность Golang и его характеристики.

https://proglib.io/p/language-go/",2210,0,0,goproglib
103,2018-12-23 12:00:30+00:00,"#book

Если вы уже прошли курс начинающего программиста на языке Golang и знаете про основы создания современных веб-приложений, следующее небольшое справочное руководство  -  это то, что вам нужно, чтобы начать создавать качественные веб-приложения на данном языке. Несмотря на маленький объём, книга охватывает самые нужные темы для профессиональной разработки.

https://t.me/progbook/2153

https://t.me/progbook/2154",2124,0,0,goproglib
102,2018-12-23 10:00:34+00:00,"#beginners 

Основы безопасности любого пользовательского приложения — это хеширование паролей. А как сделать правильно, разбираемся в этой статье.

https://bit.ly/2PWx1ev",2013,0,0,goproglib
101,2018-12-22 12:00:16+00:00,"#advanced #interview 

И ещё интересный материал с того сайта. На этот раз вы узнаете про частые вопросы, которые задают разработчикам на собеседовании и которые разработчики задают сами себе, когда знакомятся с Go.

https://golang.org/doc/faq",2091,0,0,goproglib
100,2018-12-22 10:00:13+00:00,"#advanced 

Effective Go — это онлайн-руководство по тому, как нужно правильно писать код на Go, используя его встроенные возможности и требования к code-style.

https://golang.org/doc/effective_go.html",1996,0,0,goproglib
99,2018-12-21 12:00:28+00:00,"#библиотека #advanced 

Библиотека для HTTP аутентификации в приложениях.

https://github.com/goji/httpauth",2420,0,0,goproglib
98,2018-12-21 10:00:58+00:00,"#git #beginners 

Удобный онлайн-тренажёр по системе контроля версий Git для начинающих разработчиков. Благодаря нему вы узнаете, как работать с ветвлениями, как отменять изменения и как мержить ветки.

https://learngitbranching.js.org/",2446,0,0,goproglib
97,2018-12-20 12:00:42+00:00,"#video #algorithms 

В данном видео автор подробно расскажет, как реализовать деревья на Go.

https://bit.ly/2T1CRwT",2483,0,0,goproglib
96,2018-12-20 10:00:49+00:00,"#beginners

Создаём легко масштабируемое приложений на Go с нуля. 

https://bit.ly/2EwMvDT",2047,0,0,goproglib
95,2018-12-19 12:00:23+00:00,"#docker

Создаём образ docker с Go с нуля.

https://bit.ly/2S7URpn",2174,0,0,goproglib
94,2018-12-19 10:00:50+00:00,"#book #beginners 

Настоящее руководство предназначено для тех, кто хочет писать быстрые и легко расширяемые веб-приложения на современном языке программирования Golang. Вы освоите не только основы построения веб-приложений на Go, но и научитесь использовать REST архитектуру, устанавливать и использовать сторонние библиотеки, а также тестировать готовые приложения.

https://t.me/progbook/2147",1981,0,0,goproglib
93,2018-12-18 12:00:35+00:00,"**30 лучших книг для освоения языка программирования Go**

Ищете книги по Go? Представляем 30 книг для освоения языка программирования Go, которые ответят на вопросы новичков и уверенных разработчиков.

https://proglib.io/p/30-golang-books/",2254,0,0,goproglib
92,2018-12-18 10:00:49+00:00,"#video #beginners 

В этом плейлисте очень подробно и на множестве простых примеров автор расскажет про основы языка Go.

https://bit.ly/2rG6zvM",2149,0,0,goproglib
91,2018-12-17 12:00:37+00:00,"#advanced 

В данном репозитории вы найдёте пример готового приложения на языке Go.

https://github.com/gothinkster/golang-gin-realworld-example-app",2553,0,0,goproglib
90,2018-12-17 10:00:50+00:00,"#advanced 

Правильное управление зависимостями влияет на эффективность и качество ваших приложений. В данной статье автор рассказывает о некоторых полезных приёмах управления зависимостями:

https://bit.ly/2EmGWbb",2187,0,0,goproglib
89,2018-12-16 12:00:23+00:00,"#algorithms #beginners 

Небольшая статья о том, как важно правильно реализовать алгоритм и как это влияет на скорость работы программы:

https://bit.ly/2GjSzlQ",2275,0,0,goproglib
88,2018-12-16 10:00:35+00:00,"#advanced 

Сегодня эффективность разработки зависит от умения использовать сторонние решения вроде библиотек и фреймворков. На этом сайте собраны самые популярные из них на разные случаи:

https://go.libhunt.com/",2062,0,0,goproglib
87,2018-12-15 12:00:27+00:00,"#advanced 

А теперь интересное, давайте напишем собственный HTTP(S) прокси на языке Go.

https://bit.ly/2zmLvg7",2500,0,0,goproglib
86,2018-12-15 10:00:39+00:00,"#rest #advanced 

В данной статье автор поделится опытом создания реального приложения с помощью архитектуры REST.

https://bit.ly/2A2qSIq",2049,0,0,goproglib
85,2018-12-14 12:00:26+00:00,"#библиотека 

tiedot — имплементация NoSQL базы данных в Go.

https://github.com/HouzuoGuo/tiedot",2053,0,0,goproglib
84,2018-12-14 10:00:34+00:00,"#инструменты

Если вы уже опытный разработчик и только начали изучение Go, вам может стать интересно, какие фреймворки и библиотеки популярны для этого языка:

https://bit.ly/2SK4vyo",2112,0,0,goproglib
83,2018-12-13 12:00:40+00:00,"#video #beginners 

В этом видеокурсе вы не только выучите синтаксис языка Go, но и научитесь применять методы параллельной разработки, встроенные функции и пакеты:

https://bit.ly/2Le4SPd",2242,0,0,goproglib
82,2018-12-13 10:00:29+00:00,"#beginners 

Онлайн-книга по замечательному языку Go с примерами:

http://www.golangbootcamp.com/book/",2026,0,0,goproglib
81,2018-12-12 12:00:21+00:00,"#video #advanced 

Очередное видео с митапа по Go. Здесь ещё больше интересного, смотрим:

https://www.youtube.com/watch?v=iriGUxZI-Cg",2413,0,0,goproglib
80,2018-12-12 10:00:44+00:00,"#beginners 

Не знаете, как и с чего начать изучение Go? В этой статье вы найдёте советы и книги для начала:

https://bit.ly/2PyoWwu",1976,0,0,goproglib
79,2018-12-11 12:00:32+00:00,"#video #advanced 

На Go можно делать какие угодно приложения, в том числе и сетевые. В этом видео мы познакомимся с тем, как использовать веб-сокеты на Go.

https://www.youtube.com/watch?v=CIh8qN7LO8M",2408,0,0,goproglib
78,2018-12-11 10:00:39+00:00,"#book #beginners 

Golang-book — это всегда актуальное онлайн-руководство по всеми нами любимому языку программирования Go.

http://golang-book.ru/",2046,0,0,goproglib
77,2018-12-10 12:00:29+00:00,"#video #advanced 

Хотите узнать, как выглядит Go в продакшене? Узнаем это из доклада программиста Яндекса.

https://www.youtube.com/watch?v=i97OIC8Lbjw",2454,0,0,goproglib
76,2018-12-10 10:00:44+00:00,"#библиотека #beginners 

GraphQL — это язык запросов, используемый для описания запрашиваемых данных на клиенте. Данная библиотека является реализацией GraphQL для языка Go.

https://github.com/graphql-go/graphql",1956,0,0,goproglib
75,2018-12-09 12:00:32+00:00,"#beginners 

Подробная статья о том, почему нужно любить замечательный язык Golang.

https://bit.ly/2Ek54Ml",2357,0,0,goproglib
74,2018-12-09 10:00:22+00:00,"#book 

Книга познакомит вас с ключевыми темами в сетевом программировании и языка Go. Вы узнаете о сериализации данных, протоколах уровня приложений, сетевой архитектуре, кодировках и многом другом. Книга охватывает базовые концепции сетевого программировании на языке Go, включая проблемы безопасности, веб-сокеты, рассмотрение протоколов HTTP и HTTPS. Также вместе с автором вы напишите полноценный веб-сервер на языке программирования Go.

https://t.me/progbook/982",2233,0,0,goproglib
73,2018-12-08 12:00:40+00:00,"#web

Статья в 4-х частях, в которых автор расскажет об инструментах и принципах создания веб-приложений на языке Go.

https://grisha.org/blog/2017/04/27/simplistic-go-web-app/",2150,0,0,goproglib
72,2018-12-08 10:00:43+00:00,"#advanced 

Делаем собственный дебагер на Go в трёх частях:

Часть 1:
https://bit.ly/2L5AcQ1

Часть 2:
https://bit.ly/2zLmpda

Часть 3:
https://bit.ly/2QFieZT",1988,0,0,goproglib
71,2018-12-07 12:00:14+00:00,"#git #beginners 

Что общего между всеми языками программирования? Конечно Git! Системой контроля версий понадобится пользоваться в любом случае. И чтобы вы не влипли в неприятную ситуацию, наше издание периодически пишем туториалы для новичков. Вот лишь  некоторые из них:

**Полезные советы для начинающих Git-разработчиков**
https://proglib.io/p/git-for-beginner/

**Спаси щеночка – держи свои git-репозитории в чистоте**
https://proglib.io/p/clean-git-repo/

**Git-мастер: 3 простых шага для достижения цели**
https://proglib.io/p/git-master/

**11 концепций и команд git, которые заставят вас плакать**
https://proglib.io/p/painful-git/",2083,0,0,goproglib
70,2018-12-07 10:00:11+00:00,"#design_patterns #beginners #advanced 

Большой репозиторий со списком самых популярных паттернов проектирования на языке Go.

https://github.com/tmrts/go-patterns",1975,0,0,goproglib
69,2018-12-06 12:00:11+00:00,"#advanced 

Занимательная статья о том, как синхронизировать очереди на Go.

https://bit.ly/2zdg1v2",2179,0,0,goproglib
68,2018-12-06 10:00:08+00:00,"#advanced #библиотека 

Elasticsearch — один из самых популярных поисковых движков,  а Go.. ну вы сами знаете, что Go. Эта библиотека позволяет вам использовать Elasticsearch для своих проектов.

https://github.com/siddontang/go-mysql-elasticsearch",1908,0,0,goproglib
67,2018-12-05 12:00:08+00:00,"#advanced 

Что такое интерфейсы? Зачем они нужны? Когда, а самое главное — как их использовать? Хорошие вопросы. И на них есть хорошие ответы аж в трёх частях:

Часть 1:
https://bit.ly/2UdDVzq

Часть 2:
https://bit.ly/2EbwILn

Часть 3:
https://bit.ly/2BQvW47",2286,0,0,goproglib
66,2018-12-05 10:00:08+00:00,"#advanced 

Структуры — один из основных типов данных в Golang. Они используются практически повсеместно (пользовательские типы, конфиги и т.д.). Более того к полям структур через теги могут быть добавлены метаданные, которые нужны для маппинга данных через encoding/json или encoding/xml, валидации, ORM и др. Эта статья подробно рассказывает о применении тегов в Go:

https://bit.ly/2ANtUjq",1926,0,0,goproglib
65,2018-12-04 12:00:38+00:00,"**Go vs Python: изучение основ языка Go в сравнении с Python**

Это не соревнование двух языков, а просто еще один способ обучения. Рассматриваем возможности языка Go, проводя параллели с Python.

https://proglib.io/p/go-vs-python/",2047,0,0,goproglib
64,2018-12-04 10:00:48+00:00,"#book

Go - замечательный молодой язык программирования, позволяющий вам делать веб-приложения эффективнее, чем на любом другом языке, за счёт своих низкоуровневых возможностей, многопоточности и компилируемости. Если вы задаётесь вопросом о том, что уже было написано на Go, чтобы этот язык стоило изучить, то вам ответят следующее: множество веб-приложений, утилит и Docker. Это руководство не научит вас писать сложные портативные или консольные программы, но из него вы узнаете, как писать веб-приложения.

https://t.me/progbook/1990",2003,0,0,goproglib
63,2018-12-03 12:00:22+00:00,"#beginners #rest

Создаём безопасное REST API приложение с использованием Go, Postgres, JWT и GORM.

https://bit.ly/2AOdZ4f",2510,0,0,goproglib
62,2018-12-03 10:00:52+00:00,"#video #beginners 

Если вам не требуется мощные СУБД по типу Postgres или MySQL, а что-то попроще, советуем простую низкоуровневую СУБД ключ-значение bolt.

https://github.com/boltdb/bolt",2232,0,0,goproglib
61,2018-12-02 12:00:29+00:00,"#book 

Go — сравнительно молодой язык программирования, выпущенный компанией Google всего 6 лет назад, но уже ставший одним из самых популярных. Его основными преимуществами являются простой и понятный синтаксис, статическая типизация, параллелизм и высокая производительность.

https://t.me/progbook/374",2698,0,0,goproglib
60,2018-12-02 10:00:34+00:00,"#video #advanced 

Паттерны параллельного программирования на Go.

https://www.youtube.com/watch?v=QDDwwePbDtw",2087,0,0,goproglib
59,2018-12-01 12:00:22+00:00,"#библиотека #advanced 

Библиотека Go для создания аутентификации в ваших приложениях через другие социальные сети.

https://github.com/dghubble/gologin",1848,0,0,goproglib
58,2018-12-01 10:00:28+00:00,"**3 наиболее распространённых подводных камня в Go**

Начиная изучать Go, многие сталкиваются с совершенно не очевидными моментами в этом языке. Рассмотрим три таких подводных камня в Go.

https://proglib.io/p/3-go-pitfalls/",1816,0,0,goproglib
57,2018-11-30 12:00:15+00:00,"#advanced #video 

Длинная и интересная конференция от компании Avito, посвящённая языку программировнаия Go и многим  важным темам языка.

https://www.youtube.com/watch?v=ucWcpLGyua4",1964,0,0,goproglib
56,2018-11-30 10:00:31+00:00,"#beginners 

Небольшой гайд по установке, настройке переменных среды и созданию первой программы на Go.

https://bit.ly/2AwnAfW",1661,0,0,goproglib
55,2018-11-29 12:00:42+00:00,"#beginners 

Хороший туториал для тех, кто только познакомился с Go. Вы узнаете про основы работы с функциями, переменными, типами данных, циклами, массивами, структурами и многим другим.

https://bit.ly/2Qo99EY",2001,0,0,goproglib
54,2018-11-29 10:00:51+00:00,"#beginners 

Давайте посмотрим, чем же Go так красив, что мы его так любим.

https://bit.ly/2xpczcT",1783,0,0,goproglib
53,2018-11-28 12:00:33+00:00,"#video #advanced 

Если по-простому, вебсокеты предназначены для обмена сообщениями в режиме реального времени. В данной серии видео автор расскажет, как работать с вебсокетами на языке Go.

Часть 1:
https://bit.ly/2QqdRBZ

Часть 2:
https://bit.ly/2ztkJoq

Часть 3:
https://bit.ly/2QmKq3z",2143,0,0,goproglib
52,2018-11-28 10:00:43+00:00,"#video #advanced 

В данном видео спикер, а именно — знаменитый Роб Пайк, расскажет про паттерны параллельного программирования на Golang.

https://www.youtube.com/watch?v=f6kdp27TYZs",1890,0,0,goproglib
51,2018-11-27 12:00:20+00:00,"#библиотека

Если вы любите игры и язык Go так, как мы, то предлагаем вам скачать и попробовать данный движок для разработки 3D игр.

https://github.com/g3n/engine",2052,0,0,goproglib
50,2018-11-27 10:00:45+00:00,"#book

Если у вас уже есть опыт разработки и вы хотели бы изучить ещё один язык программирования, то, возможно, вам стоит посмотреть в сторону Go, этого лёгкого в изучении и мощного в разработке языка программирования от компании Google. Книга является хорошим введением в эту языковую структуру, предоставляя многочисленные примеры кода, теоретическое объяснение и упражнения в конце каждой главы.

https://t.me/progbook/1128",1790,0,0,goproglib
49,2018-11-26 12:00:38+00:00,"#advanced

Давайте посмотрим, как код на Go компилируется в машинный код.

https://bit.ly/2ApW5of",1963,0,0,goproglib
48,2018-11-26 10:00:47+00:00,"#algorithms 

**Реализация сортировки методом пауз на языке программирования Go с использованием параллельности, каналов и горутин:

**```package main

import(
    ""fmt""
    ""time""
)

var get_value chan int

func send_value(x int) {
    time.Sleep(int64(x) * 1E8)
    get_value <- x
}

func main() {
    values := []int{3, 1, 9, 7, 2, 6, 4, 8, 5, 10}

    get_value = make(chan int)

    for _, x := range values {
        go send_value(x)
    }
    for range values {
        fmt.Println(<- get_value)
    }
}```",1933,0,0,goproglib
47,2018-11-25 12:00:32+00:00,"#books

Большой репозиторий с лучшими книгами по языку Go. Теперь у вас есть, чем заняться.

https://github.com/dariubs/GoBooks",2046,0,0,goproglib
46,2018-11-25 10:00:42+00:00,"#video

Golang, как и многие другие языки, не всегда используется самостоятельно для создания веб-приложений. Ведь им также нужен приятный пользовательский интерфейс, который можно написать на фреймворках  вроде Vue.js, React или Angular. Эта серия уроков покажет вам, как создавать приложения в стеке Go, Reactjs и RethinkDB.

https://bit.ly/2PJIAJX",1922,0,0,goproglib
45,2018-11-24 12:00:33+00:00,"#video

Да, это восьмичасовое видео, но какое это видео: автор расскажет на практических примерах об основах языка Go, о сложных темах вроде горутин и каналов. 

https://www.youtube.com/watch?v=O_UuGuF_tcE",2064,0,0,goproglib
44,2018-11-24 10:00:19+00:00,"#video

На гоферконе спикеры часто, как тому и следует, поднимают сложные темы в разработке на Go, полезные разработчику любого уровня. В этот раз вы узнаете про тестирование приложений на языке.

https://www.youtube.com/watch?v=8hQG7QlcLBk",1681,0,0,goproglib
43,2018-11-23 12:00:22+00:00,"#golang #библиотека 

Роутинг — один из важнейших компонентов веб-приложений. Библиотека bone предоставляет мощные функции по построению маршрутизации в веб-приложении.

https://github.com/go-zoo/bone",1593,0,0,goproglib
42,2018-11-23 10:00:25+00:00,"**Программирование на Go с нуля: 9 полезных видеоуроков**

Кроссплатформенный, компилируемый и статически типизированный – это все о языке Go. Изучаем программирование на Go по этому курсу.

https://proglib.io/p/go-programming/",1770,0,0,goproglib
41,2018-11-22 12:00:25+00:00,"#beginners 

Go By  Example — это небольшое онлайн-руководство по языку Go, которое познакомит вас с основами языка, структурами, функциями, многопоточностью, каналами, горутинами и много с чем ещё, что вам понадобится в обычной разработке.

https://gobyexample.com/",1712,0,0,goproglib
40,2018-11-22 10:00:21+00:00,"#tutorial #beginners 

На этом сайте вы найдёте 30 полезных источников по изучению Go: создание веб-приложений, работа с шаблонами, парсеры, многопоточность и многое другое.

https://stackify.com/learn-go-tutorials/",1636,0,0,goproglib
39,2018-11-21 12:00:48+00:00,"#best_practices 

Параллельно с тем, как вы будете изучать Golang, вам также нужно изучать лучшие практики написания приложений на нём.

https://talks.golang.org/2013/bestpractices.slide#1",1902,0,0,goproglib
38,2018-11-21 10:00:46+00:00,"#testing

Юнит-тестирование — важная часть профессиональной разработки приложений. Давайте посмотрим, как тестировать приложения, написанные на Go.

https://bit.ly/2DBS03R",1871,0,0,goproglib
37,2018-11-20 12:00:39+00:00,"#web

Хороший онлайн-учебник с примерами создания веб-приложений на Go. Тут вы найдёте много важного: роутинг, request-response, шаблоны, работа с http и проч.

https://gowebexamples.com/",1807,0,0,goproglib
36,2018-11-20 10:00:47+00:00,"**Более 200 избранных ссылок на материалы о языке Go**

Подборка лучших статей о языке Go для читателей различного круга интересов и уровня подготовки, на английском и русском языках.

https://proglib.io/p/golinks/",1760,0,0,goproglib
35,2018-11-19 12:00:25+00:00,"#best_practices #beginners 

Сборник статей по самым важным темам языка Go: указатели, микросервисы, внедрение зависимостей, создание HTTP сервера, работа с базой данных и многое другое.

https://bit.ly/2zeqxSv",1809,0,0,goproglib
34,2018-11-19 10:00:37+00:00,"#cheatsheet

Большая шпаргалка на github по основам языка Go, среди которых: массивы, срезы, циклы, структуры, указатели, интерфейсы и даже горутины с каналами. 

https://bit.ly/2KeM3uT",1643,0,0,goproglib
33,2018-11-18 11:00:10+00:00,"[​​](https://telegra.ph/file/0ef5e57965d91417095ce.jpg)#вакансия

Открытые IT-вакансии Райффайзенбанка в Москве и Омске: 

– Старший специалист по тестированию, Москва: https://vk.cc/8HNF8W 
– .Net разработчик, Омск: https://vk.cc/8HNETp 
– Frontend-разработчик, Москва: https://vk.cc/8HNFli 
– iOS-разработчик мобильного банка для юрлиц, Москва: https://vk.cc/8HNDLX 

Условия: 
– Полный рабочий день 
– Офис в одной минуте от ст.метро «Технопарк» (Москва) 
– Соцпакет, ДМС, оплата больничных и другие льготы 
– Высокий уровень свободы 
– Бесплатное дополнительное обучение 
– Бесплатный тренажерный зал в офисе (Москва)",1744,0,0,goproglib
32,2018-11-18 08:00:29+00:00,"#beginners 

Обработка ошибок и исключений — важная часть разработки на любом языке программирования. Поскольку вы не можете предугадать все нестандартные случаи поведения приложения или пользователя, вам необходимо подготовить приложение для обработка таких ситуаций. Давайте посмотрим, как это делается на Go.

https://bit.ly/2PyUaIx",1476,0,0,goproglib
31,2018-11-17 12:00:39+00:00,"#advanced

Go предоставляет множество эффективных функций для работы с приложениями: горутины, очереди и многое другое. В этой статье мы изучим, как синхронизировать работу очередей:

https://bit.ly/2zdg1v2",1534,0,0,goproglib
30,2018-11-17 10:00:46+00:00,"#book 

Если у вас уже есть опыт в программировании на бэкенде, освоить язык Go вам будет проще простого. Тем не менее, несмотря на простоту, в языке собраны многочисленные полезные функции, операторы и современные технологии и тенденции в программировании. Это руководство предназначено для тех, кто уже знаком с Go, но хочет посмотреть на лучшие практики и рецепты программирования на нём.

https://t.me/progbook/1757",1589,0,0,goproglib
29,2018-11-16 12:00:32+00:00,"#video #rest

Строим настоящий REST API сервис на Golang!

https://bit.ly/2QLIIGf",1675,0,0,goproglib
28,2018-11-16 10:00:30+00:00,"#sql #video

Раз Golang хорошо подходит для веб-программирования, ему необходима поддержка функций и пакетов для работы с базами данных. Общие принципы похожи на многие другие языки программирования, тем не менее, давайте посмотрим следюущее видео, чтобы лучше разбираться:

https://www.youtube.com/watch?v=Nh3CJYZZSdc",1488,0,0,goproglib
27,2018-11-15 12:00:24+00:00,"#best_practices

Немного полезного чтения о вещах и функциях Golang, о которых вы вряд ли знали.

https://bit.ly/2EmhHHi",1824,0,0,goproglib
26,2018-11-15 10:00:26+00:00,"#beginners 

Каждый программист должен знать больше, чем один язык программирования. Такие правила диктует не только рынок, но и правила развития: вы должны знать о многих техниках разработки, чтобы быть гибче, увереннее и сильнее. Если вы ещё не определились, какой язык будет вашим вторым, почитайте данную статью о Go. Тут и статистика, и основы, и особенности языка.

https://bit.ly/2FoDOh2",1655,0,0,goproglib
25,2018-11-14 12:00:35+00:00,"#video #beginners

Для тех, кто только подключился, давайте начнём с основ языка. Они несложные. Зато потом вы сможете приступить к реальной практике и созданию приложений на Go.

https://www.youtube.com/playlist?list=PLQVvvaa0QuDeF3hP0wQoSxpkqgRcgxMqX",1648,0,0,goproglib
24,2018-11-14 10:00:35+00:00,"#video

Продолжительное, но полезное видео по тому, как создать веб-сервис на Go. Вам обязательно стоит научиться этому, ведь веб-программирование на Go набирает популярность, а приложения на Go намного эффективнее и быстрее таких же приложений на других языках программирования.

https://www.youtube.com/watch?v=ph5nqIf4bUo",1669,0,0,goproglib
23,2018-11-13 12:00:31+00:00,"#video

1. Golang, настройка рабочего окружения;
2. Организация кода в Golang;
3. Переменные;
4. Область видимости переменных;
5. Структуры;
6. Интерфейсы и многое другое.

https://bit.ly/2DhV7gU",1520,0,0,goproglib
22,2018-11-13 10:00:27+00:00,"#golang #book

Разработчики Go понимали, что среди программистов особой популярностью пользуется С-подобный синтаксис, поэтому не стали изобретать язык, который потребовал бы переучиваться, а создали лёгкий язык с чистым синтаксисом, которой можно использовать в разных видах разработки. Из книги вы узнаете, как Go упрощает разработку приложений, обработку ошибок и параллельное программирование. Также вы научитесь использовать Go в разных парадигмах программирования.

https://t.me/progbook/1136",1540,0,0,goproglib
21,2018-11-12 12:00:29+00:00,"#architecture

Если вы только принялись изучать Go, то наверняка не представляете ещё, как должна выглядеть хорошая архитектура приложения. Исправляем данное недоразумение в следующей статье:

https://bit.ly/2AZnGOU",1720,0,0,goproglib
20,2018-11-12 10:00:38+00:00,"#golang #web

Golang прекрасно подходит для веб-разработки. До сих пор не знаете, как это выглядит? Тогда следующий плейлист для вас.

https://www.youtube.com/playlist?list=PLGtcqyFrda9474GltUO-7S4KoJVcdLMp4",1555,0,0,goproglib
19,2018-11-11 12:00:30+00:00,"#golang

А если вы из тех, кто ещё незнаком с микросервисами, предлагаем вашему вниманию следующую статью, где рассказывается об основах микросервисов, рассматриваются популярные инструменты для этого и даны хорошие примеры.

https://bit.ly/2ROr0ld",1698,0,0,goproglib
18,2018-11-11 10:00:35+00:00,"#golang #библиотека

Давно известно, что Go хорошо работает на основе микросервисной архитектуры. Если вы хотели бы начать использовать язык именно для этой цели, вам не обойтись без популярной библиотеки Go kit.

https://github.com/go-kit/kit",1488,0,0,goproglib
17,2018-11-10 12:00:29+00:00,"#video

Пора бы написать что-то интересное на Golang. Как насчёт парсера? Это одна из первых идей, которая приходит в голову начинающему разработчику, и мы будем не исключением.

https://bit.ly/2RJUEYX",1697,0,0,goproglib
16,2018-11-10 10:00:32+00:00,"Большой плейлист по изучению замечательного языка программирования Go.

1. Функции, структуры, интерфейсы;
2. Асинхронная модель;
3. Работа с сетью;
4. Работа с СУБД;
5. Система тестирования;
7. Производительность и многое другое.

https://bit.ly/2MovBHG",1445,0,0,goproglib
15,2018-11-09 12:00:29+00:00,"#golang #video

В языке Go есть много разных особенностей. Например, горутины и каналы. Горутины — это функции, которые могут параллельно работать с другими функциями, что делает работу программ ещё более эффективным. Узнать больше про горутины и каналы можно в следующем видео:

https://bit.ly/2Pfrggm",1684,0,0,goproglib
14,2018-11-09 10:00:39+00:00,"#golang #video

Go предоставляет вам современные и мощные функции и возможности по написанию эффективных программ и приложений. Взяв всё лучшее от других языков, создатели Go также не забыли про параллелизм. Спикер в данном видео расскажет вам о популярных паттернах параллельного программирования на Go.

https://bit.ly/2AW7VYS",1587,0,0,goproglib
13,2018-11-08 12:00:23+00:00,"#golang #video

Данный плейлист познакомит с самыми современными технологиями в программировании и веб-разработке: Go, ReactJS и RethinkDB. Вы создадите приложения реального времени и научитесь работать в данном стеке технологий.

https://bit.ly/2PJIAJX",1690,0,0,goproglib
12,2018-11-08 10:00:15+00:00,"#golang #book

Go - современный язык программирования, разработанный корпорацией Google с целью сделать простой по сравнению с другими язык программирования, но не менее эффективный при разработке программного обеспечения и веб-приложений. Из руководства вы узнаете о том, как установить Go и настроить рабочее окружение, как использовать сторонние библиотеки и как пользоваться всеми возможностями языка. 

https://t.me/progbook/1845

https://t.me/progbook/1846",1580,0,0,goproglib
11,2018-11-07 12:00:08+00:00,"#golang #web

Архитектура веб-сервисов на любом  языке программирования выглядит примерно одинаково: у вас есть папка с моделями для работы с базой данных, есть папка public, настройки, папка vendor, в которой хранятся все зависимости вашего проекта и несколько файлов ещё. Предлагаем посмотреть, как то же самое выглядит на языке Go.

https://bit.ly/2APBgnE",1178,0,0,goproglib
10,2018-11-07 10:00:43+00:00,"#golang #библиотека 

Библиотека gorilla/mux предоставляет вам простой и эффективный пакет маршрутизации и обработки входящих запросов в вашем веб-приложении.

https://github.com/gorilla/mux",1066,1,0,goproglib
9,2018-11-06 22:00:19+00:00,"#golang #book

Go - современный язык программирования, сочетающий в себе простоту, многофункциональность и производительность других популярных и состоявшихся языков. Если вы опытный программист, то можете попробовать свои силы в языке, применяя всё то, что знаете из других, а если начинающий, то можете связать своё первое обучение программированию с Go, а это книга будет вам надёжным помощником, рассказывая об основах создания веб-приложений на этом языке. 

https://t.me/progbook/1820

https://t.me/progbook/1821",1047,1,0,goproglib
8,2018-11-06 21:00:19+00:00,"#golang #web

Go хорош во всём, в том числе и веб-разработке, для которого у языка есть многочисленные библиотеки. В этой серии статей вы познакомитесь с тем, как писать сложные веб-приложения, используя шаблонизаторы, маршрутизаторы и основы работы с базами данных.

https://metanit.com/go/web/1.1.php",995,0,0,goproglib
7,2018-11-06 20:00:25+00:00,"#golang #video

Go — это невероятно интересный и популярный язык программирования, который вскоре, возможно, станет одним из первых в десятке часто используемых в разработке языков. Предлагаем для начала посмотреть этот курс, чтобы точно определиться, нравится вам этот язык или нет.

https://www.youtube.com/watch?v=SqrbIlUwR0U",1027,0,0,goproglib
6,2018-11-06 19:00:35+00:00,"**REST API приложение на Go: пошаговый туториал**

В этой статье мы рассмотрим, как создать REST API приложение на языке Go: лучшая пошаговая инструкция с использованием популярной архитектуры.

https://proglib.io/p/rest-api-go/",1007,0,0,goproglib
951,2025-04-04 09:31:07+00:00," **""Leak and Seek: A Go Runtime Mystery"" на сайте Cyolo описывает расследование команды разработчиков, направленное на выявление и устранение утечки памяти в приложении, написанном на языке программирования Go. **

Несмотря на то, что **Go** использует сборку мусора для управления памятью, команда столкнулась с необычной утечкой, связанной с объектами SqliteRows, SqliteStmt и SqliteConn.​


**Основные моменты статьи:**
- **Начало расследования: **После сообщений от нескольких крупных клиентов о значительных проблемах с производительностью, команда начала собирать профили памяти и горутин, чтобы определить источник утечки.​

- **Исключение горутин: **Анализ показал отсутствие накопления активных горутин, что позволило исключить утечки, связанные с ними.​

- **Обнаружение проблемы в драйвере SQLite3: **График распределения объектов в памяти указал на утечку, связанную с драйвером SQLite3, используемым в приложении.​

- **Анализ финализаторов: **Команда обнаружила, что недавно добавленный финализатор для SqliteRows может вызывать блокировку единственной горутины, ответственной за выполнение всех финализаторов в Go. Это приводило к накоплению неосвобожденных объектов и, как следствие, к утечке памяти.​
Cyolo

- **Использование инструмента goref: **Для дальнейшего анализа команда применила инструмент goref, позволяющий картировать граф ссылок объектов в куче, что подтвердило отсутствие живых объектов, удерживающих утекшие данные, и указало на проблему в самом рантайме Go.​

- **Обнаружение блокировки в go-smb2: **В конечном итоге было выявлено, что блокировка в пакете go-smb2 приводила к остановке горутины финализатора, что вызывало утечку памяти.​
Cyolo

- **Результаты и рекомендации: **Команда сообщила о найденной проблеме сообществу Go, предложив улучшить документацию по финализаторам и внедрить метрики для обнаружения медленных или заблокированных очередей финализаторов.​

[Статья](https://cyolo.io/blog/leak-and-seek-a-go-runtime-mystery) подчеркивает важность тщательного анализа и командной работы при решении сложных проблем в программировании, а также необходимость понимания внутренних механизмов используемого языка и его инструментов.

 [Читать](https://cyolo.io/blog/leak-and-seek-a-go-runtime-mystery)",2164,18,0,golang_books
950,2025-04-04 08:24:28+00:00,"‍ Прокачайте навыки автоматизации тестов с Go — от юнита до UI

️ [**На курсе «Автоматизированное тестирование веб-сервисов на Go»**](https://otus.pw/RffG/?erid=2W5zFHptsqr) вы научитесь писать тесты, работать с API, разбираться в DevTools, писать код на Go и автоматизировать тестирование.

Вы освоите востребованные навыки, получите практический опыт и сможете претендовать на позиции QA Automation Engineer в крупных компаниях.

 Успейте записаться до старта курса и получите скидку до 15%

 **Оставьте заявку прямо сейчас и присоединяйтесь к группе:**  https://otus.pw/RffG/

#реклама
[О рекламодателе](https://telega.in/organizations/7b2647c3e91b3be035d3373828945b)",2082,1,0,golang_books
949,2025-04-03 11:20:35+00:00," ** “Common Go Performance Patterns” — **распространённые паттерны производительности в Go.

В ней рассматриваются ключевые техники, сгруппированные в четыре основные категории:​

**
1. Управление памятью и эффективность:
**
- **Pooling объектов:** Повторное использование объектов для снижения нагрузки на сборщик мусора и уменьшения накладных расходов на выделение памяти.​

- **Предварительное выделение памяти: **Заранее задавать емкость срезов и карт для предотвращения дорогостоящих операций изменения размера.​

- **Выравнивание полей структур: **Оптимизация расположения полей в структурах для минимизации заполнения и улучшения локальности данных.​

- **Избегание упаковки интерфейсов: **Предотвращение скрытых выделений памяти путем отказа от ненужных преобразований типов к интерфейсам.​


**- Техники нулевого копирования: **Минимизация копирования данных с использованием срезов и буферов.​

- **Эффективность памяти и сборщик мусора Go:** Снижение нагрузки на сборщик мусора путем минимизации использования кучи и повторного использования памяти.​

- **Стековые выделения и анализ ускользания:** Использование анализа ускользания для размещения значений в стеке, когда это возможно.​

**2. Конкурентность и синхронизация:**

**Пулы рабочих горутин: **Контроль уровня конкурентности с помощью пулов фиксированного размера для ограничения использования ресурсов.​

**Атомарные операции и примитивы синхронизации:** Использование атомарных операций или легковесных блокировок для управления общим состоянием.​

**Ленивая инициализация:** Отсрочка выполнения затратных операций до момента, когда они действительно необходимы.​

**Совместное использование неизменяемых данных: **Безопасное совместное использование данных между горутинами без блокировок путем обеспечения их неизменяемости.​
goperf.dev

**Эффективное управление контекстом: **Использование пакета context для передачи тайм-аутов и сигналов отмены между горутинами.​

**
3. Оптимизация ввода/вывода и пропускная способность:**

**Эффективное буферизирование: **Использование буферизованных читателей/писателей для минимизации вызовов ввода/вывода.​

**Группировка операций: **Объединение нескольких мелких операций для уменьшения количества раунд-трипов и повышения пропускной способности.​

**4. Оптимизация на уровне компилятора и настройка:**

**Использование флагов оптимизации компилятора: **Применение флагов сборки, таких как `-gcflags и -ldflags, `для настройки производительности.​

**Стековые выделения и анализ ускользания: **Анализ того, какие значения переходят в кучу, чтобы помочь компилятору оптимизировать размещение памяти.​
goperf.dev

Эти техники помогают разработчикам** Go создавать более эффективные и производительные приложения,** снижая задержки, улучшая использование памяти и повышая эффективность конкурентных операций.

 [Читать](https://goperf.dev/01-common-patterns/)

@golang_books",8080,19,0,golang_books
948,2025-04-03 08:04:03+00:00,"**Устроиться бэкендером в Яндекс за несколько дней**

12–17 апреля устраиваем Week Offer Backend. Ищем крутых бэкендеров с опытом работы от 3 лет на C++, Python, Java/Kotlin или Go, готовых работать в офисном или гибридном режиме в России.

До 9 апреля решите задачи в Контесте, 12–13 апреля пройдите два собеседования, а 13–17 апреля познакомьтесь с командами и получите офер.

В мероприятии участвует 6 команд: Яндекс Пэй, Яндекс ID, Яндекс Плюс, Яндекс Сплит, Яндекс Сейвы, Яндекс 360. Вы сможете пообщаться с менеджерами и выбрать проект, который покажется самым интересным.

Узнать подробности и зарегистрироваться [можно здесь.](https://clck.ru/3KNkzE?erid=2VtzquchHom)",2349,9,0,golang_books
947,2025-04-02 14:03:43+00:00," **«Линейная алгебра»**

Вторая лучшая книга по линейной алгебре с ~1000 практических задач. 

Идеально для ИИ и машинного обучения.

Книга полностью бесплатна . 

Прекрасно подходит для новичков.

 [Книга](https://www.cs.ox.ac.uk/files/12921/book.pdf)",2536,9,0,golang_books
946,2025-04-02 11:59:13+00:00,"**20 апреля пройдёт отборочный контест Route 256.**

Это **бесплатные курсы** от экспертов Ozon Tech, и в этот раз набор исключительно для Go-разработчиков. 

В Ozon ждут и junior-, и middle-специалистов. Курсы длятся 2 месяца. Вы попадаете в команду ведущего e-com России и решаете реальные задачи в высоконагруженной микросервисной архитектуре. 

Если успешно закончите курс уровня junior, сможете попасть на оплачиваемую стажировку. А тем, кто закончит middle-курс, могут предложить оффер в команду 

[**Регистрируйтесь!**](https://s.ozon.ru/ga5T9Bp)",2738,8,0,golang_books
945,2025-03-29 12:10:21+00:00," **«Golang на PlayStation 2» очень интересный кей, в котором автор делится опытом запуска кода на консоли PlayStation 2 с использованием Go. **

Поскольку стандартный компилятор Go не поддерживает PS2 и требует наличия операционной системы, автор использует  TinyGo — компилятор для встраиваемых систем, который преобразует Go-код в LLVM IR, а затем в машинный код для целевой платформы.​


Основные трудности связаны с архитектурой процессора PS2, известного как Emotion Engine, основанного на MIPS R5900. 

Этот процессор поддерживает инструкции MIPS-III и MIPS-IV с некоторыми особенностями и отсутствием определённых функций. Автор использует SDK ps2dev, предоставляющий библиотеки для графики, ввода-вывода и других операций, однако сталкивается с необходимостью обеспечения совместимости с ABI N32 и другими специфическими требованиями.​
Ricardo

Проект находится в стадии разработки, и планируется дальнейшая работа над поддержкой специфичных для PS2 функций, обработкой чисел с плавающей запятой и улучшением совместимости с LLVM.​

 [Читать](https://rgsilva.com/blog/ps2-go-part-1/)",3694,21,0,golang_books
944,2025-03-26 21:28:01+00:00," Новый пост официального блога Go рассказывает о том, как концепция **«core types»**, введённая вместе с обобщениями в Go 1.18 для упрощения работы с операндами типа-параметров, оказалась излишне сложной. Основные моменты таковы:

**Истоки и проблемы**: В Go 1.18 появились типовые параметры и ограничения, которые требовали введения core types для унификации операций над обобщёнными типами. Однако это добавило сложности как в спецификацию языка, так и в понимание работы некоторых операций (например, срезов и индексирования) даже для негeneric-кода.

**Изменения в Go 1.25: **В предстоящем релизе Go 1.25 концепция core types была полностью удалена из спецификации. Вместо этого теперь используются более явные и понятные правила, что упрощает изучение языка и повышает ясность спецификации без изменения поведения существующего кода.

**Таким образом, **пост подчёркивает, что отказ от core types делает спецификацию Go проще и понятнее, одновременно открывая возможности для будущих улучшений языка.

 [Читать](https://go.dev/blog/coretypes)

@Golang_google",3806,17,0,golang_books
936,2025-03-23 14:00:47+00:00,"**«Docker Cypress in 2025: How I've Perfected My E2E Testing Setup» гайд, в котором рассказывает о том, как автор усовершенствовал свою систему end-to-end тестирования, используя интеграцию Cypress с Docker. **

Основное внимание уделяется тому, как создать стабильное, масштабируемое и воспроизводимое окружение для автоматизированного тестирования.

**▪ Интеграция с Docker:**
 Автор объясняет, как использование контейнеров помогает стандартизировать тестовое окружение и устранять различия между локальной разработкой и CI/CD пайплайнами.

**▪ Оптимизация процесса тестирования:**
 Подробно описываются шаги по настройке, конфигурации и оптимизации тестовой среды с Cypress в Docker, что позволяет ускорить и улучшить качество тестирования.

**▪ Преимущества и вызовы:**
 Статья выделяет ключевые преимущества использования Docker в тестировании – от стабильности окружения до легкости масштабирования, а также обсуждаются возникающие проблемы и способы их решения.

**▪ Современные практики CI/CD:**
 Рассматривается, как такая настройка вписывается в современные процессы непрерывной интеграции и доставки, делая тестирование более надежным и предсказуемым.

**В итоге, статья будет полезна **разработчикам и тестировщикам, которые хотят повысить эффективность своих e2e тестов и использовать передовые инструменты для создания более надежного тестового процесса.

 [Читать](https://dev.to/cypress/docker-cypress-in-2025-how-ive-perfected-my-e2e-testing-setup-4f7j) 

@golang_books",4062,9,0,golang_books
935,2025-03-21 08:52:45+00:00,"**«Go: Structs & Interfaces» на ****GetStream.io**** рассказывает о ключевых аспектах использования структур (structs) и интерфейсов (interfaces) в языке Go. **

**Основные моменты статьи:
**
Структуры (structs):
Рассматриваются как базовые составные типы данных, позволяющие группировать связанные поля вместе. Показаны примеры создания и использования структур для хранения информации.

Интерфейсы (interfaces):
Объясняется, как интерфейсы позволяют задавать набор методов для типов, обеспечивая абстракцию и полиморфизм. Особое внимание уделено тому, что реализация интерфейса происходит неявно — если тип содержит необходимые методы, он автоматически удовлетворяет интерфейсу.

Связь и применение:
Статья демонстрирует, как структуры и интерфейсы помогают создавать гибкую, модульную архитектуру кода, а также обсуждает лучшие практики, позволяющие эффективно использовать их для достижения чистоты и расширяемости программ.

В итоге, материал служит отличным руководством для понимания основ и тонкостей работы с типами в Go, делая акцент на важности композиции и абстракции в разработке.

 [Читать](https://getstream.io/blog/go-structs-interfaces/) 

@golang_books",3741,13,0,golang_books
934,2025-03-17 09:52:34+00:00," **ОAtomixDB **— это инновационный инструмент для управления данными, созданный разработчиком Sahilb315 на GitHub.

▪ Атомарность операций: гарантирует, что каждая транзакция выполняется полностью или не выполняется вовсе, что существенно снижает риск ошибок и потери данных.
▪ Простота интеграции: интуитивно понятный API позволяет легко внедрять AtomixDB в проекты разного масштаба, от небольших приложений до распределённых систем.
▪ Масштабируемость: инструмент спроектирован с учётом современных требований к производительности, что делает его подходящим для высоконагруженных систем.
▪ Открытый исходный код: вы можете свободно изучать, модифицировать и расширять функциональность AtomixDB под специфические нужды вашего проекта.

Если вы ищете надёжное, эффективное и гибкое решение для управления данными с гарантией целостности, AtomixDB — отличный выбор для реализации современных приложений.

 [Github](https://github.com/Sahilb315/AtomixDB)",5077,12,0,golang_books
932,2025-03-14 13:10:15+00:00," ** ""Benchmarking: What you cannot miss in Go 1.24"" статья, которая посвящена ключевым моментам бенчмаркинга в новой версии Go 1.24.
**
** Основная cуть:**
    • Рассматриваются лучшие практики и новые возможности для написания и проведения бенчмарков в Go 1.24.
    • Автор делится опытом, демонстрирует примеры, объясняет, как правильно измерять производительность и избегать распространённых ошибок.

** Польза для разработчиков:**
    • Помогает оптимизировать приложения на Go, выявляя узкие места в производительности.
    • Раскрывает улучшения и особенности новой версии, что важно для точного и эффективного тестирования кода.
    • Предоставляет практические рекомендации, которые можно сразу применять в реальных проектах.

Эта статья будет особенно полезна тем, кто стремится повысить производительность своих приложений и глубже разобраться в нюансах бенчмаркинга на Go.

 [Читать](https://jarosz.dev/code/benchmarking-what-you-cannot-miss-in-go-1.24/)

@golang_google",4274,6,0,golang_books
930,2025-03-13 15:35:20+00:00," [bubbletea](https://github.com/charmbracelet/bubbletea?tab=readme-ov-file) — фреймворк на Go для создания интерактивных текстовых пользовательских интерфейсов (TUI)!

 Bubble Tea основан на архитектуре Model-Update-View (MUV), вдохновлённой Elm, что позволяет писать чистый, модульный и поддерживаемый код. Этот фреймворк идеально подходит для создания консольных приложений, игр, инструментов визуализации данных и других текстовых интерфейсов.

 Лицензия: MIT

 [Github](https://github.com/charmbracelet/bubbletea?tab=readme-ov-file)

@golang_interview",3327,9,0,golang_books
928,2025-03-12 14:33:20+00:00,"****** Microsoft анонсировала радикальное улучшение производительности TypeScript за счет новой нативной реализации компилятора, написанной на Go. 
**
**Самое главное:**

▪ В 10 раз (!) быстрее компиляция, в 2 раза меньше памяти просит;
▪ На видео как раз тест нового компилятора: 0.63 секунды против 3.35 на старом;
▪ Проект пилят с августа 2024, готово уже 80%;

** Полный переход займёт годы ;**
▪ В версии на Go не работает «манкипатчинг», что сделает API TypeScript более безопасным;
 Планируют интеграцию с LLM (надеюсь, локальными);
 Полный переход на TypeScript-Go не отменяет поддержку старой версии;
 Кодовая база TypeScript в Go расходится с оригиналом, так что некоторые фичи (вроде JSDoc и JSX) могут полететь.


Проект в разработке с августа 2024, готово уже **80%.**


Полное интервью с апдейтами тут глянуть на [YouTube](https://youtu.be/10qowKUW82U)

▪**Github**: https://github.com/microsoft/typescript-go
▪**Microsoft blog**: https://devblogs.microsoft.com/typescript/typescript-native-port/

#dotnet #golang #programming #typescript #webdev

@golang_google",3286,16,0,golang_books
926,2025-03-12 12:02:01+00:00," **«Goroutines in Go: A Practical Guide to Concurrency» статя, которая посвящена тому, как в языке программирования Go реализована конкурентность с помощью горутин и каналов. **

**Автор** подробно объясняет, почему традиционное последовательное выполнение может приводить к узким местам в работе приложения и как горутины помогают решать эту проблему, обеспечивая эффективное распределение задач и улучшение отзывчивости программ.

**Основные моменты статьи:**

**- Последовательное vs конкурентное выполнение:**
Рассматривается, как традиционные программы выполняют задачи по очереди, что может создавать задержки, особенно при выполнении долгих операций, и почему для современных приложений важно использовать конкурентное выполнение.

- **Конкурентность и параллелизм:**
Объясняется разница между конкурентностью (одновременная работа нескольких задач, даже на одном ядре) и параллелизмом (реальное одновременное выполнение на разных ядрах).

- **Горутины в Go:**
Показано, как с помощью ключевого слова go можно запускать функции в виде легковесных потоков (горутин), что позволяет выполнять задачи параллельно без накладных расходов, свойственных обычным потокам ОС.

- **Синхронизация горутин:**
Рассмотрены способы синхронизации, в том числе использование sync.WaitGroup для ожидания завершения всех горутин, что является более надежным методом по сравнению с time.Sleep.

- **Коммуникация через каналы:**
Описаны принципы работы с каналами (как с буферизированными, так и безбуферными), которые позволяют безопасно передавать данные между горутинами и синхронизировать их работу.

- **Предотвращение гонок данных:**
Обсуждаются подходы к избежанию гонок, когда несколько горутин одновременно обращаются к общим данным, с использованием каналов и мьютексов (sync.Mutex).

- **Паттерны конкурентности:**
Приводятся популярные шаблоны проектирования, такие как Fan-Out/Fan-In и Worker Pools, которые помогают масштабировать выполнение задач в реальных приложениях.

- **Практический пример:**
В статье приведён пример реализации простого конкурентного веб-сервера, где горутины используются для обработки запросов (например, вычисления факториала), что демонстрирует практическую пользу конкурентного подхода.

- **Лучшие практики:**
Завершается статья рекомендациями по эффективному использованию горутин в производственном коде: управление количеством запущенных горутин, правильное использование синхронизации и применение инструментов для выявления гонок.

▪ [Читать](https://getstream.io/blog/goroutines-go-concurrency-guide/)

@golang_books",3707,9,0,golang_books
924,2025-03-09 16:04:26+00:00," [practice-go](https://github.com/plutov/practice-go) — коллекция задач по Go-программированию, предназначенных для практики и совершенствования навыков разработки!

 Каждая задача расположена в отдельной директории и снабжена файлом README.md с описанием задания, а также тестовым файлом *_test.go для проверки корректности решения. Участникам предлагается реализовать требуемую функцию, избегая использования сторонних пакетов, после чего запустить тесты для оценки производительности.

 [Github](https://github.com/plutov/practice-go)

@golang_books",4752,18,0,golang_books
922,2025-03-04 09:01:45+00:00," В [этой](https://dev.to/the-arcade-01/using-redis-to-build-a-distributed-chat-app-in-go-reactjs-1e1m) статье автор описывает процесс разработки масштабируемого распределённого чат-приложения, используя Golang для серверной части, React.js для фронтенда и Redis для управления сообщениями!

 Ссылка: [*клик*](https://dev.to/the-arcade-01/using-redis-to-build-a-distributed-chat-app-in-go-reactjs-1e1m)",5240,14,0,golang_books
921,2025-03-03 09:31:28+00:00," [Это](https://www.freecodecamp.org/news/learn-to-use-github-actions-step-by-step-guide/) — подробное руководство по использованию GitHub Actions для автоматизации процессов разработки, таких как сборка, тестирование и деплой приложений!

 Ссылка: [*клик*](https://www.freecodecamp.org/news/learn-to-use-github-actions-step-by-step-guide/)",5959,4,0,golang_books
919,2025-02-26 09:16:36+00:00," [NativeWebP](https://github.com/HugoSmits86/nativewebp) — это библиотека на Go, предназначенная для кодирования изображений в формате WebP без зависимости от внешних библиотек, таких как libwebp!

 Её основное преимущество — высокая производительность и эффективность, позволяющая создавать файлы меньшего размера по сравнению со стандартным Go-энкодером PNG, при этом обеспечивая примерно на 50% более быструю скорость работы.

 Лицензия: MIT

 [Github](https://github.com/HugoSmits86/nativewebp)

@golang_google",4748,8,0,golang_books
917,2025-02-25 09:15:19+00:00," [The Ultra-Scale Playbook](https://huggingface.co/spaces/nanotron/ultrascale-playbook): руководство по обучению крупных языковых моделей на GPU-кластерах!

 Это руководство посвящено обучению больших языковых моделей на масштабируемых GPU-кластерах. В рамках этого проекта было проведено более 4000 экспериментов по масштабированию на кластере с использованием до 512 GPU, с целью измерения пропускной способности и эффективности обучения. 

 Ссылка: [*клик*](https://huggingface.co/spaces/nanotron/ultrascale-playbook)

#курс #machinelearning",5505,9,0,golang_books
915,2025-02-24 12:15:18+00:00," [AnyQuery](https://github.com/julien040/anyquery?tab=readme-ov-file) — это кроссплатформенное настольное приложение, разработанное для выполнения SQL-запросов к практически всем базам данных!

 Оно поддерживает JSON, CSV, Parquet, SQLite, Google Sheets и многое другое, а также предоставляет интуитивно понятный интерфейс, позволяющий пользователям управлять подключениями, визуализировать данные в табличном формате и использовать автодополнение при написании SQL-кода.

 Лицензия: AGPL

 [Github](https://github.com/julien040/anyquery?tab=readme-ov-file)",5153,6,0,golang_books
913,2025-02-23 15:58:11+00:00," В [этой](https://entgo.io/blog/2025/02/12/rag-with-ent-atlas-pgvector/) статье рассказывается о построении Retrieval-Augmented Generation (RAG) приложения с использованием Go, Ent, Atlas и pgvector! Автор объясняет, как комбинировать эти технологии для создания эффективной системы поиска и генерации ответов на основе векторных представлений данных.

 Ссылка: [*клик*](https://entgo.io/blog/2025/02/12/rag-with-ent-atlas-pgvector/)",4592,8,0,golang_books
912,2025-02-23 09:02:38+00:00," [go-msquic](https://github.com/noboruma/go-msquic) — это обертка на Go для библиотеки MsQuic, разработанной Microsoft, которая реализует протокол QUIC!

 Она предоставляет Go-разработчикам интерфейс для работы с протоколами, основанными на QUIC, такими как HTTP/3. API go-msquic вдохновлено проектом quic-go и может использоваться в качестве его замены. Однако, учитывая необходимость работы с C-библиотеками, рекомендуется использовать quic-go, если вы не готовы к взаимодействию с C-кодом.

 [Github](https://github.com/noboruma/go-msquic)

@golang_google",3138,3,0,golang_books
909,2025-02-20 11:01:15+00:00,"** ""Painful intelligence: What AI can tell us about human suffering
**
Эта **бесплатная** книга — путеводитель по миру машинного обучения! 

**Основное, что в ней **рассматривается:
• Базовые концепции: Алгоритмы, математические основы и принципы построения моделей.
• Глубокое обучение: Нейронные сети, методы оптимизации и регуляризация для повышения качества моделей.
• Практические кейсы: Реальные примеры применения ML в различных отраслях, от анализа данных до прогнозирования.
• Современные методики: Настройка гиперпараметров, интерпретация результатов и стратегии улучшения производительности.

Для специалиста по машинному обучению эта книга станет полезным ресурсом, помогая углубить знания, найти новые подходы и повысить эффективность проектов.

 [Книга](https://x.com/FrnkNlsn/status/1891479384227258521)

#freebook #book #ai #ml #machinelearning #opensource",4552,8,0,golang_books
907,2025-02-15 14:01:17+00:00,"⭐️ **Шпаргалка по командам Docker Compose**

@golang_google",5427,20,0,golang_books
905,2025-02-09 16:45:47+00:00," В [этой](https://dev.to/stroiman/i-created-a-headless-browser-in-go-heres-what-i-learned-64j) статье автор делится опытом разработки безголового браузера на языке Go, предназначенного для тестирования веб-приложений с использованием HTMX!

 Он описывает процесс создания инструмента, который позволяет эффективно тестировать поведение веб-страниц без необходимости в полноценном браузере, что ускоряет цикл разработки и тестирования.

 Ссылка: [*клик*](https://dev.to/stroiman/i-created-a-headless-browser-in-go-heres-what-i-learned-64j)

@golang_interview",5992,10,0,golang_books
904,2025-02-08 10:02:08+00:00,"️Легкий способ получать свежие обновления и следить за трендами в разработке на вашем языке. Находите свой стек и подписывайтесь:

МАШИННОЕ ОБУЧЕНИЕ:[ ](https://t.me/+a2a3XE5DLrQ0MDYy)[t.me/ai_machinelearning_big_data](https://t.me/+FObvmL0Ku9UyY2Y6)
C++ [t.me/cpluspluc](https://t.me/+XuweXk30nl8xYTli)
Python:[ ](https://t.me/+yNNPdducIcVjNDEy)t.me/pythonl
Linux:[ ](https://t.me/+lfBzDUdInM82NzJi)[t.me/linuxacademiya](https://t.me/+vpgsAqBWMnI1YjRi)
Хакинг: https://t.me/+i__6ED-eRfkwOTYy
Devops: t.me/DevOPSitsec
Data Science: t.me/data_analysis_ml
Javascript:[ ](https://t.me/+ZkEdFddTmqswZTYy)[t.me/javascriptv](https://t.me/+kbGMZmCFL5hlOTMy)
C#: [t.me/csharp_ci](https://t.me/+qdE3ENMXapozMGNi)
Java:[ ](https://t.me/+gQ6z6RXFGulkOWY6)[t.me/javatg](https://t.me/+eKVnTGuoMcwxMTBi)
Базы данных: [t.me/sqlhub](https://t.me/+hUURY84TPnk3Mzky)
Python  собеседования: [t.me/python_job_interview](https://t.me/+qzOlOI61j4Q1MDky)
Мобильная разработка: [t.me/mobdevelop](https://t.me/+ecU59JV8PlZhZDM6)
Docker: [t.me/DevopsDocker ](https://t.me/+RJDC5_8F4LVhZTUy)
Golang: t.me/Golang_google
React:[ ](https://t.me/+n0HSxg7wfOA5NGQy)[t.me/react_tg](https://t.me/+pI3IpSQkTwBkM2My)
Rust: t.me/rust_code
ИИ: t.me/vistehno
PHP: t.me/phpshka
Android: t.me/android_its
Frontend: [t.me/front](https://t.me/+VUfA4vMcAIFjNDEy)
Big Data: t.me/bigdatai
Собеседования МЛ: t.me/machinelearning_interview
МАТЕМАТИКА: t.me/data_math
Kubernets: [t.me/kubernetc](https://t.me/+fub-s0WBT3w4ZTZi)
Разработка игр: [https://t.me/gamedev](https://t.me/+8aMzwJrC2dVjOTcy)
Haskell: t.me/haskell_tg
Физика: [t.me/fizmat](https://t.me/+F-rcyutwp5thYzc6)

 Папка с **вакансиями**: t.me/addlist/_zyy_jQ_QUsyM2Vi
Папка  Go разработчика: t.me/addlist/MUtJEeJSxeY2YTFi
Папка Python разработчика: t.me/addlist/eEPya-HF6mkxMGIy
Папка ML: https://t.me/addlist/2Ls-snqEeytkMDgy
Папка **FRONTEND: **https://t.me/addlist/mzMMG3RPZhY2M2Iy

ИТ-Мемы: t.me/memes_prog
Английский: t.me/english_forprogrammers
**ИИ**: t.me/vistehno

**954ГБ ОПЕНСОРС КУРСОВ: **[@courses](https://t.me/+g5DX-1c1olo0YzUy)
**Ит-книги бесплатно**: https://t.me/addlist/BkskQciUW_FhNjEy",5970,6,0,golang_books
903,2025-02-04 18:32:01+00:00," [Эта](https://blog.thibaut-rousseau.com/blog/sql-transactions-in-go-the-good-way/) статья рассказывает об эффективном способе управления SQL-транзакциями в Go, минимизируя утечку деталей базы данных в бизнес-логику!

 Автор представляет библиотеку Transactor, которая позволяет использовать транзакции в сервисном слое без прямого импорта пакета database/sql. Обсуждаются преимущества такого подхода, примеры реализации, включая вложенные транзакции, и пошаговая реализация транзактора для Go.

 Ссылка: [*клик*](https://blog.thibaut-rousseau.com/blog/sql-transactions-in-go-the-good-way/)

@golang_google",5223,12,0,golang_books
901,2025-02-04 09:02:05+00:00," [Эта](https://dev.to/gregalc99/why-clean-architecture-struggles-in-golang-and-what-works-better-2n9i) статья обсуждает сложности применения принципов Чистой архитектуры в Go и предлагает альтернативные подходы, более соответствующие философии Go!

 Автор отмечает, что из-за минималистичного и прагматичного дизайна Go, внедрение многослойных абстракций, характерных для Чистой архитектуры, может привести к излишней сложности и ухудшению читаемости кода. Вместо этого рекомендуется использовать структуру, основанную на пакетах, где код организован по функциональным областям, что обеспечивает модульность без чрезмерных абстракций.

 Ссылка: [*клик*](https://dev.to/gregalc99/why-clean-architecture-struggles-in-golang-and-what-works-better-2n9i)",5490,24,0,golang_books
899,2025-01-29 12:03:55+00:00," [Эта](https://francoposa.io/resources/golang/golang-benchmarking-1/) статья посвящена базовым аспектам профилирования производительности кода на языке Go с использованием встроенного пакета testing и инструмента анализа benchstat!

 Автор демонстрирует, как написать простые бенчмарки, запустить их и интерпретировать результаты, включая производительность и использование памяти. Рассматривается пример оптимизации функции, где удаление операции append улучшило скорость выполнения почти в два раза и сократило количество выделений памяти.

 Также обсуждаются дополнительные флаги, такие как -benchmem для отображения статистики по памяти, и способы управления количеством итераций бенчмарков с помощью флага -test.benchtime. В статье подчеркивается важность статистического анализа небольших различий между функциями и использование реальных сценариев для повышения уверенности в результатах тестов.

 Ссылка: [*клик*](https://francoposa.io/resources/golang/golang-benchmarking-1/)",6317,10,0,golang_books
897,2025-01-26 14:56:26+00:00," [Эта](https://dev.to/_n0rdy_/demystifying-otps-the-logic-behind-the-offline-generation-of-tokens-1jh4) статья объясняет логику работы одноразовых паролей (OTP) при оффлайн-генерации токенов!

 Рассматриваются алгоритмы, такие как HOTP (основанный на счётчике) и TOTP (основанный на времени), их криптографические основы, включая использование HMAC, и процесс синхронизации между клиентом и сервером. Также обсуждаются преимущества и ограничения этих методов, а также их реализация в реальных системах безопасности.

 Ссылка: [*клик*](https://dev.to/_n0rdy_/demystifying-otps-the-logic-behind-the-offline-generation-of-tokens-1jh4)

@golang_interview",6058,9,0,golang_books
895,2025-01-22 14:37:32+00:00," [Эта](https://dev.to/coolwednesday/design-patterns-in-golang-a-comprehensive-guide-560i) статья — подробное руководство по шаблонам проектирования в Go!

 В ней рассматриваются основные паттерны, такие как Factory, Singleton, Adapter, Observer, а также подходы к настройке структур с помощью Options и Builder patterns. Приводятся примеры кода, объясняющие их реализацию и использование для создания гибких и масштабируемых приложений.

 Ссылка: [*клик*](https://dev.to/coolwednesday/design-patterns-in-golang-a-comprehensive-guide-560i)

@golang_books",6273,19,0,golang_books
893,2025-01-18 12:04:34+00:00," [Эта](https://nyadgar.com/posts/go-interfaces-why-how-and-when/) статья объясняет концепцию интерфейсов в Go, их использование, преимущества и ограничения!

 Автор рассматривает, как интерфейсы помогают абстрагировать логику, улучшать модульность кода и упрощать тестирование. Рассматриваются практические примеры, такие как использование интерфейсов для реализации контрактов между модулями и предоставление гибкости при работе с различными типами.

 Ссылка: [*клик*](https://nyadgar.com/posts/go-interfaces-why-how-and-when/)",6515,14,0,golang_books
892,2025-01-18 10:31:05+00:00,"️Легкий способ получать свежие обновления и следить за трендами в разработке на вашем языке. Находите свой стек и подписывайтесь:

МАШИННОЕ ОБУЧЕНИЕ:[ ](https://t.me/+a2a3XE5DLrQ0MDYy)[t.me/ai_machinelearning_big_data](https://t.me/+FObvmL0Ku9UyY2Y6)
C++ [t.me/cpluspluc](https://t.me/+XuweXk30nl8xYTli)
Python:[ ](https://t.me/+yNNPdducIcVjNDEy)t.me/pythonl
Linux:[ ](https://t.me/+lfBzDUdInM82NzJi)[t.me/linuxacademiya](https://t.me/+vpgsAqBWMnI1YjRi)
Хакинг: [t.me/linuxkalii](https://t.me/+POISYA2NQWQ0NjVi)
Devops: t.me/DevOPSitsec
Data Science: t.me/data_analysis_ml
Javascript:[ ](https://t.me/+ZkEdFddTmqswZTYy)[t.me/javascriptv](https://t.me/+kbGMZmCFL5hlOTMy)
C#: [t.me/csharp_ci](https://t.me/+qdE3ENMXapozMGNi)
Java:[ ](https://t.me/+gQ6z6RXFGulkOWY6)[t.me/javatg](https://t.me/+eKVnTGuoMcwxMTBi)
Базы данных: [t.me/sqlhub](https://t.me/+hUURY84TPnk3Mzky)
Python  собеседования: [t.me/python_job_interview](https://t.me/+qzOlOI61j4Q1MDky)
Мобильная разработка: [t.me/mobdevelop](https://t.me/+ecU59JV8PlZhZDM6)
Docker: [t.me/DevopsDocker ](https://t.me/+RJDC5_8F4LVhZTUy)
Golang: t.me/Golang_google
React:[ ](https://t.me/+n0HSxg7wfOA5NGQy)[t.me/react_tg](https://t.me/+pI3IpSQkTwBkM2My)
Rust: t.me/rust_code
ИИ: t.me/vistehno
PHP: t.me/phpshka
Android: t.me/android_its
Frontend: [t.me/front](https://t.me/+VUfA4vMcAIFjNDEy)
Big Data: t.me/bigdatai
Собеседования МЛ: t.me/machinelearning_interview
МАТЕМАТИКА: t.me/data_math
Kubernets: [t.me/kubernetc](https://t.me/+fub-s0WBT3w4ZTZi)
Разработка игр: [https://t.me/gamedev](https://t.me/+8aMzwJrC2dVjOTcy)
Haskell: t.me/haskell_tg

 Папка с **вакансиями**: t.me/addlist/_zyy_jQ_QUsyM2Vi
Папка  Go разработчика: t.me/addlist/MUtJEeJSxeY2YTFi
Папка Python разработчика: t.me/addlist/eEPya-HF6mkxMGIy
Папка ML: https://t.me/addlist/2Ls-snqEeytkMDgy
Папка **FRONTEND: **https://t.me/addlist/mzMMG3RPZhY2M2Iy

ИТ-Мемы: t.me/memes_prog
Английский: t.me/english_forprogrammers
**ИИ**: t.me/vistehno

**954ГБ ОПЕНСОРС КУРСОВ: **[@courses](https://t.me/+g5DX-1c1olo0YzUy)
**Ит-книги бесплатно**: https://t.me/addlist/BkskQciUW_FhNjEy",6173,3,0,golang_books
890,2025-01-12 14:04:21+00:00," [Эта](https://crawshaw.io/blog/programming-with-llms) статья описывает личный опыт автора в использовании больших языковых моделей для программирования на Go!

 Автор делится тем, как интеграция LLM в рабочий процесс улучшила продуктивность и стала неотъемлемой частью разработки. Рассматриваются три основные области применения: автодополнение, поиск информации и программирование с помощью чат-ботов. Особое внимание уделено тому, как LLMs помогают ускорить написание шаблонного кода, находить ответы на вопросы о технологиях и фреймворках, а также генерировать черновики программ для сложных задач.

 Ссылка: [*клик*](https://crawshaw.io/blog/programming-with-llms)",7683,14,0,golang_books
889,2025-01-09 17:48:40+00:00," [Эта](https://dev.to/vishaaxl/build-an-otp-based-authentication-server-with-go-part-1-760) статья описывает процесс создания сервера аутентификации на основе одноразовых паролей (OTP) с использованием Go!

 Автор начинает с настройки структуры проекта, инициализации модуля Go и создания необходимых директорий и файлов. Далее рассматривается конфигурация сервисов PostgreSQL и Redis с помощью Docker Compose, включая установку паролей и настройку портов для обеспечения безопасности и связи между сервисами.

 Ссылка: [*клик*](https://dev.to/vishaaxl/build-an-otp-based-authentication-server-with-go-part-1-760)",7465,25,0,golang_books
887,2025-01-02 09:41:24+00:00," [Эта](https://dev.to/leapcell/how-to-get-the-goroutine-id-1h5o) статья объясняет, как получить ID горутины в Go, значение, которое Go специально скрывает, чтобы предотвратить его неправильное использование!

 В статье рассматриваются методы извлечения этого ID с использованием функций **panic**, **runtime.Stack**, а также через доступ на уровне ассемблера к структуре горутины. Автор также обсуждает практическое применение этой техники, например, создание локального хранилища для горутин (GLS), и приводит примеры кода, включая решения на чистом Go и с использованием ассемблера. Основная цель статьи — показать способы обхода ограничений Go и эффективное управление параллельностью.

 Ссылка: [*клик*](https://dev.to/leapcell/how-to-get-the-goroutine-id-1h5o)",7386,14,0,golang_books
886,2024-12-23 16:01:14+00:00,"**Docker for Sysadmins**

 [Книга](https://github.com/anzhihe/Free-Docker-K8s-Books/blob/main/book/Docker%20for%20Sysadmins.pdf) [ ](https://gist.github.com/egorsmkv/9df2aef2eddf51986b6d2b5833a4423e)

@golang_books",8332,10,0,golang_books
884,2024-12-19 11:06:48+00:00,"** Introduction to Docker**

 [Github](https://github.com/bobbyiliev/introduction-to-docker-ebook)[ ](https://gist.github.com/egorsmkv/9df2aef2eddf51986b6d2b5833a4423e)

@golang_books",11386,9,0,golang_books
882,2024-12-18 12:03:11+00:00,"**Concurrency in Go**

 [Github](https://github.com/b055/books-1/blob/master/Concurrency%20in%20Go.pdf)[ ](https://gist.github.com/egorsmkv/9df2aef2eddf51986b6d2b5833a4423e)

@golang_books",8618,16,0,golang_books
877,2024-12-15 11:02:01+00:00," **DevOps roadmap со всеми нужными ссылками**

Это пошаговое руководство как расти и развиваться в DevOps, с массой ссылок на ресурсы.

 [Roadmap](https://github.com/milanm/DevOps-Roadmap)

@golang_books",6044,11,0,golang_books
876,2024-12-15 09:55:19+00:00,"️Легкий способ получать свежие обновления и следить за трендами в разработке на вашем языке. Находите свой стек и подписывайтесь:

МАШИННОЕ ОБУЧЕНИЕ:[ ](https://t.me/+a2a3XE5DLrQ0MDYy)[t.me/ai_machinelearning_big_data](https://t.me/+FObvmL0Ku9UyY2Y6)
C++ [t.me/cpluspluc](https://t.me/+XuweXk30nl8xYTli)
Python:[ ](https://t.me/+yNNPdducIcVjNDEy)t.me/pythonl
Linux:[ ](https://t.me/+lfBzDUdInM82NzJi)[t.me/linuxacademiya](https://t.me/+vpgsAqBWMnI1YjRi)
Хакинг: [t.me/linuxkalii](https://t.me/+POISYA2NQWQ0NjVi)
Devops: t.me/DevOPSitsec
АНАЛИЗ Данных: [t.me/data_analysis_ml](https://t.me/+Y-Bj-Jfn0NVhY2Vi)
Javascript:[ ](https://t.me/+ZkEdFddTmqswZTYy)[t.me/javascriptv](https://t.me/+kbGMZmCFL5hlOTMy)
C#: [t.me/csharp_ci](https://t.me/+qdE3ENMXapozMGNi)
Java:[ ](https://t.me/+gQ6z6RXFGulkOWY6)[t.me/javatg](https://t.me/+eKVnTGuoMcwxMTBi)
Базы данных: [t.me/sqlhub](https://t.me/+hUURY84TPnk3Mzky)
Python  собеседования: [t.me/python_job_interview](https://t.me/+qzOlOI61j4Q1MDky)
Мобильная разработка: [t.me/mobdevelop](https://t.me/+ecU59JV8PlZhZDM6)
Docker: [t.me/DevopsDocker ](https://t.me/+RJDC5_8F4LVhZTUy)
Golang: t.me/Golang_google
React:[ ](https://t.me/+n0HSxg7wfOA5NGQy)[t.me/react_tg](https://t.me/+pI3IpSQkTwBkM2My)
Rust: t.me/rust_code
ИИ: t.me/vistehno
PHP: t.me/phpshka
Android: t.me/android_its
Frontend: [t.me/front](https://t.me/+VUfA4vMcAIFjNDEy)
Big Data: t.me/bigdatai
Собеседования МЛ: t.me/machinelearning_interview
МАТЕМАТИКА: t.me/data_math
Kubernets: [t.me/kubernetc](https://t.me/+fub-s0WBT3w4ZTZi)
Разработка игр: [https://t.me/gamedev](https://t.me/+UQidyqnWfY82NGIy)
Haskell: t.me/haskell_tg

 Папка с **вакансиями**: t.me/addlist/_zyy_jQ_QUsyM2Vi
Папка  Go разработчика: t.me/addlist/MUtJEeJSxeY2YTFi
Папка Python разработчика: t.me/addlist/eEPya-HF6mkxMGIy
Папка ML: https://t.me/addlist/2Ls-snqEeytkMDgy
Папка **FRONTEND: **https://t.me/addlist/mzMMG3RPZhY2M2Iy

ИТ-Мемы: t.me/memes_prog
Английский: t.me/english_forprogrammers
**ИИ**: t.me/vistehno

**954ГБ ОПЕНСОРС КУРСОВ: **[@courses](https://t.me/+g5DX-1c1olo0YzUy)
**Ит-книги бесплатно**: https://t.me/addlist/BkskQciUW_FhNjEy",6150,1,0,golang_books
875,2024-12-14 09:58:04+00:00," Полезная [статья](https://lemire.me/blog/2024/12/08/data-structures-as-jigs-for-programmers-go-edition/), которая обсуждает использование структур данных как инструментов для создания эффективных программных решений!

 В статье автор рассматривает, как правильно выбирать структуры данных в зависимости от решаемой задачи, сравнивая их с инженерными шаблонами или ""основами"", на которых строится более сложное решение. Лемир подчеркивает, что правильный выбор структуры данных (например, хеш-таблицы, массивы, списки) может существенно упростить разработку и повысить производительность, а также находит аналогии между этим процессом и подходами, применяемыми в других областях инженерии и технологий.

 Ссылка: [*клик*](https://lemire.me/blog/2024/12/08/data-structures-as-jigs-for-programmers-go-edition/)

@golang_books",5685,15,0,golang_books
874,2024-12-10 11:01:25+00:00,"**linux-primer-2nd-edition**

 [Книга](https://github.com/Arvindprksh/books/blob/laptopBooks/embedded-linux-primer-2nd-edition.pdf)

@golang_books",6160,11,0,golang_books
872,2024-12-09 12:56:37+00:00," Огромная бесплатная книга по SQL! (500+ страниц!)

 Ссылка: [*клик*](https://downloads.yugabyte.com/marketing-assets/O-Reilly-SQL-Cookbook-2nd-Edition-Final.pdf)

@sqlhub",5456,18,0,golang_books
870,2024-12-07 10:54:53+00:00," [Эта](https://dev.to/aaravjoshi/master-gos-concurrency-context-propagation-and-cancellation-secrets-revealed-12fm) статья раскрывает принципы использования распространения и отмены с помощью **context** в Go для управления конкурентными операциями!

 Автор объясняет ключевые аспекты, такие как управление жизненным циклом задач, предотвращение утечек ресурсов и эффективное использование тайм-аутов и дедлайнов. Материал содержит примеры кода и практические рекомендации для повышения надежности и производительности программ.

 Ссылка: [*клик*](https://dev.to/aaravjoshi/master-gos-concurrency-context-propagation-and-cancellation-secrets-revealed-12fm)

@golang_books",5477,14,0,golang_books
869,2024-12-06 11:02:01+00:00,"**Go Language - Web Application Secure Coding Practices**

 [Book](https://checkmarx.gitbooks.io/go-scp/content/)

@golang_books",5599,12,0,golang_books
867,2024-12-05 12:40:09+00:00,"**Build a blockchain from scratch in Go with gRPC**

 [Book](https://github.com/volodymyrprokopyuk/go-blockchain)

@golang_books",5121,6,0,golang_books
865,2024-12-03 10:11:06+00:00,"**neffos** - a cross-platform real-time framework with expressive, elegant API written in Go.
This book contains extensive documentation for developers and teams working with the neffos project.

[Book](https://www.iris-go.com/neffos-book.pdf)

@golang_books",5464,9,0,golang_books
864,2024-12-01 16:13:06+00:00," Использование CloudEvents в Go!

 Внедрение событийно-управляемой архитектуры (EDA) для повышения масштабируемости и снижения взаимосвязи между компонентами/сервисами довольно распространено в сложных средах.

 Хотя этот подход решает ряд проблем, одной из проблем, с которой сталкиваются команды, является стандартизация событий для обеспечения совместимости между всеми компонентами. Чтобы смягчить эту проблему, мы можем использовать  проект CloudEvents.

 Целью проекта является спецификация для стандартизации и описания событий, привносящих согласованность, доступность и портативность. Еще одним преимуществом является то, что проект предоставляет ряд SDK для ускорения принятия команды в дополнение к спецификации.

 Ссылка: [*клик*](https://eltonminetto.dev/en/post/2024-11-28-cloudevents-in-go/)

@golang_books",6515,13,0,golang_books
863,2024-11-28 17:39:36+00:00," **Pogo Compiler**

Компилятор для языка программирования [Pogo](https://github.com/pabloerhard/pogo), реализованный в Go. 

Этот гибридный компилятор выполняет лексический анализ, синтаксический разбор, семантическую проверку, генерацию кода и его выполнение.

 [Github](https://github.com/pabloerhard/pogo)

@golang_books",13571,15,0,golang_books
862,2024-11-28 15:50:58+00:00,"**** **General Relativity **

 [Book](https://cdn.prod.website-files.com/65c089cfdfce11a0392e5c42/67469a196f855821380fffa4_GR-2024.pdf)

[@datascienceiot](https://t.me/datascienceiot)",5589,11,0,golang_books
860,2024-11-28 10:01:36+00:00,"**Know Go: Generics**

 [Книга](https://www.openmymind.net/assets/go/go.pdf)

@golang_books",5733,12,0,golang_books
855,2024-11-26 10:30:35+00:00," **Effective Go (На русском языке)**

▪ [Github](https://github.com/0x0FACED/effective-go-ru/blob/main/effective_go_ru.md)

@golang_books",5970,30,0,golang_books
853,2024-11-24 17:24:14+00:00,"**Foundations of Debugging for Golang **

 [Книга](https://t.me/golang_telegram/41) 

@golang_books",6130,9,0,golang_books
851,2024-11-24 17:20:06+00:00,"**Awesome Go Books**

**** [Github](https://github.com/dariubs/GoBooks)

@golang_books",6136,7,0,golang_books
846,2024-11-21 09:40:11+00:00,"**Awesome Go Educations**

**** [Github](https://mehdihadeli.github.io/awesome-go-education/resources/)

@golang_books",5536,14,0,golang_books
844,2024-11-18 11:15:12+00:00,"**Machine Learning For Dummies**

**** [Книга](https://github.com/Rafiquzzaman420/Free-Programming-Books/blob/master/Machine%20Learning/Machine%20Learning%20For%20Dummies.pdf)

@golang_books",6035,13,0,golang_books
842,2024-11-14 19:03:01+00:00,"️ **Practical DevOp**

**** [Книга](https://github.com/sethuram-r/Free-DevOps-Books-1/blob/master/book/Practical%20DevOps.pdf)

@golang_books",6409,8,0,golang_books
840,2024-11-14 17:02:44+00:00,"**A brief tutorial on information theory**

 [Book](https://arxiv.org/pdf/2402.16556)

@datascienceiot",5504,5,0,golang_books
838,2024-11-07 09:33:01+00:00,"**Practical Go Lessons**

**** [Книга](https://www.practical-go-lessons.com/)

@golang_books",6891,19,0,golang_books
836,2024-11-05 18:01:45+00:00,"**** **how to code in go**

[Книга](https://github.com/diptomondal007/GoLangBooks/blob/master/how-to-code-in-go.pdf)

@golang_books",6145,12,0,golang_books
834,2024-11-05 13:16:01+00:00,"****** бесплатные электронные книги о Go**

http://golang.org

@golang_books",5209,7,0,golang_books
832,2024-10-28 10:40:07+00:00,"**Introducing Go Build Reliable, Scalable Programs**

 [Книга](https://github.com/Rafiquzzaman420/Free-Programming-Books/blob/master/Go/Introducing%20Go_%20Build%20Reliable%2C%20Scalable%20Programs.pdf)

@golang_books",7260,15,0,golang_books
830,2024-10-24 12:10:06+00:00,‍ **Полезная иконографика: Аллокация памяти**: paging vs segmentation,7125,21,0,golang_books
828,2024-10-22 19:44:03+00:00," **Go blockchain**

Большое прикладное пособие по продуктивному изучению и последовательному **построению блокчейна с нуля на Go + gRPC**

Интересное и увлекательное приключение, которое проведет вас от базовых концепций и целей через техническое проектирование и реализацию к практическому тестированию и использованию собственного **блокчейна**.

Нравится вам блокчейн или нет, ваше мнение останется таким до тех пор, пока вы не поймете, как он функционирует.

Как только вы приобретете эти знания (например, с помощью данного руководства), ваше мнение, скорее всего, перестанет колебаться между любовью и ненавистью и займет нейтральную позицию.

Блокчейны представляют собой гораздо больше, чем просто платформы для финансовых пирамид и лотерей, но они также далеки от того, чтобы быть универсальным решением.

В руководстве сделан упор на подход `""учись на практике`"", позволяющий эффективно изучать фундаментальные концепции блокчейна и постепенно создавать компоненты блокчейна с нуля. 

Практический опыт разработки, тестирования и использования блокчейна является отличным стимулом для более глубокого понимания фундаментальных концепций блокчейна и **технических решений.**

Как только вам будет понята ключевая механика компонентов блокчейна, более абстрактные теоретические концепции естественным образом восполнят пробелы в знаниях, полученных в ходе практических экспериментов

#golang #cryptography #blockchain #concurrentprogramming #grpc 

[▪️](https://github.com/GreenmaskIO/greenmask)[Github](https://github.com/volodymyrprokopyuk/go-blockchain)

@golang_google",5551,20,0,golang_books
825,2024-10-21 10:30:40+00:00," **Отличная шпаргалка по Go**

Поможет быстро погрузиться в Go или освежить базовые концепции

 [Cheat sheet](https://golang.withcodeexample.com/blog/handy-golang-cheatsheet-for-quick-reference/)


@golang_books",4980,18,0,golang_books
823,2024-10-19 11:38:07+00:00," **Полезная шпаргалка по консольным командам Git **

В Git есть много команд, и если ты часто их забываешь, эта шпаргалка специально для тебя. 

В [этом](https://github.com/cyberspacedk/Git-commands) репозитории можно быстро ознакомиться с основными командами и концепциями, а затем одним лёгким нажатием на Ctrl+C скопировать их.

Дополнительный плюс — всё написано на русском. Так что сохраняем!

 [Шпаргалка](https://github.com/cyberspacedk/Git-commands)

#git #шпаргалка",6592,16,0,golang_books
821,2024-10-18 10:00:54+00:00,**Справочник по командам grep в Linux для системных администраторов**,5050,3,0,golang_books
819,2024-10-18 07:52:39+00:00,"**Введение в программирование на Go**

[Книга](http://golang-book.ru/)

@golang_books",5755,12,0,golang_books
817,2024-10-17 09:50:08+00:00,"**How Linux Works: What Every Superuser Should Know**

 [Книга](https://t.me/frontendbooksit/981)

@golang_books",5186,5,0,golang_books
815,2024-10-15 13:00:23+00:00,"Автор известной книги о Go - **""Writing An Interpreter In Go"" **обсуждает, что через восемь лет после появления Go язык стал подходящим выбором для написания книги.

https://registerspill.thorstenball.com/p/glad-i-did-it-in-go

@golang_books",5417,25,0,golang_books
811,2024-10-14 12:35:01+00:00," **Gopher Reading List Build**

**Полезный список Golang литературы.**

** Внутри ссылки: **
- 3 категории уровней: Начальный, средний, продвинутый;
- Общие вопросы, такие как “Почему вы должны изучать Go?” и “Как писать код на Go”.
- Веб, конкуренция, стиль кода, тестирование и другие темы, связанные с Go. 

#язык #разработка #основы #go
 
Добавляйте в закладки и наслаждайтесь чтением!

 [Github](https://github.com/enocom/gopher-reading-list)

@golang_books",7204,20,0,golang_books
809,2024-10-11 15:48:18+00:00," **Introduction to Go**

 бесплатный курс Go для начинающих получил обновление для Go 1.23 версии, главным дополнением стал раздел об итераторах.

#golang #бесплатныйкурс  #opensource

 Материалы курса находятся в свободном доступе (под CC BY-NC-SA 4.0): https://github.com/jub0bs/go-course-beginner.",5751,12,0,golang_books
807,2024-10-11 10:01:01+00:00,"**Coderspeak The language of computer programmers**

 [Book](https://discovery.ucl.ac.uk/id/eprint/10188850/1/Coderspeak.pdf)

@golang_books",4848,7,0,golang_books
803,2024-10-07 16:01:01+00:00," **Отличная подборка материалов по Go: книги, шпаргалки, туториалы**

Здесь вы наверняка найдёте что-то полезное для себя, покрываются практически все темы Go

⏩**Основы языка** 
 — Синтаксис и структура программ • Переменные, типы данных, операторы • Управляющие структуры (циклы, условные операторы) • Функции и пакеты.

⏩**Структуры данных**
 — Массивы и срезы • Строки и форматирование • Карты • Структуры.

⏩**Обработка ошибок**
 — Обработка ошибок в Go • Пакет `errors` и создание пользовательских ошибок.

⏩**Конкурентность и параллелизм**
 — Горутины и каналы • `sync` пакет для синхронизации доступа к данным • `context` пакет для управления жизненным циклом горутин.

⏩**Сетевое программирование**
 — Создание HTTP серверов и клиентов • Работа с TCP и UDP • Использование `net` и `net/http` пакетов.

⏩**Работа с файловой системой**
 — Чтение и запись файлов • Операции с директориями • Использование пакета `os` и `io`.

⏩**Базы данных**
 — Работа с SQL и NoSQL базами данных • Использование пакетов `database/sql` и `go-sql-driver` • Интеграция с ORM, например, GORM.

⏩**Тестирование**
 — Написание и запуск тестов • Использование пакета `testing` • Тестирование с помощью моков и заглушек.

 [Ссылка](https://github.com/tyz910/golang-webservices?tab=readme-ov-file) 

@golang_books",5434,22,0,golang_books
800,2024-10-07 12:10:11+00:00," **Шпаргалка: Основные команды Docker**

Один из способов взаимодействия с Docker – использование командной строки. Здесь сохранена полезная шпаргалка, где можно найти описание основных действий в Docker, а также базовые команды для работы с образами, томами и реестрами.

 [Ссылка на шпаргалку](https://devops.org.ru/docker-summary)

#шпаргалка #docker #ru

 @golang_books",4927,11,0,golang_books
798,2024-10-07 08:55:03+00:00,"**️ Курс по основам системного дизайна**

Вы готовитесь к интервью по системному дизайну или просто хотите узнать больше о работе сложных систем? Тогда репозиторий от ByteByteGo – идеальный выбор!

**В этом курсе вас ожидают следующие темы:**

– Протоколы
– CI/CD
– Архитектурные шаблоны
– Базы данных
– Кэширование
– Микросервисные архитектуры
– Платежные системы
– DevOps
– Git
– Облачные сервисы
– Инструменты для повышения производительности разработки
– Linux
– Безопасность
– Реальные примеры систем

▪ [GitHub](https://github.com/ByteByteGoHq/system-design-101) 
▪ [Перевод](https://habr.com/ru/articles/770564/)

 @golang_books",5740,16,0,golang_books
797,2024-10-05 21:17:28+00:00,"** Шпаргалка по SQL**

__(Вопросы и ответы для собеседования)__

@golang_books",5172,8,0,golang_books
795,2024-10-04 16:00:38+00:00,"** Заметки о веб-разработке на Go от Julia Evans — отличный ресурс для тех, кто хочет углубить свои знания в этой области. Эти заметки основаны на реальном опыте автора, что делает их особенно ценными. **

Если ваша работа связана с веб-разработкой и языком программирования Go, то эти заметки могут стать полезным дополнением к вашим текущим знаниям.

 [Читать](https://jvns.ca/blog/2024/09/27/some-go-web-dev-notes/)",5303,12,0,golang_books
794,2024-10-04 08:51:01+00:00,**Защищаем учетную запись локального администратора**,5058,10,0,golang_books
792,2024-09-28 14:07:25+00:00," **Build Your Own Database in Go From Scratch - From B+tree to SQL in 3000 lines** **(2024)
**
 [Книга](https://t.me/repositorybooks/600)

@Golang_google",7128,16,0,golang_books
791,2024-09-25 16:02:11+00:00," **gocheat**

Красивая интерактивная шпаргалка для  горячих клавиш и полезных команд в терминале

#golang  #terminal

▪[Github](https://github.com/Achno/gocheat\)

@Golang_google",7226,6,0,golang_books
789,2024-09-25 09:40:09+00:00,"**Команды Linux, которые должен знать DevOps-инженер. Шпаргалка**

#devops #девопс

 @golang_books",6040,7,0,golang_books
786,2024-09-24 13:06:02+00:00,"**Шпаргалка по командам Docker**

#devops #девопс

 @golang_books",6138,9,0,golang_books
784,2024-09-24 09:27:48+00:00,"⌨️ **Шпаргалка по командам Git на русском

**`echo ""# название"" >> README.md` - создание файла README.md
`git init` - инициализация репозитория
`git add README.md` - добавления файла README.md в проект
`git commit -m ""first commit""` - получает проиндексированный снимок состояния и выполняет его коммит в историю проекта
`git remote add origin https://github.com/stanruss/название.git` - команда, которой устанавливается подключение к удаленному серверу и git репозиторию, размещающемуся на нем.
`git push -u origin master` - кзменения отправляются на удаленный сервер

`git log --oneline` - посмотреть все коммиты.
`git checkout .` - восстановить все.
`git checkout ""код коммита""` - вернуть до состояния этого коммита.
`git checkout master` - вернуться в ветку мастер.

**Восстановить файлы на локальном компьютере:
**```shell
git fetch --all
git reset --hard origin/master или git reset --hard origin/<название_ветки>
```
`git add text.txt` - Добавить файл в репозиторий
`git rm text.txt` - Удалить файл
`git status `- Текущее состояние репозитория (изменения, неразрешенные конфликты и тп)
`git commit -a -m ""Commit description""` - Сделать коммит
`git push origin` - Замерджить все ветки локального репозитория на удаленный репозиторий 
`git push origin master `- Аналогично предыдущему, но делается пуш только ветки master
`git push origin HEAD` - Запушить текущую ветку, не вводя целиком ее название
`git pull origin `- Замерджить все ветки с удаленного репозитория
`git pull origin master` - Аналогично предыдущему, но накатывается только ветка master
`git pull origin HEAD` - Накатить текущую ветку, не вводя ее длинное имя
`git fetch origin` - Скачать все ветки с origin, но не мерджить их в локальный репозиторий
`git fetch origin master `- Аналогично предыдущему, но только для одной заданной ветки
`git checkout -b some_branch origin/some_branch` - Начать работать с веткой some_branch (уже существующей)
`git branch some_branch` - Создать новый бранч (ответвится от текущего)
`git checkout some_branch `- Переключиться на другую ветку (из тех, с которыми уже работаем)
`git branch` # звездочкой отмечена текущая ветвь - Получаем список веток, с которыми работаем
`git branch -a # | grep something` - Просмотреть все существующие ветви
`git merge some_branch` - Замерджить some_branch в текущую ветку
`git branch -d some_branch` - Удалить бранч (после мерджа)
`git branch -D some_branch` - Просто удалить бранч (тупиковая ветвь)
`git show d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4` - Изменения, сделанные в заданном коммите
`git push origin :branch-name` - Удалить бранч из репозитория на сервере
`git reset --hard d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4` - Откатиться к конкретному коммиту и удалить последующие (хэш смотрим в «git log»)
`git push -f` - Залить на сервер измененные коммиты
`git clean -f` - Удаление untracked files

️ Сохраняй, пригодится 

#git #github #doc #cheatsheet",6397,31,0,golang_books
782,2024-09-20 09:50:06+00:00," **Golang Book: Решения упражнений и выводы по книге**

Репозиторий для решения упражнений и заметок из книги ""Язык программирования Go | Керниган Брайан, Донован Алан А. А."" Repository for solving exercises and notes from ""Kernighan, Donovan: The Go Programming Language"" GOPL.

[Книга](https://github.com/WatherMG/golang-book)",11553,17,0,golang_books
780,2024-09-20 08:13:39+00:00,"[ ++101 Linux commands Open-source eBook](https://github.com/bobbyiliev/101-linux-commands-ebook?tab=readme-ov-file#basics)

 [Книга](https://github.com/bobbyiliev/101-linux-commands-ebook?tab=readme-ov-file#basics)

 @golang_books",5639,7,0,golang_books
778,2024-09-18 09:04:59+00:00," **Golang Roadmap 2024**

Roadmap, в котором объясняются шаги, с которыми вы сможете освоить Go и стать разработчиком. Этот репозитория создан в качестве полезного гайда для всех, кто задается вопросом: ""Чему я должен научиться дальше как разработчик Go?""

[Roadmap](https://github.com/baselrabia/Golang-Roadmap)

 @golang_books",6051,11,0,golang_books
776,2024-09-17 08:16:42+00:00," **Ultimate SQL Learning Resource**

Полезный [Гайд-книга](https://github.com/faizanxmulla/sql-portfolio) по изучению SQL.

▪ [Github](https://github.com/faizanxmulla/sql-portfolio)

 @golang_books",5828,12,0,golang_books
774,2024-09-16 16:03:40+00:00," **Минимальный набор знаний о concurrency, который нужен каждому разработчику**

Все знания о конкурентности, которые у вас есть, наверняка получены из множества разных источников. 

Если хочется навести порядок в голове и разобраться в сути дела, ловите руководство, которое можно осилить за короткое время.
 
 [Источник](https://bitbashing.io/concurrency-primer.html)",6282,13,0,golang_books
772,2024-09-16 09:53:19+00:00," **Полезная Шпаргалка по PostgreSQL**

Небольшая шпаргалка по PostgreSQL в формате PDF. 

Вы можете скачать и распечатать ее для быстрого ознакомления с наиболее часто используемыми операторами в PostgreSQL:

️[** **Ссылка** **](https://bookflow.ru/shpargalka-po-postgresql/)[**

**](https://telegra.ph/Kak-perepisat-SQL-zaprosy-na-Python-s-pomoshchyu-Pandas-02-20)[@](https://t.me/+FprFg7-t7Fg3NTFi)[sqlbook](https://t.me/+fJ-nlrs9LVU5NGRi)",5346,13,0,golang_books
770,2024-09-12 10:42:41+00:00," **Шпаргалка по работе с MySQL**

Сохраняй себе, чтобы не потерять.


 @golang_books",6376,10,0,golang_books
766,2024-09-11 14:18:52+00:00,"️ Книга+практика : **Understanding Deep Learning**

[Книга “Understanding Deep Learning”](https://github.com/udlbook/udlbook/releases/download/v.4.0.4/UnderstandingDeepLearning_08_28_24_C.pdf) посвящена идеям и принципам, лежащим в основе глубокого обучения. Подача материала построена таким образом, чтобы читатель мог понять материал настолько эффективно, насколько это возможно. Для читателей, желающих углубиться в изучение, в каждой главе приведены соответствующие задачи, записные книжки по Python и подробные справочные материалы.

В первой части книги представлены модели глубокого обучения и обсуждается, как их обучать, измерять их производительность и улучшать эту производительность. 

В следующей части рассматриваются архитектуры, которые специализируются на изображениях, тексте и графических данных. Для свободного понимания этих двух глав требуется понимать принципы линейной алгебры, матанализа и теории вероятностей. 

Последующие части книги посвящены генеративным моделям и методике обучения с подкреплением. Эти главы требуют больших знаний в области теории вероятностей и математического анализа. 

В последней главе обсуждается этика искусственного интеллекта и призыв к практикующим инженерам задуматься о моральных последствиях своей работы. 

**Автор книги**: Simon J. D. Prince - почетный профессор информатики в Университете Bath (Великобритания) , со-автор более [80 опубликованных исследований](https://scholar.google.com/citations?user=fjm67xYAAAAJ&hl=en) в области ML. 
Научный сотрудник, специализирующийся на искусственном интеллекте и глубоком обучении, он руководил группами ресерча в Anthropics Technologies Ltd, Borealis AI и других компаниях.

Дополнительно, на отдельном сайте книги, читателям доступны:

🟢[ответы](https://github.com/udlbook/udlbook/raw/main/UDL_Answer_Booklet_Students.pdf) на наиболее частые вопросы студентов;
🟢[ipynb - ноутбуки](https://github.com/udlbook/udlbook/tree/main/Notebooks) для практических занятий по материалам книги;
🟢интерактивные [иллюстрации](https://udlbook.github.io/udlfigures/) по темам;
🟢презентации по каждой главе для преподавателей, которые захотят построить свое обучение на содержимом книги;
🟢большой список статей по 12 направлениям для продолжения обучения после прочтения книги: AI Theory, Transformers & LLMs, Unsupervised learning, Natural language processing, Computer vision и др.

▶️Дата последней актуализации книги : 28 августа 2024 года.


Стоимость: бесплатно


🟡[Сайт книги](https://udlbook.github.io/udlbook/)
[Github](https://github.com/udlbook/udlbook)


@ai_machinelearning_big_data

#AI #ML #Book",3798,8,0,golang_books
763,2024-09-10 15:04:28+00:00," **HackTricks — открытая онлайн** **книга хакерских рецептов

HackTricks,** открытая книга, где вы найдете огромное количество хакерских трюков/техник/гайдов, чему автор научился из **CTF**, реальных приложений, чтения исследований и новостей.

[HackTricks](https://book.hacktricks.xyz/)",5411,10,0,golang_books
761,2024-09-09 10:27:58+00:00,"**Quick Start Kubernetes**

 [Book](https://devopshack737858784.wordpress.com/wp-content/uploads/2021/05/quickstartkubernetes.pdf)

@golang_books",4533,4,0,golang_books
759,2024-09-07 17:45:46+00:00," **Операции со слайсами в Go**

Будет полезно начинающим гоферам; 
здесь наглядно показывается, как работают слайсы, какие они имеют методы и как взаимодействуют с разными функциями

 [Go slice tricks](https://ueokande.github.io/go-slice-tricks/)

@golang_interview",3765,10,0,golang_books
758,2024-09-07 09:40:18+00:00,"️Легкий способ получать свежие обновления и следить за трендами в разработке на вашем языке. Находите свой стек и подписывайтесь:

МАШИННОЕ ОБУЧЕНИЕ:[ ](https://t.me/+a2a3XE5DLrQ0MDYy)[t.me/ai_machinelearning_big_data](https://t.me/+A1xTDqxfn8BhYzMy)
C++ [t.me/cpluspluc](https://t.me/+ZA0garnT9no3Mjdi)
Python:[ t.me/](https://t.me/+yNNPdducIcVjNDEy)[pro_python_code](https://t.me/+JINZYBuk8IdjYTAy)
Хакинг: [t.me/linuxkalii](https://t.me/+Zpj4PBfr9QRkNjhi)
Devops: [t.me/devOPSitsec](https://t.me/+z3vVNDGkEHwyZWIy)
АНАЛИЗ Данных: [t.me/data_analysis_ml](https://t.me/+Y-Bj-Jfn0NVhY2Vi)
Javascript:[ ](https://t.me/+ZkEdFddTmqswZTYy)[t.me/javascriptv](https://t.me/+kbGMZmCFL5hlOTMy)
C#: [t.me/csharp_ci](https://t.me/+qdE3ENMXapozMGNi)
Java:[ ](https://t.me/+gQ6z6RXFGulkOWY6)[t.me/javatg](https://t.me/+eKVnTGuoMcwxMTBi)
Базы данных: [t.me/sqlhub](https://t.me/+hUURY84TPnk3Mzky)
Linux:[ ](https://t.me/+lfBzDUdInM82NzJi)[t.me/linuxacademiya](https://t.me/+vpgsAqBWMnI1YjRi)
Python  собеседования: [t.me/python_job_interview](https://t.me/+qzOlOI61j4Q1MDky)
Мобильная разработка: [t.me/mobdevelop](https://t.me/+ecU59JV8PlZhZDM6)
Docker: [t.me/DevopsDocker ](https://t.me/+RJDC5_8F4LVhZTUy)
Golang: [t.me/golang_interview](https://t.me/+tX72mubpeCJmNzAy)
React:[ ](https://t.me/+n0HSxg7wfOA5NGQy)[t.me/react_tg](https://t.me/+pI3IpSQkTwBkM2My)
Rust: t.me/rust_code
PHP: t.me/phpshka
Android: t.me/android_its
Frontend: [t.me/front](https://t.me/+VUfA4vMcAIFjNDEy)
Big Data: t.me/bigdatai
Собеседования МЛ: t.me/machinelearning_interview
МАТЕМАТИКА: t.me/data_math
Kubernets: [t.me/kubernetc](https://t.me/+fub-s0WBT3w4ZTZi)


 Папка с **вакансиями**: t.me/addlist/_zyy_jQ_QUsyM2Vi
Папка  Go разработчика: t.me/addlist/MUtJEeJSxeY2YTFi
Папка Python разработчика: t.me/addlist/eEPya-HF6mkxMGIy
Папка ML: https://t.me/addlist/2Ls-snqEeytkMDgy
Папка **FRONTEND: **https://t.me/addlist/mzMMG3RPZhY2M2Iy

ИТ-Мемы: t.me/memes_prog
Английский: t.me/english_forprogrammers
**ИИ**: t.me/vistehno

**954ГБ ОПЕНСОРС КУРСОВ: **[@courses](https://t.me/+g5DX-1c1olo0YzUy)
**Ит-книги бесплатно**: https://t.me/addlist/BkskQciUW_FhNjEy",5002,5,0,golang_books
757,2024-09-04 16:18:58+00:00,"**  Полезная шпаргалка с командами Docker.**

__Внутри: __

 - [Установка;](https://github.com/eon01/DockerCheatSheet/blob/master/README.ru.md#установка)
 - [Реестры и репозитории Docker;](https://github.com/eon01/DockerCheatSheet/blob/master/README.ru.md#реестры-и-репозитории-docker)
 - [Первые действия с контейнерами;](https://github.com/eon01/DockerCheatSheet/blob/master/README.ru.md#первые-действия-с-контейнерами)
 - [Запуск и остановка контейнеров;](https://github.com/eon01/DockerCheatSheet/blob/master/README.ru.md#запуск-и-остановка-контейнеров)
 - [Получение информации о контейнерах;](https://github.com/eon01/DockerCheatSheet/blob/master/README.ru.md#получение-информации-о-контейнерах)
 - [Сеть;](https://github.com/eon01/DockerCheatSheet/blob/master/README.ru.md#сеть)
 - [Очистка Docker;](https://github.com/eon01/DockerCheatSheet/blob/master/README.ru.md#очистка-docker)
 - [Docker Swarm;](https://github.com/eon01/DockerCheatSheet/blob/master/README.ru.md#docker-swarm)
 - [Заметки.](https://github.com/eon01/DockerCheatSheet/blob/master/README.ru.md#заметки)

#Docker #CheatSheet

 @golang_books",5883,15,0,golang_books
754,2024-09-04 10:01:59+00:00," [Книга-шпаргалка по командам Git на русском

](https://github.com/rucreatizer/git)- Создание и клонирование репозиториев
- Добавление файлов к отслеживанию, индексация отслеживаемых
- Удаление файлов
- Отмена индексации и изменений
- Ветки
- История изменений
- Примеры работы и многое другое

▪ [Github](https://github.com/rucreatizer/git)

@golang_books",5058,20,0,golang_books
752,2024-09-03 15:42:35+00:00,"**Exercises in Machine Learning**

 [Book](https://arxiv.org/pdf/1805.05052)


@golang_books",4664,11,0,golang_books
750,2024-09-03 08:22:33+00:00,"Эта книга посвящена искусственному интеллекту и играм. Насколько нам известно, это первая всесторонняя учебная книга, охватывающая эту область. Под всесторонней мы подразумеваем, что книга охватывает все основные области применения методов искусственного интеллекта в играх: игровой процесс, генерацию контента и моделирование игроков. Мы также имеем в виду, что книга обсуждает проблемы искусственного интеллекта в различных типах игр, включая настольные игры и видеоигры разных жанров.

Книга предназначена для студентов и исследователей, но мы также надеемся, что она будет полезна разработчикам игр. Мы написали эту книгу на основе нашего долгого опыта исследования искусственного интеллекта в играх, как индивидуального каждого из авторов, так и совместного. Мы оба начали исследовать методы искусственного интеллекта в играх в 2004 году и работали вместе с 2009 года.

Книга не является практическим руководством по созданию искусственного интеллекта для игр, а скорее теоретическим обзором области. Мы не обсуждаем конкретные игровые движки или программные фреймворки, и не предоставляем примеры кода. Книга предназначена для читателей, уже имеющих базовые знания в области искусственного интеллекта и компьютерных наук.

Мы надеемся, что книга будет полезна для преподавателей, которые хотят создать курс по искусственному интеллекту и играм. Мы предоставляем несколько вариантов организации курса, включая традиционный курс с лекциями и экзаменом, а также курс с групповым проектом. Материал книги можно использовать в различных способах, чтобы поддержать разные педагогические практики.",5067,9,0,golang_books
748,2024-08-31 07:55:21+00:00,"**MongoDB in Action**

 [Книга](https://github.com/Rafiquzzaman420/Free-Programming-Books/blob/master/Web%20Development%20Books/Back-end/MongoDB/MongoDB%20in%20Action%20Covers%20MongoDB%20version%203.0.pdf) 

@golang_books",5515,5,0,golang_books
746,2024-08-29 10:08:55+00:00,"**Hacking The Art of Exploitation**

 [Book](https://github.com/Rafiquzzaman420/Free-Programming-Books/blob/master/Hacking/Hacking%20The%20Art%20of%20Exploitation.pdf)

@golang_books",5895,8,0,golang_books
744,2024-08-27 15:01:25+00:00,"**Algorithms in a Nutshell**

 [Book](https://github.com/Rafiquzzaman420/Free-Programming-Books/blob/master/Algorithm/Algorithms%20in%20a%20Nutshell.pdf)

@golang_books",6101,8,0,golang_books
742,2024-08-27 09:03:28+00:00,"**Art of Computer Programming - Volume 1 (MMIX - RISC Computer for the New Millennium)**

 [Book](https://github.com/manjunath5496/The-Art-of-Computer-Programming-Books)

@golang_books",5594,5,0,golang_books
740,2024-08-21 13:09:34+00:00,"** Алгебра, топология, дифференциальное исчисление и теория оптимизации для компьютерных наук и машинного обучения

**Бесплатная книга по Алгебре объемом 2196 страниц , выпущенная феврале 2024 года.
**
**▪[Книга](https://www.cis.upenn.edu/~jean/math-deep.pdf)

@data_math",6721,7,0,golang_books
739,2024-08-20 11:01:39+00:00,"️**Большая туториал-шпаргалка по SQL с примерами запросов и объяснением**

@golang_books",6663,17,0,golang_books
737,2024-08-19 08:27:34+00:00," **introduction-to-sql **— введение в SQL бесплатная книга, которая поможет вам освоить основы SQL и начать использовать реляционные базы данных в ваших проектах SysOps, DevOps и другой разработке.

 Независимо от того, работаете ли вы инженером **DevOps/SysOps, **разработчиком или просто увлекаетесь **Linux, SQL,** скорее всего, понадобится вам на каком-то этапе карьеры.

Это руководство подходит для всех, кто работает разработчиком, системным администратором или инженером **DevOps** и хочет изучить основы **SQL**.

▪ [GitHub](https://github.com/bobbyiliev/introduction-to-sql)

@sqlhub",6195,8,0,golang_books
734,2024-08-15 14:35:13+00:00,"**Matrix Theory and LINEAR ALGEBRA**

 [Book](https://www.mathstat.dal.ca/~selinger/linear-algebra/downloads/LinearAlgebra.pdf)

@golang_books",11778,5,0,golang_books
730,2024-08-14 09:03:13+00:00,"️  **Вышла новая бесплатная книга «ИИ и игры»**

Второе издание книги «Искусственный интеллект и игры» от Георгиоса Н. Яннакакиса и Джулиана Тогелиуса посвящено применению ИИ в игровой индустрии. Авторы рассматривают ключевые аспекты использования искусственного интеллекта для разработки, анализа видеоигр и улучшения взаимодействия пользователей с игровым процессом.

 [Скачать](https://61f90c.p3cdn1.secureserver.net/wp-content/uploads/2024/08/book2.pdf)",6117,7,0,golang_books
728,2024-08-13 12:13:38+00:00,"100go.co - краткое содержание книги 100 Go Mistakes and How to Avoid Them в удобном формате

#golang

 [Книга](https://100go.co/)

@golang_books",14098,25,0,golang_books
727,2024-08-08 11:01:03+00:00,"Небольшая, но удобная шпаргалка с основными командами **Docker**.

Контейнеризация это важно, сохраняем.

[Docker](https://t.me/+0WdB4uvOwCY0Mjdi)",6779,23,0,golang_books
726,2024-08-08 10:59:57+00:00," **GraphQL or Bust**

 [Книга](https://nordicapis.com/wp-content/uploads/GraphQL-or-Bust-v2.2.pdf)

@golang_books",6469,9,0,golang_books
724,2024-08-06 08:03:33+00:00,"**Руководство по Git (полная версия)**

 [Книга ](https://proselyte.net/tutorials/git/)

@golang_books",6821,13,0,golang_books
722,2024-08-02 14:41:22+00:00,"[gobooks](https://t.me/+GUcET7H8JvZjZGEy) - наш резервный канал со свежими книгами по GO, подпишитесь на случай блокировки.",6986,9,0,golang_books
721,2024-08-01 08:22:20+00:00," **Linux From Scratch**

Интересуетесь созданием собственного дистрибутива Linux? В сети доступна бесплатная книга 2024 года, которая поможет вам в этом! Почти 400 страниц содержится вся необходимая информация, чтобы создать свою собственную версию Linux. 

На освоение материала вам потребуется примерно 2-3 недели, но результат того стоит.

Не упустите шанс погрузиться в мир кастомизации Linux. 

#Linux #OpenSource #Программирование #ИТ #Учебники

 [Книга](https://www.linuxfromscratch.org/lfs/downloads/stable/LFS-BOOK-12.1.pdf)

@golang_books",8198,31,0,golang_books
717,2024-07-30 07:32:15+00:00," **Отличная свободная книга от Александра Куликова — «Learning algorithms through programming and puzzle solving»**

Здесь очень подробно и наглядно описываются самые важные алгоритмы Computer Science — всё то, о чём любят спрашивать почти на любом собеседовании

 [Learning algorithms](https://nikku1234.github.io/Certification/Data%20Structures%20and%20Algorithms/Learning%20Algorithms%20Through%20Programming%20and%20Puzzle%20Solving%20(%20PDFDrive.com%20).pdf)

@golang_books",5626,22,0,golang_books
715,2024-07-24 16:04:31+00:00,"**Fundamentals of Data Engineering**

 [Book](https://go.redpanda.com/hubfs/PDFs/fundamentals-of-data-engineering.pdf)

@golang_books",6958,9,0,golang_books
712,2024-07-23 12:03:06+00:00," **Крутая шпаргалка по SQL.**

В ней, предоставлены основные примеры запросов, а также пояснения к ним на русском языке.

Сохраняйте, чтобы не потерять

#шпаргалка #sql

@golang_books",7145,16,0,golang_books
709,2024-07-22 09:03:41+00:00," **Подборка полезных ресурсов по Go для подготовки к собеседованию**

Здесь ссылки на вопросы/ответы по Go, ссылки на шпаргалки для бекендеров в целом, ресурсы для подготовки к вопросам по архитектуре и дизайну систем

🟡 [Awesome Go Interview](https://awesome-go-interview.dev/)

@golang_books",6848,9,0,golang_books
705,2024-07-19 21:12:35+00:00,"**The Complete Guide to Programming Reliable and Efficient Software Using Golang**

 [book](http://www.cosmic-rays.ru/books61/Pro_Go.pdf)

@golang_books",6468,14,0,golang_books
703,2024-07-18 13:53:19+00:00,"** Учебник по Docker на русском**

 [Книга](https://t.me/repositorybooks/581)

#docker

@golang_books",14506,8,0,golang_books
702,2024-07-18 13:42:23+00:00,"**Golang Cheat Sheet

**▪** **[GIthub](https://gist.github.com/yokawasa/fc8ada72859569a60179c5414423f78f#golang-cheat-sheet)

@golang_books",5841,4,0,golang_books
700,2024-07-17 15:03:41+00:00,"SQL Более 800 вопросов c собеседований + задачи!

[@sqlbooks](https://t.me/+FprFg7-t7Fg3NTFi) - огромный архив SQL книг",4792,11,0,golang_books
698,2024-07-17 10:03:55+00:00,"** The Book of Kubernetes

** [Github](https://github.com/book-of-kubernetes/examples)

@golang_books",5735,6,0,golang_books
696,2024-07-15 14:17:20+00:00,"**Build Web Application with Golang**

 [Book](https://astaxie.gitbooks.io/build-web-application-with-golang/content/en/index.html)

@golang_books",5609,13,0,golang_books
691,2024-07-13 09:32:25+00:00," **Introduction to Bash scripting — открытая книга от Bobby Iliev**

В некоторых ситуациях проще и быстрее написать костыль на Bash, чем мониторить готовые решения. 
И как раз для желающих прокачать свои скиллы написания Bash-скриптов и была написана эта книга, держите
Кроме веб-версии есть и [pdf](https://ebook.bobby.sh/#download)

 [GitHub](https://github.com/bobbyiliev/introduction-to-bash-scripting/blob/main/ebook/en/content/003-bash-hello-world.md)

@golang_books",5540,13,0,golang_books
688,2024-07-10 08:38:32+00:00," **Открытая книга по Go**

В этой книге разбирается 25 тем, связанных с Go, таких как:
 — работа с файлами, чтение/запись
 — взаимодействие с разными БД, на примере Sqlite
 — конкурентность, горутины
 — тестирование
 — интерфейсы, структуры и т.д. 

Можно использовать эту книгу для освежения в памяти каких-то тем 

🟡 [Go book](https://softchris.github.io/golang-book/)

[golang_books](https://t.me/golang_books)",13410,21,0,golang_books
686,2024-07-04 10:03:56+00:00,"**Learning MongoDB**

 [Book](https://riptutorial.com/Download/mongodb.pdf)

https://t.me/golang_books",6987,9,0,golang_books
681,2024-07-01 19:57:45+00:00,‍ **Свежая шпаргалка по Go**,7212,18,0,golang_books
680,2024-06-26 13:32:52+00:00,"** Hack Documentation

** [docs](https://docs.hhvm.com/hack/)

@golang_books",8577,11,0,golang_books
678,2024-06-24 09:04:49+00:00,"**Efficient Linux at the Command Line

**[Book](https://reconshell.com/wp-content/uploads/2022/01/Efficient-Linux-at-the-Command-Line.pdf)

@golang_books",7228,12,0,golang_books
676,2024-06-21 12:03:01+00:00,"**Software Development with Go: Cloud-Native Programming using Golang with Linux and Docker **
Автор: Nanik Tolaram (2022)

Получите представление о различных задачах, которые можно решить с помощью Go, с акцентом на контейнеры, Linux, безопасность, сети, пользовательские интерфейсы и другие актуальные темы, связанные с облачными вычислениями. В этой книге рассматриваются необходимые инструменты для создания контейнерных облачных решений с помощью Go.

[Книга](https://t.me/repositorybooks/576)",6424,16,0,golang_books
673,2024-06-20 12:33:21+00:00," **Postgres Professional выпустила в свободном доступе книгу «PostgreSQL 16 изнутри»**

Компания-разработчик СУБД Postgres Professional выпустила новую книгу «PostgreSQL 16 изнутри». Электронная версия учебника находится [в свободном доступе](https://edu.postgrespro.ru/postgresql_internals-16.pdf). Автор книги — Егор Рогов, директор по разработке образовательных программ Postgres Professional.

Первое издание этого учебника, основанное на 14-й версии PostgreSQL, было выпущено в марте 2022 года и обновлено до 15 версии. Из-за большого читательского интереса компания перевела книгу на английский язык. Позже она стала самым популярным тематическим изданием 2023 года по версии Postgres Weekly и вошла в список профессиональной литературы на официальном сайте сообщества PostgreSQL.

В актуальной редакции книги «PostgreSQL 16 изнутри» учтены замечания читателей, исправлены опечатки, а также отражены изменения, произошедшие в версии PostgreSQL 16.

Также Postgres Professional обновила локализованную документацию к PostgreSQL 16.

 [«PostgreSQL 16 изнутри»](https://edu.postgrespro.ru/postgresql_internals-16.pdf)

@golang_books",12549,44,0,golang_books
670,2024-06-11 12:14:41+00:00," **Kubernetes Operation Framework: решение сложных задач управления кластером Kubernetes с помощью наборов инструментов автоматизации**

Книга рассматривает, как различные компоненты Operator Framework (такие как Operator SDK, Operator Lifecycle Manager и OperatorHub) используются для создания операторов. 

[Книга](https://t.me/repositorybooks/574)
[**
**](https://www.ozon.ru/)#en #Kubernetes",7477,10,0,golang_books
667,2024-06-09 09:04:50+00:00,"**Go Cookbook: экспертные решения для часто необходимых задач Go""
**
**Автор:** Sau Sheong Chang
**Год издания:** 2023
**Язык:** Английский

**Описание**: В этом практическом руководстве собраны рецепты, которые помогут вам разобраться с распространенными проблемами и выполнить полезные задачи при работе с Go.

[Книга](https://t.me/repositorybooks/573)",7364,20,0,golang_books
666,2024-05-31 10:07:40+00:00," **Справочник «Контейнеры для разработчиков»**

**Автор:** Francisco Javier Ramírez Urea
**Год издания:** 2023
**Язык:** Английский

**Описание**: Вы узнаете, как автоматизировать процесс сборки и доставки с помощью инструментов CI/CD с контейнерами и другие полезности связанные с контейнерами.

[Книга](https://t.me/repositorybooks/560)

@golang_interview",7561,5,0,golang_books
665,2024-05-28 05:01:09+00:00," **Сетевое программирование в Go**

Держите открытую книгу, в которой в деталях описано, как Golang взаимодействует с сетью
Описывается использование протоколов TCP, UDP, IP, модель OSI и другие аспекты сетевого программирования с позиции Go-разработчика

▶️ [PDF](https://ebook.daehub.com/Tutorials/network-programming-with-go.pdf)

@golang_interview",6967,26,0,golang_books
664,2024-05-27 14:24:08+00:00,"**An introduction to graph theory**

 [Book](https://arxiv.org/pdf/2308.04512.pdf)

@golang_books",6988,7,0,golang_books
662,2024-05-27 07:58:55+00:00,"**Enabling Microservice Success: Managing Technical, Organizational, and Cultural Challenges (2024)**


__Микросервисы могут быть очень эффективным подходом к созданию ценности для вашей организации и ваших клиентов. Если вы все сделаете правильно, микросервисы помогут вам двигаться быстро, внося изменения в небольшие части системы сотни раз в день. Но если вы поймете их неправильно, микросервисы только усложнят все.__
__В этой книге автор дает практические и подробные советы по переходу на микросервисы. Книга рассказывает о подходах, которые необходимо использовать с самого начала, и объясняет потенциальные ловушки, в которые вы можете попасть. Вы также узнаете, как поддерживать архитектуру по мере развития ваших систем и при этом минимизировать время, которое вы тратите на поддержку и обслуживание.__

[Книга](https://t.me/repositorybooks/557)",5678,14,0,golang_books
659,2024-05-23 10:03:14+00:00,"**Painless Docker: Unlock the Power of Docker and its Ecosystem **

__Это подробное и всеобъемлющее руководство, которое охватывает Docker и значительную часть его экосистемы. Руководство предназначено для начинающих и среднего уровня и содержит пошаговое руководство. Оно начинается с базовых концепций и переходит к расширенным возможностям. К концу руководства читатели освоят Docker и микросервисы, включая их разработку и использование в производстве. В руководстве также рассказывается о Docker Compose, Docker Swarm и важных инструментах экосистемы.__

[Книга](https://t.me/repositorybooks/556)",6147,11,0,golang_books
651,2024-05-19 12:32:34+00:00," **Книга и отдельные лекции по алгоритмам от Jeff Erickson**

Очень концентрированный материал от Jeff Erickson по различным алгоритмам Computer Science.
Самое то, если хочется чего-то фундаментального и исчерпывающего.
Отдельные главы очень неплохо помогают подготовиться к секции ""Алгоритмы"", которая есть практически на всех собеседованиях, в том числе и для Go-разработчиков

 [Книга и лекции](https://jeffe.cs.illinois.edu/teaching/algorithms/)

@golang_books",5670,12,0,golang_books
650,2024-05-19 10:27:44+00:00,"Подборка лучших обучающих каналов для программистов. 

️ __Делитесь с коллегами и __сохраняйте__ себе, чтобы не потерять__

Машинное обучение

[Machine Learning ](https://t.me/+PLs1rJcLvZ0zN2Uy)- запускаем лучшие ИИ модели, пишем код, погружаемся в нейросети
[Ml Собеседование](http://t.me/machinelearning_interview) - подготовка к собесу по мл, алгоритмам, коду
[Ml ru -](https://t.me/machinelearning_ru) актуальные статьи, новости, код и обучающие материалы
[Ml Jobs](http://t.me/Machinelearning_Jobs) - вакансии ML
[ML Книги ](http://t.me/machinelearning_books) - актуальные бесплатные книги МО
[ML чат ](http://t.me/machinee_learning)

 Golang
[Golang](https://t.me/+TxYc5xoV0Nc1YzIy) 
[Golang собеседование](https://t.me/+wHVdHr0hI6k0YTM6) - разбор задач и вопросов с собесов
[Golang вакансии](http://t.me/GolangJobsit) -работа для Go разработчика
[Golang книги](https://t.me/+9thHxS0N2PplOGMy) библиотека книг
[Golang задачи и тесты](https://t.me/+Huff_VmbSY4yYTQy)
[Golang чат](http://t.me/golangl)
[Golang news](https://t.me/+zAIPzz2g29YxM2Uy) - новости из мира go
[Golang](https://t.me/+fKYUPHs1PCBmYWJi) дайджест

 Linux /Этичный хакинг
[Linux Academy](https://t.me/+2loRjFRdKjY0YTNi) - гайды, секреты и лучшие материалы по Linux
[Kali linux ](http://t.me/linuxkalii)- погрузись в мир этичного хакинга и кибербезопасности 
[linux_kal -](http://t.me/linux_kal) kali чат
[Информационная безопасность](https://t.me/+i__6ED-eRfkwOTYy) 
__
__ Data Science

[Анализ данных -](http://t.me/data_analysis_ml) полезные фишки, код, гайды и советы, маст-хэв датасаентиста
[Data Jobs](http://t.me/datascienceml_jobs) - ds вакансии
[Аналитик данных](https://t.me/+y_viT9uBdftkZDFi)
[Data Science книги -](http://t.me/datascienceiot) актуальные бесплатные книги
[Big data ](http://t.me/bigdatai)

Базы данных
[Sql базы данных](http://t.me/sqlhub) - научим работе с базами данных профессионально 
[Библиотека баз данных](https://t.me/+FprFg7-t7Fg3NTFi)
[SQL чат](http://t.me/chat_sql)
[Вакансии Sql аналитик данных](http://t.me/datascjobs)

#️⃣C#

[С# академия ](http://t.me/csharp_ci)- лучший канал по c#
[С# заметки —](http://t.me/csharp_1001_notes) код, лучшие практики, заметки программиста c#
[С# задачи и тесты](https://t.me/+B0j7cCEldMFlOTQy)
[С# библиотека -](https://t.me/+WgGTjeH0p1NjMDFi) актуальные бесплатные книги
[C# вакансии](https://t.me/+R6X9mJlmNaFmZWFi) - работа __

__ Python 

[Python/django](https://t.me/+U4R-bxfvAzkyMGQy) - самый крупный обучающий канал по Python
[Python Собеседование](http://t.me/python_job_interview) - подготовка к собеседовению python и разбор алгоритмов
[Pro python](http://t.me/pro_python_code) - статьи, новости, код и обучающие материалы
[Python Jobs](http://t.me/python_djangojobs) - вакансии Python
[Python чат](http://t.me/python_django_work)
[Python книги](http://t.me/pythonlbooks)

 Java

[Java академия ](http://t.me/javatg)- java от Senior разработчика
[Java вакансии ](http://t.me/Java_workit)
[Java чат](https://t.me/+0KUBxSOp84Q3MTAy)
[Java вопросы с собеседований](http://t.me/java_quizes)
[Java книги](https://t.me/+K-o1Itot6plkYmMy)

 C++

[C++ академия](http://t.me/cpluspluc)
[С++ книги](https://t.me/+RTziX6XCKy8wOWJi)
[C++ задачи](https://t.me/+vWbh1_98zwI1MTRi) - подготовка к собеседовению мл, алгоритмам
[C++ вакансии](https://t.me/+HoFvgTyyLCk2Yjgy)

️ **Frontend**
[Javascript академия](https://t.me/+vwflgX9r2UdkY2Yy) - крупнейший js канал
[React](http://t.me/react_tg) - лучшие гайды и советы по работе с react 
[Frontend -](http://t.me/hashdev) тутрориалы, уроки, гайды, код 
[PHP](http://t.me/phpshka)
[Книги frontend](https://t.me/+RdGMzQ-bZ2VhNmIy)
[Задачи frontend](http://t.me/front_tester)

 Rust
[Rust программирование](https://t.me/+khtM8C3H2T9hOWRi)
[Rust чат](http://t.me/rust_chats)
[Rust книги для программистов](https://t.me/books_englishhh)

 Мобильная разработка 
[Android разработка](http://t.me/android_its)
[Мобильный разработчик гайды и уроки](http://t.me/mobdevelop)

 [Английский для программистов](http://t.me/english_forprogrammers)

 Искусственный интеллект
[ИИ и технологии](http://t.me/vistehno)
[Neural](http://t.me/neural) - нейросети для работы и жизни
[Книги ИИ](https://t.me/+Mwv7DhEPNj5kODMy)
[Artificial Intelligence](http://t.me/ArtificialIntelligencedl)

 DevOPs
[Devops для программистов](http://t.me/DevOPSitsec)[
](https://t.me/+eYb5-UaDPwI1MTcy)[Книги Devops](https://t.me/+QvSReWXeSNA2ZDAy)

 Docker/Kubernets
[Docker](https://t.me/+YsnwyM1cASVjZGIy)
[Kubernets](https://t.me/+vE7jzitan5QzZjVi)

 Книги
[Библиотеки](https://t.me/addlist/HwywK4fErd8wYzQy) [Книг](https://t.me/addlist/HwywK4fErd8wYzQy) [для](https://t.me/addlist/HwywK4fErd8wYzQy) [программситов](https://t.me/addlist/HwywK4fErd8wYzQy)

 [Папка с вакансиями:](http://t.me/addlist/_zyy_jQ_QUsyM2Vi) 
[Папка  Go разработчика:](http://t.me/addlist/MUtJEeJSxeY2YTFi) 
[Папка Python разработчика:](http://t.me/addlist/eEPya-HF6mkxMGIy)
[Папка Data Science](https://t.me/addlist/2Ls-snqEeytkMDgy)
[Папка Java разработчика](https://t.me/addlist/ZM3J6oFNAnRlNWU6)
[Папка C#](https://t.me/addlist/u15AMycxRMowZmRi)
[Папка Frontend](https://t.me/addlist/mzMMG3RPZhY2M2Iy)

 [Бесплатный Chatgpt бот](http://t.me/Chatgpturbobot)",5910,10,0,golang_books
649,2024-05-15 14:07:59+00:00,"Вв**GoLang для машинного обучения: практическое руководство по созданию эффективных, умных и масштабируемых моделей машинного обучения с помощью программирования на Go**

[Книга](https://t.me/repositorybooks/549)",6325,16,0,golang_books
647,2024-05-15 08:46:43+00:00,"**Practical Go: Real world advice for writing maintainable Go programs**

 [Books](https://dave.cheney.net/practical-go/presentations/qcon-china.html) 

@golang_books",5565,3,0,golang_books
645,2024-05-14 10:02:46+00:00," **""Создание микросервисов, управляемых событиями: масштабное использование организационных данных""**

**Описание**: С помощью этого практического руководства вы узнаете, как эффективно использовать масштабные данные, используя принципы событийно-ориентированных микросервисов.

[Книга](https://t.me/frontendbooksit/887)",5574,6,0,golang_books
643,2024-05-14 08:08:55+00:00," **Cloud Computing, revised and updated edition **

__Обновленный, пересмотренный и всеобъемлющий обзор концепций, связанных с облачными вычислениями, включая последние приложения, инновации и их будущее развитие. Незаменимое руководство по облачным вычислениям для неспециалистов, Cloud Computing отсекает технический жаргон и детали, не имеющие значения для нетехнологов, а также маркетинговую шумиху, и четко объясняет, что такое облачные вычисления, когда их использовать (и когда не использовать), как выбрать облачный сервис, как интегрировать его с другими технологиями и каковы лучшие практики для его внедрения.__

[Книга](https://t.me/repositorybooks/547)",5317,6,0,golang_books
640,2024-05-10 10:11:07+00:00,"**docker-learning**

Docker Deep Dive - одна из лучших книг по Docker, если хотите изучить Docker досконально. Вы начнете с ознакомления с контейнерами и виртуализацией, затем перейдете к установке и настройке, работе с образами и томами, сетевому взаимодействию, безопасности и многому другому.

[Книга](https://t.me/repositorybooks/546)",6375,17,0,golang_books
637,2024-05-02 07:03:40+00:00," **Мощная подборка открытых учебников по Go**

🟡 [Введение в программирование на Go](http://golang-book.ru/) — Калеб Докси
🟡 [Руководство по языку Go](https://metanit.com/go/tutorial) — Евгений Попов
🟡 [Эффективный Go](https://github.com/Konstantin8105/Effective_Go_RU)
🟡 [Go в примерах](https://web.archive.org/web/20210727024101/https://gobyexample.ru)
🟡 [Go для PHP-разработчиков](https://pahanini.gitbooks.io/golang-for-php-developers/content/) — Pavel Tetyaev
🟡 [The Little Go Book (перевод)](https://sefus.ru/little-go-book) — Seguin, Dolgolopov, Popov, Dunin

▶️ [А вот здесь свободные книги по массе других языков/технологий](https://github.com/EbookFoundation/free-programming-books/blob/main/books/free-programming-books-ru.md)

@golang_books",8161,9,0,golang_books
636,2024-04-27 08:53:34+00:00,"**Go Fundamentals: Gopher Guides**


__Это руководство позволит вам быстро понять и использовать синтаксис, основные возможности и идиомы Go. Отражая Go версии 1.18, которая включает в себя новую захватывающую поддержку дженериков, это руководство подготовит вас к написанию прочного, надежного и хорошо работающего кода с самого начала.__
__Узнайте, как Go управляет пакетами, модулями и зависимостями. Применяйте основы Go, такие как объявление переменных, типы и поток управления. Эффективно работайте с типами коллекций, итерациями, функциями, структурами и указателями. Поймите Go Slices и используйте их правильно. Пишите идиоматические Go, используя такие принципы, как встраивание и композиция. Экспертное использование параллелизма для повышения производительности кода. Создание правильных тестов для быстрого выявления и устранения проблем. Написание более простого и качественного кода с использованием дженериков и интерфейсов.__

[Книга](https://t.me/repositorybooks/541)",8171,15,0,golang_books
635,2024-04-26 10:03:24+00:00,"Если вы ищете удаленную работу, неполный рабочий день или фриланс, этот **список для вас**.

В нем собран огромный список работодателей по всему миру, которые работают удаленно и часто набирают сотрудников.

Не забудьте подтянуть [английский](https://t.me/+MIcnA3dNnu9hNzQ6).

@golang_books",7157,6,0,golang_books
634,2024-04-24 11:03:06+00:00,"Книга **""Книга рецептов чистого кода: рецепты улучшения дизайна и качества вашего кода""**",6789,6,0,golang_books
632,2024-04-21 09:03:48+00:00,"**Облачные архитектуры**

 [Книга](https://xn--d1ag.xn--e1a4c/tmp/Bibl_progr_Sb_187kn/%D0%9E%D0%B1%D0%BB%D0%B0%D1%87%D0%BD%D1%8B%D0%B5%20%D0%B0%D1%80%D1%85%D0%B8%D1%82%D0%B5%D0%BA%D1%82%D1%83%D1%80%D1%8B.%202022.pdf) 

@golang_books",7384,23,0,golang_books
624,2024-04-19 19:48:32+00:00,"**Сверхполезный открытый учебник по Machine Learning**

Здесь собрана коллекция задачек о нейросетях, параллельно даётся необходимая теория с объяснением
Очень годно, рекомендую

**Что внутри?**
 `├╼` всего лишь функция
 `├╼` градиентный спуск
 `├╼` алгоритм обратного распространения ошибки
 `├╼` что выплёвывает нейросеть
 `├╼` свёрточные сети
 `├╼` нейросети – конструктор LEGO
 `├╼` рекуррентные сети
 `╰╼` матричное дифференцирование

 [Учебник](https://fulyankin.github.io/deep_learning_masha_book/intro.html) 

@data_analysis_ml",4943,14,0,golang_books
621,2024-04-19 10:03:55+00:00,"**Руководство по MySQL JOIN с примерами**

JOIN в MySQL — это мощный оператор, позволяющий объединять данные из нескольких таблиц на основе соответствия критериям.
Именно об этом и идёт речь в туториале, параллельно разбирается ещё много полезных вещей, рекомендую

**Оглавление** 
⏩Различные типы соединений в MySQL
 — INNER JOIN
 — LEFT JOIN
 — RIGHT JOIN
 — FULL JOIN (не поддерживается напрямую MySQL)

⏩Реальные сценарии использования соединений в веб-разработке
 — Отображение профилей пользователей с заказами
 — Фильтрация товаров по категориям и брендам
 — Отображение отзывов с информацией о продукте

⏩Советы по эффективным и оптимизированным соединениям в MySQL

 [Руководство](https://www.dev-notes.ru/articles/database/mysql-joins-tutorial-with-examples/)

@golang_books",5822,7,0,golang_books
619,2024-04-17 14:39:40+00:00,"**GIT Шпаргалка**

 [Ссылка](https://education.github.com/git-cheat-sheet-education.pdf)

@golang_books",7238,13,0,golang_books
617,2024-04-14 03:26:21+00:00,"**Object-Oriented Analysis and Design for Information Systems (2024)**
️Автор: Raul Sidnei Wazlawick",6426,5,0,golang_books
615,2024-04-11 15:33:09+00:00,"**Production Go**

 [Книга](https://leanpub.com/productiongo/read)

@golang_books",6146,7,0,golang_books
613,2024-04-09 10:02:22+00:00,"**Golang tutorial series**

 [Книга](https://golangbot.com/learn-golang-series/)

@golang_books",5841,8,0,golang_books
611,2024-04-04 16:17:13+00:00,"**Go Programming Fundamentals: A Concise Guidebook (2024)**

[Книга](https://t.me/repositorybooks/527)

@golang_books",6850,7,0,golang_books
608,2024-03-28 08:21:58+00:00,"**MySQL Crash Course, 2nd Edition (2023)**

MySQL — одна из самых популярных систем управления базами данных, на которой работают все: и интернет-магистрали, и отдельные корпоративные базы данных, и простые приложения для конечных пользователей, и все, что между ними. Эта книга научит вас всему, что необходимо знать, чтобы сразу же начать работать с последней версией MySQL. Благодаря 30 целенаправленным практическим урокам вы сможете пройти краш-курс MySQL легче и эффективнее, чем вы могли себе представить.

 [Книга](https://t.me/sqllib/177)",7156,6,0,golang_books
606,2024-03-27 14:14:54+00:00," **Рецепты Nginx: расширенные рецепты высокопроизводительной балансировки нагрузки**

**Автор:** Derek DeJonghe
**Год издания:** 2024

Эта пересмотренная поваренная книга содержит простые и понятные примеры решения реальных задач по доставке приложений. 

 [Книга](https://t.me/repositorybooks/522)",6324,6,0,golang_books
604,2024-03-26 18:28:37+00:00,"** Learning Automata and Their Applications to Intelligent Systems**

Книга представляет собой исчерпывающее руководство по обучающимся автоматам с точки зрения принципов, алгоритмов, направлений совершенствования и приложений. В тексте представлены два варианта для ускорения скорости сходимости и скорости обновления вычислений, соответственно; эти два примера демонстрируют, как разработать новые обучающиеся автоматы для конкретной области с точки зрения проектирования алгоритмов, чтобы в полной мере использовать преимущества обучающихся автоматов. Среди существующих и наиболее показательных приложений обучающихся автоматов — классификация, кластеризация, игры, сети, оптимизация, ранжирование и составление расписаний.

[Книга](https://t.me/repositorybooks/520)",5518,7,0,golang_books
592,2024-03-23 07:26:37+00:00," **Clean Code Cookbook: Recipes to Improve the Design and Quality of your Code **
Автор: Maximiliano Contieri (2023)

Часто инженеры-программисты и архитекторы работают с большими и сложными кодовыми базами, которые им необходимо масштабировать и поддерживать. В этой книге автор не ограничивается понятием ""чистый код"", а показывает, как выявлять возможности улучшения и их влияние на производственный код. Когда речь идет о надежности и эволюции системы, эти методы дают преимущества, которые окупаются с течением времени.

На реальных примерах из JavaScript, PHP, Java, Python и многих других языков программирования в этой книге представлены проверенные рецепты, которые помогут вам масштабировать и поддерживать большие системы. В каждом разделе рассматриваются такие фундаментальные понятия, как читаемость, связность, тестируемость и расширяемость, а также запахи кода - симптомы проблемы, требующие особого внимания, и рецепты их устранения.

 [Книга](https://t.me/repositorybooks/516)",6203,13,0,golang_books
590,2024-03-22 08:03:23+00:00,"**Architecture Modernization: Socio-technical alignment of software, strategy, and structure (2024)**

__Книга представляет собой четкий путь к модернизации всей организации, когда вы заново представляете себе свое программное обеспечение. Из книги вы узнаете, как сочетать такие практики, как проектирование с учетом доменов, событийный штурм и картирование Уордли, чтобы выявить потребности пользователей, разработать оптимальную архитектуру и избежать возврата к старым привычкам. Провокационные примеры из практики Danske, Salesforce, правительства Великобритании и других компаний демонстрируют реальные результаты применения каждого подхода, определяя приемы, которые вы сможете эффективно использовать в своем бизнесе.__

[Книга](https://t.me/repositorybooks/513)",5905,10,0,golang_books
589,2024-03-21 14:25:01+00:00,"**Современные операционные системы**

Эта книга включает в себя последние разработки и технологии в области операционных систем. Автор в ясной и увлекательной манере излагает концепции, которыми должен овладеть каждый разработчик ОС.

[Книга](https://t.me/repositorybooks/511)",5701,23,0,golang_books
587,2024-03-19 10:03:23+00:00,"**Облачные технологии. Практическое руководство по созданию инновационных приложений (2024) PDF, ePUB, rtf**

__Эта книга представляет собой всестороннее руководство по разработке приложений с использованием современных облачных технологий. В ней рассматриваются ключевые аспекты от базовых концепций облачных вычислений до передовых методик и стратегий оптимизации. Читатели получат углубленное понимание моделей облачных вычислений, архитектуры облачных приложений и эффективного использования облачных сервисов и ресурсов. Книга акцентирует внимание на вопросах безопасности в облачных средах и предлагает конкретные рекомендации по управлению доступом, шифрованию данных и мониторингу безопасности. Особое внимание уделяется управлению и мониторингу облачных ресурсов, оптимизации расходов на облачные вычисления, а также внедрению DevOps-практик для ускорения цикла разработки. Книга также затрагивает разработку облачных мобильных приложений, интеграцию с устройствами IoT и использование контейнеризации с оркестрацией.__

[Книга](https://t.me/repositorybooks/507)",5846,8,0,golang_books
585,2024-03-16 09:04:11+00:00," **SQL and NoSQL Interview Questions: Your essential guide to acing SQL and NoSQL job interviews (2023)**

Данная книга призвана познакомить вас с типами вопросов, с которыми вы можете столкнуться на собеседовании, а также дать рекомендации по подготовке и выработке соответствующей стратегии. В книге подробно рассматривается семейство NoSQL и SQL, начиная с фундаментальных основ и заканчивая такими продвинутыми темами, как архитектура, оптимизация и практические примеры использования. Она также включает подборку часто задаваемых вопросов с точки зрения запросов. Кроме того, эта книга призвана помочь вам при внесении изменений в последние минуты. В книге также рассматривается распространенная проблема собеседования - эффективное изложение сложных концепций в ясной и краткой форме, даже если вы хорошо разбираетесь в предмете.

 [Книга](https://t.me/sqllib/173)",5994,8,0,golang_books
583,2024-03-15 10:30:04+00:00," **Golang для соискателей: раскройте возможности программирования Go для карьерного роста**

**Описание**: В начале дается исчерпывающее введение в язык Go, рассматриваются его синтаксис, фундаментальные концепции и уникальные особенности, которые делают его эффективным языком. 
 
 [Книга](https://t.me/repositorybooks/496)",5859,11,0,golang_books
582,2024-03-14 17:02:33+00:00,"**От монолита к микросервисам**

Книга подробно описывает проверенный метод перевода существующей монолитной системы на архитектуру микросервисов.

[Книга](https://t.me/repositorybooks/495)",5769,14,0,golang_books
580,2024-03-14 10:01:39+00:00,"**Algorithmic Thinking: Unlock Your Programming Potential (2024)**

__Узнайте о тонкостях хэш-таблиц, рекурсии, динамического программирования, деревьев, графов и куч. Станьте экспертом в выборе и реализации лучших решений для любой задачи кодирования.__
__Программы и задачи в этой книге не просто теоретические — они взяты из реальных соревнований по программированию. Тренируйтесь на проблемах, которые проверили и отточили навыки кодеров по всему миру.__
__Подготовьтесь к собеседованиям по кодингу с помощью упражнений, которые помогут вам мыслить алгоритмически, взвешивать различные решения и эффективно реализовывать лучшие варианты.__
__Примеры кода написаны на языке C и разработаны для ясности и доступности для тех, кто знаком с такими языками, как C++, Java или Python. Если вам нужна помощь в работе с кодом на Си, не беда: в книге есть и рекомендации по чтению.__

** **[Книга](https://t.me/sqllib/169)",5438,8,0,golang_books
577,2024-03-12 09:09:00+00:00,"[](https://goalkicker.com/LinuxBook/) **Чистый Agile. Основы гибкости **2024

**Описание**: Если вы хотите понять преимущества Agile, не ищите легких путей — нужно правильно применять Agile. «Чистый Agile» расскажет, как это делать разработчикам, тестировщикам, руководителям, менеджерам проектов и клиентам.
**

**** **[Книга](https://t.me/repositorybooks/493)",5732,8,0,golang_books
575,2024-03-09 11:03:13+00:00,"**Linux® commands Notes for Professionals book

** [Книга](https://goalkicker.com/LinuxBook/)",6319,8,0,golang_books
573,2024-03-06 08:41:09+00:00,"**Patterns of Distributed Systems (2023)**

__Набор паттернов, представленных в книге, будет полезен всем разработчикам — даже если они не занимаются непосредственно созданием распределённых систем и в основном используют их как «черный ящик». Изучение этих паттернов поможет читателям глубже понять проблемы, связанные с распределенными системами, а также выбрать подходящие облачные сервисы и продукты. В книгу включены паттерны репликации данных, паттерны разделения данных, паттерны распределенного времени, паттерны управления кластерами и паттерны связи между узлами.__

 [Книга](https://t.me/repositorybooks/485)",6823,13,0,golang_books
571,2024-02-27 08:10:53+00:00,"**Patterns for API Design: Simplifying Integration with Loosely Coupled Message Exchanges (2022)**
️Автор: Olaf Zimmermann",7476,8,0,golang_books
569,2024-02-26 13:26:30+00:00,"**SQL and NoSQL Cheat Sheets
Автор:** Brij Pandey",7663,6,0,golang_books
567,2024-02-26 06:51:32+00:00,"**Defending APIs: Uncover advanced defense techniques to craft secure application programming interfaces (2024)**
️Автор: Colin Domoney",7604,8,0,golang_books
566,2024-02-20 13:01:44+00:00,**Системное программирование в среде Linux: учебное пособие**,9190,18,0,golang_books
564,2024-02-19 16:43:32+00:00,"Книга **""Kubernetes и сети. Многоуровневый подход""**",8616,5,0,golang_books
562,2024-02-16 08:46:01+00:00,"**Hard Real-Time Computing Systems: Predictable Scheduling Algorithms and Applications (2024)**
️Автор: Giorgio Buttazzo",8444,6,0,golang_books
560,2024-02-12 09:19:16+00:00,"Книга **""Продвинутые алгоритмы и структуры данных""**",9607,19,0,golang_books
559,2024-02-12 09:18:35+00:00,"Книга **""Микросервисы. От архитектуры до релиза""**",9640,17,0,golang_books
557,2024-02-07 17:31:47+00:00,"**Cloud Security Handbook for Architects**
__Ashish Mishra
2023__

#cloud #security #eng",9056,8,0,golang_books
556,2024-02-03 11:02:49+00:00,"Книга** ""Вычислительная математика для IT-специальностей""**",9928,17,0,golang_books
554,2024-02-02 09:32:05+00:00,"Книга **""Эффективный параллелизм в Go""**",9495,18,0,golang_books
552,2024-02-01 11:47:00+00:00,"The Software Developer’s Career Handbook: A Guide to Navigating the Unpredictable
Автор: Michael Lopp (2023)",8576,9,0,golang_books
550,2024-01-29 11:03:36+00:00,**Методы и средства комплексной защиты информации в технических системах**,8447,5,0,golang_books
548,2024-01-26 13:35:59+00:00,"**Communication Patterns: A Guide for Developers and Architects (2023)**
️Автор: Jacqui Read",8074,10,0,golang_books
547,2024-01-19 10:34:42+00:00,"Книга **""Изучите структуры данных и алгоритмы с помощью Golang: повысьте свои навыки программирования на Go, чтобы разрабатывать более быстрый и эффективный код""**",10574,25,0,golang_books
546,2024-01-18 15:46:52+00:00,"Exploring the Power of ChatGPT: Applications, Techniques, and Implications
Автор: Eric Sarrion (2023)",9573,5,0,golang_books
543,2024-01-18 10:01:49+00:00,"**HashiCorp Packer in Production: Efficiently manage sets of images for your digital transformation or cloud adoption journey (2023)**
️Автор: Armon Dadgar",8087,2,0,golang_books
541,2024-01-16 16:19:55+00:00,"**Writing An Interpreter In Go
Автор:** Thorsten Ball",7927,13,0,golang_books
537,2024-01-14 07:38:42+00:00,"**Building Serverless Applications on Knative: A Guide to Designing and Writing Serverless Cloud Applications (2023)**
️Автор: Evan Anderson",7524,7,0,golang_books
536,2024-01-10 12:11:37+00:00,"**Deep Dive into Power Automate: Learn by Example (2023)**
️Автор: Goloknath Mishra",8318,6,0,golang_books
534,2024-01-05 07:09:52+00:00,"**Mastering Apex Programming, 2nd Edition: A Salesforce developer’s guide to learn advanced techniques and programming best practices for building robust and scalable enterprise-grade applications (2023)**
️Автор: Paul Battisson",8210,4,0,golang_books
533,2023-12-26 14:41:53+00:00,"**Kafka Troubleshooting in Production: Stabilizing Kafka Clusters in the Cloud and On-premises (2023)**
️Автор: Elad Eldor",10189,12,0,golang_books
531,2023-12-18 15:41:36+00:00,"**Technology Operating Models for Cloud and Edge: Create your purpose-built distributed operating model for public, hybrid, multicloud, and edge (2023)**
️Автор: Ahilan Ponnusamy",10115,4,0,golang_books
530,2023-12-15 14:05:37+00:00,"**Mastering Kubernetes: Dive into Kubernetes and learn how to create and operate world-class cloud-native systems (2023)**
️Автор: Gigi Sayfan",10295,10,0,golang_books
529,2023-12-13 09:14:06+00:00,"**Go Crazy: A Fun Projects-based Approach to Golang Programming (2023)**
️Автор: David Li",10340,13,0,golang_books
528,2023-12-11 10:36:21+00:00,"**Kubernetes Fundamentals: A Step-by-Step Development and Interview Guide (2023)**
️Автор: Himanshu Agrawal",9764,13,0,golang_books
526,2023-12-09 14:30:02+00:00,"**Designing Microservices Platforms with NATS: A modern approach to designing and implementing scalable microservices platforms with NATS messaging (2021)**

️Автор:Chanaka Fernando",7901,4,0,golang_books
525,2023-12-06 02:48:08+00:00,"**The Kubernetes Operator Framework Book: Overcome complex Kubernetes cluster management challenges with automation toolkits (2022)**
Автор: Michael Dame",8575,5,0,golang_books
524,2023-12-04 15:03:15+00:00,"**Managing Cloud Native Data on Kubernetes: Architecting Cloud Native Data Services Using Open Source Technology (2023)**
Автор: Jeff Carpenter",8276,4,0,golang_books
522,2023-12-04 10:03:04+00:00,"**Go Cookbook: Expert Solutions for Commonly Needed Go Tasks (2023)**
Автор: Sau Sheong Chang",6918,17,0,golang_books
520,2023-12-01 12:20:52+00:00,"**Основы технологий баз данных
Автор:** Б. А. Новиков",7201,14,0,golang_books
518,2023-12-01 08:02:56+00:00,"Книга **""100 ошибок в Go и как их избежать""**",7764,24,0,golang_books
516,2023-11-30 08:01:40+00:00,"**Learn to Code by Solving Problems
Автор:** Daniel Zingaro",7395,3,0,golang_books
514,2023-11-30 02:58:35+00:00,"**Functional Programming in Golang
Автор:** Dylan Meeus",7175,2,0,golang_books
513,2023-11-28 18:34:47+00:00,"**End-to-End Automation with Kubernetes and Crossplane: Develop a control plane-based platform for unified infrastructure, services, and application automation (2022)**
Автор: Arun Ramakani",6725,4,0,golang_books
512,2023-11-27 10:11:35+00:00,"**Principles of Web API Design: Delivering Value with APIs and Microservices (2021)**
Автор: James Higginbotham",6489,5,0,golang_books
510,2023-11-22 12:02:00+00:00,"**Cloud-Native Development and Migration to Jakarta EE: Transform your legacy Java EE project into a cloud-native application (2023)**
Автор: David Vlijmincx",7191,7,0,golang_books
508,2023-11-20 20:20:21+00:00,"**Kubernetes Best Practices: Blueprints for Building Successful Applications on Kubernetes, 2nd Edition (2023)**
Автор: Brendan Burns",7292,9,0,golang_books
507,2023-11-18 12:01:56+00:00,**Параллельные методы и алгоритмы**,7544,8,0,golang_books
505,2023-11-16 18:08:52+00:00,"**Разработка программного обеспечения на Go: Cloud-Native Programming using Golang with Linux and Docker (2022)

**Автор: Наник Толарам**

****@golang_books**",7117,12,0,golang_books
504,2023-11-15 19:49:40+00:00,"Книга **""Философия DevOps. Искусство управления IT""**",7021,13,0,golang_books
503,2023-11-15 11:12:00+00:00,"Книга** ""Kafka: Полное руководство: данные в реальном времени и потоковая обработка в масштабе, 2-е издание""**",7381,11,0,golang_books
501,2023-11-14 16:07:10+00:00,"**Generic Data Structures and Algorithms in Go: An Applied Approach Using Concurrency, Genericity and Heuristics (2022)
**Автор: Richard Wiener",6564,3,0,golang_books
499,2023-11-14 12:29:10+00:00,"**Democratizing Application Development with Betty Blocks: Build powerful applications that impact business immediately with no-code app development (2023)**
Автор: Reinier van Altena",5843,4,0,golang_books
496,2023-11-09 17:29:21+00:00,"Книга **""Изучение регулярных выражений""**",6391,12,0,golang_books
494,2023-11-09 10:41:12+00:00,"Книга** ""Проектирование API с помощью Swagger и OpenAPI""**",6405,5,0,golang_books
492,2023-11-03 16:25:16+00:00,"DevOps for the Desperate - 2022
#devops #english",7056,11,0,golang_books
490,2023-11-03 11:01:28+00:00,"**Git Repository Management in 30 Days: Learn to manage code repositories like a pro (2023)
Автор: **Sumit Jaiswal

**Описание: **Это пошаговое руководство для разработчиков, желающих овладеть искусством управления репозиторием Git. Книга охватывает все, начиная с основ работы с Git и заканчивая такими продвинутыми темами, как ветвление, слияние, ребазинг и разрешение конфликтов. Книга поможет вам научиться создавать, управлять и сотрудничать с репозиториями Git. Кроме того, она научит вас использовать команды, инструменты и рабочие процессы Git для повышения качества кода и оптимизации процесса разработки.",7332,6,0,golang_books
487,2023-11-01 14:01:50+00:00,"Software Development with Go - 2023
#go #en",5768,7,0,golang_books
485,2023-10-31 09:11:03+00:00,"**Building a Next-Gen SOC with IBM QRadar: Accelerate your security operations and detect cyber threats effectively (2023)**
Автор: Ashish M Kothekar",5962,4,0,golang_books
483,2023-10-29 18:55:08+00:00,**100 ошибок Go и как их избежать**,6844,24,0,golang_books
482,2023-10-27 09:26:02+00:00,"Logic And Language Models For Computer Science, 4th Edition 
Автор: Dana Richards (2023)",6745,5,0,golang_books
480,2023-10-26 09:27:11+00:00,**Карьера Software Engineering Manager. Эффективное управление командой разработчиков ПО**,6710,5,0,golang_books
479,2023-10-25 16:21:26+00:00,**Абстрактная и компьютерная алгебра**,6591,7,0,golang_books
478,2023-10-23 12:28:27+00:00,"Parallel Algorithms
Автор: M H Alsuwaiyel (2023)",7150,5,0,golang_books
476,2023-10-22 07:37:18+00:00,"**Golang для профи: Создаем профессиональные утилиты, параллельные серверы и сервисы, 3-е издание**",8203,24,0,golang_books
475,2023-10-19 18:08:48+00:00,"**Puppet 8 for DevOps Engineers: Automate your infrastructure at an enterprise scale (2023)**
Автор: David Sandilands",7402,5,0,golang_books
473,2023-10-16 11:44:25+00:00,"**Efficient Go: Data-Driven Performance Optimization (2023)**
Автор: Bartlomiej Plotka",7833,6,0,golang_books
472,2023-10-15 12:04:06+00:00,"**Shipping Go: Develop, deliver, discuss, design, and go again (2023)**
Автор: Joel Holmes",7372,7,0,golang_books
471,2023-10-14 15:02:48+00:00,"Книга** ""Начало DevOps с Docker: автоматизируйте развертывание вашей среды с помощью набора инструментов Docker""**",6714,3,0,golang_books
469,2023-10-14 12:45:20+00:00,"**Certified Kubernetes Application Developer (CKAD) Exam Success Guide: Ace your career in Kubernetes development with CKAD certification (2023)**
Автор: Sethumadhavan Kishore",5822,4,0,golang_books
466,2023-10-12 11:07:37+00:00," **Go 101 **- это серия книг по программированию на языке Go. В настоящее время доступны следующие книги:

• [Go (Fundamentals) 101](https://go101.org/article/101.html), посвященная синтаксису/семантике языка Go.
• [Go Generics 101](https://go101.org/generics/101.html), в которой подробно описывается работа с  дженериками в  Go.
• [Go Optimizations 101](https://go101.org/optimizations/101.html), в книге приводятся приемы, советы и рекомендации по улучшению производительности кода.
• [Go Details & Tips 101](https://go101.org/details-and-tips/101.html) - здесь собрано множество деталей по устройству языка и даны советы по программированию на языке Go.

• [Github ](https://github.com/go101/go101)

@Golang_google",4987,20,0,golang_books
465,2023-10-11 14:33:03+00:00,"**The Ultimate Docker Container Book: Build, test, ship, and run containers with Docker and Kubernetes, 3rd Edition (2023)**
Автор: Dr. Gabriel N. Schenker",5311,3,0,golang_books
460,2023-10-04 09:17:11+00:00,"Full-Stack Web Development with Go: Build your web applications quickly using the Go programming language and Vue.js 
Автор: Nanik Tolaram (2023)",7599,10,0,golang_books
459,2023-10-03 07:52:39+00:00,"**Build Serverless Apps on Kubernetes with Knative: Build, deploy, and manage serverless applications on Kubernetes (2023)**
Автор: Amit Deshpande",7446,5,0,golang_books
457,2023-09-28 08:55:58+00:00,"**Head First. Git. Лучший способ понять Git изнутри
**Автор: Раджу Ганди

Книга поможет быстро и легко изучить самый популярный в мире инструмент контроля версий Git. Рассмотрены основы Git, свойства ветвления кода, слияние, коммиты, устройство репозитория Git и поиск в нем, отмена действий и исправление ошибок. Особое внимание уделено командной работе с Git, передовым методам взаимодействия и советам профессионалов по эффективной работе.
#git",7529,12,0,golang_books
456,2023-09-27 18:01:19+00:00,"Mastering Docker: Enhance your containerization and DevOps skills to deliver production-ready applications
Автор: Russ McKendrick (2020)",6195,6,0,golang_books
454,2023-09-27 13:46:27+00:00,"**Go Bootcamp Matt Aimonetti
Автор:** Jeremy Saenz",5605,2,0,golang_books
452,2023-09-24 14:32:05+00:00,"Automating DevOps with GitLab CI/CD Pipelines: Build efficient CI/CD pipelines to verify, secure, and deploy your code using real-life examples 
Автор: Chris Timberlake (2023)",6030,5,0,golang_books
448,2023-09-22 12:26:11+00:00,"**Pro Go
Автор:** Фриман Адам",5207,5,0,golang_books
446,2023-09-18 07:55:09+00:00,"Книга **""Шаблоны проектирования для облачных приложений: шаблоны на практике с использованием API, данных, событий и потоков""**",6659,5,0,golang_books
445,2023-09-15 19:18:59+00:00,"**Go Design Patterns
Автор: **Mario Castro Contreras",7294,15,0,golang_books
444,2023-09-15 13:55:59+00:00,"**Hiring Days в команду VK Cloud уже скоро: собеседования пройдут 30 сентября и 1 октября.
**
Если вы хотите поработать с операционной системой для дата-центров IaaS, то отправляйте свои [отклики](https://team.vk.company/vkcloudoffer) до 28 сентября и получите шанс стать частью одной из трех команд направления IaaS: Network + Services, Storage, Compute всего за одни выходные!",6468,3,0,golang_books
443,2023-09-14 15:03:14+00:00,"Theoretical Cybersecurity: Principles and Advanced Concepts 
Автор: J. Louis Sewell (2022)",6228,2,0,golang_books
442,2023-09-13 15:03:14+00:00,"**Kubernetes и сети. Многоуровневый подход**
Автор: Джеймс Стронг

Книга посвящена интеграции Kubernetes в готовые компьютерные сети. Рассмотрено, как оркестратор Kubernetes вписывается в сетевую модель OSI. Раскрыты вопросы интеграции сетей предприятия с облачными мощностями и контейнерными архитектурами.
#kubernetes",5650,15,0,golang_books
440,2023-09-10 12:21:12+00:00,"**Lean DevOps: A Practical Guide to On Demand Service Delivery (2022)
**Автор: Robert Benefield",5134,0,0,golang_books
439,2023-09-10 10:20:12+00:00,"Легкий способ получать свежие обновлении и следить за трендами в разработке на вашем языке. Находите свой стек и подписывайтесь:

Data Science: [t.me/data_analysis_ml](https://t.me/+xScdo5PpJPw2NmMy)
Java: [t.me/javatg](https://t.me/+NuXyfOJE7ZlkZTli)
Базы данных: t.me/sqlhub
Машинное обучение: t.me/ai_machinelearning_big_data
Go: t.me/Golang_google
C/C++/ t.me/cpluspluc
C#: t.me/csharp_ci
Хакинг: t.me/linuxkalii
Мобильная разработка: t.me/mobdevelop
Docker: t.me/+0WdB4uvOwCY0Mjdi
Python: t.me/python_job_interview
Rust: t.me/rust_code
Javascript: t.me/javascriptv
React: t.me/react_tg
PHP: t.me/phpshka
Android: t.me/android_its
Linux: t.me/+A8jY79rcyKJlYWY6
Big Data: t.me/bigdatai
Devops: t.me/devOPSitsec
Тестирование:https://t.me/+F9jPLmMFqq1kNTMy
Собеседования: https://t.me/machinelearning_interview

 Папка с вакансиями: t.me/addlist/_zyy_jQ_QUsyM2Vi
Папка  Go разработчика: t.me/addlist/MUtJEeJSxeY2YTFi
Папка Python разработчика: t.me/addlist/eEPya-HF6mkxMGIy
Папка ML: https://t.me/addlist/2Ls-snqEeytkMDgy

ИТ-Мемы: t.me/memes_prog

Английский: t.me/english_forprogrammers

ИИ: t.me/vistehno

Ит-книги бесплатно: https://t.me/addlist/BkskQciUW_FhNjEy",5674,2,0,golang_books
438,2023-09-08 11:02:39+00:00,"**The Creative Programmer (2023)**
Автор: Wouter Groeneveld",4644,0,0,golang_books
436,2023-09-08 08:47:40+00:00,"**Mastering SQL Joins: A Quick Handbook On Mastering SQL Joins With Practical Exercises (2023)**
Автор: Dane Wade",4437,4,0,golang_books
435,2023-09-07 11:26:16+00:00,"**Cybersecurity First Principles: A Reboot of Strategy and Tactics (2023)**
Автор: Rick Howard",4698,2,0,golang_books
433,2023-09-03 19:23:30+00:00,"**Google Cloud Platform (GCP) Professional Cloud Network Engineer Certification Companion: Learn and Apply Network Design Concepts to Prepare for the Exam (2023)**
Автор: Dario Cabianca",5433,3,0,golang_books
432,2023-09-02 11:41:02+00:00,"**Pearls of Algorithm Engineering (2023)**
Автор: Paolo Ferragina",5456,3,0,golang_books
431,2023-08-31 07:23:54+00:00,"Книга **""Микросервисы и контейнеры Docker""**",6612,10,0,golang_books
430,2023-08-31 07:23:30+00:00,"Книга **""Security for Software Engineers""**",5940,1,0,golang_books
429,2023-08-28 11:02:38+00:00,"**PostgreSQL for Jobseekers: Introduction to PostgreSQL administration for modern DBAs (2023)**
Автор: David Gonzalez",6297,7,0,golang_books
426,2023-08-25 11:39:42+00:00,"** Название: Podman in Action: Secure, rootless containers for Kubernetes, microservices, and more (2023)
Автор:** Daniel Walsh

**Описание: **Откройте для себя Podman, контейнерный движок нового поколения, который управляет rootless контейнерами и обеспечивает дополнительные уровни исключительной безопасности, недоступные в Docker и других контейнерных платформах.

Эта книга научит вас разрабатывать и управлять rootless контейнерами с помощью Podman. Вы быстро освоите уникальные преимущества Podman по сравнению с Docker и узнаете, как легко перенести вашу инфраструктуру на базе Docker.",5104,3,0,golang_books
425,2023-08-25 11:22:01+00:00,"**Decoding Coding: Fundamentals (2023)**
Автор: Hinesh Nyati",4197,4,0,golang_books
423,2023-08-24 16:01:42+00:00,"[**__Книга по хакингу на GO__**](https://github.com/mytechnotalent/Go-Hacking/blob/main/Go%20Hacking.pdf)**__
__**
@golang_books",4505,10,0,golang_books
421,2023-08-23 11:33:17+00:00,"**Golang for Jobseekers: Unleash the power of Go programming for career advancement (2023)**
Автор: Hairizuan Bin Noorazman",4409,10,0,golang_books
419,2023-08-21 18:02:26+00:00,"**Cloud Native Applications with Docker and Kubernetes: Design and Build Cloud Architecture and Applications with Microservices, EMQ, and Multi-Site Configurations (2022)
**Автор: Jonathan Bartlett",4199,2,0,golang_books
417,2023-08-21 16:57:01+00:00,"**Decoding Coding: Fundamentals (2023)**
Автор: Hinesh Nyati",3910,3,0,golang_books
416,2023-08-21 11:11:07+00:00,"**Go With The Domain
Building Modern Business Software in Go**",4287,8,0,golang_books
414,2023-08-19 12:40:50+00:00,"**Awesome Go Books**

https://github.com/dariubs/GoBooks

@golang_books",4465,16,0,golang_books
413,2023-08-17 13:29:52+00:00,"Building Modern CLI Applications in Go
Автор: Marian Montagnino",4659,5,0,golang_books
412,2023-08-16 19:47:48+00:00,"Книга **""Разработка интерфейсов. Паттерны проектирования. 3-е изд.""**",4993,5,0,golang_books
411,2023-08-16 11:02:51+00:00,"**Functional Programming in Golang
Автор:** Dylan Meeus",4817,1,0,golang_books
389,2023-08-13 07:46:04+00:00,"**Pearls of Algorithm Engineering (2023)**
Автор: Paolo Ferragina",4810,3,0,golang_books
388,2023-08-11 11:21:16+00:00,"**Security for Containers and Kubernetes: Learn how to implement robust security measures in containerized environments (2023)
**Автор: Luigi Aversa",4991,6,0,golang_books
386,2023-08-10 10:13:35+00:00,"**DevOps для современного предприятия
Автор: **Мирко Херинг",4303,4,0,golang_books
384,2023-08-09 10:31:31+00:00,"**Begin to Code: Building apps and games in the Cloud (2023)
**Автор: Rob Miles",4109,4,0,golang_books
382,2023-08-06 10:47:15+00:00,"**The Garbage Collection Handbook: The Art of Automatic Memory Management (2023)**
Автор: Antony Hosking",4589,4,0,golang_books
380,2023-08-05 15:40:57+00:00,"**Software Containers: The Complete Guide to Virtualization Technology. Create, Use and Deploy Scalable Software with Docker and Kubernetes. Includes Docker and Kubernetes. (2023)
**Автор: Jordan Lioy",4522,4,0,golang_books
379,2023-08-05 13:39:23+00:00,"️Маст-хэв список для программистов, каналы с   последними книжными новинками, библиотеками, разбором кода и актуальной информацией, связанной с вашим языком программирования.
Лучший способ получать **свежие обновлении и следить за трендами в разработке.**

 **Бесплатные Книги **для программистов: https://t.me/addlist/YZ0EI8Ya4OJjYzEy 

Машинное обучение: t.me/ai_machinelearning_big_data
Python: t.me/pythonl
C#: t.me/csharp_ci
C/C++/ t.me/cpluspluc
Data Science: t.me/data_analysis_ml
Devops: t.me/devOPSitsec
Go: t.me/Golang_google
Базы данных: t.me/sqlhub
Rust: t.me/rust_code
Javascript: t.me/javascriptv
React: t.me/react_tg
PHP: t.me/phpshka
Android: t.me/android_its
Мобильная разработка: t.me/mobdevelop
Linux: t.me/+A8jY79rcyKJlYWY6
Big Data: t.me/bigdatai
Хакинг: t.me/linuxkalii
Тестирование: https://t.me/+F9jPLmMFqq1kNTMy
Java: t.me/javatg

 Папка с вакансиями: t.me/addlist/_zyy_jQ_QUsyM2Vi
Папка  Go разработчика: t.me/addlist/MUtJEeJSxeY2YTFi
Папка Python разработчика: t.me/addlist/eEPya-HF6mkxMGIy

**Папка машинное обучение**: https://t.me/addlist/_FjtIq8qMhU0NTYy

 YouTube канал: https://www.youtube.com/@uproger

 ИТ-Мемы: t.me/memes_prog

Английский: t.me/english_forprogrammers",4480,5,0,golang_books
378,2023-08-04 12:42:43+00:00,"Микросервисы. От архитектуры до релиза

#book #Микросервисы #RU

Микросервисная архитектура обеспечивает высокую скорость изменений и хорошую масштабируемость, а также позволяет создавать чистые эволюционирующие системы. Но реализовать
свою первую микросервисную архитектуру непросто. Как сделать выбор из множества вариантов
и обучить свою команду всем техническим деталям, чтобы максимально увеличить шансы на
успех? В этой книге авторы, Ронни Митра и Иракли Надареишвили, предоставили пошаговое
руководство для построения эффективной архитектуры микросервисов. Архитекторы и инженеры
пройдут путь внедрения, основанный на методах и архитектурах, доказавших свою эффективность для микросервисных систем. Вы создадите операционную модель, проект микросервиса,
инфраструктурную основу и два работающих микросервиса, а затем соедините эти компоненты
в одну реализацию.",4752,20,0,golang_books
376,2023-08-04 07:16:34+00:00,"**Shipping Go: Develop, deliver, discuss, design, and go again (2023)**
Автор: Joel Holmes",4096,4,0,golang_books
375,2023-08-03 15:02:50+00:00,"**Алгоритмы. Руководство по разработке**
Автор: Скиена Стивен

Книга является наиболее полным руководством по разработке эффективных алгоритмов. 
#algorithms",4415,14,0,golang_books
374,2023-08-01 09:01:18+00:00,"100 Go Mistakes and How to Avoid Them
Автор: Teiva Harsanyi (2022)",5262,12,0,golang_books
373,2023-07-31 07:28:21+00:00,"**Docker Deep Dive (2023)**
Автор: Nigel Poulton",5217,7,0,golang_books
372,2023-07-30 10:55:56+00:00,"**Parallel Algorithms (2023)**
Автор: M H Alsuwaiyel",5416,9,0,golang_books
371,2023-07-29 15:42:06+00:00,"**Язык Go Для Начинающих
Автор:** Максим Жашкевич",5129,22,0,golang_books
370,2023-07-29 13:41:25+00:00,"️Маст-хэв список программистов, каналы с   последними книжными новинками, библиотеками, разбором кода и актуальной информацией, связанной с вашим языком программирования.
Лучший способ получать **свежие обновлении и следить за трендами в разработке.**

Python: t.me/pythonl
C#: t.me/csharp_ci
C/C++/ t.me/cpluspluc
Машинное обучение: t.me/ai_machinelearning_big_data
Data Science: t.me/data_analysis_ml
Devops: t.me/devOPSitsec
Go: t.me/Golang_google
Базы данных: t.me/sqlhub
Rust: t.me/rust_code
Javascript: t.me/javascriptv
React: t.me/react_tg
PHP: t.me/phpshka
Android: t.me/android_its
Мобильная разработка: t.me/mobdevelop
Linux: t.me/+A8jY79rcyKJlYWY6
Big Data: t.me/bigdatai
Хакинг: t.me/linuxkalii
Java: t.me/javatg

 Папка с вакансиями: t.me/addlist/_zyy_jQ_QUsyM2Vi
Папка  Go разработчика: t.me/addlist/MUtJEeJSxeY2YTFi
Папка Python разработчика: t.me/addlist/eEPya-HF6mkxMGIy

 YouTube канал: https://www.youtube.com/@uproger

 ИТ-Мемы: t.me/memes_prog

Английский: t.me/english_forprogrammers",4953,9,0,golang_books
369,2023-07-28 09:36:41+00:00,"**Cloud FinOps: Collaborative, Real-Time Cloud Value Decision Making, 2nd Edition (2023)**
Автор: J. R. Storment",4076,3,0,golang_books
368,2023-07-27 12:36:51+00:00,"Data-Oriented Programming: Reduce software complexity 
Автор: Yehonathan Sharvit (2022)",4364,10,0,golang_books
366,2023-07-26 07:31:26+00:00,"**Kubernetes Patterns: Reusable Elements for Designing Cloud Native Applications, 2nd Edition (2023)**
Автор: Bilgin Ibryam",4120,6,0,golang_books
365,2023-07-25 09:57:40+00:00,"Distributed Services with Go: Your Guide to Reliable, Scalable, and Maintainable Systems 
Автор: Travis Jeffery (2021)",4404,12,0,golang_books
364,2023-07-23 07:24:27+00:00,"**Quick Functional Programming (2023)**
Автор: David Matuszek",4711,8,0,golang_books
363,2023-07-22 18:07:26+00:00,"**Docker: Up & Running: Shipping Reliable Containers in Production, 3rd Edition (2023)**
Автор: Karl Matthias",4775,5,0,golang_books
361,2023-07-19 10:46:51+00:00,"Книга** ""Освоение Go Network Automation: автоматизация сетей, оркестрация контейнеров""**",4980,7,0,golang_books
358,2023-07-19 08:08:53+00:00,"**Introduction to Software Testing: A Practical Guide to Testing, Design, Automation, and Execution (2023)**
Автор: Panagiotis Leloudas",4034,0,0,golang_books
357,2023-07-18 14:02:34+00:00,"**GitOps Cookbook: Kubernetes Automation in Practice (2023)**
Автор: Alex Bueno",4231,4,0,golang_books
355,2023-07-18 10:02:08+00:00,"Building Microservices: Designing Fine-Grained Systems 2nd Edition 
Автор: Sam Newman (2021)",4010,0,0,golang_books
354,2023-07-17 12:50:49+00:00,"**Cloud Computing with AWS: Everything You Need to Know to be an AWS Cloud Practitioner (2023)**
Автор: Pravin Mishra",4049,0,0,golang_books
352,2023-07-16 16:41:21+00:00,"**Облачный Go. Создание надежных служб в ненадежных окружениях
**Автор: Мэтью Титмус 
В книге про то, как использовать сильные стороны Go для разработки облачных служб. 

#go",4469,12,0,golang_books
351,2023-07-16 03:07:35+00:00,"**Ремесло программиста. Практика написания хорошего кода** 
Автор: Питер Гудлиф 

Книга поможет перейти на более высокий уровень мастерства программирования и покажет, как писать код, который больше чем «просто работает».  
#code",4154,7,0,golang_books
350,2023-07-15 08:45:50+00:00,"Building Microservices: Designing Fine-Grained Systems 2nd Edition 
Автор: Sam Newman (2021)",4042,7,0,golang_books
348,2023-07-13 04:40:14+00:00,"**Hands-On Serverless Applications with Go** (2018)
Автор: Mohamed Labouardy",4085,0,0,golang_books
347,2023-07-12 10:01:20+00:00,"**Developing Robust Date and Time Oriented Applications in Oracle Cloud: A comprehensive guide to efficient date and time management in Oracle Cloud (2023)**
Автор: Michal Kvet",4265,4,0,golang_books
345,2023-07-11 08:02:08+00:00,"Книга **""Создание событийно-управляемых микросервисов""**",4484,2,0,golang_books
344,2023-07-11 08:01:23+00:00,"**Гибкое тестирование**
Автор: Лиза Криспин

В книге авторы дают определение гибкого тестирования и показывают роль тестировщиков в реальных гибких командах. 
#code",3967,2,0,golang_books
342,2023-07-10 16:07:06+00:00,"**Google Cloud for Developers: Write, migrate, and extend your code by leveraging Google Cloud (2023)**
Автор: Hector Parra Martinez",4046,5,0,golang_books
340,2023-06-30 20:26:52+00:00,"**Безопасный DevOps. Эффективная эксплуатация систем**
Автор: Джульен Вехен

В этой вводной книге рассматриваются практики, используемые при защите веб-приложений и их инфраструктуры, а также методы интеграции безопасности непосредственно в продукт. 
#devops",5753,7,0,golang_books
339,2023-06-29 09:56:44+00:00,"**Go Design Patterns
Автор: **Mario Castro Contreras",5516,8,0,golang_books
338,2023-06-29 09:55:01+00:00,"**Ansible for Kubernetes by Example**
__Luca Berton
2023__

#kubernetes #eng",5072,2,0,golang_books
337,2023-06-26 19:24:28+00:00,"**Designing Applications for Google Cloud Platform: Create and Deploy Applications Using Java (2023)**
Автор: Ashutosh Shashi",5332,6,0,golang_books
336,2023-06-25 11:50:50+00:00,"PostgreSQL Query Optimization: The Ultimate Guide to Building Efficient Queries
Автор: Henrietta Dombrovskaya (2021)",5884,17,0,golang_books
334,2023-06-13 10:44:54+00:00,"**Go Details & Tips 101
Автор: **Tapir Liu",5883,10,0,golang_books
333,2023-06-09 07:17:42+00:00,"**Advanced Software Testing
Автор:** Rex Black",6449,0,0,golang_books
332,2023-06-08 09:31:08+00:00,"Книга **""Docker для бессерверных приложений""**",6631,11,0,golang_books
330,2023-06-06 11:20:55+00:00,"First Course in Algorithms Through Puzzles
Автор: Ryuhei Uehara (2019)",5854,0,0,golang_books
328,2023-06-04 07:17:27+00:00,**UNGOML: Automated Classification of unsafe Usages in Go**,5384,4,0,golang_books
327,2023-05-28 07:26:59+00:00,"**Effective Concurrency in Go: Develop, analyze, and troubleshoot high performance concurrent applications with ease (2023)**
Автор: Burak Serdar",6763,12,0,golang_books
326,2023-05-28 06:31:28+00:00,"**Создание микросервисов
**Автор: Сэм Ньюман

Вы познакомитесь с современными решениями для моделирования, интеграции, тестирования, развертывания и мониторинга собственных автономных сервисов. Примеры из реальной жизни показывают, как получить максимальную отдачу от этих архитектур.
#code",6203,13,0,golang_books
325,2023-05-23 07:01:27+00:00,"**Practical Automation with PowerShell: Effective scripting from the console to the cloud (2023)
**Автор: Matthew Dowst",5913,4,0,golang_books
323,2023-05-22 06:30:55+00:00,"**Масштабирование приложений. Выращивание сложных систем**
Автор: Ли Атчисон

Автор рассказывает не только об архитектурных тонкостях, необходимых для эффективного масштабирования приложений, но и о рисках, присущих такой работе.
#code",5121,8,0,golang_books
322,2023-05-17 11:05:47+00:00,"**Programming Languages: Build, Prove, and Compare (2022)
**Автор: Norman Ramsey",5580,2,0,golang_books
320,2023-05-16 18:56:29+00:00,"**Масштабирование приложений. Выращивание сложных систем**
Автор: Ли Атчисон

Автор рассказывает не только об архитектурных тонкостях, необходимых для эффективного масштабирования приложений, но и о рисках, присущих такой работе.
#code",5058,13,0,golang_books
318,2023-05-15 19:31:13+00:00,"**Modern Web Development with Go: Build real-world, fast, efficient and scalable web server apps using Go programming language**, 2023

**Автор**: Dušan Stojanović

Книга охватывает ключевые аспекты разработки веб-приложений на Go: от дизайна и выбора БД до деплоя и мониторинга. Материал книги будет интересен как профи, так и начинающим.",4988,6,0,golang_books
317,2023-05-15 11:22:11+00:00,"**Developing Cloud-Native Solutions with Microsoft Azure and .NET: Build Highly Scalable Solutions for the Enterprise (2023)
**Автор: Abhishek Mishra",4397,6,0,golang_books
314,2023-05-12 09:05:54+00:00,"**Building Modern CLI Applications in Go: Develop next-level CLIs to improve user experience, increase platform usage, and maximize production (2023)
**Автор: Marian Montagnino",4710,6,0,golang_books
312,2023-05-12 04:12:54+00:00,"Go programming language: The Ultimate Beginner's Guide to Learn Go Programming Step by Step
Автор: John Bach (2021)",4593,4,0,golang_books
310,2023-05-05 10:01:04+00:00,"**Principles of Data Fabric: Become a data-driven organization by implementing Data Fabric solutions efficiently (2023)
**Автор: Sonia Mezzetta",5482,7,0,golang_books
308,2023-05-03 06:40:37+00:00,"**Functional Programming in Golang: Apply functional techniques in Go to improve the testability, readability, and security of your code (2023)
**Автор: Dylan Meeus",4543,5,0,golang_books
307,2023-05-03 04:07:06+00:00,"**Operating OpenShift: An SRE Approach to Managing Infrastructure (2023)
**Автор: Manuel Dewald",4350,5,0,golang_books
306,2023-04-29 08:35:38+00:00,"**Podman in Action: Secure, rootless containers for Kubernetes, microservices, and more (2023)
**Автор: Daniel Walsh",4857,0,0,golang_books
305,2023-04-27 19:25:39+00:00,"**Podman in Action: Secure, rootless containers for Kubernetes, microservices, and more (2023)
**Автор: Daniel Walsh",4937,0,0,golang_books
304,2023-04-27 19:25:38+00:00,"**Mastering Go Network Automation: Automating Networks, Container Orchestration, Kubernetes with Puppet, Vegeta and Apache JMeter (2023)
**Автор: Ian Taylor",4691,5,0,golang_books
302,2023-04-27 12:31:48+00:00,"**MySQL And JSON: A Practical Programming Guide
Автор:** David Stokes",3881,0,0,golang_books
301,2023-04-27 12:12:06+00:00,"**Microservices with Go: Building scalable and reliable microservices with Go (2022)
**Автор: Alexander Shuiskov",4366,10,0,golang_books
299,2023-04-25 11:05:44+00:00,"**Oracle on Docker: Running Oracle Databases in Linux Containers (2023)
Автор:** Sean Scott

**Описание:** Эта книга научит вас, как начать работу с базами данных Oracle в Docker, охватывая шаги по подготовке и установке программного обеспечения на системах Windows, Mac и Linux. В ней описаны шаги по развертыванию баз данных Oracle, отделению данных и конфигураций от программного обеспечения базы данных, а также созданию сетей и взаимодействию с контейнерами. В нем представлены команды Docker, которые вы будете использовать для управления контейнерами, включая советы и сокращения для облегчения повседневных задач. Базы данных предъявляют уникальные требования к производительности и надежности, и в этой книге эти качества рассматриваются с обсуждением защиты, сохранения и распространения данных.

@golang_books",3809,1,0,golang_books
297,2023-04-24 13:50:38+00:00,"**Advanced Data Structures and Algorithms: Learn how to enhance data processing with more complex and advanced data structures (2023)
**Автор: Abirami A.",3880,8,0,golang_books
295,2023-04-21 06:34:33+00:00,"**Mastering Go Network Automation: Automating Networks, Container Orchestration, Kubernetes with Puppet, Vegeta and Apache JMeter (2023)
**Автор: Ian Taylor",4203,9,0,golang_books
294,2023-04-20 08:55:36+00:00,"DevOps for the Desperate: A Hands-On Survival Guide
Автор: Bradley Smith (2022)",4860,1,0,golang_books
293,2023-04-19 17:25:59+00:00,"Concurrency in Go
Автор: Katherine Cox-Buday",5143,16,0,golang_books
292,2023-04-19 17:25:48+00:00,"**Build Your Own Test Framework: A Practical Guide to Writing Better Automated Tests (2023)
**Автор: Daniel Irvine",4740,3,0,golang_books
290,2023-04-19 12:58:12+00:00,"**Functional Programming in Golang: Apply functional techniques in Go to improve the testability, readability, and security of your code (2023)
**Автор: Dylan Meeus",4339,8,0,golang_books
289,2023-04-17 17:02:15+00:00,"#проектирование_систем

**Бесплатная книга по системному проектированию**

По большому счету, это расширенная и углубленная версия рассылки ByteByteGo от Alex Xu и команды.",6460,19,0,golang_books
288,2023-04-16 11:30:06+00:00,"Docker Compose для разработчика: Упростите разработку и оркестрацию многоконтейнерных приложений 2023

#book #Docker #RU

Эммануил Гадзурас

 Description: Разработка программного обеспечения становится все сложнее из-за использования различных инструментов. Приложения приходится упаковывать вместе
с программными компонентами, чтобы упростить их работу, но это усложняет их запуск. С помощью Docker Compose можно всего одной командой настроить приложение и необходимые зависимости.
Вы познакомитесь с основами томов и сетей Docker, с командами Compose, их назначением и вариантами использования. Настроите базу данных для повседневной работы, доступную через сеть Docker, установите связь между микросервисами. Научитесь с помощью Docker Compose запускать целые стеки локально, моделировать промышленные окружения и расширять задания CI/CD.",5649,19,0,golang_books
287,2023-04-14 15:02:26+00:00,"**Let's Go Further
Автор:** Alex Edwards",4971,15,0,golang_books
285,2023-04-14 12:56:43+00:00,"**Let's Go Further
Автор:** Alex Edwards",3911,7,0,golang_books
284,2023-04-14 12:55:46+00:00," **Название: Automating DevOps with GitLab CI/CD Pipelines: Build efficient CI/CD pipelines to verify, secure, and deploy your code using real-life examples (2023)
Автор:** Chris Timberlake

**Описание:** Эта книга начинается с основ Git и GitLab, показывая, как коммитить и ревьюить код. Вы научитесь настраивать GitLab Runners для выполнения и автомасштабирования CI/CD конвейеров, а также создавать и настраивать конвейеры для многих этапов жизненного цикла разработки программного обеспечения. Вы также узнаете, где найти результаты работы конвейеров в GitLab и как интерпретировать эти результаты. В ходе работы над книгой вы приобретете навыки развертывания кода в различных средах, освоите такие возможности CI/CD-конвейеров, как подключение GitLab к кластеру Kubernetes и использование GitLab с Terraform, запуск конвейеров и повышение производительности конвейеров, использование лучших практик и советов по устранению неисправностей в неработающих конвейерах.",3920,4,0,golang_books
281,2023-04-13 15:08:17+00:00,"Книга **""Математическая теория игр и приложения""**",3334,8,0,golang_books
279,2023-04-12 15:53:19+00:00," **Название:** **Oracle on Docker: Running Oracle Databases in Linux Containers (2023)
Автор:** Sean Scott

**Описание:** Эта книга научит вас, как начать работу с базами данных Oracle в Docker, охватывая шаги по подготовке и установке программного обеспечения на системах Windows, Mac и Linux. В ней описаны шаги по развертыванию баз данных Oracle, отделению данных и конфигураций от программного обеспечения базы данных, а также созданию сетей и взаимодействию с контейнерами. В нем представлены команды Docker, которые вы будете использовать для управления контейнерами, включая советы и сокращения для облегчения повседневных задач. Базы данных предъявляют уникальные требования к производительности и надежности, и в этой книге эти качества рассматриваются с обсуждением защиты, сохранения и распространения данных.",3544,6,0,golang_books
278,2023-04-04 06:34:06+00:00,"Pipeline as Code: Continuous Delivery with Jenkins, Kubernetes, and Terraform 
Автор: LabouardyMohamed (2021)",4268,2,0,golang_books
277,2023-04-03 13:05:00+00:00,Testing Microservices with Mountebank - 2019,4053,0,0,golang_books
276,2023-04-03 13:05:00+00:00,"**Everyday Golang
Автор:** Alex Ellis",4094,6,0,golang_books
274,2023-04-02 05:49:47+00:00,"**Kubernetes на практике
**Автор: Александр Бранд, Рич Ландер, Джош Россо, Джон Харрис

Книга посвящена практическому применению платформы Kubernetes. Подробно рассматривается архитектура Kubernetes и ее составные компоненты.
#kubernetes",4281,7,0,golang_books
273,2023-03-29 10:55:40+00:00,"**Beginner’s Guide to Code Algorithms: Experiments to Enhance Productivity and Solve Problems (2022)
**Автор: Deepankar Maitra",4473,5,0,golang_books
271,2023-03-27 13:04:00+00:00,"** Название:** **A Developer’s Guide to Cloud Apps Using Microsoft Azure: Migrate and modernize your cloud-native applications with containers on Azure using real-world case studies (2023)
Автор:** Hamida Rebai Trabelsi

**Описание:** В начале книги вы узнаете о преимуществах переноса устаревших приложений в облако и модернизации существующих приложений с помощью набора новых технологий и подходов. Затем вы узнаете, как использовать технологии и паттерны для создания приложений, ориентированных на облако. Эта книга по разработке приложений проведет вас через три основные службы Azure, а именно Azure Container Registry, Azure Container Instances и Azure Kubernetes Service, которые помогут вам построить и развернуть приложение на основе микросервисов. Наконец, вы сможете реализовать непрерывную интеграцию и развертывание в Azure, чтобы полностью автоматизировать процесс доставки программного обеспечения, включая процессы сборки и выпуска.",3923,2,0,golang_books
270,2023-03-25 08:04:56+00:00,"**Руководство по DevOps
Авторы:** Джин Ким, Патрик Дебуа, Джон Уиллис, Джез Хамбл",3610,2,0,golang_books
268,2023-03-25 07:32:55+00:00,"**Cloud Security For Dummies (2022)
**Автор: Ted Coombs",3769,0,0,golang_books
267,2023-03-20 11:55:38+00:00,"**Skills of a Successful Software Engineer (2022)
**Автор: Fernando Doglio",4691,9,0,golang_books
264,2023-03-16 06:40:20+00:00,"Everyday Go - The Fast Track for Golang 
Автор: Alex Ellis (2021)",4570,8,0,golang_books
263,2023-03-14 13:09:06+00:00,"**Distributed Serverless Architectures on AWS: Design and Implement Serverless Architectures (2023)
**Автор: Jithin Jude Paul",4670,7,0,golang_books
259,2023-03-13 17:47:04+00:00,"**Full-Stack Web Development with Go: Build your web applications quickly using the Go programming language and Vue.js (2023)
**Автор: Nanik Tolaram",4302,18,0,golang_books
258,2023-03-13 17:46:08+00:00,"**ChatGPT Prompts Mastering: A Guide to Crafting Clear and Effective Prompts – Beginners to Advanced Guide (2023)
**Автор: Christian Brown",4613,12,0,golang_books
257,2023-03-04 07:45:31+00:00,"**CI/CD Pipeline with Docker and Jenkins: Learn How to Build and Manage Your CI/CD Pipelines Effectively (2023)
**Автор: Sandeep Rawat",4917,9,0,golang_books
256,2023-03-02 10:32:51+00:00,"**Level Up Your Web Apps With Go
Автор:** Mal Curtis",4749,12,0,golang_books
255,2023-03-02 07:46:47+00:00,"**Oracle on Docker: Running Oracle Databases in Linux Containers (2023)
**Автор: Sean Scott",4429,2,0,golang_books
254,2023-03-02 07:46:39+00:00,"**Metaverse For Dummies (2023)
**Автор: Ian Khan",4421,4,0,golang_books
253,2023-02-27 11:50:33+00:00,"Книга ""**Network Programming with Go**""",4885,2,0,golang_books
251,2023-02-26 06:18:25+00:00,"A Complete Guide to Docker for Operations and Development - 2022
#docker #english",4146,2,0,golang_books
250,2023-02-22 07:21:57+00:00,"**Practical Event-Driven Microservices Architecture: Building Sustainable and Highly Scalable Event-Driven Microservices (2021)
**Автор: Hugo Filipe Oliveira Rocha",4802,8,0,golang_books
249,2023-02-22 07:21:03+00:00,"**Oracle on Docker: Running Oracle Databases in Linux Containers (2023)
**Автор: Sean Scott",4279,1,0,golang_books
248,2023-02-20 17:34:01+00:00,"[__Go Generics __](https://sweetohm.net/pdf/go-generics.en.pdf)

@golang_books",4389,7,0,golang_books
246,2023-02-19 14:12:04+00:00,"**Руководство по DevOps
Авторы:** Джин Ким, Патрик Дебуа, Джон Уиллис, Джез Хамбл",4171,1,0,golang_books
245,2023-02-17 15:17:55+00:00,"**Kubernetes Native Development: Develop, Build, Deploy, and Run Applications on Kubernetes (2022)
**Автор: Benjamin Schmeling",4449,1,0,golang_books
235,2023-02-15 11:00:30+00:00,"Head First Git: A Learner's Guide to Understanding Git from the Inside Out
Автор: Raju Gandhi (2022)",3968,5,0,golang_books
233,2023-02-12 10:25:49+00:00,"**Cloud Security: Attacks, Techniques, Tools, and Challenges
**__Emmanuel S Pilli, Preeti Mishra, R C Joshi
2021

__#Cloud #security #eng",4216,5,0,golang_books
232,2023-02-07 17:27:09+00:00,"DevOps for the Desperate - 2022
#devops #english",4825,6,0,golang_books
230,2023-01-31 15:45:34+00:00,"**Cloud Attack Vectors: Building Effective Cyber-Defense Strategies to Protect Cloud Resources (2022)
**Автор: by Brian Chappell",5892,3,0,golang_books
228,2023-01-31 10:32:34+00:00,"**Concurrency in Go: Tools and Techniques for Developers**

@golang_books",4912,8,0,golang_books
227,2023-01-30 17:36:17+00:00,"**Как тестируют в Google
Авторы: **Джефф Каролло, Джеймс Уиттакер, Джейсон Арбон",4456,1,0,golang_books
225,2023-01-29 11:09:34+00:00,"**Docker на практике**

[Книга](https://t.me/DevOPSitsec/51)

@golang_books",3613,12,0,golang_books
221,2023-01-27 14:59:39+00:00,"**Microservices with Go: Building scalable and reliable microservices with Go (2022)
**Автор: Alexander Shuiskov",3850,18,0,golang_books
219,2023-01-24 16:01:39+00:00,"Five Lines of Code: How and when to refactor 
Автор: Christian Clausen (2021)",3707,2,0,golang_books
218,2023-01-24 16:00:40+00:00,"Pro Go: The Complete Guide to Programming Reliable and Efficient Software Using Golang 
Автор: Adam Freeman (2022)",3982,4,0,golang_books
217,2023-01-21 17:53:36+00:00,"**Git для профессионального программиста
**Автор: Чакон Скотт, Штрауб Бен

Эта книга представляет собой обновленное руководство по использованию Git в современных условиях. 
#git",4219,8,0,golang_books
216,2023-01-20 10:11:46+00:00,"**Программирование Cloud Native.
2020**",4035,7,0,golang_books
214,2023-01-19 10:22:33+00:00,"Книга ""**Data Science для карьериста**""",3684,4,0,golang_books
213,2023-01-19 10:12:38+00:00,"** Учебник Docker на русском

**#doc #docker #russian",4087,13,0,golang_books
209,2023-01-18 16:41:36+00:00,"**Kubernetes Patterns Reusable Elements for Designing Cloud-Native Applications**

 [Book](https://www.redhat.com/cms/managed-files/cm-oreilly-kubernetes-patterns-ebook-f19824-201910-en.pdf)

@golang_books",3326,0,0,golang_books
208,2023-01-18 09:48:01+00:00,"**Go Books**

https://github.com/diptomondal007/GoLangBooks

@golang_books",3351,7,0,golang_books
205,2023-01-16 06:33:45+00:00,"**Implementing DevSecOps with Docker and Kubernetes**
__Jose Manuel Ortega Candel
2022__

#DevSecOps #kubernetes #docker #eng",3223,3,0,golang_books
204,2023-01-15 19:21:09+00:00,"Pro Go: The Complete Guide to Programming Reliable and Efficient Software Using Golang 
Автор: Adam Freeman (2022)",3407,7,0,golang_books
203,2023-01-14 11:05:51+00:00,"**Practical Spring Cloud Function: Developing Cloud-Native Functions for Multi-Cloud and Hybrid-Cloud Environments (2022)
**Автор: Banu Parasuraman",3378,4,0,golang_books
202,2023-01-12 09:25:32+00:00,"**100 Go Mistakes and How to Avoid Them (2022)
**Автор: Teiva Harsanyi",3885,16,0,golang_books
200,2023-01-12 07:19:41+00:00,"**Паттерны Kubernetes. Шаблоны разработки собственных облачных приложений**
Авторы: Билджин Ибрам, Роланд Хасс

Познакомьтесь с новыми паттернами и принципами разработки, которые нужны для реализации облачных приложений в Kubernetes.
#kubernetes",3686,1,0,golang_books
199,2023-01-12 07:18:31+00:00,"**Идеальная работа. Программирование без прикрас**
Автор: Роберт Мартин

Это руководство по хорошей работе для каждого программиста.
#code",3553,3,0,golang_books
198,2023-01-09 11:48:55+00:00,"**Шпаргалка по Go Generics**

https://gosamples.dev/generics-cheatsheet/

@golang_books",3489,16,0,golang_books
197,2023-01-09 11:42:55+00:00,"**Learn Go with Tests**

 [**Book**](https://quii.gitbook.io/learn-go-with-tests)

@golang_books",3205,8,0,golang_books
193,2023-01-05 10:53:43+00:00,"Designing Secure Software: A Guide for Developers 
Автор: Loren Kohnfelder (2021)",4168,7,0,golang_books
192,2023-01-05 10:52:55+00:00,"Five Lines of Code: How and when to refactor 
Автор: Christian Clausen (2021)",4038,7,0,golang_books
190,2023-01-05 07:01:10+00:00,"**How To Code in Go (2021)
**Автор: Mark Bates

@golang_books",5197,6,0,golang_books
189,2023-01-03 16:45:56+00:00,"**For the Love of Go - code listings**

 [**Github**](https://github.com/bitfield/ftl-code)

@golang_books",5010,10,0,golang_books
188,2023-01-03 16:45:32+00:00," **Лучшие бесплатные книги Golang 2023.**

Есть много доступных книг по GO, некоторые полезные, некоторые не очень. Я думаю, что если вы изучаете Go, вы должны стремиться читать как можно больше книг.

️ [**Смотреть список**](https://uproger.com/luchshie-besplatnye-knigi-golang-2023/) 

@Golang_google",3552,10,0,golang_books
187,2022-12-31 07:26:07+00:00,"**100 Go Mistakes and How to Avoid Them (2022)
**Автор: Teiva Harsanyi",4939,15,0,golang_books
186,2022-12-28 07:11:13+00:00,"**Distributed Services with Go: Your Guide to Reliable, Scalable, and Maintainable Systems (2021)
**Автор: Travis Jeffery",4884,13,0,golang_books
185,2022-12-28 07:09:35+00:00,"**Understanding Fuzz Testing in Go

**https://blog.jetbrains.com/go/2022/12/14/understanding-fuzz-testing-in-go",4609,2,0,golang_books
184,2022-12-27 07:01:11+00:00,"**A Complete Guide to Working With Cookies in Go

**```In this post we're going to run through how to use cookies in your Go web application to persist data between HTTP requests for a specific client.

```https://www.alexedwards.net/blog/working-with-cookies-in-go",4615,1,0,golang_books
183,2022-12-26 18:08:28+00:00,"**Go mod's lesser known features

**```In this post, we will explore Go mododules design and learn how they support supply chain security.

```https://verdverm.com/go-mods",4234,0,0,golang_books
182,2022-12-26 18:08:14+00:00,"**Kubernetes для DevOps**
Авторы: Джон Арундел, Джастин Домингус

Авторы рассказывают об экосистеме Kubernetes и знакомят с проверенными решениями повседневных проблем.
#kubernetes",4200,0,0,golang_books
181,2022-12-26 18:08:14+00:00,"**Гид по Computer Science для каждого программиста**
Автор: Вильям Спрингер

Эта книга будет вам живым помощником в освоении и повторении самых насущных вопросов компьютерных наук.
#code",5751,6,0,golang_books
179,2022-12-25 16:20:21+00:00,"Writing A Compiler In Go
Автор: Thorsten Ball (2018)",3179,7,0,golang_books
178,2022-12-25 07:21:23+00:00,"**Go Tutorials & Examples

**```Learn Go programming by example. GOSAMPLES is a library of Go tutorials and examples that helps you solve everyday code problems.

```https://gosamples.dev",3086,14,0,golang_books
177,2022-12-22 16:13:06+00:00,"Serverless Architectures on AWS - 2022
#aws #english",3253,0,0,golang_books
176,2022-12-22 16:13:06+00:00,"Learn Kubernetes and Docker - 2020
#kubernetes #docker #english",3158,0,0,golang_books
173,2022-12-21 19:15:42+00:00,"**Solving Identity Management in Modern Applications: Demystifying OAuth 2.0, OpenID Connect, and SAML 2.0 (2019)
**Автор: Yvonne Wilson",3903,4,0,golang_books
171,2022-12-21 19:14:37+00:00,"**Building Micro-Frontends: Scaling Teams and Projects, Empowering Developers (2021)
**Автор: Luca Mezzalira",3735,4,0,golang_books
170,2022-12-20 09:31:28+00:00,"**Distributed Services with Go: Your Guide to Reliable, Scalable, and Maintainable Systems (2021)
**Автор: Travis Jeffery",3972,3,0,golang_books
168,2022-12-17 17:12:57+00:00,"**Язык программирования Go**
Авторы: Алан А. А. Донован, Брайан У. Керниган
Книга поможет познакомиться с языком Go, узнать о его предназначении и преимуществах, и о том, как писать программы на этом языке
#go",5190,12,0,golang_books
167,2022-12-17 17:10:33+00:00,"**Core Kubernetes (2022)
**Автор: Jay Vyas",4780,7,0,golang_books
166,2022-12-15 09:50:11+00:00,"**Профессиональный бенчмарк: искусство измерения производительности** 
Автор: Андрей Акиньшин

Это исчерпывающее руководство поможет вам правильно разрабатывать бенчмарки, измерять ключевые метрики производительности приложений .NET и анализировать результаты. 
#code",4784,14,0,golang_books
165,2022-12-13 15:48:06+00:00,"**Cloud Native Go: Building Reliable Services in Unreliable Environments (2021)
**Автор: Matthew Titmus",4812,8,0,golang_books
162,2022-12-13 05:19:42+00:00,"**Cybersecurity Risk Management**
__Brian Haugli
2021__

#cybersecurity #eng",3742,3,0,golang_books
161,2022-12-12 13:54:13+00:00,"**Building Event-Driven Microservices: Leveraging Organizational Data at Scale (2020)
**Автор: Adam Bellemare",3875,5,0,golang_books
160,2022-12-10 02:03:47+00:00,"**Go for Java Programmers: Learn the Google Go Programming Language (2021)
**Автор: Barry Feigenbaum Ph.D.",7692,2,0,golang_books
157,2022-12-07 03:41:38+00:00,"Книга ""**Регулярные выражения**""",3263,3,0,golang_books
155,2022-12-05 02:34:31+00:00,"[ Огромная шпаргалка по Docker на русском

](https://gist.github.com/wtw24/66265a5707d5febd7ed51f570db94157)**Лойс 

**#doc #docker #russian",3267,9,0,golang_books
154,2022-12-03 09:27:02+00:00,"**A Complete Guide to Docker for Operations and Development: Test-Prep for the Docker Certified Associate (DCA) Exam (2022)
**Автор: Engy Fouda",3168,7,0,golang_books
152,2022-12-02 03:29:27+00:00,"**Шаблоны проектирования для облачной среды**
Автор: Корнелия Дэвис 
 
Эта книга посвящена облачным платформам. Применяя конструкции для облачной среды, разработчики могут создавать гибкие, легко адаптируемые, веб-масштабируемые распределенные приложения, которые обрабатывают огромный пользовательский трафик и объем данных. 
#code",3233,5,0,golang_books
149,2022-11-25 08:12:11+00:00,"Fundamentals of Software Architecture: An Engineering Approach 
Авторы: Mark Richards, Neal Ford (2020)",3089,1,0,golang_books
148,2022-11-25 07:25:32+00:00,"**MySQL Concurrency: Locking and Transactions for MySQL Developers and DBAs (2022)
**Автор: Jesper Wisborg Krogh",3011,2,0,golang_books
144,2022-11-19 07:03:29+00:00,"**Google Go Style

**Style Guide - https://google.github.io/styleguide/go/guide

Style Decisions - https://google.github.io/styleguide/go/decisions

Best Practices - https://google.github.io/styleguide/go/best-practices",4483,17,0,golang_books
142,2022-11-17 06:18:56+00:00,"**Secure Web Application Development: A Hands-On Guide with Python and Django (2022)
**Автор: Matthew Baker",3115,0,0,golang_books
141,2022-11-17 06:18:56+00:00,"**Third Generation Internet Revealed: Reinventing Computer Networks with IPv6 (2022)
**Автор: Lawrence E. Hughes",3012,3,0,golang_books
139,2022-11-15 09:47:46+00:00,"**Kubernetes Microservices with Docker (2016)**
Автор: Deepak Vohra",2884,0,0,golang_books
137,2022-11-14 07:14:21+00:00,"**Cloud-native Computing: How to Design, Develop, and Secure Microservices and Event-Driven Applications (2022)
**Автор: Pethuru Raj",2961,0,0,golang_books
136,2022-11-11 07:29:16+00:00,"**Карьера программиста. Как устроиться на работу в Google, Microsoft или другую ведущую IT-компанию** 
Автор: Макдауэлл Лакман 
 
Книга поможет вам наилучшим образом подготовиться к собеседованию при приеме на работу программистом или руководителем в крупную IT-организацию или перспективный стартап. 
#code",3455,4,0,golang_books
135,2022-11-10 09:42:43+00:00,"**Efficient Go: Data-Driven Performance Optimization.
2022 || ****#ENG**** ****#Go**",3743,13,0,golang_books
133,2022-11-10 09:42:30+00:00,"** Полезные библиотеки в телеграмме с бесплатными книгами**

[@datascienceiot ](https://t.me/+YNk_tW3enspiZDIy)- мл, статистика,ds
@programming_books_it - огромный склад книг по всем яп
@pythonlbooks -  python книги
@golang_books - golang книг
@frontendbooksit  - архив свежих ит-книг
@progersit - шпаргалки программиста pdf
@linux_read - linux книги
[@machinelearning_books](https://t.me/+Ldaz4t9VqigyY2Ji) - книги по машинному обучению
@cpluscsharp - c++ , c#
@java_library  - java книги
[@bigdatai](https://t.me/+cEMZCQCQVQRjNTNi) - наборы данных",10846,3,0,golang_books
132,2022-11-09 09:08:46+00:00,"**Installation and Configuration of IBM Watson Analytics and StoredIQ: Complete Administration Guide of IBM Watson, IBM Cloud, Red Hat OpenShift, Docker, and IBM StoredIQ (English Edition) (2021)**
Автор: Alan Bluck",2790,2,0,golang_books
130,2022-11-09 06:48:14+00:00,"**100 Go Mistakes and How to Avoid Them.
2022 || ****#ENG**** ****#Go**",2886,9,0,golang_books
129,2022-11-08 06:35:13+00:00,"Книга ""**Go programming language: The Ultimate Beginner's Guide to Learn Go Programming Step by Step**""",2723,4,0,golang_books
128,2022-11-08 06:34:43+00:00,"Книга ""**Practical Security for Agile and DevOps**""",2669,0,0,golang_books
125,2022-11-06 05:35:27+00:00," Шпаргалка по redis

#cheatsheet #redis",2981,3,0,golang_books
123,2022-11-05 06:06:24+00:00,"Книга ""**Работа с базами данных Microsoft SQL Server**""",2857,4,0,golang_books
122,2022-11-05 06:06:13+00:00,"Книга""**gRPC: запуск и эксплуатация облачных приложений. Go и Java для Docker и Kubernetes**""",3229,8,0,golang_books
121,2022-11-05 06:05:41+00:00," [**Big Data**](https://t.me/+-Xq__Vrw1K82ODEy) -  действительно полезный [**блог**](https://t.me/+-Xq__Vrw1K82ODEy) для всех, кто работает с данными.  

- огромный набор бесплатных датасетов 
- инструменты для работы с данными
- обучающие материалы для датасаентистов 
- перевод книг и статей

 [**Смотреть**](https://t.me/+-Xq__Vrw1K82ODEy)",2808,6,0,golang_books
120,2022-11-05 06:04:14+00:00,#books #russian #algorithms,3113,6,0,golang_books
118,2022-11-01 09:10:44+00:00,"**Docker for Developers** (2020)
Авторы: Richard Bullington-McGuire",3303,2,0,golang_books
116,2022-10-31 16:00:46+00:00,"**Программирование на Go. Разработка приложений XXI века**
Автор: Марк Саммерфильд
Автор приводит множество сравнений идиом программирования, демонстрируя преимущества Go перед более старыми языками и уделяя особое внимание ключевым инновациям. 
#go",3556,15,0,golang_books
113,2022-10-29 07:27:36+00:00,"**Build Systems With Go: Everything a Gopher must know (2021)**
Автор: Juan M. Tirado",3431,10,0,golang_books
112,2022-10-29 07:23:49+00:00,"Ultimate Go Notebook 
Авторы: William Kennedy, Hoanh An (2021)",3068,3,0,golang_books
111,2022-10-26 13:12:06+00:00,"**Mastering Docker Fourth Edition**

** **[**Book**](https://douran.academy/wp-content/uploads/ebooks/mastering-docker.pdf)",3553,8,0,golang_books
110,2022-10-26 12:46:14+00:00,"**Защита сетей. Подход на основе анализа данных

Автор:** Майкл Коллинз
**Год:** 2020

#books #russian #infosec",3164,4,0,golang_books
106,2022-10-22 17:32:37+00:00,"**Облачный Go. Создание надежных служб в ненадежных окружениях**
Автор: Мэтью А. Титмус
В этой практической книге показано, как использовать сильные стороны Go для разработки масштабируемых и устойчивых облачных служб.
#go",3493,11,0,golang_books
105,2022-10-22 17:31:58+00:00,"**Git. Практическое руководство. Управление и контроль версий в разработке программного обеспечения**
Автор: Леонид Фишерман
В данной книге рассматривается утилита Git, которая является инстру­ментом управления версиями. 
#git",3164,4,0,golang_books
103,2022-10-22 06:35:19+00:00,"**Изучаем Go

Автор:** Джей Макгаврен
**Год: **2020

#go #golang",3273,2,0,golang_books
102,2022-10-22 06:35:02+00:00,"**Микросервисы и контейнеры Docker

Автор:** Парминдер Сингх Кочер
**Год:** 2019

#books #docker #russian",3118,4,0,golang_books
101,2022-10-22 06:34:17+00:00,"** Учебник Docker на русском

**#doc #docker #russian",3225,6,0,golang_books
100,2022-10-19 13:01:17+00:00,"Learn Kubernetes and Docker - 2020
#kubernetes #docker #english",3035,7,0,golang_books
99,2022-10-18 13:34:05+00:00,"**Шпаргалка по командам Docker с официального сайта

**Очень удобна в использовании, есть все основные команды CLI для работы с образами, контейнерами и хранилище образов Docker Hub

Сохраняйте себе ",3405,10,0,golang_books
98,2022-10-18 13:34:04+00:00,"**Go programming language: The Ultimate Beginner's Guide to Learn Go Programming Step by Step (2021)**
Автор: John Bach",5645,8,0,golang_books
96,2022-10-12 15:31:07+00:00,"**Docker for Developers.
2020 || ****#ENG** **#Docker** **|| **[Бесплатный софт для чтения книг](https://t.me/It_Books_Library)",3663,8,0,golang_books
90,2022-10-03 10:08:06+00:00,"**Black Hat Go** (2020)
Авторы: Tom Steele, Chris Patten, Dan Kottman",4084,13,0,golang_books
89,2022-09-19 10:10:53+00:00,"**The Docker Book**

 [**book**](https://www.appliedstemcell.com/pub/media/wysiwyg/dockerbook.pdf)

**@golang_books**",4460,9,0,golang_books
87,2022-09-06 11:55:17+00:00,"**Spaceship Go**

[**book**](https://blasrodri.github.io/spaceship-go-gh-pages/)

**@golang_books**",9517,12,0,golang_books
86,2022-08-30 08:55:24+00:00,"From Ruby to Golang: A Ruby Programmer's Guide to Learning Golang
**#Go** **#Eng****

****@golang_books**",4893,4,0,golang_books
84,2022-08-29 18:03:43+00:00,"**Build Systems With Go: Everything a Gopher must know (2021)**
Автор: Juan M. Tirado",7572,11,0,golang_books
83,2022-08-28 13:01:16+00:00,"**Building RESTful Web Services** **with Go**

 [**book**](https://edu.anarcho-copy.org/Programming%20Languages/Go/Building%20RESTful%20Web%20Serviceswith%20Go.pdf)

@golang_books",4603,7,0,golang_books
81,2022-08-20 10:26:18+00:00,"**Mastering Go Web Services**

 [**book**](http://copensource.net/pdf/Mastering%20Go%20Web%20Services.pdf)

@golang_books",9388,11,0,golang_books
79,2022-08-19 13:01:50+00:00,"**Go for Javascript Developers**

 [**book**](https://github.com/pazams/go-for-javascript-developers)

@golang_books",8262,6,0,golang_books
77,2022-08-18 13:02:49+00:00,"**Pro Go: The Complete Guide to Programming Reliable and Efficient Software Using Golang**

 [book](https://t.me/frontendbooksit/244)

@golang_books",3456,12,0,golang_books
75,2022-08-14 12:04:59+00:00,"**Ethereum Development with Go
**
 [book](https://goethereumbook.org/ethereum-development-with-go.pdf)

@golang_books",3716,15,0,golang_books
74,2022-08-14 11:58:39+00:00,"**GraphQL in Action**

 [Книга](https://t.me/frontendbooksit/891)

@golang_books",3427,17,0,golang_books
73,2022-08-07 07:25:40+00:00,"**Everyday Golang - The Fast Track **(2021)

Автор: Alex Ellis

Перед вами мини-книга от автора множества руководств по модульному тестированию в Go и других учебных материалов (книги **Serverless For Everyone Else** и курса **Kubernetes on Raspberry Pi**). 

**Everyday Golang** — это ускоренный курс для изучения концепций и методов, которые вы можете применять в своей повседневной работе и проектах.

Материал книги представляет собой сборник практических примеров, уроков и техник для Go-разработчиков.

@golang_books",3418,9,0,golang_books
72,2022-07-26 15:45:42+00:00,"Разработка REST API на Go + AWS с использованием [SST](https://github.com/serverless-stack/sst): руководство для начинающих.

[Читать](https://sst.dev/examples/how-to-create-a-rest-api-in-golang-with-serverless.html)",3587,9,0,golang_books
69,2022-07-18 10:57:58+00:00,"**Kubernetes for Full-Stack Developers**

[book](https://assets.digitalocean.com/books/kubernetes-for-full-stack-developers.pdf)

@golang_books",3690,10,0,golang_books
68,2022-07-18 05:46:20+00:00,"**Алгоритмы для принятия решений. Бесплатная книга от MIT**

[Книга](https://algorithmsbook.com/files/dm.pdf)

@golang_books",3377,3,0,golang_books
67,2022-07-12 21:11:23+00:00,"**gRPC: Up and Running **
Авторы: Kasun Indrasiri, Danesh Kuruppu (2020)

Получите полное представление об основах gRPC на реальных примерах. Из этого практического руководства вы узнаете, как этот высокопроизводительный протокол межпроцессного взаимодействия может соединять многоязычные сервисы в архитектуре микросервисов. Эта книга, дополненная практическими примерами, написанными на Go, Java, Node.js и Python, также охватывает основные методы и передовые практики использования gRPC в производственных системах. Авторы также обсуждают важность gRPC в контексте разработки микросервисов.

[Скачать книгу](https://t.me/frontendbooksit/236)",3762,12,0,golang_books
65,2022-07-09 05:41:10+00:00,"**Go Programming Language For Dummies®**

 [Книга ](https://edu.anarcho-copy.org/Programming%20Languages/Go/Go%20Programming%20Language%20for%20Dummies.pdf)

@golang_books",9710,8,0,golang_books
64,2022-06-30 10:23:15+00:00,"**Эдриен Моуэт | Использование Docker**

 [Книга ](https://t.me/frontendbooksit/226)

@golang_books",4381,8,0,golang_books
63,2022-06-28 01:22:10+00:00,"**Go, from the beginning** (2022)

**Автор**: Chris Noring

Книга об основах Go, которая охватывает следующие темы:

— Создание CLI-приложений и веб-API
— Тестирование кода
— Разработка и публикация пакетов
— Организация кодовой базы
— Работа с файлами и каталогами
— Парсинг текста и многое другое

@golang_books",4299,1,0,golang_books
60,2022-06-26 08:18:28+00:00,"**Pro Go. Полное руководство по программированию надежного и эффективного программного обеспечения с использованием Golang**

#Golang #Book #Ru


2022

 Go, также известный как Golang, — это лаконичный и эффективный язык программирования, разработанный Google для создания высокопроизводительных кроссплатформенных приложений. Go сочетает в себе сильные статические типы с простым синтаксисом и всеобъемлющей стандартной библиотекой для повышения производительности программиста, при этом поддерживая такие функции, как параллельное/параллельное программирование.

@golang_books",4653,6,0,golang_books
57,2022-06-24 10:26:48+00:00,"**Understanding JSON Schema**

[Книга ](https://json-schema.org/understanding-json-schema/UnderstandingJSONSchema.pdf)

@golang_books",3650,2,0,golang_books
56,2022-06-21 15:58:03+00:00,"Go. Полное руководство по программированию надежного и эффективного программного обеспечения с использованием Golang

[Книга ](https://t.me/frontendbooksit/221)

@golang_books",2820,8,0,golang_books
54,2022-06-17 08:43:35+00:00,"**Go database/sql tutorial**

http://go-database-sql.org",2833,3,0,golang_books
52,2022-06-10 09:49:20+00:00,"**Everyday Golang - The Fast Track **

[Скачать](https://t.me/frontendbooksit/212)

@golang_books",8290,1,0,golang_books
51,2022-06-08 13:12:41+00:00,"**Golang шпаргалки**

https://cheatography.com/andanhm/cheat-sheets/golang/pdf_bw/

@golang_books",2978,7,0,golang_books
48,2022-06-07 10:41:48+00:00,"**The little Go book **

[Book](https://t.me/frontendbooksit/210)

@golang_books",8554,6,0,golang_books
46,2022-06-06 10:50:31+00:00,"**From Ruby to Golang**
A Ruby Programmer’s Guide to Learning Go

[Скачать](https://t.me/frontendbooksit/207)

@golang_books",2924,5,0,golang_books
44,2022-05-31 08:50:55+00:00,"**The Ultimate Guide To Building Database-Intensive Apps with Go**

[Скачать](https://t.me/frontendbooksit/193)

@golang_books",3327,8,0,golang_books
43,2022-05-27 08:51:54+00:00,"**Язык Go Для Начинающих

**__От базовых концепций до
построения REST API

__Максим Жашкевич

[Скачать](https://t.me/frontendbooksit/191)

2020

@golang_books",3961,16,0,golang_books
42,2022-05-22 06:14:02+00:00,"Go Web Development Cookbook

Arpit Aggarwal

2018

pdf",3823,10,0,golang_books
41,2022-05-22 06:13:14+00:00,"**go-interview

**```Collection of Technical Interview Questions solved with Go

```https://github.com/shomali11/go-interview",2788,1,0,golang_books
37,2022-05-19 11:28:06+00:00,"Шпаргалка по Go

https://shly.link/ghC0sm

@progersit **-  шпаргалки программистов**",2505,11,0,golang_books
35,2022-05-16 11:04:51+00:00,"Distributed Computing with Go

V.N. Nikhil Anurag

2018",7428,0,0,golang_books
34,2022-05-15 10:49:01+00:00,"**The Ultimate Guide To Building Database-Intensive Apps with Go

**Baron Schwartz

[Скачать книгу](https://t.me/golanglibrary/117)

2019",2535,6,0,golang_books
33,2022-05-15 08:49:32+00:00," **Golang**

@Golang_google
@golangtests
@golangl
@golang_jobsgo
@GolangJobsit
@golang_books",2406,6,0,golang_books
32,2022-05-09 09:28:20+00:00,"**How To Code in Go

** [book](https://assets.digitalocean.com/books/how-to-code-in-go.pdf)

2020",9153,5,0,golang_books
31,2022-05-07 08:25:31+00:00,"**Go 101** Tapir Liu 2020

@golang_books",3248,0,0,golang_books
29,2022-05-05 07:32:40+00:00,"**Serverless Go: A Practical Guide

**Yos Riady

@golang_books",9413,0,0,golang_books
28,2022-05-05 07:31:23+00:00,"**Hands-On High Performance with Go** (2020)**

**Rob Strecansky



@golang_books",4219,3,0,golang_books
27,2022-05-04 07:27:40+00:00,"**Programming in Golang: Learning golang Programming with hands-on experience

**Alejandro Garcia

2020

@golang_books",4024,0,0,golang_books
26,2022-05-02 10:15:00+00:00,"**Learning Go

**__An Idiomatic Approach to Real-World Go Programming

__Jon Bodner

2021

@golang_books",3886,2,0,golang_books
25,2022-05-02 10:14:29+00:00,"**NETWORK PROGRAMMING WITH GO: Code Secure and Reliable Network Services from Scratch**

@golang_books",4221,1,0,golang_books
24,2022-05-02 10:09:35+00:00,"**Cloud Native Go

**__Building Reliable Services in Unreliable Environments

__Matthew Titmus

@golang_books",4526,0,0,golang_books
23,2022-05-02 10:09:01+00:00,"**An Introduction to Go** Why and how to write good Go code

@golang_books",3601,0,0,golang_books
22,2022-05-02 10:08:26+00:00,"**Security with Go Explore the power of Golang to secure host, web, and cloud services**

@golang_books",3300,0,0,golang_books
21,2022-05-02 10:08:03+00:00,"**Learning Functional Programming in Go**

Lex Sheehan

@golang_books",3245,0,0,golang_books
20,2022-05-02 10:07:56+00:00,"**Программирование на Go**

@golang_books",7212,2,0,golang_books
7,2022-05-02 10:03:02+00:00,"**Introducing Go**

@golang_books",2092,1,0,golang_books
6,2022-05-02 10:02:34+00:00,"**Level Up Your Web Apps With Go**

 Mal Curtis

@golang_books",2055,2,0,golang_books
5,2022-05-02 10:02:15+00:00,"**The Go Programming Language**

Alan A. A. Donovan
Brian W. Kernighan

@golang_books",1972,1,0,golang_books
4,2022-05-02 09:36:51+00:00,"**Distributed Services with Go

**`Your Guide to Reliable, Scalable, and Maintainable Systems

`Travis Jeffery

2021",1979,2,0,golang_books
3,2022-05-02 09:36:23+00:00,"**Go in Action**

WILLIAM KENNEDY

@golang_books",1994,1,0,golang_books
